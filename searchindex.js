Search.setIndex({"docnames": ["autoapi/torchtree/_version/index", "autoapi/torchtree/cli/advi/index", "autoapi/torchtree/cli/cli/index", "autoapi/torchtree/cli/evolution/index", "autoapi/torchtree/cli/hmc/index", "autoapi/torchtree/cli/index", "autoapi/torchtree/cli/jacobians/index", "autoapi/torchtree/cli/loggers/index", "autoapi/torchtree/cli/map/index", "autoapi/torchtree/cli/plugin/index", "autoapi/torchtree/cli/plugin_manager/index", "autoapi/torchtree/cli/priors/index", "autoapi/torchtree/cli/utils/index", "autoapi/torchtree/core/abstractparameter/index", "autoapi/torchtree/core/classproperty_decorator/index", "autoapi/torchtree/core/container/index", "autoapi/torchtree/core/identifiable/index", "autoapi/torchtree/core/index", "autoapi/torchtree/core/logger/index", "autoapi/torchtree/core/model/index", "autoapi/torchtree/core/parameter/index", "autoapi/torchtree/core/parameter_encoder/index", "autoapi/torchtree/core/parameter_utils/index", "autoapi/torchtree/core/parametric/index", "autoapi/torchtree/core/runnable/index", "autoapi/torchtree/core/serializable/index", "autoapi/torchtree/core/utils/index", "autoapi/torchtree/distributions/bayesian_bridge/index", "autoapi/torchtree/distributions/ctmc_scale/index", "autoapi/torchtree/distributions/deterministic_normal/index", "autoapi/torchtree/distributions/distributions/index", "autoapi/torchtree/distributions/gmrf/index", "autoapi/torchtree/distributions/gmrf_integrated/index", "autoapi/torchtree/distributions/index", "autoapi/torchtree/distributions/inverse_gamma/index", "autoapi/torchtree/distributions/joint_distribution/index", "autoapi/torchtree/distributions/log_normal/index", "autoapi/torchtree/distributions/multivariate_normal/index", "autoapi/torchtree/distributions/normal/index", "autoapi/torchtree/distributions/one_on_x/index", "autoapi/torchtree/distributions/scale_mixture/index", "autoapi/torchtree/distributions/transforms/index", "autoapi/torchtree/distributions/tree_prior/index", "autoapi/torchtree/evolution/alignment/index", "autoapi/torchtree/evolution/attribute_pattern/index", "autoapi/torchtree/evolution/bdsk/index", "autoapi/torchtree/evolution/birth_death/index", "autoapi/torchtree/evolution/branch_model/index", "autoapi/torchtree/evolution/coalescent/index", "autoapi/torchtree/evolution/datatype/index", "autoapi/torchtree/evolution/index", "autoapi/torchtree/evolution/io/index", "autoapi/torchtree/evolution/poisson_tree_likelihood/index", "autoapi/torchtree/evolution/rate_transform/index", "autoapi/torchtree/evolution/root_transform/index", "autoapi/torchtree/evolution/site_model/index", "autoapi/torchtree/evolution/site_pattern/index", "autoapi/torchtree/evolution/substitution_model/abstract/index", "autoapi/torchtree/evolution/substitution_model/amino_acid/index", "autoapi/torchtree/evolution/substitution_model/codon/index", "autoapi/torchtree/evolution/substitution_model/general/index", "autoapi/torchtree/evolution/substitution_model/index", "autoapi/torchtree/evolution/substitution_model/nucleotide/index", "autoapi/torchtree/evolution/taxa/index", "autoapi/torchtree/evolution/tree_height_transform/index", "autoapi/torchtree/evolution/tree_likelihood/index", "autoapi/torchtree/evolution/tree_model/index", "autoapi/torchtree/evolution/tree_model_flexible/index", "autoapi/torchtree/index", "autoapi/torchtree/inference/hmc/adaptation/index", "autoapi/torchtree/inference/hmc/adaptors/index", "autoapi/torchtree/inference/hmc/hamiltonian/index", "autoapi/torchtree/inference/hmc/hmc/index", "autoapi/torchtree/inference/hmc/index", "autoapi/torchtree/inference/hmc/integrator/index", "autoapi/torchtree/inference/hmc/operator/index", "autoapi/torchtree/inference/hmc/stan_adaptation/index", "autoapi/torchtree/inference/index", "autoapi/torchtree/inference/mcmc/index", "autoapi/torchtree/inference/mcmc/mcmc/index", "autoapi/torchtree/inference/mcmc/operator/index", "autoapi/torchtree/inference/sampler/index", "autoapi/torchtree/inference/utils/index", "autoapi/torchtree/math/index", "autoapi/torchtree/nf/energy_functions/index", "autoapi/torchtree/nf/flow/index", "autoapi/torchtree/nf/index", "autoapi/torchtree/nf/planar/index", "autoapi/torchtree/nf/realnvp/index", "autoapi/torchtree/nn/index", "autoapi/torchtree/nn/module/index", "autoapi/torchtree/ops/dual_averaging/index", "autoapi/torchtree/ops/index", "autoapi/torchtree/ops/welford/index", "autoapi/torchtree/optim/convergence/index", "autoapi/torchtree/optim/index", "autoapi/torchtree/optim/lr_scheduler/index", "autoapi/torchtree/optim/optimizer/index", "autoapi/torchtree/torchtree/index", "autoapi/torchtree/treeregression/index", "autoapi/torchtree/typing/index", "autoapi/torchtree/variational/chi/index", "autoapi/torchtree/variational/index", "autoapi/torchtree/variational/kl/index", "autoapi/torchtree/variational/renyi/index", "bibliography/bib", "index", "modules/torchtree", "modules/torchtree.cli", "modules/torchtree.cli.advi", "modules/torchtree.cli.evolution", "modules/torchtree.cli.hmc", "modules/torchtree.cli.jacobians", "modules/torchtree.cli.loggers", "modules/torchtree.cli.map", "modules/torchtree.cli.plugin", "modules/torchtree.cli.plugin_manager", "modules/torchtree.cli.priors", "modules/torchtree.cli.utils", "modules/torchtree.core", "modules/torchtree.core.abstractparameter", "modules/torchtree.core.classproperty_decorator", "modules/torchtree.core.container", "modules/torchtree.core.identifiable", "modules/torchtree.core.logger", "modules/torchtree.core.model", "modules/torchtree.core.parameter", "modules/torchtree.core.parameter_encoder", "modules/torchtree.core.parameter_utils", "modules/torchtree.core.parametric", "modules/torchtree.core.runnable", "modules/torchtree.core.serializable", "modules/torchtree.core.utils", "modules/torchtree.distributions", "modules/torchtree.distributions.bayesian_bridge", "modules/torchtree.distributions.ctmc_scale", "modules/torchtree.distributions.deterministic_normal", "modules/torchtree.distributions.distributions", "modules/torchtree.distributions.gmrf", "modules/torchtree.distributions.gmrf_integrated", "modules/torchtree.distributions.inverse_gamma", "modules/torchtree.distributions.joint_distribution", "modules/torchtree.distributions.log_normal", "modules/torchtree.distributions.multivariate_normal", "modules/torchtree.distributions.normal", "modules/torchtree.distributions.one_on_x", "modules/torchtree.distributions.scale_mixture", "modules/torchtree.distributions.transforms", "modules/torchtree.distributions.tree_prior", "modules/torchtree.evolution", "modules/torchtree.evolution.alignment", "modules/torchtree.evolution.attribute_pattern", "modules/torchtree.evolution.bdsk", "modules/torchtree.evolution.birth_death", "modules/torchtree.evolution.branch_model", "modules/torchtree.evolution.coalescent", "modules/torchtree.evolution.datatype", "modules/torchtree.evolution.io", "modules/torchtree.evolution.poisson_tree_likelihood", "modules/torchtree.evolution.rate_transform", "modules/torchtree.evolution.root_transform", "modules/torchtree.evolution.site_model", "modules/torchtree.evolution.site_pattern", "modules/torchtree.evolution.substitution_model", "modules/torchtree.evolution.substitution_model.abstract", "modules/torchtree.evolution.substitution_model.amino_acid", "modules/torchtree.evolution.substitution_model.codon", "modules/torchtree.evolution.substitution_model.general", "modules/torchtree.evolution.substitution_model.nucleotide", "modules/torchtree.evolution.taxa", "modules/torchtree.evolution.tree_height_transform", "modules/torchtree.evolution.tree_likelihood", "modules/torchtree.evolution.tree_model", "modules/torchtree.evolution.tree_model_flexible", "modules/torchtree.inference", "modules/torchtree.inference.hmc", "modules/torchtree.inference.hmc.adaptation", "modules/torchtree.inference.hmc.adaptors", "modules/torchtree.inference.hmc.hamiltonian", "modules/torchtree.inference.hmc.hmc", "modules/torchtree.inference.hmc.integrator", "modules/torchtree.inference.hmc.operator", "modules/torchtree.inference.hmc.stan_adaptation", "modules/torchtree.inference.mcmc", "modules/torchtree.inference.mcmc.mcmc", "modules/torchtree.inference.mcmc.operator", "modules/torchtree.inference.sampler", "modules/torchtree.inference.utils", "modules/torchtree.math", "modules/torchtree.nf", "modules/torchtree.nf.energy_functions", "modules/torchtree.nf.flow", "modules/torchtree.nf.planar", "modules/torchtree.nf.realnvp", "modules/torchtree.nn", "modules/torchtree.nn.module", "modules/torchtree.ops", "modules/torchtree.ops.dual_averaging", "modules/torchtree.ops.welford", "modules/torchtree.optim", "modules/torchtree.optim.convergence", "modules/torchtree.optim.lr_scheduler", "modules/torchtree.optim.optimizer", "modules/torchtree.torchtree", "modules/torchtree.treeregression", "modules/torchtree.typing", "modules/torchtree.variational", "modules/torchtree.variational.chi", "modules/torchtree.variational.kl", "modules/torchtree.variational.renyi"], "filenames": ["autoapi/torchtree/_version/index.rst", "autoapi/torchtree/cli/advi/index.rst", "autoapi/torchtree/cli/cli/index.rst", "autoapi/torchtree/cli/evolution/index.rst", "autoapi/torchtree/cli/hmc/index.rst", "autoapi/torchtree/cli/index.rst", "autoapi/torchtree/cli/jacobians/index.rst", "autoapi/torchtree/cli/loggers/index.rst", "autoapi/torchtree/cli/map/index.rst", "autoapi/torchtree/cli/plugin/index.rst", "autoapi/torchtree/cli/plugin_manager/index.rst", "autoapi/torchtree/cli/priors/index.rst", "autoapi/torchtree/cli/utils/index.rst", "autoapi/torchtree/core/abstractparameter/index.rst", "autoapi/torchtree/core/classproperty_decorator/index.rst", "autoapi/torchtree/core/container/index.rst", "autoapi/torchtree/core/identifiable/index.rst", "autoapi/torchtree/core/index.rst", "autoapi/torchtree/core/logger/index.rst", "autoapi/torchtree/core/model/index.rst", "autoapi/torchtree/core/parameter/index.rst", "autoapi/torchtree/core/parameter_encoder/index.rst", "autoapi/torchtree/core/parameter_utils/index.rst", "autoapi/torchtree/core/parametric/index.rst", "autoapi/torchtree/core/runnable/index.rst", "autoapi/torchtree/core/serializable/index.rst", "autoapi/torchtree/core/utils/index.rst", "autoapi/torchtree/distributions/bayesian_bridge/index.rst", "autoapi/torchtree/distributions/ctmc_scale/index.rst", "autoapi/torchtree/distributions/deterministic_normal/index.rst", "autoapi/torchtree/distributions/distributions/index.rst", "autoapi/torchtree/distributions/gmrf/index.rst", "autoapi/torchtree/distributions/gmrf_integrated/index.rst", "autoapi/torchtree/distributions/index.rst", "autoapi/torchtree/distributions/inverse_gamma/index.rst", "autoapi/torchtree/distributions/joint_distribution/index.rst", "autoapi/torchtree/distributions/log_normal/index.rst", "autoapi/torchtree/distributions/multivariate_normal/index.rst", "autoapi/torchtree/distributions/normal/index.rst", "autoapi/torchtree/distributions/one_on_x/index.rst", "autoapi/torchtree/distributions/scale_mixture/index.rst", "autoapi/torchtree/distributions/transforms/index.rst", "autoapi/torchtree/distributions/tree_prior/index.rst", "autoapi/torchtree/evolution/alignment/index.rst", "autoapi/torchtree/evolution/attribute_pattern/index.rst", "autoapi/torchtree/evolution/bdsk/index.rst", "autoapi/torchtree/evolution/birth_death/index.rst", "autoapi/torchtree/evolution/branch_model/index.rst", "autoapi/torchtree/evolution/coalescent/index.rst", "autoapi/torchtree/evolution/datatype/index.rst", "autoapi/torchtree/evolution/index.rst", "autoapi/torchtree/evolution/io/index.rst", "autoapi/torchtree/evolution/poisson_tree_likelihood/index.rst", "autoapi/torchtree/evolution/rate_transform/index.rst", "autoapi/torchtree/evolution/root_transform/index.rst", "autoapi/torchtree/evolution/site_model/index.rst", "autoapi/torchtree/evolution/site_pattern/index.rst", "autoapi/torchtree/evolution/substitution_model/abstract/index.rst", "autoapi/torchtree/evolution/substitution_model/amino_acid/index.rst", "autoapi/torchtree/evolution/substitution_model/codon/index.rst", "autoapi/torchtree/evolution/substitution_model/general/index.rst", "autoapi/torchtree/evolution/substitution_model/index.rst", "autoapi/torchtree/evolution/substitution_model/nucleotide/index.rst", "autoapi/torchtree/evolution/taxa/index.rst", "autoapi/torchtree/evolution/tree_height_transform/index.rst", "autoapi/torchtree/evolution/tree_likelihood/index.rst", "autoapi/torchtree/evolution/tree_model/index.rst", "autoapi/torchtree/evolution/tree_model_flexible/index.rst", "autoapi/torchtree/index.rst", "autoapi/torchtree/inference/hmc/adaptation/index.rst", "autoapi/torchtree/inference/hmc/adaptors/index.rst", "autoapi/torchtree/inference/hmc/hamiltonian/index.rst", "autoapi/torchtree/inference/hmc/hmc/index.rst", "autoapi/torchtree/inference/hmc/index.rst", "autoapi/torchtree/inference/hmc/integrator/index.rst", "autoapi/torchtree/inference/hmc/operator/index.rst", "autoapi/torchtree/inference/hmc/stan_adaptation/index.rst", "autoapi/torchtree/inference/index.rst", "autoapi/torchtree/inference/mcmc/index.rst", "autoapi/torchtree/inference/mcmc/mcmc/index.rst", "autoapi/torchtree/inference/mcmc/operator/index.rst", "autoapi/torchtree/inference/sampler/index.rst", "autoapi/torchtree/inference/utils/index.rst", "autoapi/torchtree/math/index.rst", "autoapi/torchtree/nf/energy_functions/index.rst", "autoapi/torchtree/nf/flow/index.rst", "autoapi/torchtree/nf/index.rst", "autoapi/torchtree/nf/planar/index.rst", "autoapi/torchtree/nf/realnvp/index.rst", "autoapi/torchtree/nn/index.rst", "autoapi/torchtree/nn/module/index.rst", "autoapi/torchtree/ops/dual_averaging/index.rst", "autoapi/torchtree/ops/index.rst", "autoapi/torchtree/ops/welford/index.rst", "autoapi/torchtree/optim/convergence/index.rst", "autoapi/torchtree/optim/index.rst", "autoapi/torchtree/optim/lr_scheduler/index.rst", "autoapi/torchtree/optim/optimizer/index.rst", "autoapi/torchtree/torchtree/index.rst", "autoapi/torchtree/treeregression/index.rst", "autoapi/torchtree/typing/index.rst", "autoapi/torchtree/variational/chi/index.rst", "autoapi/torchtree/variational/index.rst", "autoapi/torchtree/variational/kl/index.rst", "autoapi/torchtree/variational/renyi/index.rst", "bibliography/bib.rst", "index.rst", "modules/torchtree.rst", "modules/torchtree.cli.rst", "modules/torchtree.cli.advi.rst", "modules/torchtree.cli.evolution.rst", "modules/torchtree.cli.hmc.rst", "modules/torchtree.cli.jacobians.rst", "modules/torchtree.cli.loggers.rst", "modules/torchtree.cli.map.rst", "modules/torchtree.cli.plugin.rst", "modules/torchtree.cli.plugin_manager.rst", "modules/torchtree.cli.priors.rst", "modules/torchtree.cli.utils.rst", "modules/torchtree.core.rst", "modules/torchtree.core.abstractparameter.rst", "modules/torchtree.core.classproperty_decorator.rst", "modules/torchtree.core.container.rst", "modules/torchtree.core.identifiable.rst", "modules/torchtree.core.logger.rst", "modules/torchtree.core.model.rst", "modules/torchtree.core.parameter.rst", "modules/torchtree.core.parameter_encoder.rst", "modules/torchtree.core.parameter_utils.rst", "modules/torchtree.core.parametric.rst", "modules/torchtree.core.runnable.rst", "modules/torchtree.core.serializable.rst", "modules/torchtree.core.utils.rst", "modules/torchtree.distributions.rst", "modules/torchtree.distributions.bayesian_bridge.rst", "modules/torchtree.distributions.ctmc_scale.rst", "modules/torchtree.distributions.deterministic_normal.rst", "modules/torchtree.distributions.distributions.rst", "modules/torchtree.distributions.gmrf.rst", "modules/torchtree.distributions.gmrf_integrated.rst", "modules/torchtree.distributions.inverse_gamma.rst", "modules/torchtree.distributions.joint_distribution.rst", "modules/torchtree.distributions.log_normal.rst", "modules/torchtree.distributions.multivariate_normal.rst", "modules/torchtree.distributions.normal.rst", "modules/torchtree.distributions.one_on_x.rst", "modules/torchtree.distributions.scale_mixture.rst", "modules/torchtree.distributions.transforms.rst", "modules/torchtree.distributions.tree_prior.rst", "modules/torchtree.evolution.rst", "modules/torchtree.evolution.alignment.rst", "modules/torchtree.evolution.attribute_pattern.rst", "modules/torchtree.evolution.bdsk.rst", "modules/torchtree.evolution.birth_death.rst", "modules/torchtree.evolution.branch_model.rst", "modules/torchtree.evolution.coalescent.rst", "modules/torchtree.evolution.datatype.rst", "modules/torchtree.evolution.io.rst", "modules/torchtree.evolution.poisson_tree_likelihood.rst", "modules/torchtree.evolution.rate_transform.rst", "modules/torchtree.evolution.root_transform.rst", "modules/torchtree.evolution.site_model.rst", "modules/torchtree.evolution.site_pattern.rst", "modules/torchtree.evolution.substitution_model.rst", "modules/torchtree.evolution.substitution_model.abstract.rst", "modules/torchtree.evolution.substitution_model.amino_acid.rst", "modules/torchtree.evolution.substitution_model.codon.rst", "modules/torchtree.evolution.substitution_model.general.rst", "modules/torchtree.evolution.substitution_model.nucleotide.rst", "modules/torchtree.evolution.taxa.rst", "modules/torchtree.evolution.tree_height_transform.rst", "modules/torchtree.evolution.tree_likelihood.rst", "modules/torchtree.evolution.tree_model.rst", "modules/torchtree.evolution.tree_model_flexible.rst", "modules/torchtree.inference.rst", "modules/torchtree.inference.hmc.rst", "modules/torchtree.inference.hmc.adaptation.rst", "modules/torchtree.inference.hmc.adaptors.rst", "modules/torchtree.inference.hmc.hamiltonian.rst", "modules/torchtree.inference.hmc.hmc.rst", "modules/torchtree.inference.hmc.integrator.rst", "modules/torchtree.inference.hmc.operator.rst", "modules/torchtree.inference.hmc.stan_adaptation.rst", "modules/torchtree.inference.mcmc.rst", "modules/torchtree.inference.mcmc.mcmc.rst", "modules/torchtree.inference.mcmc.operator.rst", "modules/torchtree.inference.sampler.rst", "modules/torchtree.inference.utils.rst", "modules/torchtree.math.rst", "modules/torchtree.nf.rst", "modules/torchtree.nf.energy_functions.rst", "modules/torchtree.nf.flow.rst", "modules/torchtree.nf.planar.rst", "modules/torchtree.nf.realnvp.rst", "modules/torchtree.nn.rst", "modules/torchtree.nn.module.rst", "modules/torchtree.ops.rst", "modules/torchtree.ops.dual_averaging.rst", "modules/torchtree.ops.welford.rst", "modules/torchtree.optim.rst", "modules/torchtree.optim.convergence.rst", "modules/torchtree.optim.lr_scheduler.rst", "modules/torchtree.optim.optimizer.rst", "modules/torchtree.torchtree.rst", "modules/torchtree.treeregression.rst", "modules/torchtree.typing.rst", "modules/torchtree.variational.rst", "modules/torchtree.variational.chi.rst", "modules/torchtree.variational.kl.rst", "modules/torchtree.variational.renyi.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree._version</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.advi</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.cli</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.evolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.hmc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.jacobians</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.loggers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.plugin</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.plugin_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.priors</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.abstractparameter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.classproperty_decorator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.container</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.identifiable</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.parameter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.parameter_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.parameter_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.parametric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.runnable</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.serializable</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.bayesian_bridge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.ctmc_scale</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.deterministic_normal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.distributions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.gmrf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.gmrf_integrated</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.inverse_gamma</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.joint_distribution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.log_normal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.multivariate_normal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.normal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.one_on_x</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.scale_mixture</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.tree_prior</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.alignment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.attribute_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.bdsk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.birth_death</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.branch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.coalescent</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.datatype</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.io</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.poisson_tree_likelihood</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.rate_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.root_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.site_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.site_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.substitution_model.abstract</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.substitution_model.amino_acid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.substitution_model.codon</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.substitution_model.general</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.substitution_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.substitution_model.nucleotide</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.taxa</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.tree_height_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.tree_likelihood</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.tree_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.tree_model_flexible</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.hmc.adaptation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.hmc.adaptors</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.hmc.hamiltonian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.hmc.hmc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.hmc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.hmc.integrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.hmc.operator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.hmc.stan_adaptation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.mcmc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.mcmc.mcmc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.mcmc.operator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.nf.energy_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.nf.flow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.nf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.nf.planar</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.nf.realnvp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.nn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.nn.module</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.ops.dual_averaging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.ops.welford</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.optim.convergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.optim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.optim.lr_scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.optim.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.torchtree</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.treeregression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.typing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.variational.chi</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.variational</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.variational.kl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.variational.renyi</span></code>", "Bibliography", "Welcome to torchtree\u2019s documentation!", "torchtree", "torchtree.cli", "torchtree.cli.advi", "torchtree.cli.evolution", "torchtree.cli.hmc", "torchtree.cli.jacobians", "torchtree.cli.loggers", "torchtree.cli.map", "torchtree.cli.plugin", "torchtree.cli.plugin_manager", "torchtree.cli.priors", "torchtree.cli.utils", "torchtree.core", "torchtree.core.abstractparameter", "torchtree.core.classproperty_decorator", "torchtree.core.container", "torchtree.core.identifiable", "torchtree.core.logger", "torchtree.core.model", "torchtree.core.parameter", "torchtree.core.parameter_encoder", "torchtree.core.parameter_utils", "torchtree.core.parametric", "torchtree.core.runnable", "torchtree.core.serializable", "torchtree.core.utils", "torchtree.distributions", "torchtree.distributions.bayesian_bridge", "torchtree.distributions.ctmc_scale", "torchtree.distributions.deterministic_normal", "torchtree.distributions.distributions", "torchtree.distributions.gmrf", "torchtree.distributions.gmrf_integrated", "torchtree.distributions.inverse_gamma", "torchtree.distributions.joint_distribution", "torchtree.distributions.log_normal", "torchtree.distributions.multivariate_normal", "torchtree.distributions.normal", "torchtree.distributions.one_on_x", "torchtree.distributions.scale_mixture", "torchtree.distributions.transforms", "torchtree.distributions.tree_prior", "torchtree.evolution", "torchtree.evolution.alignment", "torchtree.evolution.attribute_pattern", "torchtree.evolution.bdsk", "torchtree.evolution.birth_death", "torchtree.evolution.branch_model", "torchtree.evolution.coalescent", "torchtree.evolution.datatype", "torchtree.evolution.io", "torchtree.evolution.poisson_tree_likelihood", "torchtree.evolution.rate_transform", "torchtree.evolution.root_transform", "torchtree.evolution.site_model", "torchtree.evolution.site_pattern", "torchtree.evolution.substitution_model", "torchtree.evolution.substitution_model.abstract", "torchtree.evolution.substitution_model.amino_acid", "torchtree.evolution.substitution_model.codon", "torchtree.evolution.substitution_model.general", "torchtree.evolution.substitution_model.nucleotide", "torchtree.evolution.taxa", "torchtree.evolution.tree_height_transform", "torchtree.evolution.tree_likelihood", "torchtree.evolution.tree_model", "torchtree.evolution.tree_model_flexible", "torchtree.inference", "torchtree.inference.hmc", "torchtree.inference.hmc.adaptation", "torchtree.inference.hmc.adaptors", "torchtree.inference.hmc.hamiltonian", "torchtree.inference.hmc.hmc", "torchtree.inference.hmc.integrator", "torchtree.inference.hmc.operator", "torchtree.inference.hmc.stan_adaptation", "torchtree.inference.mcmc", "torchtree.inference.mcmc.mcmc", "torchtree.inference.mcmc.operator", "torchtree.inference.sampler", "torchtree.inference.utils", "torchtree.math", "torchtree.nf", "torchtree.nf.energy_functions", "torchtree.nf.flow", "torchtree.nf.planar", "torchtree.nf.realnvp", "torchtree.nn", "torchtree.nn.module", "torchtree.ops", "torchtree.ops.dual_averaging", "torchtree.ops.welford", "torchtree.optim", "torchtree.optim.convergence", "torchtree.optim.lr_scheduler", "torchtree.optim.optimizer", "torchtree.torchtree", "torchtree.treeregression", "torchtree.typing", "torchtree.variational", "torchtree.variational.chi", "torchtree.variational.kl", "torchtree.variational.renyi"], "terms": {"version": [0, 27], "inform": [0, 40, 105], "number": [0, 3, 20, 21, 26, 27, 45, 54, 65, 76, 81, 94, 97, 101, 103, 104], "major": 0, "minor": 0, "patch": 0, "label": 0, "logger": [1, 3, 5, 17, 68, 81], "create_variational_pars": 1, "subpras": [1, 4, 8], "create_tril": 1, "scale": [1, 27, 28, 29, 30, 36, 37, 38, 40, 53, 55, 87, 135, 142, 146], "torch": [1, 13, 19, 20, 22, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 44, 45, 46, 47, 48, 51, 53, 54, 55, 56, 57, 59, 60, 62, 64, 65, 66, 69, 71, 74, 75, 76, 80, 83, 85, 87, 88, 89, 90, 93, 94, 96, 97, 101, 103, 104, 147, 194], "tensor": [1, 13, 20, 22, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 51, 53, 54, 55, 56, 57, 59, 60, 62, 65, 66, 69, 71, 74, 75, 76, 80, 82, 83, 85, 87, 88, 93, 101], "creat": [1, 5, 9, 15, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 52, 54, 55, 56, 58, 59, 60, 62, 63, 65, 66, 67, 69, 71, 72, 74, 75, 76, 79, 80, 81, 84, 85, 88, 90, 94, 96, 97, 101, 103, 104, 108], "1": [1, 20, 26, 27, 28, 30, 31, 32, 38, 39, 40, 41, 45, 49, 51, 64, 65, 83, 87, 101, 103, 104], "diment": 1, "contain": [1, 5, 6, 17, 18, 19, 20, 25, 27, 28, 29, 30, 31, 32, 33, 35, 37, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 88, 90, 92, 94, 95, 96, 97, 101, 102, 103, 104, 108, 119, 133, 149, 174, 189, 196, 199, 206], "flatten": 1, "tridiagon": 1, "matrix": [1, 41, 76, 83], "A": [1, 19, 20, 27, 28, 31, 35, 41, 44, 45, 46, 47, 55, 56, 57, 58, 59, 60, 62, 66, 67, 83, 96, 97, 105], "covari": [1, 31, 37, 105], "i": [1, 3, 13, 14, 19, 20, 27, 31, 32, 34, 40, 41, 44, 45, 46, 47, 48, 53, 54, 55, 56, 57, 58, 59, 60, 62, 64, 65, 66, 67, 68, 71, 84, 87, 94, 103, 107], "us": [1, 3, 9, 14, 19, 20, 23, 24, 26, 29, 30, 31, 32, 37, 41, 48, 52, 54, 56, 64, 65, 66, 69, 71, 84, 87, 94, 103], "2": [1, 20, 26, 27, 30, 31, 32, 38, 40, 41, 51, 65, 83, 103, 105], "varianc": [1, 93], "ar": [1, 19, 20, 27, 28, 29, 30, 31, 35, 37, 45, 48, 65, 66, 71, 84, 85, 87, 88, 105], "set": [1, 13, 14, 20, 31, 54], "zero": [1, 20, 31, 45], "choleski": 1, "decomposit": 1, "diagon": [1, 20, 41], "element": 1, "replac": [1, 26], "log": [1, 18, 20, 29, 30, 35, 36, 37, 39, 41, 45, 46, 48, 53, 64, 65, 81, 85, 88], "paramet": [1, 3, 4, 6, 7, 8, 12, 13, 15, 16, 17, 18, 19, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 87, 88, 90, 94, 96, 97, 101, 103, 104, 120], "standard": [1, 9, 23, 24, 29, 36, 38, 103], "deviat": [1, 36, 38], "return": [1, 6, 12, 13, 14, 15, 16, 18, 19, 20, 21, 23, 25, 26, 28, 29, 30, 34, 35, 37, 39, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 58, 59, 60, 62, 63, 65, 66, 67, 69, 71, 72, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 88, 90, 94, 96, 97, 101, 103, 104], "create_fullrank_from_meanfield": 1, "param": [1, 12, 15, 72, 82], "path": [1, 22, 51], "create_fullrank": 1, "var_id": 1, "json_object": [1, 12, 26], "arg": [1, 3, 4, 7, 8, 9, 13, 18, 19, 20, 28, 30, 34, 39, 45, 46, 48, 85, 88, 90, 94, 96], "create_flexible_vari": 1, "create_realnp_distribut": 1, "str": [1, 3, 6, 7, 12, 13, 15, 16, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 35, 37, 40, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 58, 59, 60, 62, 63, 65, 66, 67, 69, 71, 72, 74, 75, 76, 79, 80, 81, 82, 84, 85, 88, 90, 94, 96, 97, 101, 103, 104], "x": [1, 14, 20, 27, 28, 29, 30, 31, 32, 35, 37, 38, 39, 40, 41, 53, 64, 84, 85, 87, 88, 93, 145], "create_realnvp": 1, "gather_paramet": 1, "dict": [1, 3, 6, 7, 12, 15, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 35, 37, 40, 42, 43, 44, 45, 46, 47, 48, 49, 52, 54, 55, 56, 58, 59, 60, 62, 63, 65, 66, 67, 69, 71, 72, 74, 75, 76, 79, 80, 81, 82, 84, 85, 88, 94, 96, 97, 101, 103, 104], "group_map": 1, "apply_sigmoid_transform": 1, "valu": [1, 3, 14, 18, 19, 20, 26, 29, 30, 32, 35, 37, 39, 45, 46, 48, 55, 65, 71, 75, 80, 83, 84, 85, 88, 94], "none": [1, 3, 12, 13, 15, 16, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 59, 60, 62, 63, 64, 65, 66, 69, 71, 72, 74, 75, 76, 79, 80, 81, 84, 85, 88, 90, 91, 93, 94, 96, 97, 101, 103, 104], "apply_affine_transform": 1, "loc": [1, 29, 30, 37, 38, 40], "apply_exp_transform": 1, "apply_simplex_transform": 1, "create_normal_distribut": 1, "x_unr": 1, "create_gamma_distribut": 1, "concentr": [1, 34, 42, 140], "rate": [1, 27, 28, 30, 32, 34, 42, 45, 46, 47, 53, 54, 55, 60, 62, 65, 105, 140], "create_weibull_distribut": 1, "create_meanfield": 1, "distribut": [1, 3, 20, 26, 45, 46, 48, 53, 64, 68, 81, 85, 88, 101, 103, 104], "tupl": [1, 12, 20, 21, 26, 49, 56, 82, 85], "list": [1, 3, 6, 7, 12, 13, 15, 18, 20, 21, 22, 23, 26, 29, 30, 31, 35, 37, 43, 51, 54, 56, 65, 66, 67, 75, 79, 80, 81, 82, 85, 88, 97, 103], "apply_transforms_for_fullrank": 1, "create_variational_model": 1, "id_": [1, 3, 4, 8, 11, 13, 15, 16, 19, 20, 27, 28, 29, 30, 31, 32, 35, 37, 40, 42, 43, 44, 45, 46, 47, 48, 49, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 71, 74, 75, 80, 84, 85, 88, 90, 101, 103, 104], "joint": [1, 4, 8, 29, 35, 71, 72, 75, 79, 101, 103, 104, 141], "create_advi": 1, "variat": [1, 29, 41, 68], "create_logg": [1, 7, 8], "create_sampl": 1, "build_advi": 1, "main": [2, 98], "create_evolution_pars": 3, "parser": 3, "add_birth_death": 3, "add_coalesc": 3, "zero_or_path": 3, "str_or_float": 3, "choic": 3, "argpars": 3, "when": [3, 34, 40, 64, 65], "argument": [3, 20, 30], "can": [3, 18, 19, 20, 27, 44, 47, 54, 55, 56, 57, 58, 59, 60, 62, 64, 66, 67, 81, 85, 90], "either": 3, "string": [3, 21, 26, 27, 30, 31, 32, 40, 49, 51], "from": [3, 15, 19, 20, 25, 27, 28, 29, 30, 31, 32, 35, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 69, 71, 72, 74, 75, 76, 79, 80, 81, 82, 84, 88, 91, 94, 96, 97, 101, 103, 104, 147, 193], "prespecifi": 3, "option": [3, 18, 20, 27, 30, 31, 32, 40, 81, 97], "distribution_typ": 3, "specifi": [3, 20, 27, 31, 32], "run_tree_regress": 3, "taxa": [3, 43, 44, 50, 51, 66, 67, 68], "create_tree_model": 3, "create_poisson_tree_likelihood": 3, "create_tree_likelihood_singl": 3, "tree_model": [3, 18, 28, 31, 32, 42, 45, 46, 47, 48, 50, 52, 53, 64, 65, 67, 68], "branch_model": [3, 50, 52, 65, 68], "substitution_model": [3, 50, 65, 68], "site_model": [3, 50, 65, 68], "site_pattern": [3, 50, 65, 68], "create_tree_likelihood_gener": 3, "trait": 3, "data_typ": [3, 43, 44, 56, 59, 60], "create_tree_likelihood": 3, "align": [3, 50, 51, 56, 68], "create_site_model": 3, "w": [3, 31, 87], "create_site_model_srd06_mu": 3, "is_float": 3, "create_branch_model": 3, "tree_id": [3, 8, 11], "taxa_count": 3, "rate_init": 3, "build_align": 3, "file_nam": [3, 22, 51, 94], "create_substitution_model": 3, "model": [3, 6, 15, 17, 18, 20, 23, 27, 28, 29, 30, 31, 32, 37, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 68, 71, 72, 75, 79, 81, 84, 90, 94, 97, 101, 103, 104, 105, 149], "create_site_pattern": 3, "indic": [3, 20, 56, 83], "create_data_typ": 3, "create_general_data_typ": 3, "create_align": 3, "create_taxa": 3, "create_birth_death": 3, "birth_death_id": 3, "create_constant_birth_death": 3, "create_bdsk": 3, "create_coales": 3, "create_substitution_model_prior": 3, "substmodel_id": 3, "create_ucln_prior": 3, "branch_model_id": [3, 11], "parse_distribut": 3, "desc": [3, 84], "create_clock_prior": 3, "create_evolution_prior": 3, "create_time_tree_prior": 3, "create_bd_prior": 3, "create_constant_bd_prior": 3, "create_bdsk_prior": 3, "create_poisson_evolution_joint": 3, "create_evolution_joint": 3, "get_engin": 3, "import": [3, 103], "cash": 3, "engin": 3, "create_hmc_pars": 4, "create_stan_windowed_adapt": 4, "parameters_unr": 4, "create_hmc_oper": 4, "create_hmc": 4, "build_hmc": 4, "The": [5, 13, 17, 20, 27, 30, 31, 32, 33, 41, 50, 54, 64, 65, 77, 87, 103, 105, 108, 119, 133, 149, 174], "modul": [5, 17, 68, 77, 89, 92, 95, 102, 107, 108, 119, 120, 133, 149, 163, 174, 175, 183, 189, 194, 196, 199, 206], "json": [5, 18, 20, 21, 22, 25, 26, 27, 30, 31, 32, 40, 54, 66, 67, 69, 72, 79, 81, 85, 90, 108], "configur": [5, 108], "file": [5, 18, 22, 51, 108], "through": [5, 108], "command": [5, 108], "line": [5, 108], "interfac": [5, 13, 16, 18, 25, 69, 72, 79, 108, 123, 131], "advi": [5, 68], "evolut": [5, 18, 28, 31, 32, 42, 68], "hmc": [5, 68, 77], "jacobian": [5, 20, 41, 53, 64, 68], "map": [5, 41, 43, 60, 68], "plugin": [5, 10, 68], "plugin_manag": [5, 68], "prior": [5, 27, 28, 31, 39, 40, 42, 68, 105, 134, 135, 138, 145, 148], "util": [5, 17, 68, 77, 92, 196], "create_jacobian": 6, "dict_def": 6, "ani": [6, 15, 18, 19, 20, 25, 27, 28, 29, 30, 31, 32, 34, 35, 37, 40, 42, 43, 44, 45, 46, 47, 48, 49, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 69, 71, 72, 74, 75, 76, 79, 80, 81, 82, 84, 85, 88, 94, 96, 97, 101, 103, 104], "thi": [6, 13, 15, 19, 20, 21, 26, 27, 29, 34, 44, 47, 48, 51, 54, 55, 56, 57, 58, 59, 60, 62, 65, 66, 67, 68, 71, 84, 86, 89, 92, 95, 102, 107, 189, 194, 196, 199, 206], "look": 6, "type": [6, 13, 15, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 35, 37, 40, 42, 43, 44, 45, 46, 47, 48, 49, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 88, 90, 94, 96, 97, 101, 103, 104], "transformedparamet": [6, 20], "id": [6, 12, 15, 16, 18, 20, 25, 27, 28, 29, 30, 31, 32, 35, 37, 40, 42, 43, 44, 45, 46, 47, 48, 49, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 69, 71, 72, 74, 75, 76, 79, 80, 84, 85, 88, 90, 94, 96, 97, 100, 101, 103, 104], "dictionari": [6, 15, 18, 20, 25, 27, 28, 29, 30, 31, 32, 35, 37, 40, 42, 43, 44, 45, 46, 47, 48, 49, 52, 54, 55, 56, 58, 59, 60, 62, 63, 65, 66, 67, 69, 71, 72, 74, 75, 76, 79, 80, 81, 82, 84, 85, 88, 90, 94, 96, 97, 101, 103, 104], "specif": [6, 20], "transform": [6, 20, 29, 33, 53, 54, 64, 66, 67, 68, 85, 87, 133], "create_map_pars": 8, "create_optim": 8, "create_tree_logg": 8, "build_optim": 8, "base": [9, 13, 14, 15, 16, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 69, 71, 72, 74, 75, 76, 79, 80, 81, 84, 85, 87, 88, 90, 94, 96, 97, 101, 103, 104, 105], "abc": [9, 13, 16, 19, 20, 23, 24, 25, 47, 48, 49, 57, 65, 66, 69, 71, 74, 80, 84], "helper": [9, 23, 24], "provid": [9, 20, 23, 24, 34, 40], "wai": [9, 20, 23, 24], "an": [9, 14, 15, 16, 20, 23, 24, 25, 26, 34, 42, 45, 49, 63, 65, 69, 72, 74, 75, 79, 80], "inherit": [9, 15, 19, 23, 24, 41, 48, 65, 71, 82, 84, 147], "abstract": [9, 13, 15, 16, 18, 19, 20, 23, 24, 25, 28, 29, 30, 35, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 79, 80, 84, 88, 94, 96, 97, 101, 103, 104, 120], "load_argu": [9, 10], "subpars": [9, 10], "process_tree_likelihood": 9, "data": [9, 15, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 35, 37, 40, 42, 43, 44, 45, 46, 47, 48, 49, 52, 54, 55, 56, 58, 59, 60, 62, 63, 65, 66, 67, 69, 71, 72, 74, 75, 76, 79, 80, 81, 84, 85, 88, 90, 94, 96, 97, 101, 103, 104], "process_coalesc": 9, "process_al": 9, "pluginmanag": 10, "load_plugin": 10, "disable_plugin": 10, "create_one_on_x_prior": 11, "theta": [11, 48], "create_clock_horseshoe_prior": 11, "convert_date_to_r": 12, "dai": 12, "month": 12, "year": 12, "read_dates_from_csv": 12, "input_fil": 12, "date_format": 12, "make_unconstrain": 12, "constrain": [12, 41], "correspond": [12, 66, 67, 82], "length_of_tensor_in_dict_paramet": 12, "int": [12, 13, 18, 19, 20, 21, 26, 28, 32, 43, 44, 49, 55, 56, 60, 62, 66, 69, 72, 74, 75, 76, 79, 80, 81, 85, 88, 90, 94, 97], "devic": [13, 19, 20, 26, 28, 44, 55, 56, 60, 62, 66, 84, 85, 90], "need": [13, 19, 20, 34, 48, 65, 71, 84], "alloc": [13, 34], "properti": [13, 14, 16, 19, 20, 26, 29, 30, 34, 37, 43, 47, 48, 49, 54, 55, 57, 60, 62, 66, 69, 75, 80, 88, 90], "where": [13, 20, 31, 38, 41, 64, 87, 103], "kwarg": [13, 18, 19, 20, 28, 30, 66, 67, 69, 72, 75, 79, 80, 85, 90, 94, 96, 97], "perform": [13, 20], "dtype": [13, 20, 26, 48, 84, 85], "convers": [13, 20], "cuda": [13, 19, 20, 28, 44, 55, 56, 60, 62, 66, 85, 90], "move": [13, 20], "object": [13, 14, 15, 16, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 35, 37, 40, 42, 43, 44, 45, 46, 47, 48, 49, 52, 54, 55, 56, 58, 59, 60, 62, 63, 65, 66, 67, 69, 71, 72, 74, 75, 76, 79, 80, 81, 82, 84, 85, 88, 90, 94, 96, 97, 101, 102, 103, 104, 123, 131, 206], "memori": [13, 20, 34], "cpu": [13, 19, 20, 28, 44, 55, 56, 60, 62, 66, 85, 90], "identifi": [13, 17, 18, 19, 20, 27, 30, 31, 32, 40, 42, 43, 49, 63, 68, 74, 75, 80, 101, 104], "getter": [13, 20, 54], "setter": [13, 14, 20, 54], "shape": [13, 19, 20, 26, 28, 29, 30, 31, 32, 35, 37, 42, 48, 55, 65, 85, 87, 88, 103], "size": [13, 19, 20, 29, 30, 31, 34, 35, 37, 45, 48, 49, 69, 76, 85, 88, 94, 101, 103, 104], "requires_grad": [13, 20, 26], "bool": [13, 20, 22, 31, 32, 45, 46, 60, 69, 75, 76, 80, 94, 103], "true": [13, 20, 21, 22, 26, 27, 30, 31, 32, 34, 38, 40, 41, 45, 46, 48, 49, 51, 53, 56, 64, 66, 69, 83], "gradient": [13, 20, 64, 103], "comput": [13, 20, 26, 41, 53, 64, 94, 103], "fals": [13, 20, 21, 26, 44, 45, 48, 56, 65, 66, 83, 88, 103], "otherwis": [13, 20, 21, 26], "flag": [13, 20], "dim": [13, 20, 83], "dimens": [13, 20, 34, 83, 103], "add_parameter_listen": [13, 19, 20, 54], "listen": [13, 15, 19, 20, 54], "fire_parameter_chang": [13, 20, 54], "index": [13, 15, 19, 20, 23, 27, 29, 35, 40, 42, 44, 46, 47, 52, 54, 55, 56, 59, 60, 62, 65, 66, 71, 75, 84, 101, 103, 104], "event": [13, 15, 19, 20, 23, 35, 42, 44, 45, 47, 52, 54, 55, 56, 59, 60, 62, 65, 66, 71, 75, 101, 103, 104], "classproperti": 14, "attribut": [14, 18, 20, 27, 30, 31, 32, 40, 44, 63, 66, 67], "fget": 14, "function": [14, 29, 30, 31, 35, 37, 39, 46, 64, 85, 88, 94, 97, 103, 109, 110, 111, 112, 113, 114, 117, 118, 128, 132, 134, 150, 152, 155, 157, 162, 171, 172, 176, 180, 187, 188, 190, 203, 204], "get": [14, 43, 51], "fset": 14, "fdel": 14, "del": 14, "ing": 14, "doc": [14, 20, 30, 76], "docstr": 14, "typic": 14, "defin": 14, "manag": 14, "c": [14, 42, 51, 64], "def": [14, 21, 26], "getx": 14, "self": [14, 20, 21, 26, 103], "_x": 14, "setx": 14, "delx": 14, "m": [14, 103], "decor": 14, "make": [14, 16, 25, 49, 63, 69, 72, 74, 75, 79, 80], "new": [14, 34], "modifi": [14, 88], "exist": [14, 34], "ones": [14, 20], "easi": 14, "am": 14, "delet": 14, "abstractparamet": [15, 17, 18, 19, 20, 23, 27, 28, 29, 30, 31, 32, 37, 40, 41, 42, 45, 46, 47, 48, 52, 53, 54, 55, 57, 59, 60, 62, 66, 67, 68, 69, 75, 84, 85, 88, 90, 103], "multipl": [15, 19, 48, 65, 71, 84], "so": 15, "referenc": [15, 18, 54, 81, 85, 90], "should": [15, 20, 21, 26, 31, 32], "updat": [15, 20], "modellisten": [15, 19, 23], "callabl": [15, 19, 20, 48, 65, 71, 84], "handle_model_chang": [15, 19, 20, 23, 27, 29, 40, 44, 46, 47, 54, 55, 56, 59, 60, 62, 66, 84], "obj": [15, 18, 19, 20, 21, 23, 26, 27, 29, 40, 44, 46, 47, 54, 55, 56, 59, 60, 62, 66, 84], "handle_parameter_chang": [15, 19, 20, 23, 35, 42, 44, 47, 52, 54, 55, 56, 59, 60, 62, 65, 66, 71, 75, 101, 103, 104], "variabl": [15, 19, 20, 23, 27, 29, 30, 35, 37, 40, 42, 44, 47, 52, 54, 55, 56, 59, 60, 62, 65, 66, 71, 75, 101, 103, 104, 141], "classmethod": [15, 18, 20, 25, 26, 27, 28, 29, 30, 31, 32, 35, 37, 40, 42, 43, 44, 45, 46, 47, 48, 49, 52, 54, 55, 56, 58, 59, 60, 62, 63, 65, 66, 67, 69, 71, 72, 74, 75, 76, 79, 80, 81, 84, 85, 88, 90, 94, 96, 97, 101, 103, 104], "from_json": [15, 18, 20, 25, 27, 28, 29, 30, 31, 32, 35, 37, 40, 42, 43, 44, 45, 46, 47, 48, 49, 52, 54, 55, 56, 58, 59, 60, 62, 63, 65, 66, 67, 69, 71, 72, 74, 75, 76, 79, 80, 81, 84, 85, 88, 90, 94, 96, 97, 101, 103, 104], "dic": [15, 18, 20, 25, 26, 27, 28, 29, 30, 31, 32, 35, 37, 40, 42, 43, 44, 45, 46, 47, 48, 49, 52, 54, 55, 56, 58, 59, 60, 62, 63, 65, 66, 67, 69, 71, 72, 74, 75, 76, 79, 80, 81, 82, 84, 85, 88, 90, 94, 96, 97, 101, 103, 104], "method": [15, 20, 21, 25, 26, 28, 29, 34, 35, 37, 42, 43, 44, 45, 46, 47, 48, 49, 52, 55, 56, 58, 59, 60, 62, 63, 65, 66, 67, 69, 71, 72, 74, 75, 76, 79, 80, 84, 88, 93, 94, 96, 97, 101, 103, 104], "represent": [15, 18, 20, 25, 27, 28, 29, 30, 31, 32, 35, 37, 40, 42, 43, 44, 45, 46, 47, 48, 49, 52, 54, 55, 56, 58, 59, 60, 62, 63, 65, 66, 67, 69, 71, 72, 74, 75, 76, 79, 80, 81, 84, 85, 88, 90, 94, 96, 97, 101, 103, 104], "other": [15, 20, 21, 25, 26, 28, 29, 35, 37, 40, 42, 43, 44, 45, 46, 47, 48, 49, 52, 55, 56, 58, 59, 60, 62, 63, 65, 66, 67, 69, 71, 72, 74, 75, 76, 79, 80, 84, 88, 94, 96, 97, 101, 103, 104, 105], "kei": [15, 18, 20, 25, 26, 27, 28, 29, 30, 31, 32, 35, 37, 40, 42, 43, 44, 45, 46, 47, 48, 49, 52, 55, 56, 58, 59, 60, 62, 63, 65, 66, 67, 69, 71, 72, 74, 75, 76, 79, 80, 84, 88, 90, 94, 96, 97, 101, 103, 104], "serializ": [16, 17, 18, 21, 26, 68, 69, 72, 79, 81, 94, 96, 97], "jsonserializ": [16, 18, 25, 69, 72, 79, 81, 94, 96, 97], "packag": [17, 20, 50, 77, 86, 92, 107, 108, 119, 133, 149, 174, 189, 194, 196, 199, 206], "framework": [17, 68, 107, 119], "classproperty_decor": [17, 68], "parameter_encod": [17, 68], "parameter_util": [17, 68], "parametr": [17, 19, 20, 34, 36, 38, 44, 47, 55, 56, 57, 58, 59, 60, 62, 66, 67, 68, 75, 82, 125, 140, 142, 144], "runnabl": [17, 18, 68, 72, 79, 81, 97], "loggerinterfac": [18, 81], "thing": [18, 81], "like": [18, 21, 26], "tree": [18, 28, 31, 32, 42, 47, 51, 52, 54, 64, 65, 66, 67, 99, 148], "initi": [18, 26, 76], "close": 18, "run": [18, 24, 72, 79, 81, 97, 98], "callablemodel": [18, 19, 27, 28, 30, 31, 32, 35, 40, 42, 45, 46, 48, 52, 54, 65, 66, 71, 72, 75, 79, 84, 90, 94, 97, 101, 103, 104], "everi": [18, 82, 94], "frequenc": [18, 57, 59, 60, 62, 65], "addit": [18, 54, 81, 85, 90], "treelogg": 18, "treemodel": [18, 28, 47, 53, 65, 66], "csv": 18, "writ": 18, "dumper": 18, "save": [18, 22], "write": 18, "containerlogg": 18, "input": [18, 41, 53, 64, 83, 87], "mandatori": [18, 20, 27, 30, 31, 32, 40], "python": [18, 21, 26], "callableobject": 18, "parameterlisten": [19, 20, 23, 75], "monitor": [19, 44, 47, 55, 56, 57, 58, 59, 60, 62, 66, 67], "chang": [19, 44, 47, 55, 56, 57, 58, 59, 60, 62, 64, 66, 67], "build": [19, 44, 47, 55, 56, 57, 58, 59, 60, 62, 66, 67], "block": [19, 44, 47, 51, 55, 56, 57, 58, 59, 60, 62, 66, 67], "more": [19, 44, 47, 55, 56, 57, 58, 59, 60, 62, 66, 67], "complex": [19, 44, 47, 55, 56, 57, 58, 59, 60, 62, 66, 67], "tag": [19, 66], "sample_shap": [19, 20, 29, 30, 35, 37, 48, 85, 88], "sampl": [19, 27, 29, 30, 35, 37, 45, 46, 48, 51, 54, 69, 75, 76, 80, 81, 85, 88, 93, 94, 101, 103, 104, 105], "add_model_listen": 19, "remove_model_listen": 19, "remove_parameter_listen": 19, "fire_model_chang": 19, "collect": [19, 20, 43, 48, 63, 65, 71, 84], "cach": [19, 48, 65, 71, 84], "case": [19, 48, 65, 71, 84], "we": [19, 48, 65, 71, 84], "time": [19, 27, 28, 31, 32, 45, 46, 48, 65, 71, 84, 105], "without": [19, 48, 65, 71, 84], "recomput": [19, 48, 65, 71, 84], "implement": [20, 21, 26, 27, 28, 86, 87, 126, 189], "grad_fn": 20, "autograd": 20, "graph": [20, 26], "node": [20, 51, 53, 64, 65, 66, 67], "grad": 20, "detach": 20, "copy_": 20, "clone": 20, "": [20, 31, 34, 37, 45, 65, 83, 93, 94, 103, 104, 105], "infer": [20, 41, 42, 68, 101, 104], "call": [20, 21, 26, 34, 64], "static": [20, 27, 28, 29, 30, 40, 47, 60, 66, 67, 94], "json_factori": [20, 27, 28, 29, 30, 40, 47, 66, 67], "onli": [20, 27], "one": [20, 27, 45, 46], "full_lik": 20, "full": [20, 30], "zeros_lik": 20, "ones_lik": 20, "eye_lik": 20, "ey": 20, "arang": 20, "determin": 20, "float": [20, 21, 26, 27, 32, 34, 36, 38, 40, 48, 49, 54, 64, 65, 66, 67, 69, 74, 75, 80, 83, 94, 104], "fill": 20, "scalar": [20, 40, 83], "0": [20, 26, 27, 30, 32, 38, 40, 41, 49, 51, 53, 64, 66, 69, 83, 88, 91, 93, 94, 103], "d": [20, 32, 83], "elsewher": 20, "2d": 20, "integ": 20, "emul": 20, "If": [20, 31, 32], "equiaval": 20, "equivali": 20, "3": [20, 27, 28, 31, 32, 41, 83, 103, 105], "desir": [20, 34], "default": [20, 21, 26, 31, 32, 66, 94], "construct": 20, "result": 20, "record": 20, "oper": [20, 68, 73, 77, 78, 79, 83], "nn": [20, 68, 85, 87, 88], "wrap": [20, 26], "exampl": [20, 21, 26, 27, 30, 31, 32, 38, 40, 41, 51, 66, 83], "p_dic": 20, "isinst": [20, 27, 30, 31, 32, 40], "ones_d": 20, "all": [20, 26, 41, 94], "loos": [20, 89, 194], "follow": [20, 21, 26, 89, 194], "http": [20, 21, 26, 30, 76, 88, 193], "pytorch": [20, 30], "org": [20, 21, 26, 30, 76], "stabl": [20, 30], "html": [20, 30, 76], "invert": [20, 41, 147], "union": 20, "instanc": [20, 23, 34, 54, 85, 88], "apply_transform": 20, "identidif": 20, "name": [20, 23, 26, 30, 51], "includ": 20, "tolist": 20, "t_dic": 20, "t": [20, 45, 46, 65, 87], "exptransform": 20, "exp_transform": 20, "tensor2": 20, "log_abs_det_jacobian": [20, 41, 53, 64, 87], "viewparamet": 20, "slice": [20, 26, 56], "repres": [20, 31, 101, 103, 104], "view": 20, "anoth": [20, 21, 26], "assign": 20, "catparamet": 20, "ellipsi": [20, 49], "concaten": 20, "moduleparamet": 20, "parameterencod": 21, "skipkei": [21, 26], "ensure_ascii": [21, 26], "check_circular": [21, 26], "allow_nan": [21, 26], "sort_kei": [21, 26], "indent": [21, 26], "separ": [21, 26], "jsonencod": [21, 26], "extens": [21, 26], "encod": [21, 26, 49], "structur": [21, 26], "support": [21, 26, 34, 39, 45, 48], "arrai": [21, 26], "null": [21, 26], "To": [21, 26], "extend": [21, 26, 104], "recogn": [21, 26], "subclass": [21, 26, 34], "o": [21, 26, 103], "possibl": [21, 26], "superclass": [21, 26], "rais": [21, 25, 26], "typeerror": [21, 26], "For": [21, 26, 66], "arbitrari": [21, 26], "iter": [21, 26, 72, 76, 79, 94, 97], "you": [21, 26], "could": [21, 26], "try": [21, 26, 51], "except": [21, 26, 132], "pass": [21, 26], "els": [21, 26], "let": [21, 26, 31], "save_paramet": 22, "safe": 22, "output": [22, 41, 51, 53, 64, 94], "temporari": 22, "pack_tensor": 22, "pack": 22, "register_paramet": 23, "register_model": 23, "establish": [25, 69, 72, 79], "from_json_saf": 25, "pars": [25, 82], "jsonparseerror": [25, 26], "error": 25, "registered_class": 26, "tensorencod": 26, "as_tensor": 26, "dct": 26, "float64": 26, "tensor_rand": 26, "given": [26, 39, 41, 53, 64], "continu": [26, 28, 83, 105], "normal": [26, 29, 30, 33, 37, 40, 41, 60, 68, 85, 86, 88, 103, 143, 146, 189], "log_norm": [26, 33, 68], "uniform": 26, "discret": 26, "random": [26, 27, 29, 30, 31, 32, 37, 40, 138], "bernoulli": 26, "e": [26, 31, 32, 45, 46, 65, 104], "g": [26, 27, 105], "sequenc": [26, 43, 56, 83], "_": 26, "manual_se": 26, "t1": 26, "4": [26, 62, 103], "0820": 26, "4131": 26, "t2": 26, "t3": 26, "get_class": 26, "full_nam": 26, "common": 26, "non": [26, 45], "exit": 26, "process_object": 26, "force_list": 26, "signalhandl": 26, "signum": 26, "frame": 26, "valid": 26, "rule": 26, "remove_com": 26, "replace_wildcard_with_str": 26, "wildcard": 26, "replace_star_with_str": 26, "expand_pl": 26, "parent": 26, "idx": 26, "update_paramet": 26, "recurs": 26, "present": [26, 45], "print_graph": 26, "level": 26, "print": [26, 94], "alternativeattributeerror": 26, "custom": 26, "debug": 26, "conflict": 26, "between": [26, 45, 46, 94], "__getattr__": 26, "stackoverflow": 26, "com": [26, 88, 193], "question": 26, "36575068": 26, "attributeerror": 26, "undesir": 26, "interact": 26, "getattr": 26, "wrapper": [26, 30, 90, 96, 97], "f": [26, 87], "rerais": 26, "altern": 26, "string_to_list_index": 26, "index_str": 26, "package_cont": 26, "package_nam": 26, "register_class": 26, "_cl": 26, "bayesian": [27, 28, 31, 42, 105, 134], "bridg": [27, 105, 134], "bayesianbridg": 27, "core": [27, 28, 29, 30, 31, 32, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 59, 60, 62, 63, 65, 66, 67, 68, 69, 71, 72, 74, 75, 79, 80, 81, 82, 84, 85, 88, 90, 94, 96, 97, 101, 103, 104], "alpha": [27, 32, 42, 59, 104], "local_scal": [27, 40], "slab": [27, 40], "also": 27, "regular": [27, 40, 69, 105], "global": [27, 40], "expon": 27, "local": [27, 40], "width": [27, 40, 76, 80], "nichola": [27, 105], "polson": [27, 105], "jame": [27, 105], "scott": [27, 105], "jess": [27, 105], "windl": [27, 105], "journal": [27, 28, 40, 103, 105], "royal": [27, 105], "statist": [27, 28, 39, 40, 77, 91, 103, 105, 174], "societi": [27, 105], "seri": [27, 105], "b": [27, 41, 45, 46, 51, 53, 62, 65, 87, 105], "methodologi": [27, 105], "page": [27, 105], "713": [27, 105], "733": [27, 105], "2014": [27, 105], "doi": [27, 31, 40, 105], "10": [27, 31, 40, 69, 83, 91, 105], "1111": [27, 105], "rssb": [27, 105], "12042": [27, 105], "akihiko": [27, 105], "nishimura": [27, 105], "marc": [27, 28, 31, 105], "suchard": [27, 28, 31, 105], "shrinkag": [27, 40, 105], "shrunken": [27, 105], "shoulder": [27, 105], "gibb": [27, 105], "posterior": [27, 105], "guarante": [27, 105], "converg": [27, 68, 95, 105], "analysi": [27, 28, 105], "18": [27, 105], "367": [27, 105], "390": [27, 105], "2023": [27, 105], "1214": [27, 40, 105], "22": [27, 105], "ba1308": [27, 105], "uniqu": [27, 30, 31, 32, 40, 101, 104], "bridge_d": 27, "them": 27, "must": [27, 30, 31, 32], "process_object_numb": 27, "ctmc": [28, 135], "refer": [28, 66, 67, 76, 135], "ctmcscale": 28, "markov": [28, 31, 32, 105, 138], "chain": [28, 105], "ferreira": [28, 105], "substitut": [28, 53, 54], "marco": [28, 105], "elaps": [28, 105], "canadian": [28, 105], "36": [28, 105], "355": [28, 105], "368": [28, 105], "2008": [28, 105], "log_gamma_one_half": 28, "deterministicnorm": 29, "distributionmodel": [29, 30, 35, 37, 81, 85, 88, 101, 103, 104], "determinist": 29, "drawn": 29, "dure": [29, 76], "creation": 29, "evalu": [29, 30, 35, 37, 39, 45, 46, 48, 85, 88, 94], "locat": [29, 38, 40, 144], "event_shap": [29, 30, 37], "batch_shap": [29, 30, 34, 35, 37, 85, 88], "rsampl": [29, 30, 35, 37, 48, 85, 88], "gener": [29, 30, 35, 37, 48, 50, 58, 61, 68, 85, 88], "reparameter": [29, 30, 35, 37, 48, 85, 88], "batch": [29, 30, 34, 35, 37, 48, 65, 85, 88], "log_prob": [29, 30, 35, 37, 38, 39, 45, 46, 48, 85, 88], "probabl": [29, 30, 33, 35, 37, 39, 45, 46, 48, 55, 62, 65, 85, 88, 133], "densiti": [29, 30, 35, 37, 39, 45, 46, 48, 85, 88, 193], "mass": [29, 30, 35, 37, 39, 45, 46, 48, 76, 85, 88], "entropi": [29, 30, 35, 37, 85, 88, 103], "over": [29, 30, 35, 37, 85, 88], "dist": 30, "ordereddict": [30, 88, 90], "instanci": [30, 82], "underli": 30, "x_dict": 30, "normal_d": 30, "exp_dic": 30, "exp": [30, 41], "exponenti": [30, 41], "match": 30, "signatur": 30, "see": [30, 76], "gaussian": [31, 138], "field": [31, 32, 138], "precis": [31, 32, 37, 38, 144], "timetreemodel": [31, 32, 45, 46, 48, 52, 64, 66, 67], "weight": [31, 32, 41, 56, 65, 75, 80, 87, 103], "rescal": [31, 32, 65], "parameter": [31, 32, 34, 36, 38, 41, 64], "tau": [31, 32, 38, 83], "awar": [31, 32], "root": [31, 32, 45, 54, 68, 107], "height": [31, 32, 51, 54, 64, 66, 67], "p": [31, 32, 53, 101, 103, 104], "boldsymbol": 31, "mid": [31, 32], "prod_": [31, 32], "n": [31, 32, 38, 65, 83, 101, 103, 105], "frac": [31, 32, 41, 45, 53], "sqrt": [31, 32], "pi": [31, 32], "x_": [31, 32, 64], "x_i": [31, 32, 39, 41, 64], "precision_matrix": [31, 37], "gmrf_dic": [31, 32], "skygrid": [31, 32], "ignor": [31, 32], "gmrfcovari": 31, "beta": [31, 32, 59], "propos": 31, "gill": [31, 105], "et": 31, "al": 31, "coeffici": 31, "effect": [31, 45], "z_": 31, "ldot": 31, "z": [31, 84, 87], "predictor": 31, "z_i": 31, "observ": [31, 45, 46], "measur": 31, "point": 31, "linear": 31, "sum": [31, 41, 53], "beta_": 31, "ip": 31, "w_i": 31, "w_1": 31, "w_n": 31, "mean": [31, 36, 37, 38, 40, 42, 93, 142], "process": [31, 45, 46], "beta_1": 31, "beta_n": 31, "propto": 31, "q": [31, 57, 59, 60, 62, 101, 103, 104], "mandev": [31, 105], "philipp": [31, 105], "lemei": [31, 105], "shannon": [31, 105], "bennett": [31, 105], "roman": [31, 105], "biek": [31, 105], "understand": [31, 105], "past": [31, 105], "popul": [31, 34, 45, 105], "dynam": [31, 105], "coalesc": [31, 50, 68, 105], "systemat": [31, 105], "biologi": [31, 105], "65": [31, 105], "6": [31, 41, 105], "1041": [31, 105], "1056": [31, 105], "2016": [31, 105], "1093": [31, 105], "sysbio": [31, 105], "syw050": [31, 105], "integr": [32, 68, 69, 72, 73, 75, 77, 103, 139], "gmrf": [32, 33, 68, 139], "gamma": [32, 34, 40, 42, 69, 91, 139, 140], "gmrfgammaintegr": 32, "product": 32, "respect": 32, "left": 32, "right": 32, "sum_": [32, 41], "idea": 32, "cheng": 32, "zhang": 32, "parameteriz": [33, 133], "bayesian_bridg": [33, 68], "ctmc_scale": [33, 68], "deterministic_norm": [33, 68], "gmrf_integr": [33, 68], "inverse_gamma": [33, 68], "joint_distribut": [33, 68], "multivariate_norm": [33, 68], "one_on_x": [33, 68], "scale_mixtur": [33, 68], "tree_prior": [33, 68], "invers": [34, 88, 140], "inversegamma": 34, "validate_arg": [34, 36, 38, 39, 45, 46, 48], "transformeddistribut": 34, "arg_constraint": [34, 39, 45, 46, 48], "has_rsampl": [34, 48], "expand": 34, "_instanc": 34, "deriv": 34, "As": 34, "doe": [34, 94], "addition": 34, "repeat": 34, "check": [34, 94], "broadcast": 34, "__init__": 34, "py": 34, "first": [34, 65], "overrid": 34, "batch_siz": [34, 87], "independ": [35, 141], "jointdistributionmodel": 35, "lognorm": [36, 142], "scale_r": 36, "multivari": [37, 41, 143], "multivariatenorm": 37, "covariance_matrix": 37, "scale_tril": [37, 41], "tril": 37, "sim": 38, "mathcal": 38, "mu": [38, 45, 46, 53, 55, 69, 91], "sigma": 38, "norm1": 38, "5": [38, 69, 91], "norm2": 38, "One": [39, 145], "oneonx": 39, "calcul": [39, 54, 62, 65, 66, 94, 103], "improp": 39, "proport": [39, 65], "prod_i": 39, "mixtur": [40, 146], "scalemixturenorm": 40, "juho": [40, 105], "piironen": [40, 105], "aki": [40, 105], "vehtari": [40, 105], "sparsiti": [40, 105], "horsesho": [40, 105], "electron": [40, 105], "11": [40, 83, 105], "5018": [40, 105], "5051": [40, 105], "jan": [40, 105], "2017": [40, 105], "17": [40, 49, 105], "ejs1337si": [40, 105], "global_scal": 40, "mixture_d": 40, "trilexpdiagonaltransform": 41, "cache_s": [41, 53, 64], "1d": 41, "triangular": 41, "lower": [41, 103], "posit": 41, "y": [41, 49, 53, 64, 87, 88], "7183": 41, "0000": 41, "20": 41, "0855": 41, "inv": 41, "biject": [41, 53, 64], "sign": [41, 53, 64], "det": [41, 53, 64], "dy": [41, 53, 64], "dx": [41, 53, 64], "cumsumtransform": 41, "via": [41, 101], "y_i": [41, 53, 64], "j": [41, 64, 103], "x_j": 41, "domain": 41, "codomain": 41, "cumsumexptransform": 41, "softplustransform": 41, "cumsumsoftplustransform": 41, "convexcombinationtransform": 41, "unconstrain": 41, "space": 41, "k": [41, 62, 64, 65, 83, 103], "alpha_i": [41, 103], "order": [41, 64, 101, 104], "satisfi": 41, "geq": 41, "logtransform": 41, "lineartransform": 41, "ax": 41, "phylogenet": [42, 148], "compoundgammadirichletprior": 42, "unrootedtreemodel": [42, 66], "compound": 42, "dirichlet": 42, "unroot": 42, "rannala2011": 42, "ratio": [42, 64, 66], "intern": [42, 65, 66, 67], "extern": 42, "branch": [42, 45, 62, 65, 66], "length": [42, 52, 62, 66], "rannala": 42, "zhu": 42, "ziheng": 42, "yang": 42, "tail": 42, "paradox": 42, "partial": [42, 49, 56, 65], "influenti": 42, "2011": 42, "datatyp": [43, 44, 50, 59, 60, 68], "userlist": [43, 63], "sequence_s": 43, "filenam": 43, "read_fasta_sequ": 43, "calculate_frequ": 43, "calculate_frequencies_per_codon_posit": 43, "calculate_f3x4_from_nucleotid": 43, "nuc_freq": 43, "calculate_f3x4": 43, "calculate_substitut": 43, "calculate_ts_tv": 43, "calculate_kappa": 43, "freq": [43, 65], "attributepattern": 44, "compute_tips_st": [44, 56], "compute_tips_parti": [44, 56], "use_ambigu": [44, 49, 56, 65], "epidemiology_to_birth_death": 45, "r": [45, 53, 64], "delta": [45, 69], "convert": 45, "epidemiologi": 45, "birth": [45, 46], "death": [45, 46], "reproduct": 45, "total": 45, "becom": 45, "infecti": 45, "individu": 45, "being": 45, "remov": 45, "lambda": [45, 46], "psi": [45, 46], "bdskmodel": 45, "rho": [45, 46], "origin": [45, 46], "origin_is_root_edg": 45, "relative_tim": 45, "surviv": [45, 46], "removal_prob": 45, "skylin": 45, "plot": 45, "transmiss": 45, "which": [45, 46], "start": [45, 46, 66, 94], "t_0": [45, 46], "abov": [45, 65], "shift": [45, 54, 66], "rel": [45, 94], "condit": [45, 46], "least": [45, 46], "noninfecti": 45, "immedi": 45, "after": [45, 65], "piecewiseconstantbirthdeath": 45, "lambda_": [45, 46], "piecewis": 45, "constant": [45, 46], "effort": [45, 46], "log_q": [45, 46], "t_i": [45, 46], "lineag": [45, 46], "aliv": [45, 46], "give": [45, 46], "rise": [45, 46], "clade": [45, 46], "p0": 45, "log_p": [45, 46], "ha": [45, 46], "descend": [45, 46], "t_m": [45, 46], "node_height": [45, 46, 48, 66], "birthdeathmodel": 46, "birthdeath": 46, "branchmodel": [47, 52, 65], "abstractclockmodel": 47, "strictclockmodel": 47, "simpleclockmodel": 47, "abstractcoalescentmodel": 48, "constantcoalescentmodel": 48, "abstractcoalescentdistribut": 48, "maximum_likelihood": 48, "constantcoalesc": 48, "exponentialcoalescentmodel": 48, "growth": 48, "exponentialcoalesc": 48, "piecewiseconstantcoalesc": 48, "piecewiseconstantcoalescentmodel": 48, "piecewiseconstantcoalescentgrid": 48, "grid": 48, "softpiecewiseconstantcoalescentgrid": 48, "temperatur": [48, 83], "piecewiseconstantcoalescentgridmodel": 48, "faketreemodel": 48, "process_data_coales": 48, "piecewiseexponentialcoalescentgrid": 48, "state": [49, 65], "state_count": [49, 60], "abstractdatatyp": 49, "nucleotidedatatyp": 49, "nucleotid": [49, 50, 61, 68], "acgtukmrswybdhvn": 49, "nucleotide_st": 49, "nucleotide_ambiguity_st": 49, "aminoaciddatatyp": 49, "amino_acid": [49, 50, 61, 68], "acdefghiklmnpqrstvwybzx": 49, "amino_acids_st": 49, "25": 49, "amino_acids_ambiguity_st": 49, "codondatatyp": [49, 59], "genetic_cod": 49, "genetic_code_t": 49, "knknttttrsrsiimiqhqhpppprrrrllllededaaaaggggvvvv": 49, "yssss": 49, "cwclflf": 49, "genetic_code_nam": 49, "univers": 49, "vertebr": 49, "mitochondri": 49, "yeast": 49, "mold": 49, "protozoan": 49, "mycoplasma": 49, "number_of_codon": 49, "61": 49, "60": 49, "62": 49, "63": 49, "64": 49, "codon_triplet": 49, "aaa": 49, "aac": 49, "aag": 49, "aat": 49, "aca": 49, "acc": 49, "acg": 49, "act": 49, "aga": 49, "agc": 49, "agg": 49, "agt": 49, "ata": 49, "codon": [49, 50, 61, 68], "generaldatatyp": 49, "code": [49, 69, 76, 88, 91, 94, 193], "ambigu": 49, "evolutionari": [50, 149], "attribute_pattern": [50, 68], "bdsk": [50, 68], "birth_death": [50, 68], "io": [50, 68], "poisson_tree_likelihood": [50, 68], "rate_transform": [50, 68], "root_transform": [50, 68], "tree_height_transform": [50, 68], "tree_likelihood": [50, 68], "tree_model_flex": [50, 68], "read_tre": 51, "date": [51, 66], "heterochorn": 51, "read_tree_and_align": 51, "to_nexu": 51, "fp": 51, "convert_samples_to_nexu": 51, "random_tree_from_height": 51, "parse_transl": 51, "parse_tre": [51, 66], "count": 51, "parse_taxa": 51, "split_newick": 51, "newick": [51, 66, 67], "split": 51, "format": [51, 66, 67], "around": 51, "extract_taxa": 51, "extract": 51, "taxon": [51, 63, 66], "nexu": 51, "poissontreelikelihood": 52, "clock_model": [52, 65], "edge_length": 52, "likelihood": [52, 65], "poisson": 52, "clock": 52, "edg": 52, "logdifferenceratetransform": 53, "differ": [53, 64, 94], "adjac": 53, "r_i": 53, "r_": 53, "rescaledratetransform": 53, "tild": 53, "_i": 53, "rootparamet": 54, "distanc": 54, "amount": 54, "serial": 54, "sitemodel": [55, 65], "constantsitemodel": 55, "invariantsitemodel": 55, "invari": 55, "update_rates_prob": 55, "univariatediscretizedsitemodel": 55, "categori": [55, 65], "inverse_cdf": 55, "quantil": 55, "update_r": 55, "weibullsitemodel": 55, "lognormalsitemodel": 55, "sitepattern": [56, 65], "compress": 56, "compress_align": 56, "compress_alignment_st": 56, "substitutionmodel": [57, 60, 62, 65], "p_t": [57, 60, 62], "branch_length": [57, 60, 62, 66], "abstractsubstitutionmodel": 57, "norm": 57, "symmetricsubstitutionmodel": [57, 59, 60, 62], "eigen": [57, 60], "nonsymmetricsubstitutionmodel": [57, 60], "lg": 58, "empiricalsubstitutionmodel": [58, 60], "wag": 58, "mg94": 59, "kappa": [59, 62, 69, 91], "generaljc69": 60, "generalsymmetricsubstitutionmodel": 60, "generalnonsymmetricsubstitutionmodel": 60, "create_rate_matrix": 60, "jc69": 62, "transit": 62, "matric": [62, 65], "hky": 62, "p_t_analyt": 62, "gtr": 62, "userdict": 63, "generalnodeheighttransform": 64, "sort_indic": 64, "update_bound": 64, "topologi": 64, "differencenodeheighttransform": 64, "max": 64, "x_c": 64, "jth": 64, "child": 64, "mathbb": 64, "approxim": [64, 103], "logsumexp": 64, "propag": 64, "calculate_treelikelihood": 65, "post_index": 65, "mat": 65, "simpl": 65, "leav": 65, "postord": [65, 66], "calculate_treelikelihood_discret": 65, "prop": 65, "tip": 65, "2t": 65, "site": 65, "peel": 65, "calculate_treelikelihood_tip_states_discret": 65, "calculate_treelikelihood_discrete_saf": 65, "threshold": 65, "underflow": 65, "detect": 65, "inf": 65, "sinc": 65, "recalcul": 65, "calculate_treelikelihood_discrete_resc": 65, "calculate_treelikelihood_tip_states_discrete_resc": 65, "treelikelihoodmodel": 65, "subst_model": 65, "use_tip_st": 65, "calculate_with_tip_parti": 65, "prob": 65, "calculate_with_tip_st": 65, "heights_to_branch_length": 66, "bound": [66, 101, 103, 104], "setup_index": 66, "indices_postord": 66, "setup_d": 66, "heterochron": 66, "initialize_dates_from_taxa": 66, "heights_from_branch_length": 66, "ep": [66, 88], "1e": [66, 88], "06": 66, "write_newick": 66, "steam": 66, "abstracttreemodel": 66, "update_travers": 66, "as_newick": 66, "stream": 66, "factori": [66, 67], "branch_lengths_id": 66, "taxa_id": 66, "keep_branch_length": 66, "compat": [66, 67], "internal_height": [66, 67], "update_leaf_height": 66, "distal": 66, "side": 66, "internal_heights_id": [66, 67], "reparameterizedtimetreemodel": 66, "ratios_root_height": 66, "update_node_height": 66, "root_height": 66, "flexibletimetreemodel": 67, "cli": 68, "adapt": [68, 73, 75, 76, 77, 91, 94, 103], "adaptor": [68, 69, 73, 75, 76, 77], "hamiltonian": [68, 69, 72, 73, 77], "stan_adapt": [68, 73, 77], "mcmc": [68, 75, 77], "sampler": [68, 77], "nf": 68, "energy_funct": [68, 86], "flow": [68, 86, 87, 88, 189, 193], "planar": [68, 86], "realnvp": [68, 86], "op": 68, "dual_averag": [68, 92], "welford": [68, 92], "optim": 68, "lr_schedul": [68, 95], "chi": [68, 102], "kl": [68, 102], "renyi": [68, 102], "math": [68, 92, 196], "treeregress": 68, "learn": [69, 76], "acceptance_prob": [69, 75, 76, 80], "accept": [69, 75, 76, 80], "restart": [69, 76, 91], "adaptivesteps": 69, "leapfrogintegr": [69, 74], "target_acceptance_prob": [69, 75, 80], "dualaveragingsteps": [69, 76], "8": 69, "05": [69, 88, 91], "75": [69, 91], "t0": [69, 91], "step": [69, 74, 76, 80, 91, 96], "dual": [69, 91], "averag": [69, 91], "nesterov": [69, 91], "stan": [69, 76, 91, 94], "dev": [69, 91, 94], "massmatrixadaptor": 69, "listparamet": [69, 72, 75, 82, 97, 100], "mass_matrix": [69, 71, 75], "find_reasonable_step_s": [69, 72], "inverse_mass_matrix": [69, 71], "warmupadapt": 69, "step_siz": [69, 74], "sqrt_mass_matrix": 69, "sample_momentum": [71, 72], "potential_energi": 71, "kinetic_energi": 71, "momentum": [71, 72, 88], "set_tensor": 74, "hmcoper": 75, "mcmcoper": [75, 79, 80], "tuning_paramet": [75, 80], "update_mass_matric": 75, "adaptable_paramet": [75, 80], "set_adaptable_paramet": [75, 80], "tune": [75, 80], "stanwindowedadapt": 76, "step_size_adaptor": 76, "mass_matrix_adaptor": 76, "num_warmup": 76, "init_buff": 76, "term_buff": 76, "base_window": 76, "warmup": 76, "period": 76, "onlin": [76, 93], "manual": 76, "further": 76, "detail": 76, "mc": 76, "algorithm": [76, 94], "fast": 76, "interv": 76, "final": 76, "window": 76, "slow": 76, "reject": 80, "scaleroper": 80, "scaler": 80, "slidingwindowoper": 80, "draw": 81, "extract_tensors_and_paramet": 82, "listtensor": [82, 100], "soft_sort": 83, "relax": 83, "argsort": 83, "permut": 83, "prillo": 83, "eisenschlo": 83, "softsort": 83, "2020": 83, "soft_max": 83, "keepdim": 83, "soft_searchsort": 83, "sorted_sequ": 83, "serachsort": 83, "monoton": 83, "increas": 83, "innermost": 83, "search": 83, "select": 83, "100": 83, "0001": 83, "5000": 83, "30": 83, "soft_select": 83, "searchsort": 83, "argmax": 83, "w1": 84, "w2": 84, "w3": 84, "energyfunctionmodel": 84, "normalizingflow": 85, "forward": [85, 87, 88], "apply_flow": [85, 88], "planartransform": 87, "u": [87, 88], "tanh": 87, "dot": 87, "learnabl": 87, "input_s": [87, 88], "factor": 87, "bia": 87, "u_hat": 87, "mask": [88, 193], "autoregress": [88, 193], "estim": [88, 93, 101, 103, 104, 193], "arxiv": [88, 193], "1705": [88, 193], "07057v4": [88, 193], "port": [88, 193], "github": [88, 193], "kamenbliznashki": [88, 193], "normalizing_flow": [88, 193], "linearmaskedcoupl": 88, "hidden_s": 88, "n_hidden": 88, "cond_label_s": 88, "coupl": 88, "layer": 88, "per": 88, "maf": 88, "paper": 88, "batchnorm": 88, "9": 88, "cond_i": 88, "flowsequenti": 88, "sequenti": 88, "n_block": 88, "batch_norm": 88, "design": [89, 194], "ordereddicttyp": [90, 100], "dualaverag": 91, "welfordvari": 93, "co": 93, "add_sampl": 93, "reset": 93, "baseconverg": 94, "diagnost": 94, "variationalconverg": 94, "loss": [94, 97], "elbo": [94, 103], "sy": 94, "stdout": 94, "stanvariationalconverg": 94, "max_iter": 94, "tol_rel_obj": 94, "01": 94, "sgd": 94, "maximum": 94, "toler": 94, "rel_differ": 94, "prev": 94, "curr": 94, "two": 94, "doubl": 94, "previou": 94, "current": 94, "absolut": 94, "schedul": 96, "_lrschedul": 96, "regress": 99, "cubo": 101, "upper": 101, "form": [101, 104], "diverg": [101, 103, 104], "adji": 101, "bousso": 101, "dieng": 101, "dustin": 101, "tran": 101, "rajesh": 101, "ranganath": 101, "john": 101, "paislei": 101, "david": 101, "blei": 101, "minim": [101, 103], "score": 103, "evid": 103, "maxim": 103, "equival": 103, "exclus": 103, "kullback": 103, "leibler": 103, "most": 103, "dimension": 103, "multi": 103, "klqp": 103, "instead": 103, "mont": 103, "carlo": 103, "pathwis": 103, "klpq": 103, "inclus": 103, "oh": 103, "berger": 103, "1992": 103, "simul": 103, "41": 103, "143": 103, "168": 103, "klpqimport": 103, "selbo": 103, "compon": 103, "stratifi": 103, "sum_i": 103, "q_i": 103, "vr": 104, "tradit": 104, "r\u00e9nyi": 104, "yingzhen": 104, "li": 104, "richard": 104, "turner": 104, "fs08": 105, "glb": 105, "16": 105, "ns23": 105, "pv17": 105, "psw14": 105, "bibliographi": 106, "class": [115, 116, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 182, 184, 185, 186, 190, 191, 192, 193, 195, 197, 198, 200, 201, 202, 207, 208, 209]}, "objects": {"": [[107, 0, 0, "-", "torchtree"]], "torchtree": [[0, 0, 0, "-", "_version"], [108, 0, 0, "-", "cli"], [119, 0, 0, "-", "core"], [133, 0, 0, "-", "distributions"], [149, 0, 0, "-", "evolution"], [174, 0, 0, "-", "inference"], [188, 0, 0, "-", "math"], [189, 0, 0, "-", "nf"], [194, 0, 0, "-", "nn"], [196, 0, 0, "-", "ops"], [199, 0, 0, "-", "optim"], [203, 0, 0, "-", "torchtree"], [204, 0, 0, "-", "treeregression"], [205, 0, 0, "-", "typing"], [206, 0, 0, "-", "variational"]], "torchtree.cli": [[5, 1, 1, "", "PLUGIN_MANAGER"], [109, 0, 0, "-", "advi"], [2, 0, 0, "-", "cli"], [110, 0, 0, "-", "evolution"], [111, 0, 0, "-", "hmc"], [112, 0, 0, "-", "jacobians"], [113, 0, 0, "-", "loggers"], [114, 0, 0, "-", "map"], [115, 0, 0, "-", "plugin"], [116, 0, 0, "-", "plugin_manager"], [117, 0, 0, "-", "priors"], [118, 0, 0, "-", "utils"]], "torchtree.cli.advi": [[1, 2, 1, "", "apply_affine_transform"], [1, 2, 1, "", "apply_exp_transform"], [1, 2, 1, "", "apply_sigmoid_transformed"], [1, 2, 1, "", "apply_simplex_transform"], [1, 2, 1, "", "apply_transforms_for_fullrank"], [1, 2, 1, "", "build_advi"], [1, 2, 1, "", "create_advi"], [1, 2, 1, "", "create_flexible_variational"], [1, 2, 1, "", "create_fullrank"], [1, 2, 1, "", "create_fullrank_from_meanfield"], [1, 2, 1, "", "create_gamma_distribution"], [1, 2, 1, "", "create_logger"], [1, 2, 1, "", "create_meanfield"], [1, 2, 1, "", "create_normal_distribution"], [1, 2, 1, "", "create_realnp_distribution"], [1, 2, 1, "", "create_realnvp"], [1, 2, 1, "", "create_sampler"], [1, 2, 1, "", "create_tril"], [1, 2, 1, "", "create_variational_model"], [1, 2, 1, "", "create_variational_parser"], [1, 2, 1, "", "create_weibull_distribution"], [1, 2, 1, "", "gather_parameters"], [1, 1, 1, "", "logger"]], "torchtree.cli.cli": [[2, 2, 1, "", "main"]], "torchtree.cli.evolution": [[3, 2, 1, "", "add_birth_death"], [3, 2, 1, "", "add_coalescent"], [3, 2, 1, "", "build_alignment"], [3, 2, 1, "", "create_alignment"], [3, 2, 1, "", "create_bd_prior"], [3, 2, 1, "", "create_bdsk"], [3, 2, 1, "", "create_bdsk_prior"], [3, 2, 1, "", "create_birth_death"], [3, 2, 1, "", "create_branch_model"], [3, 2, 1, "", "create_clock_prior"], [3, 2, 1, "", "create_coalesent"], [3, 2, 1, "", "create_constant_bd_prior"], [3, 2, 1, "", "create_constant_birth_death"], [3, 2, 1, "", "create_data_type"], [3, 2, 1, "", "create_evolution_joint"], [3, 2, 1, "", "create_evolution_parser"], [3, 2, 1, "", "create_evolution_priors"], [3, 2, 1, "", "create_general_data_type"], [3, 2, 1, "", "create_poisson_evolution_joint"], [3, 2, 1, "", "create_poisson_tree_likelihood"], [3, 2, 1, "", "create_site_model"], [3, 2, 1, "", "create_site_model_srd06_mus"], [3, 2, 1, "", "create_site_pattern"], [3, 2, 1, "", "create_substitution_model"], [3, 2, 1, "", "create_substitution_model_priors"], [3, 2, 1, "", "create_taxa"], [3, 2, 1, "", "create_time_tree_prior"], [3, 2, 1, "", "create_tree_likelihood"], [3, 2, 1, "", "create_tree_likelihood_general"], [3, 2, 1, "", "create_tree_likelihood_single"], [3, 2, 1, "", "create_tree_model"], [3, 2, 1, "", "create_ucln_prior"], [3, 2, 1, "", "distribution_type"], [3, 2, 1, "", "get_engine"], [3, 2, 1, "", "is_float"], [3, 1, 1, "", "logger"], [3, 2, 1, "", "parse_distribution"], [3, 2, 1, "", "run_tree_regression"], [3, 2, 1, "", "str_or_float"], [3, 2, 1, "", "zero_or_path"]], "torchtree.cli.hmc": [[4, 2, 1, "", "build_hmc"], [4, 2, 1, "", "create_hmc"], [4, 2, 1, "", "create_hmc_operator"], [4, 2, 1, "", "create_hmc_parser"], [4, 2, 1, "", "create_stan_windowed_adaptation"]], "torchtree.cli.jacobians": [[6, 2, 1, "", "create_jacobians"]], "torchtree.cli.loggers": [[7, 2, 1, "", "create_loggers"]], "torchtree.cli.map": [[8, 2, 1, "", "build_optimizer"], [8, 2, 1, "", "create_logger"], [8, 2, 1, "", "create_map_parser"], [8, 2, 1, "", "create_optimizer"], [8, 2, 1, "", "create_tree_logger"]], "torchtree.cli.plugin": [[9, 3, 1, "", "Plugin"]], "torchtree.cli.plugin.Plugin": [[9, 4, 1, "", "load_arguments"], [9, 4, 1, "", "process_all"], [9, 4, 1, "", "process_coalescent"], [9, 4, 1, "", "process_tree_likelihood"]], "torchtree.cli.plugin_manager": [[10, 3, 1, "", "PluginManager"]], "torchtree.cli.plugin_manager.PluginManager": [[10, 4, 1, "", "disable_plugins"], [10, 4, 1, "", "load_arguments"], [10, 4, 1, "", "load_plugins"], [10, 4, 1, "", "plugins"]], "torchtree.cli.priors": [[11, 2, 1, "", "create_clock_horseshoe_prior"], [11, 2, 1, "", "create_one_on_x_prior"]], "torchtree.cli.utils": [[12, 2, 1, "", "convert_date_to_real"], [12, 2, 1, "", "length_of_tensor_in_dict_parameter"], [12, 2, 1, "", "make_unconstrained"], [12, 2, 1, "", "read_dates_from_csv"]], "torchtree.core": [[120, 0, 0, "-", "abstractparameter"], [121, 0, 0, "-", "classproperty_decorator"], [122, 0, 0, "-", "container"], [123, 0, 0, "-", "identifiable"], [124, 0, 0, "-", "logger"], [125, 0, 0, "-", "model"], [126, 0, 0, "-", "parameter"], [127, 0, 0, "-", "parameter_encoder"], [128, 0, 0, "-", "parameter_utils"], [129, 0, 0, "-", "parametric"], [130, 0, 0, "-", "runnable"], [131, 0, 0, "-", "serializable"], [132, 0, 0, "-", "utils"]], "torchtree.core.abstractparameter": [[13, 3, 1, "", "AbstractParameter"], [13, 3, 1, "", "Device"]], "torchtree.core.abstractparameter.AbstractParameter": [[13, 4, 1, "", "add_parameter_listener"], [13, 5, 1, "", "device"], [13, 4, 1, "", "dim"], [13, 5, 1, "", "dtype"], [13, 4, 1, "", "fire_parameter_changed"], [13, 4, 1, "", "parameters"], [13, 5, 1, "", "requires_grad"], [13, 5, 1, "", "shape"], [13, 5, 1, "", "tensor"]], "torchtree.core.abstractparameter.Device": [[13, 4, 1, "", "cpu"], [13, 4, 1, "", "cuda"], [13, 5, 1, "", "device"], [13, 4, 1, "", "to"]], "torchtree.core.classproperty_decorator": [[14, 3, 1, "", "classproperty"]], "torchtree.core.container": [[15, 3, 1, "", "Container"]], "torchtree.core.container.Container": [[15, 4, 1, "", "callables"], [15, 4, 1, "", "from_json"], [15, 4, 1, "", "handle_model_changed"], [15, 4, 1, "", "handle_parameter_changed"], [15, 4, 1, "", "params"]], "torchtree.core.identifiable": [[16, 3, 1, "", "Identifiable"]], "torchtree.core.identifiable.Identifiable": [[16, 5, 1, "", "id"]], "torchtree.core.logger": [[18, 3, 1, "", "CSV"], [18, 3, 1, "", "ContainerLogger"], [18, 3, 1, "", "Dumper"], [18, 3, 1, "", "Logger"], [18, 3, 1, "", "LoggerInterface"], [18, 3, 1, "", "TreeLogger"]], "torchtree.core.logger.CSV": [[18, 4, 1, "", "from_json"], [18, 4, 1, "", "run"]], "torchtree.core.logger.ContainerLogger": [[18, 4, 1, "", "close"], [18, 4, 1, "", "from_json"], [18, 4, 1, "", "initialize"], [18, 4, 1, "", "log"]], "torchtree.core.logger.Dumper": [[18, 4, 1, "", "from_json"], [18, 4, 1, "", "run"]], "torchtree.core.logger.Logger": [[18, 4, 1, "", "close"], [18, 4, 1, "", "from_json"], [18, 4, 1, "", "initialize"], [18, 4, 1, "", "log"]], "torchtree.core.logger.LoggerInterface": [[18, 4, 1, "", "close"], [18, 4, 1, "", "initialize"], [18, 4, 1, "", "log"], [18, 4, 1, "", "run"]], "torchtree.core.logger.TreeLogger": [[18, 4, 1, "", "close"], [18, 4, 1, "", "from_json"], [18, 4, 1, "", "initialize"], [18, 4, 1, "", "log"]], "torchtree.core.model": [[19, 3, 1, "", "CallableModel"], [19, 3, 1, "", "Model"]], "torchtree.core.model.CallableModel": [[19, 4, 1, "", "handle_model_changed"], [19, 4, 1, "", "handle_parameter_changed"]], "torchtree.core.model.Model": [[19, 4, 1, "", "add_model_listener"], [19, 4, 1, "", "add_parameter_listener"], [19, 4, 1, "", "cpu"], [19, 4, 1, "", "cuda"], [19, 4, 1, "", "fire_model_changed"], [19, 4, 1, "", "models"], [19, 4, 1, "", "remove_model_listener"], [19, 4, 1, "", "remove_parameter_listener"], [19, 5, 1, "", "sample_shape"], [19, 5, 1, "", "tag"], [19, 4, 1, "", "to"]], "torchtree.core.parameter": [[20, 3, 1, "", "CatParameter"], [20, 3, 1, "", "ModuleParameter"], [20, 3, 1, "", "Parameter"], [20, 3, 1, "", "TransformedParameter"], [20, 3, 1, "", "ViewParameter"]], "torchtree.core.parameter.CatParameter": [[20, 4, 1, "", "add_parameter_listener"], [20, 4, 1, "", "cpu"], [20, 4, 1, "", "cuda"], [20, 5, 1, "", "device"], [20, 4, 1, "", "fire_parameter_changed"], [20, 4, 1, "", "from_json"], [20, 4, 1, "", "handle_model_changed"], [20, 4, 1, "", "handle_parameter_changed"], [20, 5, 1, "", "requires_grad"], [20, 5, 1, "", "tensor"], [20, 4, 1, "", "to"], [20, 4, 1, "", "update"]], "torchtree.core.parameter.ModuleParameter": [[20, 4, 1, "", "add_parameter_listener"], [20, 4, 1, "", "cpu"], [20, 4, 1, "", "cuda"], [20, 4, 1, "", "fire_parameter_changed"], [20, 4, 1, "", "from_json"], [20, 4, 1, "", "handle_model_changed"], [20, 4, 1, "", "handle_parameter_changed"], [20, 4, 1, "", "parameters"], [20, 5, 1, "", "requires_grad"], [20, 5, 1, "", "sample_shape"], [20, 5, 1, "", "shape"], [20, 5, 1, "", "tensor"], [20, 4, 1, "", "to"]], "torchtree.core.parameter.Parameter": [[20, 4, 1, "", "add_parameter_listener"], [20, 4, 1, "", "clone"], [20, 4, 1, "", "copy_"], [20, 4, 1, "", "cpu"], [20, 4, 1, "", "cuda"], [20, 4, 1, "", "detach"], [20, 4, 1, "", "fire_parameter_changed"], [20, 4, 1, "", "from_json"], [20, 5, 1, "", "grad"], [20, 5, 1, "", "grad_fn"], [20, 4, 1, "", "json_factory"], [20, 5, 1, "", "requires_grad"], [20, 4, 1, "", "size"], [20, 5, 1, "", "tensor"], [20, 2, 1, "id6", "to"]], "torchtree.core.parameter.TransformedParameter": [[20, 4, 1, "", "add_parameter_listener"], [20, 4, 1, "", "apply_transform"], [20, 4, 1, "", "cpu"], [20, 4, 1, "", "cuda"], [20, 4, 1, "", "fire_parameter_changed"], [20, 4, 1, "", "from_json"], [20, 4, 1, "", "handle_model_changed"], [20, 4, 1, "", "handle_parameter_changed"], [20, 4, 1, "", "parameters"], [20, 5, 1, "", "requires_grad"], [20, 5, 1, "", "sample_shape"], [20, 5, 1, "", "shape"], [20, 5, 1, "", "tensor"], [20, 4, 1, "", "to"]], "torchtree.core.parameter.ViewParameter": [[20, 4, 1, "", "add_parameter_listener"], [20, 4, 1, "", "assign"], [20, 4, 1, "", "clone"], [20, 4, 1, "", "cpu"], [20, 4, 1, "", "cuda"], [20, 5, 1, "", "dtype"], [20, 4, 1, "", "fire_parameter_changed"], [20, 4, 1, "", "from_json"], [20, 4, 1, "", "handle_parameter_changed"], [20, 4, 1, "", "json_factory"], [20, 5, 1, "", "requires_grad"], [20, 5, 1, "", "shape"], [20, 5, 1, "", "tensor"], [20, 4, 1, "", "to"]], "torchtree.core.parameter_encoder": [[21, 3, 1, "", "ParameterEncoder"]], "torchtree.core.parameter_encoder.ParameterEncoder": [[21, 4, 1, "", "default"]], "torchtree.core.parameter_utils": [[22, 2, 1, "", "pack_tensor"], [22, 2, 1, "", "save_parameters"]], "torchtree.core.parametric": [[23, 3, 1, "", "ModelListener"], [23, 3, 1, "", "ParameterListener"], [23, 3, 1, "", "Parametric"]], "torchtree.core.parametric.ModelListener": [[23, 4, 1, "", "handle_model_changed"]], "torchtree.core.parametric.ParameterListener": [[23, 4, 1, "", "handle_parameter_changed"]], "torchtree.core.parametric.Parametric": [[23, 4, 1, "", "parameters"], [23, 4, 1, "", "register_model"], [23, 4, 1, "", "register_parameter"]], "torchtree.core.runnable": [[24, 3, 1, "", "Runnable"]], "torchtree.core.runnable.Runnable": [[24, 4, 1, "", "run"]], "torchtree.core.serializable": [[25, 3, 1, "", "JSONSerializable"]], "torchtree.core.serializable.JSONSerializable": [[25, 4, 1, "", "from_json"], [25, 4, 1, "", "from_json_safe"]], "torchtree.core.utils": [[26, 6, 1, "", "AlternativeAttributeError"], [26, 6, 1, "", "JSONParseError"], [26, 1, 1, "", "REGISTERED_CLASSES"], [26, 3, 1, "", "SignalHandler"], [26, 3, 1, "", "TensorEncoder"], [26, 2, 1, "", "as_tensor"], [26, 2, 1, "", "expand_plates"], [26, 2, 1, "", "get_class"], [26, 2, 1, "", "package_contents"], [26, 2, 1, "", "print_graph"], [26, 2, 1, "", "process_object"], [26, 2, 1, "", "process_objects"], [26, 2, 1, "", "register_class"], [26, 2, 1, "", "remove_comments"], [26, 2, 1, "", "replace_star_with_str"], [26, 2, 1, "", "replace_wildcard_with_str"], [26, 2, 1, "", "string_to_list_index"], [26, 2, 1, "", "tensor_rand"], [26, 2, 1, "", "update_parameters"], [26, 2, 1, "", "validate"]], "torchtree.core.utils.AlternativeAttributeError": [[26, 4, 1, "", "wrapper"]], "torchtree.core.utils.SignalHandler": [[26, 4, 1, "", "exit"]], "torchtree.core.utils.TensorEncoder": [[26, 4, 1, "", "default"]], "torchtree.distributions": [[134, 0, 0, "-", "bayesian_bridge"], [135, 0, 0, "-", "ctmc_scale"], [136, 0, 0, "-", "deterministic_normal"], [137, 0, 0, "-", "distributions"], [138, 0, 0, "-", "gmrf"], [139, 0, 0, "-", "gmrf_integrated"], [140, 0, 0, "-", "inverse_gamma"], [141, 0, 0, "-", "joint_distribution"], [142, 0, 0, "-", "log_normal"], [143, 0, 0, "-", "multivariate_normal"], [144, 0, 0, "-", "normal"], [145, 0, 0, "-", "one_on_x"], [146, 0, 0, "-", "scale_mixture"], [147, 0, 0, "-", "transforms"], [148, 0, 0, "-", "tree_prior"]], "torchtree.distributions.bayesian_bridge": [[27, 3, 1, "", "BayesianBridge"], [27, 2, 1, "", "process_object_number"]], "torchtree.distributions.bayesian_bridge.BayesianBridge": [[27, 4, 1, "", "from_json"], [27, 4, 1, "", "handle_model_changed"], [27, 4, 1, "", "json_factory"]], "torchtree.distributions.ctmc_scale": [[28, 3, 1, "", "CTMCScale"]], "torchtree.distributions.ctmc_scale.CTMCScale": [[28, 4, 1, "", "cpu"], [28, 4, 1, "", "cuda"], [28, 4, 1, "", "from_json"], [28, 4, 1, "", "json_factory"], [28, 7, 1, "", "log_gamma_one_half"], [28, 7, 1, "", "shape"], [28, 4, 1, "", "to"]], "torchtree.distributions.deterministic_normal": [[29, 3, 1, "", "DeterministicNormal"]], "torchtree.distributions.deterministic_normal.DeterministicNormal": [[29, 5, 1, "", "batch_shape"], [29, 4, 1, "", "entropy"], [29, 5, 1, "", "event_shape"], [29, 4, 1, "", "from_json"], [29, 4, 1, "", "handle_model_changed"], [29, 4, 1, "", "json_factory"], [29, 4, 1, "", "log_prob"], [29, 4, 1, "", "rsample"], [29, 4, 1, "", "sample"]], "torchtree.distributions.distributions": [[30, 3, 1, "", "Distribution"], [30, 3, 1, "", "DistributionModel"]], "torchtree.distributions.distributions.Distribution": [[30, 5, 1, "", "batch_shape"], [30, 5, 1, "", "distribution"], [30, 4, 1, "", "entropy"], [30, 5, 1, "", "event_shape"], [30, 4, 1, "", "from_json"], [30, 4, 1, "", "json_factory"], [30, 4, 1, "", "log_prob"], [30, 4, 1, "", "rsample"], [30, 4, 1, "", "sample"]], "torchtree.distributions.distributions.DistributionModel": [[30, 4, 1, "", "entropy"], [30, 4, 1, "", "log_prob"], [30, 4, 1, "", "rsample"], [30, 4, 1, "", "sample"]], "torchtree.distributions.gmrf": [[31, 3, 1, "", "GMRF"], [31, 3, 1, "", "GMRFCovariate"]], "torchtree.distributions.gmrf.GMRF": [[31, 4, 1, "", "from_json"], [31, 4, 1, "", "precision_matrix"]], "torchtree.distributions.gmrf.GMRFCovariate": [[31, 4, 1, "", "from_json"]], "torchtree.distributions.gmrf_integrated": [[32, 3, 1, "", "GMRFGammaIntegrated"]], "torchtree.distributions.gmrf_integrated.GMRFGammaIntegrated": [[32, 4, 1, "", "from_json"]], "torchtree.distributions.inverse_gamma": [[34, 3, 1, "", "InverseGamma"]], "torchtree.distributions.inverse_gamma.InverseGamma": [[34, 7, 1, "", "arg_constraints"], [34, 5, 1, "", "concentration"], [34, 4, 1, "", "expand"], [34, 7, 1, "", "has_rsample"], [34, 5, 1, "", "rate"], [34, 7, 1, "", "support"]], "torchtree.distributions.joint_distribution": [[35, 3, 1, "", "JointDistributionModel"]], "torchtree.distributions.joint_distribution.JointDistributionModel": [[35, 4, 1, "", "entropy"], [35, 4, 1, "", "from_json"], [35, 4, 1, "", "handle_parameter_changed"], [35, 4, 1, "", "log_prob"], [35, 4, 1, "", "rsample"], [35, 4, 1, "", "sample"]], "torchtree.distributions.log_normal": [[36, 3, 1, "", "LogNormal"]], "torchtree.distributions.multivariate_normal": [[37, 3, 1, "", "MultivariateNormal"]], "torchtree.distributions.multivariate_normal.MultivariateNormal": [[37, 5, 1, "", "batch_shape"], [37, 4, 1, "", "entropy"], [37, 5, 1, "", "event_shape"], [37, 4, 1, "", "from_json"], [37, 4, 1, "", "log_prob"], [37, 4, 1, "", "rsample"], [37, 4, 1, "", "sample"]], "torchtree.distributions.normal": [[38, 3, 1, "", "Normal"]], "torchtree.distributions.one_on_x": [[39, 3, 1, "", "OneOnX"]], "torchtree.distributions.one_on_x.OneOnX": [[39, 7, 1, "", "arg_constraints"], [39, 4, 1, "", "log_prob"], [39, 7, 1, "", "support"]], "torchtree.distributions.scale_mixture": [[40, 3, 1, "", "ScaleMixtureNormal"]], "torchtree.distributions.scale_mixture.ScaleMixtureNormal": [[40, 4, 1, "", "from_json"], [40, 4, 1, "", "handle_model_changed"], [40, 4, 1, "", "json_factory"]], "torchtree.distributions.transforms": [[41, 3, 1, "", "ConvexCombinationTransform"], [41, 3, 1, "", "CumSumExpTransform"], [41, 3, 1, "", "CumSumSoftPlusTransform"], [41, 3, 1, "", "CumSumTransform"], [41, 3, 1, "", "LinearTransform"], [41, 3, 1, "", "LogTransform"], [41, 3, 1, "", "SoftPlusTransform"], [41, 3, 1, "", "TrilExpDiagonalTransform"]], "torchtree.distributions.transforms.ConvexCombinationTransform": [[41, 7, 1, "", "codomain"], [41, 7, 1, "", "domain"], [41, 4, 1, "", "log_abs_det_jacobian"]], "torchtree.distributions.transforms.CumSumExpTransform": [[41, 7, 1, "", "bijective"], [41, 7, 1, "", "codomain"], [41, 7, 1, "", "domain"], [41, 4, 1, "", "log_abs_det_jacobian"], [41, 7, 1, "", "sign"]], "torchtree.distributions.transforms.CumSumSoftPlusTransform": [[41, 7, 1, "", "bijective"], [41, 7, 1, "", "codomain"], [41, 7, 1, "", "domain"], [41, 4, 1, "", "log_abs_det_jacobian"], [41, 7, 1, "", "sign"]], "torchtree.distributions.transforms.CumSumTransform": [[41, 7, 1, "", "bijective"], [41, 7, 1, "", "codomain"], [41, 7, 1, "", "domain"], [41, 4, 1, "", "log_abs_det_jacobian"], [41, 7, 1, "", "sign"]], "torchtree.distributions.transforms.LinearTransform": [[41, 7, 1, "", "bijective"], [41, 7, 1, "", "codomain"], [41, 7, 1, "", "domain"], [41, 4, 1, "", "log_abs_det_jacobian"], [41, 7, 1, "", "sign"]], "torchtree.distributions.transforms.LogTransform": [[41, 7, 1, "", "bijective"], [41, 7, 1, "", "codomain"], [41, 7, 1, "", "domain"], [41, 4, 1, "", "log_abs_det_jacobian"], [41, 7, 1, "", "sign"]], "torchtree.distributions.transforms.SoftPlusTransform": [[41, 7, 1, "", "bijective"], [41, 7, 1, "", "codomain"], [41, 7, 1, "", "domain"], [41, 4, 1, "", "log_abs_det_jacobian"], [41, 7, 1, "", "sign"]], "torchtree.distributions.transforms.TrilExpDiagonalTransform": [[41, 7, 1, "", "bijective"], [41, 4, 1, "", "log_abs_det_jacobian"], [41, 7, 1, "", "sign"]], "torchtree.distributions.tree_prior": [[42, 3, 1, "", "CompoundGammaDirichletPrior"]], "torchtree.distributions.tree_prior.CompoundGammaDirichletPrior": [[42, 4, 1, "", "from_json"], [42, 4, 1, "", "handle_parameter_changed"]], "torchtree.evolution": [[150, 0, 0, "-", "alignment"], [151, 0, 0, "-", "attribute_pattern"], [152, 0, 0, "-", "bdsk"], [153, 0, 0, "-", "birth_death"], [154, 0, 0, "-", "branch_model"], [155, 0, 0, "-", "coalescent"], [156, 0, 0, "-", "datatype"], [157, 0, 0, "-", "io"], [158, 0, 0, "-", "poisson_tree_likelihood"], [159, 0, 0, "-", "rate_transform"], [160, 0, 0, "-", "root_transform"], [161, 0, 0, "-", "site_model"], [162, 0, 0, "-", "site_pattern"], [163, 0, 0, "-", "substitution_model"], [169, 0, 0, "-", "taxa"], [170, 0, 0, "-", "tree_height_transform"], [171, 0, 0, "-", "tree_likelihood"], [172, 0, 0, "-", "tree_model"], [173, 0, 0, "-", "tree_model_flexible"]], "torchtree.evolution.alignment": [[43, 3, 1, "", "Alignment"], [43, 1, 1, "", "Sequence"], [43, 2, 1, "", "calculate_F3x4"], [43, 2, 1, "", "calculate_F3x4_from_nucleotide"], [43, 2, 1, "", "calculate_frequencies"], [43, 2, 1, "", "calculate_frequencies_per_codon_position"], [43, 2, 1, "", "calculate_kappa"], [43, 2, 1, "", "calculate_substitutions"], [43, 2, 1, "", "calculate_ts_tv"], [43, 2, 1, "", "read_fasta_sequences"]], "torchtree.evolution.alignment.Alignment": [[43, 5, 1, "", "data_type"], [43, 4, 1, "", "from_json"], [43, 4, 1, "", "get"], [43, 5, 1, "", "sequence_size"], [43, 5, 1, "", "taxa"]], "torchtree.evolution.attribute_pattern": [[44, 3, 1, "", "AttributePattern"]], "torchtree.evolution.attribute_pattern.AttributePattern": [[44, 4, 1, "", "compute_tips_partials"], [44, 4, 1, "", "compute_tips_states"], [44, 4, 1, "", "cpu"], [44, 4, 1, "", "cuda"], [44, 4, 1, "", "from_json"], [44, 4, 1, "", "handle_model_changed"], [44, 4, 1, "", "handle_parameter_changed"]], "torchtree.evolution.bdsk": [[45, 3, 1, "", "BDSKModel"], [45, 3, 1, "", "PiecewiseConstantBirthDeath"], [45, 2, 1, "", "epidemiology_to_birth_death"]], "torchtree.evolution.bdsk.BDSKModel": [[45, 4, 1, "", "from_json"]], "torchtree.evolution.bdsk.PiecewiseConstantBirthDeath": [[45, 7, 1, "", "arg_constraints"], [45, 4, 1, "", "log_p"], [45, 4, 1, "", "log_prob"], [45, 4, 1, "", "log_q"], [45, 4, 1, "", "p0"], [45, 7, 1, "", "support"]], "torchtree.evolution.birth_death": [[46, 3, 1, "", "BirthDeath"], [46, 3, 1, "", "BirthDeathModel"]], "torchtree.evolution.birth_death.BirthDeath": [[46, 7, 1, "", "arg_constraints"], [46, 4, 1, "", "log_p"], [46, 4, 1, "", "log_prob"], [46, 4, 1, "", "log_q"]], "torchtree.evolution.birth_death.BirthDeathModel": [[46, 4, 1, "", "from_json"], [46, 4, 1, "", "handle_model_changed"]], "torchtree.evolution.branch_model": [[47, 3, 1, "", "AbstractClockModel"], [47, 3, 1, "", "BranchModel"], [47, 3, 1, "", "SimpleClockModel"], [47, 3, 1, "", "StrictClockModel"]], "torchtree.evolution.branch_model.AbstractClockModel": [[47, 4, 1, "", "handle_model_changed"], [47, 4, 1, "", "handle_parameter_changed"]], "torchtree.evolution.branch_model.BranchModel": [[47, 5, 1, "", "rates"]], "torchtree.evolution.branch_model.SimpleClockModel": [[47, 4, 1, "", "from_json"], [47, 4, 1, "", "json_factory"], [47, 5, 1, "", "rates"]], "torchtree.evolution.branch_model.StrictClockModel": [[47, 4, 1, "", "from_json"], [47, 5, 1, "", "rates"]], "torchtree.evolution.coalescent": [[48, 3, 1, "", "AbstractCoalescentDistribution"], [48, 3, 1, "", "AbstractCoalescentModel"], [48, 3, 1, "", "ConstantCoalescent"], [48, 3, 1, "", "ConstantCoalescentModel"], [48, 3, 1, "", "ExponentialCoalescent"], [48, 3, 1, "", "ExponentialCoalescentModel"], [48, 3, 1, "", "FakeTreeModel"], [48, 3, 1, "", "PiecewiseConstantCoalescent"], [48, 3, 1, "", "PiecewiseConstantCoalescentGrid"], [48, 3, 1, "", "PiecewiseConstantCoalescentGridModel"], [48, 3, 1, "", "PiecewiseConstantCoalescentModel"], [48, 3, 1, "", "PiecewiseExponentialCoalescentGrid"], [48, 3, 1, "", "SoftPiecewiseConstantCoalescentGrid"], [48, 2, 1, "", "process_data_coalesent"]], "torchtree.evolution.coalescent.AbstractCoalescentDistribution": [[48, 7, 1, "", "arg_constraints"], [48, 7, 1, "", "has_rsample"], [48, 4, 1, "", "maximum_likelihood"], [48, 7, 1, "", "support"]], "torchtree.evolution.coalescent.ConstantCoalescent": [[48, 7, 1, "", "has_rsample"], [48, 4, 1, "", "log_prob"], [48, 4, 1, "", "maximum_likelihood"], [48, 4, 1, "", "rsample"]], "torchtree.evolution.coalescent.ConstantCoalescentModel": [[48, 4, 1, "", "from_json"]], "torchtree.evolution.coalescent.ExponentialCoalescent": [[48, 7, 1, "", "arg_constraints"], [48, 7, 1, "", "has_rsample"], [48, 4, 1, "", "log_prob"], [48, 7, 1, "", "support"]], "torchtree.evolution.coalescent.ExponentialCoalescentModel": [[48, 4, 1, "", "from_json"]], "torchtree.evolution.coalescent.FakeTreeModel": [[48, 5, 1, "", "node_heights"]], "torchtree.evolution.coalescent.PiecewiseConstantCoalescent": [[48, 4, 1, "", "log_prob"], [48, 4, 1, "", "maximum_likelihood"]], "torchtree.evolution.coalescent.PiecewiseConstantCoalescentGrid": [[48, 4, 1, "", "log_prob"]], "torchtree.evolution.coalescent.PiecewiseConstantCoalescentGridModel": [[48, 4, 1, "", "from_json"]], "torchtree.evolution.coalescent.PiecewiseExponentialCoalescentGrid": [[48, 7, 1, "", "arg_constraints"], [48, 7, 1, "", "has_rsample"], [48, 4, 1, "", "log_prob"], [48, 7, 1, "", "support"]], "torchtree.evolution.coalescent.SoftPiecewiseConstantCoalescentGrid": [[48, 4, 1, "", "log_prob"]], "torchtree.evolution.datatype": [[49, 3, 1, "", "AbstractDataType"], [49, 3, 1, "", "AminoAcidDataType"], [49, 3, 1, "", "CodonDataType"], [49, 3, 1, "", "DataType"], [49, 3, 1, "", "GeneralDataType"], [49, 3, 1, "", "NucleotideDataType"]], "torchtree.evolution.datatype.AbstractDataType": [[49, 5, 1, "", "size"], [49, 5, 1, "", "state_count"], [49, 5, 1, "", "states"]], "torchtree.evolution.datatype.AminoAcidDataType": [[49, 7, 1, "", "AMINO_ACIDS"], [49, 7, 1, "id0", "AMINO_ACIDS_AMBIGUITY_STATES"], [49, 7, 1, "", "AMINO_ACIDS_STATES"], [49, 4, 1, "", "encoding"], [49, 4, 1, "", "from_json"], [49, 4, 1, "", "partial"]], "torchtree.evolution.datatype.CodonDataType": [[49, 7, 1, "", "CODON_TRIPLETS"], [49, 7, 1, "", "GENETIC_CODE_NAMES"], [49, 7, 1, "", "GENETIC_CODE_TABLES"], [49, 7, 1, "", "NUMBER_OF_CODONS"], [49, 4, 1, "", "encoding"], [49, 4, 1, "", "from_json"], [49, 4, 1, "", "partial"]], "torchtree.evolution.datatype.DataType": [[49, 4, 1, "", "encoding"], [49, 4, 1, "", "partial"], [49, 5, 1, "", "size"], [49, 5, 1, "", "state_count"], [49, 5, 1, "", "states"]], "torchtree.evolution.datatype.GeneralDataType": [[49, 4, 1, "", "encoding"], [49, 4, 1, "", "from_json"], [49, 4, 1, "", "partial"]], "torchtree.evolution.datatype.NucleotideDataType": [[49, 7, 1, "", "NUCLEOTIDES"], [49, 7, 1, "", "NUCLEOTIDE_AMBIGUITY_STATES"], [49, 7, 1, "", "NUCLEOTIDE_STATES"], [49, 4, 1, "", "encoding"], [49, 4, 1, "", "from_json"], [49, 4, 1, "", "partial"]], "torchtree.evolution.io": [[51, 3, 1, "", "Node"], [51, 2, 1, "", "convert_samples_to_nexus"], [51, 2, 1, "", "extract_taxa"], [51, 2, 1, "", "parse_taxa"], [51, 2, 1, "", "parse_translate"], [51, 2, 1, "", "parse_trees"], [51, 2, 1, "", "random_tree_from_heights"], [51, 2, 1, "", "read_tree"], [51, 2, 1, "", "read_tree_and_alignment"], [51, 2, 1, "", "split_newick"], [51, 2, 1, "", "to_nexus"]], "torchtree.evolution.poisson_tree_likelihood": [[52, 3, 1, "", "PoissonTreeLikelihood"]], "torchtree.evolution.poisson_tree_likelihood.PoissonTreeLikelihood": [[52, 4, 1, "", "from_json"], [52, 4, 1, "", "handle_parameter_changed"]], "torchtree.evolution.rate_transform": [[53, 3, 1, "", "LogDifferenceRateTransform"], [53, 3, 1, "", "RescaledRateTransform"]], "torchtree.evolution.rate_transform.LogDifferenceRateTransform": [[53, 7, 1, "", "bijective"], [53, 4, 1, "", "log_abs_det_jacobian"], [53, 7, 1, "", "sign"]], "torchtree.evolution.rate_transform.RescaledRateTransform": [[53, 7, 1, "", "bijective"], [53, 4, 1, "", "log_abs_det_jacobian"], [53, 7, 1, "", "sign"]], "torchtree.evolution.root_transform": [[54, 3, 1, "", "RootParameter"]], "torchtree.evolution.root_transform.RootParameter": [[54, 4, 1, "", "add_parameter_listener"], [54, 4, 1, "", "fire_parameter_changed"], [54, 4, 1, "", "from_json"], [54, 4, 1, "", "handle_model_changed"], [54, 4, 1, "", "handle_parameter_changed"], [54, 4, 1, "", "parameters"], [54, 5, 1, "", "tensor"], [54, 4, 1, "", "transform"]], "torchtree.evolution.site_model": [[55, 3, 1, "", "ConstantSiteModel"], [55, 3, 1, "", "InvariantSiteModel"], [55, 3, 1, "", "LogNormalSiteModel"], [55, 3, 1, "", "SiteModel"], [55, 3, 1, "", "UnivariateDiscretizedSiteModel"], [55, 3, 1, "", "WeibullSiteModel"]], "torchtree.evolution.site_model.ConstantSiteModel": [[55, 4, 1, "", "cpu"], [55, 4, 1, "", "cuda"], [55, 4, 1, "", "from_json"], [55, 4, 1, "", "handle_model_changed"], [55, 4, 1, "", "handle_parameter_changed"], [55, 4, 1, "", "probabilities"], [55, 4, 1, "", "rates"]], "torchtree.evolution.site_model.InvariantSiteModel": [[55, 4, 1, "", "from_json"], [55, 4, 1, "", "handle_model_changed"], [55, 4, 1, "", "handle_parameter_changed"], [55, 5, 1, "", "invariant"], [55, 4, 1, "", "probabilities"], [55, 4, 1, "", "rates"], [55, 4, 1, "", "update_rates_probs"]], "torchtree.evolution.site_model.LogNormalSiteModel": [[55, 4, 1, "", "from_json"], [55, 5, 1, "", "scale"], [55, 4, 1, "", "update_rates"]], "torchtree.evolution.site_model.SiteModel": [[55, 4, 1, "", "probabilities"], [55, 4, 1, "", "rates"]], "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel": [[55, 4, 1, "", "cpu"], [55, 4, 1, "", "cuda"], [55, 4, 1, "", "handle_model_changed"], [55, 4, 1, "", "handle_parameter_changed"], [55, 5, 1, "", "invariant"], [55, 4, 1, "", "inverse_cdf"], [55, 4, 1, "", "probabilities"], [55, 4, 1, "", "rates"], [55, 4, 1, "", "update_rates"]], "torchtree.evolution.site_model.WeibullSiteModel": [[55, 4, 1, "", "from_json"], [55, 4, 1, "", "inverse_cdf"], [55, 5, 1, "", "shape"]], "torchtree.evolution.site_pattern": [[56, 3, 1, "", "SitePattern"], [56, 2, 1, "", "compress"], [56, 2, 1, "", "compress_alignment"], [56, 2, 1, "", "compress_alignment_states"]], "torchtree.evolution.site_pattern.SitePattern": [[56, 4, 1, "", "compute_tips_partials"], [56, 4, 1, "", "compute_tips_states"], [56, 4, 1, "", "cpu"], [56, 4, 1, "", "cuda"], [56, 4, 1, "", "from_json"], [56, 4, 1, "", "handle_model_changed"], [56, 4, 1, "", "handle_parameter_changed"]], "torchtree.evolution.substitution_model": [[164, 0, 0, "-", "abstract"], [165, 0, 0, "-", "amino_acid"], [166, 0, 0, "-", "codon"], [167, 0, 0, "-", "general"], [168, 0, 0, "-", "nucleotide"]], "torchtree.evolution.substitution_model.abstract": [[57, 3, 1, "", "AbstractSubstitutionModel"], [57, 3, 1, "", "NonSymmetricSubstitutionModel"], [57, 3, 1, "", "SubstitutionModel"], [57, 3, 1, "", "SymmetricSubstitutionModel"]], "torchtree.evolution.substitution_model.abstract.AbstractSubstitutionModel": [[57, 5, 1, "", "frequencies"], [57, 4, 1, "", "norm"]], "torchtree.evolution.substitution_model.abstract.NonSymmetricSubstitutionModel": [[57, 4, 1, "", "eigen"], [57, 4, 1, "", "p_t"]], "torchtree.evolution.substitution_model.abstract.SubstitutionModel": [[57, 5, 1, "", "frequencies"], [57, 4, 1, "", "p_t"], [57, 4, 1, "", "q"]], "torchtree.evolution.substitution_model.abstract.SymmetricSubstitutionModel": [[57, 4, 1, "", "eigen"], [57, 4, 1, "", "p_t"]], "torchtree.evolution.substitution_model.amino_acid": [[58, 3, 1, "", "LG"], [58, 3, 1, "", "WAG"]], "torchtree.evolution.substitution_model.amino_acid.LG": [[58, 4, 1, "", "from_json"]], "torchtree.evolution.substitution_model.amino_acid.WAG": [[58, 4, 1, "", "from_json"]], "torchtree.evolution.substitution_model.codon": [[59, 3, 1, "", "MG94"]], "torchtree.evolution.substitution_model.codon.MG94": [[59, 4, 1, "", "from_json"], [59, 4, 1, "", "handle_model_changed"], [59, 4, 1, "", "handle_parameter_changed"], [59, 4, 1, "", "q"]], "torchtree.evolution.substitution_model.general": [[60, 3, 1, "", "EmpiricalSubstitutionModel"], [60, 3, 1, "", "GeneralJC69"], [60, 3, 1, "", "GeneralNonSymmetricSubstitutionModel"], [60, 3, 1, "", "GeneralSymmetricSubstitutionModel"]], "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel": [[60, 4, 1, "", "create_rate_matrix"], [60, 4, 1, "", "eigen"], [60, 5, 1, "", "frequencies"], [60, 4, 1, "", "from_json"], [60, 4, 1, "", "handle_model_changed"], [60, 4, 1, "", "handle_parameter_changed"], [60, 4, 1, "", "p_t"], [60, 4, 1, "", "q"]], "torchtree.evolution.substitution_model.general.GeneralJC69": [[60, 4, 1, "", "cpu"], [60, 4, 1, "", "cuda"], [60, 5, 1, "", "frequencies"], [60, 4, 1, "", "from_json"], [60, 4, 1, "", "handle_model_changed"], [60, 4, 1, "", "handle_parameter_changed"], [60, 4, 1, "", "p_t"], [60, 4, 1, "", "q"]], "torchtree.evolution.substitution_model.general.GeneralNonSymmetricSubstitutionModel": [[60, 4, 1, "", "from_json"], [60, 4, 1, "", "handle_model_changed"], [60, 4, 1, "", "handle_parameter_changed"], [60, 4, 1, "", "q"], [60, 5, 1, "", "rates"]], "torchtree.evolution.substitution_model.general.GeneralSymmetricSubstitutionModel": [[60, 4, 1, "", "from_json"], [60, 4, 1, "", "handle_model_changed"], [60, 4, 1, "", "handle_parameter_changed"], [60, 4, 1, "", "q"], [60, 5, 1, "", "rates"]], "torchtree.evolution.substitution_model.nucleotide": [[62, 3, 1, "", "GTR"], [62, 3, 1, "", "HKY"], [62, 3, 1, "", "JC69"]], "torchtree.evolution.substitution_model.nucleotide.GTR": [[62, 4, 1, "", "from_json"], [62, 4, 1, "", "handle_model_changed"], [62, 4, 1, "", "handle_parameter_changed"], [62, 4, 1, "", "q"], [62, 5, 1, "", "rates"]], "torchtree.evolution.substitution_model.nucleotide.HKY": [[62, 4, 1, "", "from_json"], [62, 4, 1, "", "handle_model_changed"], [62, 4, 1, "", "handle_parameter_changed"], [62, 5, 1, "", "kappa"], [62, 4, 1, "", "p_t_analytical"], [62, 4, 1, "", "q"]], "torchtree.evolution.substitution_model.nucleotide.JC69": [[62, 4, 1, "", "cpu"], [62, 4, 1, "", "cuda"], [62, 5, 1, "", "frequencies"], [62, 4, 1, "", "from_json"], [62, 4, 1, "", "handle_model_changed"], [62, 4, 1, "", "handle_parameter_changed"], [62, 4, 1, "", "p_t"], [62, 4, 1, "", "q"]], "torchtree.evolution.taxa": [[63, 3, 1, "", "Taxa"], [63, 3, 1, "", "Taxon"]], "torchtree.evolution.taxa.Taxa": [[63, 4, 1, "", "from_json"]], "torchtree.evolution.taxa.Taxon": [[63, 4, 1, "", "from_json"]], "torchtree.evolution.tree_height_transform": [[64, 3, 1, "", "DifferenceNodeHeightTransform"], [64, 3, 1, "", "GeneralNodeHeightTransform"]], "torchtree.evolution.tree_height_transform.DifferenceNodeHeightTransform": [[64, 7, 1, "", "bijective"], [64, 4, 1, "", "log_abs_det_jacobian"], [64, 7, 1, "", "sign"]], "torchtree.evolution.tree_height_transform.GeneralNodeHeightTransform": [[64, 7, 1, "", "bijective"], [64, 4, 1, "", "log_abs_det_jacobian"], [64, 7, 1, "", "sign"], [64, 4, 1, "", "sort_indices"], [64, 4, 1, "", "update_bounds"]], "torchtree.evolution.tree_likelihood": [[65, 3, 1, "", "TreeLikelihoodModel"], [65, 2, 1, "", "calculate_treelikelihood"], [65, 2, 1, "", "calculate_treelikelihood_discrete"], [65, 2, 1, "", "calculate_treelikelihood_discrete_rescaled"], [65, 2, 1, "", "calculate_treelikelihood_discrete_safe"], [65, 2, 1, "", "calculate_treelikelihood_tip_states_discrete"], [65, 2, 1, "", "calculate_treelikelihood_tip_states_discrete_rescaled"]], "torchtree.evolution.tree_likelihood.TreeLikelihoodModel": [[65, 4, 1, "", "calculate_with_tip_partials"], [65, 4, 1, "", "calculate_with_tip_states"], [65, 4, 1, "", "from_json"], [65, 4, 1, "", "handle_parameter_changed"]], "torchtree.evolution.tree_model": [[66, 3, 1, "", "AbstractTreeModel"], [66, 3, 1, "", "ReparameterizedTimeTreeModel"], [66, 3, 1, "", "TimeTreeModel"], [66, 3, 1, "", "TreeModel"], [66, 3, 1, "", "UnRootedTreeModel"], [66, 2, 1, "", "heights_from_branch_lengths"], [66, 2, 1, "", "heights_to_branch_lengths"], [66, 2, 1, "", "initialize_dates_from_taxa"], [66, 2, 1, "", "parse_tree"], [66, 2, 1, "", "setup_dates"], [66, 2, 1, "", "setup_indexes"]], "torchtree.evolution.tree_model.AbstractTreeModel": [[66, 4, 1, "", "as_newick"], [66, 4, 1, "", "handle_model_changed"], [66, 5, 1, "", "postorder"], [66, 5, 1, "", "taxa"], [66, 4, 1, "", "update_traversals"], [66, 4, 1, "", "write_newick"]], "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel": [[66, 4, 1, "", "cpu"], [66, 4, 1, "", "cuda"], [66, 4, 1, "", "from_json"], [66, 4, 1, "", "handle_model_changed"], [66, 4, 1, "", "handle_parameter_changed"], [66, 4, 1, "", "json_factory"], [66, 5, 1, "", "node_heights"], [66, 4, 1, "", "update_node_heights"]], "torchtree.evolution.tree_model.TimeTreeModel": [[66, 4, 1, "", "branch_lengths"], [66, 4, 1, "", "cpu"], [66, 4, 1, "", "cuda"], [66, 4, 1, "", "from_json"], [66, 4, 1, "", "handle_parameter_changed"], [66, 4, 1, "", "json_factory"], [66, 5, 1, "", "node_heights"], [66, 4, 1, "", "update_leaf_heights"], [66, 4, 1, "", "update_traversals"]], "torchtree.evolution.tree_model.TreeModel": [[66, 4, 1, "", "branch_lengths"], [66, 5, 1, "", "postorder"], [66, 5, 1, "", "taxa"], [66, 4, 1, "", "write_newick"]], "torchtree.evolution.tree_model.UnRootedTreeModel": [[66, 4, 1, "", "branch_lengths"], [66, 4, 1, "", "from_json"], [66, 4, 1, "", "handle_parameter_changed"], [66, 4, 1, "", "json_factory"]], "torchtree.evolution.tree_model_flexible": [[67, 3, 1, "", "FlexibleTimeTreeModel"]], "torchtree.evolution.tree_model_flexible.FlexibleTimeTreeModel": [[67, 4, 1, "", "from_json"], [67, 4, 1, "", "json_factory"]], "torchtree.inference": [[175, 0, 0, "-", "hmc"], [183, 0, 0, "-", "mcmc"], [186, 0, 0, "-", "sampler"], [187, 0, 0, "-", "utils"]], "torchtree.inference.hmc": [[176, 0, 0, "-", "adaptation"], [177, 0, 0, "-", "adaptors"], [178, 0, 0, "-", "hamiltonian"], [179, 0, 0, "-", "hmc"], [180, 0, 0, "-", "integrator"], [181, 0, 0, "-", "operator"], [182, 0, 0, "-", "stan_adaptation"]], "torchtree.inference.hmc.adaptation": [[69, 3, 1, "", "AdaptiveStepSize"], [69, 3, 1, "", "Adaptor"], [69, 3, 1, "", "DualAveragingStepSize"], [69, 3, 1, "", "MassMatrixAdaptor"], [69, 3, 1, "", "WarmupAdaptation"], [69, 2, 1, "", "find_reasonable_step_size"]], "torchtree.inference.hmc.adaptation.AdaptiveStepSize": [[69, 4, 1, "", "from_json"], [69, 4, 1, "", "learn"], [69, 4, 1, "", "restart"]], "torchtree.inference.hmc.adaptation.Adaptor": [[69, 4, 1, "", "learn"], [69, 4, 1, "", "restart"]], "torchtree.inference.hmc.adaptation.DualAveragingStepSize": [[69, 4, 1, "", "from_json"], [69, 4, 1, "", "learn"], [69, 4, 1, "", "restart"]], "torchtree.inference.hmc.adaptation.MassMatrixAdaptor": [[69, 4, 1, "", "from_json"], [69, 4, 1, "", "learn"], [69, 5, 1, "", "mass_matrix"], [69, 4, 1, "", "restart"]], "torchtree.inference.hmc.adaptation.WarmupAdaptation": [[69, 5, 1, "", "inverse_mass_matrix"], [69, 5, 1, "", "mass_matrix"], [69, 5, 1, "", "sqrt_mass_matrix"], [69, 5, 1, "", "step_size"]], "torchtree.inference.hmc.hamiltonian": [[71, 3, 1, "", "Hamiltonian"]], "torchtree.inference.hmc.hamiltonian.Hamiltonian": [[71, 4, 1, "", "from_json"], [71, 4, 1, "", "handle_parameter_changed"], [71, 4, 1, "", "kinetic_energy"], [71, 4, 1, "", "potential_energy"], [71, 4, 1, "", "sample_momentum"]], "torchtree.inference.hmc.hmc": [[72, 3, 1, "", "HMC"]], "torchtree.inference.hmc.hmc.HMC": [[72, 4, 1, "", "find_reasonable_step_size"], [72, 4, 1, "", "from_json"], [72, 4, 1, "", "hamiltonian"], [72, 4, 1, "", "run"], [72, 4, 1, "", "sample_momentum"]], "torchtree.inference.hmc.integrator": [[74, 3, 1, "", "Integrator"], [74, 3, 1, "", "LeapfrogIntegrator"], [74, 2, 1, "", "set_tensor"]], "torchtree.inference.hmc.integrator.LeapfrogIntegrator": [[74, 4, 1, "", "from_json"]], "torchtree.inference.hmc.operator": [[75, 3, 1, "", "HMCOperator"]], "torchtree.inference.hmc.operator.HMCOperator": [[75, 4, 1, "", "adaptable_parameter"], [75, 4, 1, "", "from_json"], [75, 4, 1, "", "handle_parameter_changed"], [75, 5, 1, "", "mass_matrix"], [75, 4, 1, "", "set_adaptable_parameter"], [75, 4, 1, "", "tune"], [75, 5, 1, "", "tuning_parameter"], [75, 4, 1, "", "update_mass_matrices"]], "torchtree.inference.hmc.stan_adaptation": [[76, 3, 1, "", "StanWindowedAdaptation"]], "torchtree.inference.hmc.stan_adaptation.StanWindowedAdaptation": [[76, 4, 1, "", "from_json"], [76, 4, 1, "", "learn"], [76, 4, 1, "", "restart"]], "torchtree.inference.mcmc": [[184, 0, 0, "-", "mcmc"], [185, 0, 0, "-", "operator"]], "torchtree.inference.mcmc.mcmc": [[79, 3, 1, "", "MCMC"]], "torchtree.inference.mcmc.mcmc.MCMC": [[79, 4, 1, "", "from_json"], [79, 4, 1, "", "run"]], "torchtree.inference.mcmc.operator": [[80, 3, 1, "", "MCMCOperator"], [80, 3, 1, "", "ScalerOperator"], [80, 3, 1, "", "SlidingWindowOperator"]], "torchtree.inference.mcmc.operator.MCMCOperator": [[80, 4, 1, "", "accept"], [80, 5, 1, "", "adaptable_parameter"], [80, 4, 1, "", "reject"], [80, 4, 1, "", "set_adaptable_parameter"], [80, 4, 1, "", "step"], [80, 4, 1, "", "tune"], [80, 5, 1, "", "tuning_parameter"]], "torchtree.inference.mcmc.operator.ScalerOperator": [[80, 4, 1, "", "adaptable_parameter"], [80, 4, 1, "", "from_json"], [80, 4, 1, "", "set_adaptable_parameter"], [80, 5, 1, "", "tuning_parameter"]], "torchtree.inference.mcmc.operator.SlidingWindowOperator": [[80, 4, 1, "", "adaptable_parameter"], [80, 4, 1, "", "from_json"], [80, 4, 1, "", "set_adaptable_parameter"], [80, 5, 1, "", "tuning_parameter"]], "torchtree.inference.sampler": [[81, 3, 1, "", "Sampler"]], "torchtree.inference.sampler.Sampler": [[81, 4, 1, "", "from_json"], [81, 4, 1, "", "run"]], "torchtree.inference.utils": [[82, 2, 1, "", "extract_tensors_and_parameters"]], "torchtree.math": [[83, 2, 1, "", "soft_max"], [83, 2, 1, "", "soft_searchsorted"], [83, 2, 1, "", "soft_sort"]], "torchtree.nf": [[190, 0, 0, "-", "energy_functions"], [191, 0, 0, "-", "flow"], [192, 0, 0, "-", "planar"], [193, 0, 0, "-", "realnvp"]], "torchtree.nf.energy_functions": [[84, 3, 1, "", "EnergyFunctionModel"], [84, 2, 1, "", "w1"], [84, 2, 1, "", "w2"], [84, 2, 1, "", "w3"]], "torchtree.nf.energy_functions.EnergyFunctionModel": [[84, 4, 1, "", "from_json"], [84, 4, 1, "", "handle_model_changed"]], "torchtree.nf.flow": [[85, 3, 1, "", "NormalizingFlow"]], "torchtree.nf.flow.NormalizingFlow": [[85, 4, 1, "", "apply_flow"], [85, 4, 1, "", "cpu"], [85, 4, 1, "", "cuda"], [85, 4, 1, "", "entropy"], [85, 4, 1, "", "forward"], [85, 4, 1, "", "from_json"], [85, 4, 1, "", "log_prob"], [85, 4, 1, "", "parameters"], [85, 4, 1, "", "rsample"], [85, 4, 1, "", "sample"], [85, 4, 1, "", "to"]], "torchtree.nf.planar": [[87, 3, 1, "", "PlanarTransform"]], "torchtree.nf.planar.PlanarTransform": [[87, 4, 1, "", "forward"], [87, 4, 1, "", "log_abs_det_jacobian"], [87, 4, 1, "", "u_hat"]], "torchtree.nf.realnvp": [[88, 3, 1, "", "BatchNorm"], [88, 3, 1, "", "FlowSequential"], [88, 3, 1, "", "LinearMaskedCoupling"], [88, 3, 1, "", "RealNVP"]], "torchtree.nf.realnvp.BatchNorm": [[88, 4, 1, "", "forward"], [88, 4, 1, "", "inverse"]], "torchtree.nf.realnvp.FlowSequential": [[88, 4, 1, "", "forward"], [88, 4, 1, "", "inverse"]], "torchtree.nf.realnvp.LinearMaskedCoupling": [[88, 4, 1, "", "forward"], [88, 4, 1, "", "inverse"]], "torchtree.nf.realnvp.RealNVP": [[88, 4, 1, "", "apply_flow"], [88, 5, 1, "", "batch_shape"], [88, 4, 1, "", "entropy"], [88, 4, 1, "", "forward"], [88, 4, 1, "", "from_json"], [88, 4, 1, "", "inverse"], [88, 4, 1, "", "log_prob"], [88, 4, 1, "", "parameters"], [88, 4, 1, "", "rsample"], [88, 4, 1, "", "sample"]], "torchtree.nn": [[195, 0, 0, "-", "module"]], "torchtree.nn.module": [[90, 3, 1, "", "Module"]], "torchtree.nn.module.Module": [[90, 4, 1, "", "cpu"], [90, 4, 1, "", "cuda"], [90, 4, 1, "", "from_json"], [90, 5, 1, "", "module"], [90, 4, 1, "", "to"]], "torchtree.ops": [[197, 0, 0, "-", "dual_averaging"], [198, 0, 0, "-", "welford"]], "torchtree.ops.dual_averaging": [[91, 3, 1, "", "DualAveraging"]], "torchtree.ops.dual_averaging.DualAveraging": [[91, 4, 1, "", "restart"], [91, 4, 1, "", "step"]], "torchtree.ops.welford": [[93, 3, 1, "", "WelfordVariance"]], "torchtree.ops.welford.WelfordVariance": [[93, 4, 1, "", "add_sample"], [93, 4, 1, "", "mean"], [93, 4, 1, "", "reset"], [93, 4, 1, "", "variance"]], "torchtree.optim": [[200, 0, 0, "-", "convergence"], [201, 0, 0, "-", "lr_scheduler"], [202, 0, 0, "-", "optimizer"]], "torchtree.optim.convergence": [[94, 3, 1, "", "BaseConvergence"], [94, 3, 1, "", "StanVariationalConvergence"], [94, 3, 1, "", "VariationalConvergence"]], "torchtree.optim.convergence.BaseConvergence": [[94, 4, 1, "", "check"]], "torchtree.optim.convergence.StanVariationalConvergence": [[94, 4, 1, "", "check"], [94, 4, 1, "", "from_json"], [94, 4, 1, "", "rel_difference"]], "torchtree.optim.convergence.VariationalConvergence": [[94, 4, 1, "", "check"], [94, 4, 1, "", "from_json"]], "torchtree.optim.lr_scheduler": [[96, 3, 1, "", "Scheduler"]], "torchtree.optim.lr_scheduler.Scheduler": [[96, 4, 1, "", "from_json"], [96, 4, 1, "", "step"]], "torchtree.optim.optimizer": [[97, 3, 1, "", "Optimizer"]], "torchtree.optim.optimizer.Optimizer": [[97, 4, 1, "", "from_json"], [97, 4, 1, "", "run"]], "torchtree.torchtree": [[98, 2, 1, "", "main"]], "torchtree.treeregression": [[99, 2, 1, "", "regression"]], "torchtree.typing": [[100, 1, 1, "", "ID"], [100, 1, 1, "", "ListParameter"], [100, 1, 1, "", "ListTensor"], [100, 1, 1, "", "OrderedDictType"]], "torchtree.variational": [[207, 0, 0, "-", "chi"], [208, 0, 0, "-", "kl"], [209, 0, 0, "-", "renyi"]], "torchtree.variational.chi": [[101, 3, 1, "", "CUBO"]], "torchtree.variational.chi.CUBO": [[101, 4, 1, "", "from_json"], [101, 4, 1, "", "handle_parameter_changed"]], "torchtree.variational.kl": [[103, 3, 1, "", "ELBO"], [103, 3, 1, "", "KLpq"], [103, 3, 1, "", "KLpqImportance"], [103, 3, 1, "", "SELBO"]], "torchtree.variational.kl.ELBO": [[103, 4, 1, "", "from_json"], [103, 4, 1, "", "handle_parameter_changed"]], "torchtree.variational.kl.KLpq": [[103, 4, 1, "", "from_json"], [103, 4, 1, "", "handle_parameter_changed"]], "torchtree.variational.kl.KLpqImportance": [[103, 4, 1, "", "from_json"], [103, 4, 1, "", "handle_parameter_changed"]], "torchtree.variational.kl.SELBO": [[103, 4, 1, "", "from_json"], [103, 4, 1, "", "handle_parameter_changed"]], "torchtree.variational.renyi": [[104, 3, 1, "", "VR"]], "torchtree.variational.renyi.VR": [[104, 4, 1, "", "from_json"], [104, 4, 1, "", "handle_parameter_changed"]]}, "objtypes": {"0": "py:module", "1": "py:data", "2": "py:function", "3": "py:class", "4": "py:method", "5": "py:property", "6": "py:exception", "7": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "data", "Python data"], "2": ["py", "function", "Python function"], "3": ["py", "class", "Python class"], "4": ["py", "method", "Python method"], "5": ["py", "property", "Python property"], "6": ["py", "exception", "Python exception"], "7": ["py", "attribute", "Python attribute"]}, "titleterms": {"torchtre": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209], "_version": 0, "cli": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118], "advi": [1, 109], "modul": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 69, 71, 72, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 87, 88, 90, 91, 93, 94, 96, 97, 98, 99, 100, 101, 103, 104, 195], "content": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "function": [1, 2, 3, 4, 6, 7, 8, 11, 12, 22, 26, 27, 43, 45, 48, 51, 56, 65, 66, 69, 74, 82, 83, 84, 98, 99], "attribut": [1, 3, 26, 43], "evolut": [3, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 110, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173], "hmc": [4, 69, 70, 71, 72, 73, 74, 75, 76, 111, 175, 176, 177, 178, 179, 180, 181, 182], "submodul": [5, 17, 33, 50, 61, 68, 73, 77, 78, 86, 89, 92, 95, 102], "packag": [5, 33, 61, 68, 89, 95, 102, 106], "jacobian": [6, 112], "logger": [7, 18, 113, 124], "map": [8, 114], "plugin": [9, 115], "class": [9, 10, 13, 14, 15, 16, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 79, 80, 81, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 101, 102, 103, 104], "plugin_manag": [10, 116], "prior": [11, 117], "util": [12, 26, 82, 118, 132, 187], "core": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132], "abstractparamet": [13, 120], "classproperty_decor": [14, 121], "contain": [15, 122], "identifi": [16, 123], "model": [19, 125], "paramet": [20, 126], "parameter_encod": [21, 127], "parameter_util": [22, 128], "parametr": [23, 129], "runnabl": [24, 130], "serializ": [25, 131], "distribut": [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], "bayesian_bridg": [27, 134], "ctmc_scale": [28, 135], "deterministic_norm": [29, 136], "gmrf": [31, 138], "gmrf_integr": [32, 139], "inverse_gamma": [34, 140], "joint_distribut": [35, 141], "log_norm": [36, 142], "multivariate_norm": [37, 143], "normal": [38, 144], "one_on_x": [39, 145], "scale_mixtur": [40, 146], "transform": [41, 147], "tree_prior": [42, 148], "align": [43, 150], "attribute_pattern": [44, 151], "bdsk": [45, 152], "birth_death": [46, 153], "branch_model": [47, 154], "coalesc": [48, 155], "datatyp": [49, 156], "subpackag": [50, 68, 77], "io": [51, 157], "poisson_tree_likelihood": [52, 158], "rate_transform": [53, 159], "root_transform": [54, 160], "site_model": [55, 161], "site_pattern": [56, 162], "substitution_model": [57, 58, 59, 60, 61, 62, 163, 164, 165, 166, 167, 168], "abstract": [57, 164], "amino_acid": [58, 165], "codon": [59, 166], "gener": [60, 167], "nucleotid": [62, 168], "taxa": [63, 169], "tree_height_transform": [64, 170], "tree_likelihood": [65, 171], "tree_model": [66, 172], "tree_model_flex": [67, 173], "infer": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "adapt": [69, 176], "adaptor": [70, 177], "hamiltonian": [71, 178], "integr": [74, 180], "oper": [75, 80, 181, 185], "stan_adapt": [76, 182], "mcmc": [78, 79, 80, 183, 184, 185], "sampler": [81, 186], "math": [83, 188], "nf": [84, 85, 86, 87, 88, 189, 190, 191, 192, 193], "energy_funct": [84, 190], "flow": [85, 191], "planar": [87, 192], "realnvp": [88, 193], "nn": [89, 90, 194, 195], "op": [91, 92, 93, 196, 197, 198], "dual_averag": [91, 197], "welford": [93, 198], "optim": [94, 95, 96, 97, 199, 200, 201, 202], "converg": [94, 200], "lr_schedul": [96, 201], "treeregress": [99, 204], "type": [100, 205], "variat": [101, 102, 103, 104, 206, 207, 208, 209], "chi": [101, 207], "kl": [103, 208], "renyi": [104, 209], "bibliographi": 105, "welcom": 106, "": 106, "document": 106}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinxcontrib.bibtex": 9, "sphinx": 57}, "alltitles": {"torchtree._version": [[0, "module-torchtree._version"]], "torchtree.cli.advi": [[1, "module-torchtree.cli.advi"], [109, "module-torchtree.cli.advi"]], "Module Contents": [[1, "module-contents"], [2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [6, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [69, "module-contents"], [71, "module-contents"], [72, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [87, "module-contents"], [88, "module-contents"], [90, "module-contents"], [91, "module-contents"], [93, "module-contents"], [94, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [101, "module-contents"], [103, "module-contents"], [104, "module-contents"]], "Functions": [[1, "functions"], [2, "functions"], [3, "functions"], [4, "functions"], [6, "functions"], [7, "functions"], [8, "functions"], [11, "functions"], [12, "functions"], [22, "functions"], [26, "functions"], [27, "functions"], [43, "functions"], [45, "functions"], [48, "functions"], [51, "functions"], [56, "functions"], [65, "functions"], [66, "functions"], [69, "functions"], [74, "functions"], [82, "functions"], [83, "functions"], [84, "functions"], [98, "functions"], [99, "functions"]], "Attributes": [[1, "attributes"], [3, "attributes"], [26, "attributes"], [43, "attributes"]], "torchtree.cli.cli": [[2, "module-torchtree.cli.cli"]], "torchtree.cli.evolution": [[3, "module-torchtree.cli.evolution"], [110, "module-torchtree.cli.evolution"]], "torchtree.cli.hmc": [[4, "module-torchtree.cli.hmc"], [111, "module-torchtree.cli.hmc"]], "torchtree.cli": [[5, "module-torchtree.cli"], [108, "module-torchtree.cli"]], "Submodules": [[5, "submodules"], [17, "submodules"], [33, "submodules"], [50, "submodules"], [61, "submodules"], [68, "submodules"], [73, "submodules"], [77, "submodules"], [78, "submodules"], [86, "submodules"], [89, "submodules"], [92, "submodules"], [95, "submodules"], [102, "submodules"]], "Package Contents": [[5, "package-contents"], [33, "package-contents"], [61, "package-contents"], [68, "package-contents"], [89, "package-contents"], [95, "package-contents"], [102, "package-contents"]], "torchtree.cli.jacobians": [[6, "module-torchtree.cli.jacobians"], [112, "module-torchtree.cli.jacobians"]], "torchtree.cli.loggers": [[7, "module-torchtree.cli.loggers"], [113, "module-torchtree.cli.loggers"]], "torchtree.cli.map": [[8, "module-torchtree.cli.map"], [114, "module-torchtree.cli.map"]], "torchtree.cli.plugin": [[9, "module-torchtree.cli.plugin"], [115, "module-torchtree.cli.plugin"]], "Classes": [[9, "classes"], [10, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [71, "classes"], [72, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [84, "classes"], [85, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [93, "classes"], [94, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [101, "classes"], [102, "classes"], [103, "classes"], [104, "classes"]], "torchtree.cli.plugin_manager": [[10, "module-torchtree.cli.plugin_manager"], [116, "module-torchtree.cli.plugin_manager"]], "torchtree.cli.priors": [[11, "module-torchtree.cli.priors"], [117, "module-torchtree.cli.priors"]], "torchtree.cli.utils": [[12, "module-torchtree.cli.utils"], [118, "module-torchtree.cli.utils"]], "torchtree.core.abstractparameter": [[13, "module-torchtree.core.abstractparameter"], [120, "module-torchtree.core.abstractparameter"]], "torchtree.core.classproperty_decorator": [[14, "module-torchtree.core.classproperty_decorator"], [121, "module-torchtree.core.classproperty_decorator"]], "torchtree.core.container": [[15, "module-torchtree.core.container"], [122, "module-torchtree.core.container"]], "torchtree.core.identifiable": [[16, "module-torchtree.core.identifiable"], [123, "module-torchtree.core.identifiable"]], "torchtree.core": [[17, "module-torchtree.core"], [119, "module-torchtree.core"]], "torchtree.core.logger": [[18, "module-torchtree.core.logger"], [124, "module-torchtree.core.logger"]], "torchtree.core.model": [[19, "module-torchtree.core.model"], [125, "module-torchtree.core.model"]], "torchtree.core.parameter": [[20, "module-torchtree.core.parameter"], [126, "module-torchtree.core.parameter"]], "torchtree.core.parameter_encoder": [[21, "module-torchtree.core.parameter_encoder"], [127, "module-torchtree.core.parameter_encoder"]], "torchtree.core.parameter_utils": [[22, "module-torchtree.core.parameter_utils"], [128, "module-torchtree.core.parameter_utils"]], "torchtree.core.parametric": [[23, "module-torchtree.core.parametric"], [129, "module-torchtree.core.parametric"]], "torchtree.core.runnable": [[24, "module-torchtree.core.runnable"], [130, "module-torchtree.core.runnable"]], "torchtree.core.serializable": [[25, "module-torchtree.core.serializable"], [131, "module-torchtree.core.serializable"]], "torchtree.core.utils": [[26, "module-torchtree.core.utils"], [132, "module-torchtree.core.utils"]], "torchtree.distributions.bayesian_bridge": [[27, "module-torchtree.distributions.bayesian_bridge"], [134, "module-torchtree.distributions.bayesian_bridge"]], "torchtree.distributions.ctmc_scale": [[28, "module-torchtree.distributions.ctmc_scale"], [135, "module-torchtree.distributions.ctmc_scale"]], "torchtree.distributions.deterministic_normal": [[29, "module-torchtree.distributions.deterministic_normal"], [136, "module-torchtree.distributions.deterministic_normal"]], "torchtree.distributions.distributions": [[30, "module-torchtree.distributions.distributions"], [137, "module-torchtree.distributions.distributions"]], "torchtree.distributions.gmrf": [[31, "module-torchtree.distributions.gmrf"], [138, "module-torchtree.distributions.gmrf"]], "torchtree.distributions.gmrf_integrated": [[32, "module-torchtree.distributions.gmrf_integrated"], [139, "module-torchtree.distributions.gmrf_integrated"]], "torchtree.distributions": [[33, "module-torchtree.distributions"], [133, "module-torchtree.distributions"]], "torchtree.distributions.inverse_gamma": [[34, "module-torchtree.distributions.inverse_gamma"], [140, "module-torchtree.distributions.inverse_gamma"]], "torchtree.distributions.joint_distribution": [[35, "module-torchtree.distributions.joint_distribution"], [141, "module-torchtree.distributions.joint_distribution"]], "torchtree.distributions.log_normal": [[36, "module-torchtree.distributions.log_normal"], [142, "module-torchtree.distributions.log_normal"]], "torchtree.distributions.multivariate_normal": [[37, "module-torchtree.distributions.multivariate_normal"], [143, "module-torchtree.distributions.multivariate_normal"]], "torchtree.distributions.normal": [[38, "module-torchtree.distributions.normal"], [144, "module-torchtree.distributions.normal"]], "torchtree.distributions.one_on_x": [[39, "module-torchtree.distributions.one_on_x"], [145, "module-torchtree.distributions.one_on_x"]], "torchtree.distributions.scale_mixture": [[40, "module-torchtree.distributions.scale_mixture"], [146, "module-torchtree.distributions.scale_mixture"]], "torchtree.distributions.transforms": [[41, "module-torchtree.distributions.transforms"], [147, "module-torchtree.distributions.transforms"]], "torchtree.distributions.tree_prior": [[42, "module-torchtree.distributions.tree_prior"], [148, "module-torchtree.distributions.tree_prior"]], "torchtree.evolution.alignment": [[43, "module-torchtree.evolution.alignment"], [150, "module-torchtree.evolution.alignment"]], "torchtree.evolution.attribute_pattern": [[44, "module-torchtree.evolution.attribute_pattern"], [151, "module-torchtree.evolution.attribute_pattern"]], "torchtree.evolution.bdsk": [[45, "module-torchtree.evolution.bdsk"], [152, "module-torchtree.evolution.bdsk"]], "torchtree.evolution.birth_death": [[46, "module-torchtree.evolution.birth_death"], [153, "module-torchtree.evolution.birth_death"]], "torchtree.evolution.branch_model": [[47, "module-torchtree.evolution.branch_model"], [154, "module-torchtree.evolution.branch_model"]], "torchtree.evolution.coalescent": [[48, "module-torchtree.evolution.coalescent"], [155, "module-torchtree.evolution.coalescent"]], "torchtree.evolution.datatype": [[49, "module-torchtree.evolution.datatype"], [156, "module-torchtree.evolution.datatype"]], "torchtree.evolution": [[50, "module-torchtree.evolution"], [149, "module-torchtree.evolution"]], "Subpackages": [[50, "subpackages"], [68, "subpackages"], [77, "subpackages"]], "torchtree.evolution.io": [[51, "module-torchtree.evolution.io"], [157, "module-torchtree.evolution.io"]], "torchtree.evolution.poisson_tree_likelihood": [[52, "module-torchtree.evolution.poisson_tree_likelihood"], [158, "module-torchtree.evolution.poisson_tree_likelihood"]], "torchtree.evolution.rate_transform": [[53, "module-torchtree.evolution.rate_transform"], [159, "module-torchtree.evolution.rate_transform"]], "torchtree.evolution.root_transform": [[54, "module-torchtree.evolution.root_transform"], [160, "module-torchtree.evolution.root_transform"]], "torchtree.evolution.site_model": [[55, "module-torchtree.evolution.site_model"], [161, "module-torchtree.evolution.site_model"]], "torchtree.evolution.site_pattern": [[56, "module-torchtree.evolution.site_pattern"], [162, "module-torchtree.evolution.site_pattern"]], "torchtree.evolution.substitution_model.abstract": [[57, "module-torchtree.evolution.substitution_model.abstract"], [164, "module-torchtree.evolution.substitution_model.abstract"]], "torchtree.evolution.substitution_model.amino_acid": [[58, "module-torchtree.evolution.substitution_model.amino_acid"], [165, "module-torchtree.evolution.substitution_model.amino_acid"]], "torchtree.evolution.substitution_model.codon": [[59, "module-torchtree.evolution.substitution_model.codon"], [166, "module-torchtree.evolution.substitution_model.codon"]], "torchtree.evolution.substitution_model.general": [[60, "module-torchtree.evolution.substitution_model.general"], [167, "module-torchtree.evolution.substitution_model.general"]], "torchtree.evolution.substitution_model": [[61, "module-torchtree.evolution.substitution_model"], [163, "module-torchtree.evolution.substitution_model"]], "torchtree.evolution.substitution_model.nucleotide": [[62, "module-torchtree.evolution.substitution_model.nucleotide"], [168, "module-torchtree.evolution.substitution_model.nucleotide"]], "torchtree.evolution.taxa": [[63, "module-torchtree.evolution.taxa"], [169, "module-torchtree.evolution.taxa"]], "torchtree.evolution.tree_height_transform": [[64, "module-torchtree.evolution.tree_height_transform"], [170, "module-torchtree.evolution.tree_height_transform"]], "torchtree.evolution.tree_likelihood": [[65, "module-torchtree.evolution.tree_likelihood"], [171, "module-torchtree.evolution.tree_likelihood"]], "torchtree.evolution.tree_model": [[66, "module-torchtree.evolution.tree_model"], [172, "module-torchtree.evolution.tree_model"]], "torchtree.evolution.tree_model_flexible": [[67, "module-torchtree.evolution.tree_model_flexible"], [173, "module-torchtree.evolution.tree_model_flexible"]], "torchtree": [[68, "module-torchtree"], [107, "module-torchtree"]], "torchtree.inference.hmc.adaptation": [[69, "module-torchtree.inference.hmc.adaptation"], [176, "module-torchtree.inference.hmc.adaptation"]], "torchtree.inference.hmc.adaptors": [[70, "module-torchtree.inference.hmc.adaptors"], [177, "module-torchtree.inference.hmc.adaptors"]], "torchtree.inference.hmc.hamiltonian": [[71, "module-torchtree.inference.hmc.hamiltonian"], [178, "module-torchtree.inference.hmc.hamiltonian"]], "torchtree.inference.hmc.hmc": [[72, "module-torchtree.inference.hmc.hmc"], [179, "module-torchtree.inference.hmc.hmc"]], "torchtree.inference.hmc": [[73, "module-torchtree.inference.hmc"], [175, "module-torchtree.inference.hmc"]], "torchtree.inference.hmc.integrator": [[74, "module-torchtree.inference.hmc.integrator"], [180, "module-torchtree.inference.hmc.integrator"]], "torchtree.inference.hmc.operator": [[75, "module-torchtree.inference.hmc.operator"], [181, "module-torchtree.inference.hmc.operator"]], "torchtree.inference.hmc.stan_adaptation": [[76, "module-torchtree.inference.hmc.stan_adaptation"], [182, "module-torchtree.inference.hmc.stan_adaptation"]], "torchtree.inference": [[77, "module-torchtree.inference"], [174, "module-torchtree.inference"]], "torchtree.inference.mcmc": [[78, "module-torchtree.inference.mcmc"], [183, "module-torchtree.inference.mcmc"]], "torchtree.inference.mcmc.mcmc": [[79, "module-torchtree.inference.mcmc.mcmc"], [184, "module-torchtree.inference.mcmc.mcmc"]], "torchtree.inference.mcmc.operator": [[80, "module-torchtree.inference.mcmc.operator"], [185, "module-torchtree.inference.mcmc.operator"]], "torchtree.inference.sampler": [[81, "module-torchtree.inference.sampler"], [186, "module-torchtree.inference.sampler"]], "torchtree.inference.utils": [[82, "module-torchtree.inference.utils"], [187, "module-torchtree.inference.utils"]], "torchtree.math": [[83, "module-torchtree.math"], [188, "module-torchtree.math"]], "torchtree.nf.energy_functions": [[84, "module-torchtree.nf.energy_functions"], [190, "module-torchtree.nf.energy_functions"]], "torchtree.nf.flow": [[85, "module-torchtree.nf.flow"], [191, "module-torchtree.nf.flow"]], "torchtree.nf": [[86, "module-torchtree.nf"], [189, "module-torchtree.nf"]], "torchtree.nf.planar": [[87, "module-torchtree.nf.planar"], [192, "module-torchtree.nf.planar"]], "torchtree.nf.realnvp": [[88, "module-torchtree.nf.realnvp"], [193, "module-torchtree.nf.realnvp"]], "torchtree.nn": [[89, "module-torchtree.nn"], [194, "module-torchtree.nn"]], "torchtree.nn.module": [[90, "module-torchtree.nn.module"], [195, "module-torchtree.nn.module"]], "torchtree.ops.dual_averaging": [[91, "module-torchtree.ops.dual_averaging"], [197, "module-torchtree.ops.dual_averaging"]], "torchtree.ops": [[92, "module-torchtree.ops"], [196, "module-torchtree.ops"]], "torchtree.ops.welford": [[93, "module-torchtree.ops.welford"], [198, "module-torchtree.ops.welford"]], "torchtree.optim.convergence": [[94, "module-torchtree.optim.convergence"], [200, "module-torchtree.optim.convergence"]], "torchtree.optim": [[95, "module-torchtree.optim"], [199, "module-torchtree.optim"]], "torchtree.optim.lr_scheduler": [[96, "module-torchtree.optim.lr_scheduler"], [201, "module-torchtree.optim.lr_scheduler"]], "torchtree.optim.optimizer": [[97, "module-torchtree.optim.optimizer"], [202, "module-torchtree.optim.optimizer"]], "torchtree.torchtree": [[98, "module-torchtree.torchtree"], [203, "module-torchtree.torchtree"]], "torchtree.treeregression": [[99, "module-torchtree.treeregression"], [204, "module-torchtree.treeregression"]], "torchtree.typing": [[100, "module-torchtree.typing"], [205, "module-torchtree.typing"]], "torchtree.variational.chi": [[101, "module-torchtree.variational.chi"], [207, "module-torchtree.variational.chi"]], "torchtree.variational": [[102, "module-torchtree.variational"], [206, "module-torchtree.variational"]], "torchtree.variational.kl": [[103, "module-torchtree.variational.kl"], [208, "module-torchtree.variational.kl"]], "torchtree.variational.renyi": [[104, "module-torchtree.variational.renyi"], [209, "module-torchtree.variational.renyi"]], "Bibliography": [[105, "bibliography"]], "Welcome to torchtree\u2019s documentation!": [[106, "welcome-to-torchtree-s-documentation"]], "Packages": [[106, "packages"]]}, "indexentries": {"module": [[0, "module-torchtree._version"], [1, "module-torchtree.cli.advi"], [2, "module-torchtree.cli.cli"], [3, "module-torchtree.cli.evolution"], [4, "module-torchtree.cli.hmc"], [5, "module-torchtree.cli"], [6, "module-torchtree.cli.jacobians"], [7, "module-torchtree.cli.loggers"], [8, "module-torchtree.cli.map"], [9, "module-torchtree.cli.plugin"], [10, "module-torchtree.cli.plugin_manager"], [11, "module-torchtree.cli.priors"], [12, "module-torchtree.cli.utils"], [13, "module-torchtree.core.abstractparameter"], [14, "module-torchtree.core.classproperty_decorator"], [15, "module-torchtree.core.container"], [16, "module-torchtree.core.identifiable"], [17, "module-torchtree.core"], [18, "module-torchtree.core.logger"], [19, "module-torchtree.core.model"], [20, "module-torchtree.core.parameter"], [21, "module-torchtree.core.parameter_encoder"], [22, "module-torchtree.core.parameter_utils"], [23, "module-torchtree.core.parametric"], [24, "module-torchtree.core.runnable"], [25, "module-torchtree.core.serializable"], [26, "module-torchtree.core.utils"], [27, "module-torchtree.distributions.bayesian_bridge"], [28, "module-torchtree.distributions.ctmc_scale"], [29, "module-torchtree.distributions.deterministic_normal"], [30, "module-torchtree.distributions.distributions"], [31, "module-torchtree.distributions.gmrf"], [32, "module-torchtree.distributions.gmrf_integrated"], [33, "module-torchtree.distributions"], [34, "module-torchtree.distributions.inverse_gamma"], [35, "module-torchtree.distributions.joint_distribution"], [36, "module-torchtree.distributions.log_normal"], [37, "module-torchtree.distributions.multivariate_normal"], [38, "module-torchtree.distributions.normal"], [39, "module-torchtree.distributions.one_on_x"], [40, "module-torchtree.distributions.scale_mixture"], [41, "module-torchtree.distributions.transforms"], [42, "module-torchtree.distributions.tree_prior"], [43, "module-torchtree.evolution.alignment"], [44, "module-torchtree.evolution.attribute_pattern"], [45, "module-torchtree.evolution.bdsk"], [46, "module-torchtree.evolution.birth_death"], [47, "module-torchtree.evolution.branch_model"], [48, "module-torchtree.evolution.coalescent"], [49, "module-torchtree.evolution.datatype"], [50, "module-torchtree.evolution"], [51, "module-torchtree.evolution.io"], [52, "module-torchtree.evolution.poisson_tree_likelihood"], [53, "module-torchtree.evolution.rate_transform"], [54, "module-torchtree.evolution.root_transform"], [55, "module-torchtree.evolution.site_model"], [56, "module-torchtree.evolution.site_pattern"], [57, "module-torchtree.evolution.substitution_model.abstract"], [58, "module-torchtree.evolution.substitution_model.amino_acid"], [59, "module-torchtree.evolution.substitution_model.codon"], [60, "module-torchtree.evolution.substitution_model.general"], [61, "module-torchtree.evolution.substitution_model"], [62, "module-torchtree.evolution.substitution_model.nucleotide"], [63, "module-torchtree.evolution.taxa"], [64, "module-torchtree.evolution.tree_height_transform"], [65, "module-torchtree.evolution.tree_likelihood"], [66, "module-torchtree.evolution.tree_model"], [67, "module-torchtree.evolution.tree_model_flexible"], [68, "module-torchtree"], [69, "module-torchtree.inference.hmc.adaptation"], [70, "module-torchtree.inference.hmc.adaptors"], [71, "module-torchtree.inference.hmc.hamiltonian"], [72, "module-torchtree.inference.hmc.hmc"], [73, "module-torchtree.inference.hmc"], [74, "module-torchtree.inference.hmc.integrator"], [75, "module-torchtree.inference.hmc.operator"], [76, "module-torchtree.inference.hmc.stan_adaptation"], [77, "module-torchtree.inference"], [78, "module-torchtree.inference.mcmc"], [79, "module-torchtree.inference.mcmc.mcmc"], [80, "module-torchtree.inference.mcmc.operator"], [81, "module-torchtree.inference.sampler"], [82, "module-torchtree.inference.utils"], [83, "module-torchtree.math"], [84, "module-torchtree.nf.energy_functions"], [85, "module-torchtree.nf.flow"], [86, "module-torchtree.nf"], [87, "module-torchtree.nf.planar"], [88, "module-torchtree.nf.realnvp"], [89, "module-torchtree.nn"], [90, "module-torchtree.nn.module"], [91, "module-torchtree.ops.dual_averaging"], [92, "module-torchtree.ops"], [93, "module-torchtree.ops.welford"], [94, "module-torchtree.optim.convergence"], [95, "module-torchtree.optim"], [96, "module-torchtree.optim.lr_scheduler"], [97, "module-torchtree.optim.optimizer"], [98, "module-torchtree.torchtree"], [99, "module-torchtree.treeregression"], [100, "module-torchtree.typing"], [101, "module-torchtree.variational.chi"], [102, "module-torchtree.variational"], [103, "module-torchtree.variational.kl"], [104, "module-torchtree.variational.renyi"], [107, "module-torchtree"], [108, "module-torchtree.cli"], [109, "module-torchtree.cli.advi"], [110, "module-torchtree.cli.evolution"], [111, "module-torchtree.cli.hmc"], [112, "module-torchtree.cli.jacobians"], [113, "module-torchtree.cli.loggers"], [114, "module-torchtree.cli.map"], [115, "module-torchtree.cli.plugin"], [116, "module-torchtree.cli.plugin_manager"], [117, "module-torchtree.cli.priors"], [118, "module-torchtree.cli.utils"], [119, "module-torchtree.core"], [120, "module-torchtree.core.abstractparameter"], [121, "module-torchtree.core.classproperty_decorator"], [122, "module-torchtree.core.container"], [123, "module-torchtree.core.identifiable"], [124, "module-torchtree.core.logger"], [125, "module-torchtree.core.model"], [126, "module-torchtree.core.parameter"], [127, "module-torchtree.core.parameter_encoder"], [128, "module-torchtree.core.parameter_utils"], [129, "module-torchtree.core.parametric"], [130, "module-torchtree.core.runnable"], [131, "module-torchtree.core.serializable"], [132, "module-torchtree.core.utils"], [133, "module-torchtree.distributions"], [134, "module-torchtree.distributions.bayesian_bridge"], [135, "module-torchtree.distributions.ctmc_scale"], [136, "module-torchtree.distributions.deterministic_normal"], [137, "module-torchtree.distributions.distributions"], [138, "module-torchtree.distributions.gmrf"], [139, "module-torchtree.distributions.gmrf_integrated"], [140, "module-torchtree.distributions.inverse_gamma"], [141, "module-torchtree.distributions.joint_distribution"], [142, "module-torchtree.distributions.log_normal"], [143, "module-torchtree.distributions.multivariate_normal"], [144, "module-torchtree.distributions.normal"], [145, "module-torchtree.distributions.one_on_x"], [146, "module-torchtree.distributions.scale_mixture"], [147, "module-torchtree.distributions.transforms"], [148, "module-torchtree.distributions.tree_prior"], [149, "module-torchtree.evolution"], [150, "module-torchtree.evolution.alignment"], [151, "module-torchtree.evolution.attribute_pattern"], [152, "module-torchtree.evolution.bdsk"], [153, "module-torchtree.evolution.birth_death"], [154, "module-torchtree.evolution.branch_model"], [155, "module-torchtree.evolution.coalescent"], [156, "module-torchtree.evolution.datatype"], [157, "module-torchtree.evolution.io"], [158, "module-torchtree.evolution.poisson_tree_likelihood"], [159, "module-torchtree.evolution.rate_transform"], [160, "module-torchtree.evolution.root_transform"], [161, "module-torchtree.evolution.site_model"], [162, "module-torchtree.evolution.site_pattern"], [163, "module-torchtree.evolution.substitution_model"], [164, "module-torchtree.evolution.substitution_model.abstract"], [165, "module-torchtree.evolution.substitution_model.amino_acid"], [166, "module-torchtree.evolution.substitution_model.codon"], [167, "module-torchtree.evolution.substitution_model.general"], [168, "module-torchtree.evolution.substitution_model.nucleotide"], [169, "module-torchtree.evolution.taxa"], [170, "module-torchtree.evolution.tree_height_transform"], [171, "module-torchtree.evolution.tree_likelihood"], [172, "module-torchtree.evolution.tree_model"], [173, "module-torchtree.evolution.tree_model_flexible"], [174, "module-torchtree.inference"], [175, "module-torchtree.inference.hmc"], [176, "module-torchtree.inference.hmc.adaptation"], [177, "module-torchtree.inference.hmc.adaptors"], [178, "module-torchtree.inference.hmc.hamiltonian"], [179, "module-torchtree.inference.hmc.hmc"], [180, "module-torchtree.inference.hmc.integrator"], [181, "module-torchtree.inference.hmc.operator"], [182, "module-torchtree.inference.hmc.stan_adaptation"], [183, "module-torchtree.inference.mcmc"], [184, "module-torchtree.inference.mcmc.mcmc"], [185, "module-torchtree.inference.mcmc.operator"], [186, "module-torchtree.inference.sampler"], [187, "module-torchtree.inference.utils"], [188, "module-torchtree.math"], [189, "module-torchtree.nf"], [190, "module-torchtree.nf.energy_functions"], [191, "module-torchtree.nf.flow"], [192, "module-torchtree.nf.planar"], [193, "module-torchtree.nf.realnvp"], [194, "module-torchtree.nn"], [195, "module-torchtree.nn.module"], [196, "module-torchtree.ops"], [197, "module-torchtree.ops.dual_averaging"], [198, "module-torchtree.ops.welford"], [199, "module-torchtree.optim"], [200, "module-torchtree.optim.convergence"], [201, "module-torchtree.optim.lr_scheduler"], [202, "module-torchtree.optim.optimizer"], [203, "module-torchtree.torchtree"], [204, "module-torchtree.treeregression"], [205, "module-torchtree.typing"], [206, "module-torchtree.variational"], [207, "module-torchtree.variational.chi"], [208, "module-torchtree.variational.kl"], [209, "module-torchtree.variational.renyi"]], "torchtree._version": [[0, "module-torchtree._version"]], "apply_affine_transform() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.apply_affine_transform"]], "apply_exp_transform() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.apply_exp_transform"]], "apply_sigmoid_transformed() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.apply_sigmoid_transformed"]], "apply_simplex_transform() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.apply_simplex_transform"]], "apply_transforms_for_fullrank() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.apply_transforms_for_fullrank"]], "build_advi() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.build_advi"]], "create_advi() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_advi"]], "create_flexible_variational() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_flexible_variational"]], "create_fullrank() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_fullrank"]], "create_fullrank_from_meanfield() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_fullrank_from_meanfield"]], "create_gamma_distribution() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_gamma_distribution"]], "create_logger() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_logger"]], "create_meanfield() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_meanfield"]], "create_normal_distribution() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_normal_distribution"]], "create_realnp_distribution() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_realnp_distribution"]], "create_realnvp() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_realnvp"]], "create_sampler() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_sampler"]], "create_tril() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_tril"]], "create_variational_model() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_variational_model"]], "create_variational_parser() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_variational_parser"]], "create_weibull_distribution() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_weibull_distribution"]], "gather_parameters() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.gather_parameters"]], "logger (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.logger"]], "torchtree.cli.advi": [[1, "module-torchtree.cli.advi"], [109, "module-torchtree.cli.advi"]], "main() (in module torchtree.cli.cli)": [[2, "torchtree.cli.cli.main"]], "torchtree.cli.cli": [[2, "module-torchtree.cli.cli"]], "add_birth_death() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.add_birth_death"]], "add_coalescent() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.add_coalescent"]], "build_alignment() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.build_alignment"]], "create_alignment() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_alignment"]], "create_bd_prior() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_bd_prior"]], "create_bdsk() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_bdsk"]], "create_bdsk_prior() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_bdsk_prior"]], "create_birth_death() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_birth_death"]], "create_branch_model() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_branch_model"]], "create_clock_prior() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_clock_prior"]], "create_coalesent() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_coalesent"]], "create_constant_bd_prior() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_constant_bd_prior"]], "create_constant_birth_death() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_constant_birth_death"]], "create_data_type() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_data_type"]], "create_evolution_joint() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_evolution_joint"]], "create_evolution_parser() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_evolution_parser"]], "create_evolution_priors() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_evolution_priors"]], "create_general_data_type() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_general_data_type"]], "create_poisson_evolution_joint() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_poisson_evolution_joint"]], "create_poisson_tree_likelihood() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_poisson_tree_likelihood"]], "create_site_model() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_site_model"]], "create_site_model_srd06_mus() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_site_model_srd06_mus"]], "create_site_pattern() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_site_pattern"]], "create_substitution_model() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_substitution_model"]], "create_substitution_model_priors() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_substitution_model_priors"]], "create_taxa() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_taxa"]], "create_time_tree_prior() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_time_tree_prior"]], "create_tree_likelihood() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_tree_likelihood"]], "create_tree_likelihood_general() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_tree_likelihood_general"]], "create_tree_likelihood_single() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_tree_likelihood_single"]], "create_tree_model() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_tree_model"]], "create_ucln_prior() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_ucln_prior"]], "distribution_type() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.distribution_type"]], "get_engine() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.get_engine"]], "is_float() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.is_float"]], "logger (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.logger"]], "parse_distribution() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.parse_distribution"]], "run_tree_regression() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.run_tree_regression"]], "str_or_float() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.str_or_float"]], "torchtree.cli.evolution": [[3, "module-torchtree.cli.evolution"], [110, "module-torchtree.cli.evolution"]], "zero_or_path() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.zero_or_path"]], "build_hmc() (in module torchtree.cli.hmc)": [[4, "torchtree.cli.hmc.build_hmc"]], "create_hmc() (in module torchtree.cli.hmc)": [[4, "torchtree.cli.hmc.create_hmc"]], "create_hmc_operator() (in module torchtree.cli.hmc)": [[4, "torchtree.cli.hmc.create_hmc_operator"]], "create_hmc_parser() (in module torchtree.cli.hmc)": [[4, "torchtree.cli.hmc.create_hmc_parser"]], "create_stan_windowed_adaptation() (in module torchtree.cli.hmc)": [[4, "torchtree.cli.hmc.create_stan_windowed_adaptation"]], "torchtree.cli.hmc": [[4, "module-torchtree.cli.hmc"], [111, "module-torchtree.cli.hmc"]], "plugin_manager (in module torchtree.cli)": [[5, "torchtree.cli.PLUGIN_MANAGER"]], "torchtree.cli": [[5, "module-torchtree.cli"], [108, "module-torchtree.cli"]], "create_jacobians() (in module torchtree.cli.jacobians)": [[6, "torchtree.cli.jacobians.create_jacobians"]], "torchtree.cli.jacobians": [[6, "module-torchtree.cli.jacobians"], [112, "module-torchtree.cli.jacobians"]], "create_loggers() (in module torchtree.cli.loggers)": [[7, "torchtree.cli.loggers.create_loggers"]], "torchtree.cli.loggers": [[7, "module-torchtree.cli.loggers"], [113, "module-torchtree.cli.loggers"]], "build_optimizer() (in module torchtree.cli.map)": [[8, "torchtree.cli.map.build_optimizer"]], "create_logger() (in module torchtree.cli.map)": [[8, "torchtree.cli.map.create_logger"]], "create_map_parser() (in module torchtree.cli.map)": [[8, "torchtree.cli.map.create_map_parser"]], "create_optimizer() (in module torchtree.cli.map)": [[8, "torchtree.cli.map.create_optimizer"]], "create_tree_logger() (in module torchtree.cli.map)": [[8, "torchtree.cli.map.create_tree_logger"]], "torchtree.cli.map": [[8, "module-torchtree.cli.map"], [114, "module-torchtree.cli.map"]], "plugin (class in torchtree.cli.plugin)": [[9, "torchtree.cli.plugin.Plugin"]], "load_arguments() (torchtree.cli.plugin.plugin method)": [[9, "torchtree.cli.plugin.Plugin.load_arguments"]], "process_all() (torchtree.cli.plugin.plugin method)": [[9, "torchtree.cli.plugin.Plugin.process_all"]], "process_coalescent() (torchtree.cli.plugin.plugin method)": [[9, "torchtree.cli.plugin.Plugin.process_coalescent"]], "process_tree_likelihood() (torchtree.cli.plugin.plugin method)": [[9, "torchtree.cli.plugin.Plugin.process_tree_likelihood"]], "torchtree.cli.plugin": [[9, "module-torchtree.cli.plugin"], [115, "module-torchtree.cli.plugin"]], "pluginmanager (class in torchtree.cli.plugin_manager)": [[10, "torchtree.cli.plugin_manager.PluginManager"]], "disable_plugins() (torchtree.cli.plugin_manager.pluginmanager method)": [[10, "torchtree.cli.plugin_manager.PluginManager.disable_plugins"]], "load_arguments() (torchtree.cli.plugin_manager.pluginmanager method)": [[10, "torchtree.cli.plugin_manager.PluginManager.load_arguments"]], "load_plugins() (torchtree.cli.plugin_manager.pluginmanager method)": [[10, "torchtree.cli.plugin_manager.PluginManager.load_plugins"]], "plugins() (torchtree.cli.plugin_manager.pluginmanager method)": [[10, "torchtree.cli.plugin_manager.PluginManager.plugins"]], "torchtree.cli.plugin_manager": [[10, "module-torchtree.cli.plugin_manager"], [116, "module-torchtree.cli.plugin_manager"]], "create_clock_horseshoe_prior() (in module torchtree.cli.priors)": [[11, "torchtree.cli.priors.create_clock_horseshoe_prior"]], "create_one_on_x_prior() (in module torchtree.cli.priors)": [[11, "torchtree.cli.priors.create_one_on_x_prior"]], "torchtree.cli.priors": [[11, "module-torchtree.cli.priors"], [117, "module-torchtree.cli.priors"]], "convert_date_to_real() (in module torchtree.cli.utils)": [[12, "torchtree.cli.utils.convert_date_to_real"]], "length_of_tensor_in_dict_parameter() (in module torchtree.cli.utils)": [[12, "torchtree.cli.utils.length_of_tensor_in_dict_parameter"]], "make_unconstrained() (in module torchtree.cli.utils)": [[12, "torchtree.cli.utils.make_unconstrained"]], "read_dates_from_csv() (in module torchtree.cli.utils)": [[12, "torchtree.cli.utils.read_dates_from_csv"]], "torchtree.cli.utils": [[12, "module-torchtree.cli.utils"], [118, "module-torchtree.cli.utils"]], "abstractparameter (class in torchtree.core.abstractparameter)": [[13, "torchtree.core.abstractparameter.AbstractParameter"]], "device (class in torchtree.core.abstractparameter)": [[13, "torchtree.core.abstractparameter.Device"]], "add_parameter_listener() (torchtree.core.abstractparameter.abstractparameter method)": [[13, "torchtree.core.abstractparameter.AbstractParameter.add_parameter_listener"]], "cpu() (torchtree.core.abstractparameter.device method)": [[13, "torchtree.core.abstractparameter.Device.cpu"]], "cuda() (torchtree.core.abstractparameter.device method)": [[13, "torchtree.core.abstractparameter.Device.cuda"]], "device (torchtree.core.abstractparameter.abstractparameter property)": [[13, "torchtree.core.abstractparameter.AbstractParameter.device"]], "device (torchtree.core.abstractparameter.device property)": [[13, "torchtree.core.abstractparameter.Device.device"]], "dim() (torchtree.core.abstractparameter.abstractparameter method)": [[13, "torchtree.core.abstractparameter.AbstractParameter.dim"]], "dtype (torchtree.core.abstractparameter.abstractparameter property)": [[13, "torchtree.core.abstractparameter.AbstractParameter.dtype"]], "fire_parameter_changed() (torchtree.core.abstractparameter.abstractparameter method)": [[13, "torchtree.core.abstractparameter.AbstractParameter.fire_parameter_changed"]], "parameters() (torchtree.core.abstractparameter.abstractparameter method)": [[13, "torchtree.core.abstractparameter.AbstractParameter.parameters"]], "requires_grad (torchtree.core.abstractparameter.abstractparameter property)": [[13, "torchtree.core.abstractparameter.AbstractParameter.requires_grad"]], "shape (torchtree.core.abstractparameter.abstractparameter property)": [[13, "torchtree.core.abstractparameter.AbstractParameter.shape"]], "tensor (torchtree.core.abstractparameter.abstractparameter property)": [[13, "torchtree.core.abstractparameter.AbstractParameter.tensor"]], "to() (torchtree.core.abstractparameter.device method)": [[13, "torchtree.core.abstractparameter.Device.to"]], "torchtree.core.abstractparameter": [[13, "module-torchtree.core.abstractparameter"], [120, "module-torchtree.core.abstractparameter"]], "classproperty (class in torchtree.core.classproperty_decorator)": [[14, "torchtree.core.classproperty_decorator.classproperty"]], "torchtree.core.classproperty_decorator": [[14, "module-torchtree.core.classproperty_decorator"], [121, "module-torchtree.core.classproperty_decorator"]], "container (class in torchtree.core.container)": [[15, "torchtree.core.container.Container"]], "callables() (torchtree.core.container.container method)": [[15, "torchtree.core.container.Container.callables"]], "from_json() (torchtree.core.container.container class method)": [[15, "torchtree.core.container.Container.from_json"]], "handle_model_changed() (torchtree.core.container.container method)": [[15, "torchtree.core.container.Container.handle_model_changed"]], "handle_parameter_changed() (torchtree.core.container.container method)": [[15, "torchtree.core.container.Container.handle_parameter_changed"]], "params() (torchtree.core.container.container method)": [[15, "torchtree.core.container.Container.params"]], "torchtree.core.container": [[15, "module-torchtree.core.container"], [122, "module-torchtree.core.container"]], "identifiable (class in torchtree.core.identifiable)": [[16, "torchtree.core.identifiable.Identifiable"]], "id (torchtree.core.identifiable.identifiable property)": [[16, "torchtree.core.identifiable.Identifiable.id"]], "torchtree.core.identifiable": [[16, "module-torchtree.core.identifiable"], [123, "module-torchtree.core.identifiable"]], "torchtree.core": [[17, "module-torchtree.core"], [119, "module-torchtree.core"]], "csv (class in torchtree.core.logger)": [[18, "torchtree.core.logger.CSV"]], "containerlogger (class in torchtree.core.logger)": [[18, "torchtree.core.logger.ContainerLogger"]], "dumper (class in torchtree.core.logger)": [[18, "torchtree.core.logger.Dumper"]], "logger (class in torchtree.core.logger)": [[18, "torchtree.core.logger.Logger"]], "loggerinterface (class in torchtree.core.logger)": [[18, "torchtree.core.logger.LoggerInterface"]], "treelogger (class in torchtree.core.logger)": [[18, "torchtree.core.logger.TreeLogger"]], "close() (torchtree.core.logger.containerlogger method)": [[18, "torchtree.core.logger.ContainerLogger.close"]], "close() (torchtree.core.logger.logger method)": [[18, "torchtree.core.logger.Logger.close"]], "close() (torchtree.core.logger.loggerinterface method)": [[18, "torchtree.core.logger.LoggerInterface.close"]], "close() (torchtree.core.logger.treelogger method)": [[18, "torchtree.core.logger.TreeLogger.close"]], "from_json() (torchtree.core.logger.csv class method)": [[18, "torchtree.core.logger.CSV.from_json"]], "from_json() (torchtree.core.logger.containerlogger class method)": [[18, "torchtree.core.logger.ContainerLogger.from_json"]], "from_json() (torchtree.core.logger.dumper class method)": [[18, "torchtree.core.logger.Dumper.from_json"]], "from_json() (torchtree.core.logger.logger class method)": [[18, "torchtree.core.logger.Logger.from_json"]], "from_json() (torchtree.core.logger.treelogger class method)": [[18, "torchtree.core.logger.TreeLogger.from_json"]], "initialize() (torchtree.core.logger.containerlogger method)": [[18, "torchtree.core.logger.ContainerLogger.initialize"]], "initialize() (torchtree.core.logger.logger method)": [[18, "torchtree.core.logger.Logger.initialize"]], "initialize() (torchtree.core.logger.loggerinterface method)": [[18, "torchtree.core.logger.LoggerInterface.initialize"]], "initialize() (torchtree.core.logger.treelogger method)": [[18, "torchtree.core.logger.TreeLogger.initialize"]], "log() (torchtree.core.logger.containerlogger method)": [[18, "torchtree.core.logger.ContainerLogger.log"]], "log() (torchtree.core.logger.logger method)": [[18, "torchtree.core.logger.Logger.log"]], "log() (torchtree.core.logger.loggerinterface method)": [[18, "torchtree.core.logger.LoggerInterface.log"]], "log() (torchtree.core.logger.treelogger method)": [[18, "torchtree.core.logger.TreeLogger.log"]], "run() (torchtree.core.logger.csv method)": [[18, "torchtree.core.logger.CSV.run"]], "run() (torchtree.core.logger.dumper method)": [[18, "torchtree.core.logger.Dumper.run"]], "run() (torchtree.core.logger.loggerinterface method)": [[18, "torchtree.core.logger.LoggerInterface.run"]], "torchtree.core.logger": [[18, "module-torchtree.core.logger"], [124, "module-torchtree.core.logger"]], "callablemodel (class in torchtree.core.model)": [[19, "torchtree.core.model.CallableModel"]], "model (class in torchtree.core.model)": [[19, "torchtree.core.model.Model"]], "add_model_listener() (torchtree.core.model.model method)": [[19, "torchtree.core.model.Model.add_model_listener"]], "add_parameter_listener() (torchtree.core.model.model method)": [[19, "torchtree.core.model.Model.add_parameter_listener"]], "cpu() (torchtree.core.model.model method)": [[19, "torchtree.core.model.Model.cpu"]], "cuda() (torchtree.core.model.model method)": [[19, "torchtree.core.model.Model.cuda"]], "fire_model_changed() (torchtree.core.model.model method)": [[19, "torchtree.core.model.Model.fire_model_changed"]], "handle_model_changed() (torchtree.core.model.callablemodel method)": [[19, "torchtree.core.model.CallableModel.handle_model_changed"]], "handle_parameter_changed() (torchtree.core.model.callablemodel method)": [[19, "torchtree.core.model.CallableModel.handle_parameter_changed"]], "models() (torchtree.core.model.model method)": [[19, "torchtree.core.model.Model.models"]], "remove_model_listener() (torchtree.core.model.model method)": [[19, "torchtree.core.model.Model.remove_model_listener"]], "remove_parameter_listener() (torchtree.core.model.model method)": [[19, "torchtree.core.model.Model.remove_parameter_listener"]], "sample_shape (torchtree.core.model.model property)": [[19, "torchtree.core.model.Model.sample_shape"]], "tag (torchtree.core.model.model property)": [[19, "torchtree.core.model.Model.tag"]], "to() (torchtree.core.model.model method)": [[19, "torchtree.core.model.Model.to"]], "torchtree.core.model": [[19, "module-torchtree.core.model"], [125, "module-torchtree.core.model"]], "catparameter (class in torchtree.core.parameter)": [[20, "torchtree.core.parameter.CatParameter"]], "moduleparameter (class in torchtree.core.parameter)": [[20, "torchtree.core.parameter.ModuleParameter"]], "parameter (class in torchtree.core.parameter)": [[20, "torchtree.core.parameter.Parameter"]], "parameter.to() (in module torchtree.core.parameter)": [[20, "id0"], [20, "id5"], [20, "id6"]], "transformedparameter (class in torchtree.core.parameter)": [[20, "torchtree.core.parameter.TransformedParameter"]], "viewparameter (class in torchtree.core.parameter)": [[20, "torchtree.core.parameter.ViewParameter"]], "add_parameter_listener() (torchtree.core.parameter.catparameter method)": [[20, "torchtree.core.parameter.CatParameter.add_parameter_listener"]], "add_parameter_listener() (torchtree.core.parameter.moduleparameter method)": [[20, "torchtree.core.parameter.ModuleParameter.add_parameter_listener"]], "add_parameter_listener() (torchtree.core.parameter.parameter method)": [[20, "torchtree.core.parameter.Parameter.add_parameter_listener"]], "add_parameter_listener() (torchtree.core.parameter.transformedparameter method)": [[20, "torchtree.core.parameter.TransformedParameter.add_parameter_listener"]], "add_parameter_listener() (torchtree.core.parameter.viewparameter method)": [[20, "torchtree.core.parameter.ViewParameter.add_parameter_listener"]], "apply_transform() (torchtree.core.parameter.transformedparameter method)": [[20, "torchtree.core.parameter.TransformedParameter.apply_transform"]], "assign() (torchtree.core.parameter.viewparameter method)": [[20, "torchtree.core.parameter.ViewParameter.assign"]], "clone() (torchtree.core.parameter.parameter method)": [[20, "torchtree.core.parameter.Parameter.clone"]], "clone() (torchtree.core.parameter.viewparameter method)": [[20, "torchtree.core.parameter.ViewParameter.clone"]], "copy_() (torchtree.core.parameter.parameter method)": [[20, "torchtree.core.parameter.Parameter.copy_"]], "cpu() (torchtree.core.parameter.catparameter method)": [[20, "torchtree.core.parameter.CatParameter.cpu"]], "cpu() (torchtree.core.parameter.moduleparameter method)": [[20, "torchtree.core.parameter.ModuleParameter.cpu"]], "cpu() (torchtree.core.parameter.parameter method)": [[20, "torchtree.core.parameter.Parameter.cpu"]], "cpu() (torchtree.core.parameter.transformedparameter method)": [[20, "torchtree.core.parameter.TransformedParameter.cpu"]], "cpu() (torchtree.core.parameter.viewparameter method)": [[20, "torchtree.core.parameter.ViewParameter.cpu"]], "cuda() (torchtree.core.parameter.catparameter method)": [[20, "torchtree.core.parameter.CatParameter.cuda"]], "cuda() (torchtree.core.parameter.moduleparameter method)": [[20, "torchtree.core.parameter.ModuleParameter.cuda"]], "cuda() (torchtree.core.parameter.parameter method)": [[20, "torchtree.core.parameter.Parameter.cuda"]], "cuda() (torchtree.core.parameter.transformedparameter method)": [[20, "torchtree.core.parameter.TransformedParameter.cuda"]], "cuda() (torchtree.core.parameter.viewparameter method)": [[20, "torchtree.core.parameter.ViewParameter.cuda"]], "detach() (torchtree.core.parameter.parameter method)": [[20, "torchtree.core.parameter.Parameter.detach"]], "device (torchtree.core.parameter.catparameter property)": [[20, "torchtree.core.parameter.CatParameter.device"]], "dtype (torchtree.core.parameter.viewparameter property)": [[20, "torchtree.core.parameter.ViewParameter.dtype"]], "fire_parameter_changed() (torchtree.core.parameter.catparameter method)": [[20, "torchtree.core.parameter.CatParameter.fire_parameter_changed"]], "fire_parameter_changed() (torchtree.core.parameter.moduleparameter method)": [[20, "torchtree.core.parameter.ModuleParameter.fire_parameter_changed"]], "fire_parameter_changed() (torchtree.core.parameter.parameter method)": [[20, "torchtree.core.parameter.Parameter.fire_parameter_changed"]], "fire_parameter_changed() (torchtree.core.parameter.transformedparameter method)": [[20, "torchtree.core.parameter.TransformedParameter.fire_parameter_changed"]], "fire_parameter_changed() (torchtree.core.parameter.viewparameter method)": [[20, "torchtree.core.parameter.ViewParameter.fire_parameter_changed"]], "from_json() (torchtree.core.parameter.catparameter class method)": [[20, "torchtree.core.parameter.CatParameter.from_json"]], "from_json() (torchtree.core.parameter.moduleparameter class method)": [[20, "torchtree.core.parameter.ModuleParameter.from_json"]], "from_json() (torchtree.core.parameter.parameter class method)": [[20, "torchtree.core.parameter.Parameter.from_json"]], "from_json() (torchtree.core.parameter.transformedparameter class method)": [[20, "torchtree.core.parameter.TransformedParameter.from_json"]], "from_json() (torchtree.core.parameter.viewparameter class method)": [[20, "torchtree.core.parameter.ViewParameter.from_json"]], "grad (torchtree.core.parameter.parameter property)": [[20, "torchtree.core.parameter.Parameter.grad"]], "grad_fn (torchtree.core.parameter.parameter property)": [[20, "torchtree.core.parameter.Parameter.grad_fn"]], "handle_model_changed() (torchtree.core.parameter.catparameter method)": [[20, "torchtree.core.parameter.CatParameter.handle_model_changed"]], "handle_model_changed() (torchtree.core.parameter.moduleparameter method)": [[20, "torchtree.core.parameter.ModuleParameter.handle_model_changed"]], "handle_model_changed() (torchtree.core.parameter.transformedparameter method)": [[20, "torchtree.core.parameter.TransformedParameter.handle_model_changed"]], "handle_parameter_changed() (torchtree.core.parameter.catparameter method)": [[20, "torchtree.core.parameter.CatParameter.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.core.parameter.moduleparameter method)": [[20, "torchtree.core.parameter.ModuleParameter.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.core.parameter.transformedparameter method)": [[20, "torchtree.core.parameter.TransformedParameter.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.core.parameter.viewparameter method)": [[20, "torchtree.core.parameter.ViewParameter.handle_parameter_changed"]], "json_factory() (torchtree.core.parameter.parameter static method)": [[20, "torchtree.core.parameter.Parameter.json_factory"]], "json_factory() (torchtree.core.parameter.viewparameter static method)": [[20, "torchtree.core.parameter.ViewParameter.json_factory"]], "parameters() (torchtree.core.parameter.moduleparameter method)": [[20, "torchtree.core.parameter.ModuleParameter.parameters"]], "parameters() (torchtree.core.parameter.transformedparameter method)": [[20, "torchtree.core.parameter.TransformedParameter.parameters"]], "requires_grad (torchtree.core.parameter.catparameter property)": [[20, "torchtree.core.parameter.CatParameter.requires_grad"]], "requires_grad (torchtree.core.parameter.moduleparameter property)": [[20, "torchtree.core.parameter.ModuleParameter.requires_grad"]], "requires_grad (torchtree.core.parameter.parameter property)": [[20, "torchtree.core.parameter.Parameter.requires_grad"]], "requires_grad (torchtree.core.parameter.transformedparameter property)": [[20, "torchtree.core.parameter.TransformedParameter.requires_grad"]], "requires_grad (torchtree.core.parameter.viewparameter property)": [[20, "torchtree.core.parameter.ViewParameter.requires_grad"]], "sample_shape (torchtree.core.parameter.moduleparameter property)": [[20, "torchtree.core.parameter.ModuleParameter.sample_shape"]], "sample_shape (torchtree.core.parameter.transformedparameter property)": [[20, "torchtree.core.parameter.TransformedParameter.sample_shape"]], "shape (torchtree.core.parameter.moduleparameter property)": [[20, "torchtree.core.parameter.ModuleParameter.shape"]], "shape (torchtree.core.parameter.transformedparameter property)": [[20, "torchtree.core.parameter.TransformedParameter.shape"]], "shape (torchtree.core.parameter.viewparameter property)": [[20, "torchtree.core.parameter.ViewParameter.shape"]], "size() (torchtree.core.parameter.parameter method)": [[20, "torchtree.core.parameter.Parameter.size"]], "tensor (torchtree.core.parameter.catparameter property)": [[20, "torchtree.core.parameter.CatParameter.tensor"]], "tensor (torchtree.core.parameter.moduleparameter property)": [[20, "torchtree.core.parameter.ModuleParameter.tensor"]], "tensor (torchtree.core.parameter.parameter property)": [[20, "torchtree.core.parameter.Parameter.tensor"]], "tensor (torchtree.core.parameter.transformedparameter property)": [[20, "torchtree.core.parameter.TransformedParameter.tensor"]], "tensor (torchtree.core.parameter.viewparameter property)": [[20, "torchtree.core.parameter.ViewParameter.tensor"]], "to() (torchtree.core.parameter.catparameter method)": [[20, "torchtree.core.parameter.CatParameter.to"]], "to() (torchtree.core.parameter.moduleparameter method)": [[20, "torchtree.core.parameter.ModuleParameter.to"]], "to() (torchtree.core.parameter.parameter method)": [[20, "torchtree.core.parameter.Parameter.to"]], "to() (torchtree.core.parameter.transformedparameter method)": [[20, "torchtree.core.parameter.TransformedParameter.to"]], "to() (torchtree.core.parameter.viewparameter method)": [[20, "torchtree.core.parameter.ViewParameter.to"]], "torchtree.core.parameter": [[20, "module-torchtree.core.parameter"], [126, "module-torchtree.core.parameter"]], "update() (torchtree.core.parameter.catparameter method)": [[20, "torchtree.core.parameter.CatParameter.update"]], "parameterencoder (class in torchtree.core.parameter_encoder)": [[21, "torchtree.core.parameter_encoder.ParameterEncoder"]], "default() (torchtree.core.parameter_encoder.parameterencoder method)": [[21, "torchtree.core.parameter_encoder.ParameterEncoder.default"]], "torchtree.core.parameter_encoder": [[21, "module-torchtree.core.parameter_encoder"], [127, "module-torchtree.core.parameter_encoder"]], "pack_tensor() (in module torchtree.core.parameter_utils)": [[22, "torchtree.core.parameter_utils.pack_tensor"]], "save_parameters() (in module torchtree.core.parameter_utils)": [[22, "torchtree.core.parameter_utils.save_parameters"]], "torchtree.core.parameter_utils": [[22, "module-torchtree.core.parameter_utils"], [128, "module-torchtree.core.parameter_utils"]], "modellistener (class in torchtree.core.parametric)": [[23, "torchtree.core.parametric.ModelListener"]], "parameterlistener (class in torchtree.core.parametric)": [[23, "torchtree.core.parametric.ParameterListener"]], "parametric (class in torchtree.core.parametric)": [[23, "torchtree.core.parametric.Parametric"]], "handle_model_changed() (torchtree.core.parametric.modellistener method)": [[23, "torchtree.core.parametric.ModelListener.handle_model_changed"]], "handle_parameter_changed() (torchtree.core.parametric.parameterlistener method)": [[23, "torchtree.core.parametric.ParameterListener.handle_parameter_changed"]], "parameters() (torchtree.core.parametric.parametric method)": [[23, "torchtree.core.parametric.Parametric.parameters"]], "register_model() (torchtree.core.parametric.parametric method)": [[23, "torchtree.core.parametric.Parametric.register_model"]], "register_parameter() (torchtree.core.parametric.parametric method)": [[23, "torchtree.core.parametric.Parametric.register_parameter"]], "torchtree.core.parametric": [[23, "module-torchtree.core.parametric"], [129, "module-torchtree.core.parametric"]], "runnable (class in torchtree.core.runnable)": [[24, "torchtree.core.runnable.Runnable"]], "run() (torchtree.core.runnable.runnable method)": [[24, "torchtree.core.runnable.Runnable.run"]], "torchtree.core.runnable": [[24, "module-torchtree.core.runnable"], [130, "module-torchtree.core.runnable"]], "jsonserializable (class in torchtree.core.serializable)": [[25, "torchtree.core.serializable.JSONSerializable"]], "from_json() (torchtree.core.serializable.jsonserializable class method)": [[25, "torchtree.core.serializable.JSONSerializable.from_json"]], "from_json_safe() (torchtree.core.serializable.jsonserializable class method)": [[25, "torchtree.core.serializable.JSONSerializable.from_json_safe"]], "torchtree.core.serializable": [[25, "module-torchtree.core.serializable"], [131, "module-torchtree.core.serializable"]], "alternativeattributeerror": [[26, "torchtree.core.utils.AlternativeAttributeError"]], "jsonparseerror": [[26, "torchtree.core.utils.JSONParseError"]], "registered_classes (in module torchtree.core.utils)": [[26, "torchtree.core.utils.REGISTERED_CLASSES"]], "signalhandler (class in torchtree.core.utils)": [[26, "torchtree.core.utils.SignalHandler"]], "tensorencoder (class in torchtree.core.utils)": [[26, "torchtree.core.utils.TensorEncoder"]], "as_tensor() (in module torchtree.core.utils)": [[26, "torchtree.core.utils.as_tensor"]], "default() (torchtree.core.utils.tensorencoder method)": [[26, "torchtree.core.utils.TensorEncoder.default"]], "exit() (torchtree.core.utils.signalhandler method)": [[26, "torchtree.core.utils.SignalHandler.exit"]], "expand_plates() (in module torchtree.core.utils)": [[26, "torchtree.core.utils.expand_plates"]], "get_class() (in module torchtree.core.utils)": [[26, "torchtree.core.utils.get_class"]], "package_contents() (in module torchtree.core.utils)": [[26, "torchtree.core.utils.package_contents"]], "print_graph() (in module torchtree.core.utils)": [[26, "torchtree.core.utils.print_graph"]], "process_object() (in module torchtree.core.utils)": [[26, "torchtree.core.utils.process_object"]], "process_objects() (in module torchtree.core.utils)": [[26, "torchtree.core.utils.process_objects"]], "register_class() (in module torchtree.core.utils)": [[26, "torchtree.core.utils.register_class"]], "remove_comments() (in module torchtree.core.utils)": [[26, "torchtree.core.utils.remove_comments"]], "replace_star_with_str() (in module torchtree.core.utils)": [[26, "torchtree.core.utils.replace_star_with_str"]], "replace_wildcard_with_str() (in module torchtree.core.utils)": [[26, "torchtree.core.utils.replace_wildcard_with_str"]], "string_to_list_index() (in module torchtree.core.utils)": [[26, "torchtree.core.utils.string_to_list_index"]], "tensor_rand() (in module torchtree.core.utils)": [[26, "torchtree.core.utils.tensor_rand"]], "torchtree.core.utils": [[26, "module-torchtree.core.utils"], [132, "module-torchtree.core.utils"]], "update_parameters() (in module torchtree.core.utils)": [[26, "torchtree.core.utils.update_parameters"]], "validate() (in module torchtree.core.utils)": [[26, "torchtree.core.utils.validate"]], "wrapper() (torchtree.core.utils.alternativeattributeerror class method)": [[26, "torchtree.core.utils.AlternativeAttributeError.wrapper"]], "bayesianbridge (class in torchtree.distributions.bayesian_bridge)": [[27, "torchtree.distributions.bayesian_bridge.BayesianBridge"]], "from_json() (torchtree.distributions.bayesian_bridge.bayesianbridge class method)": [[27, "torchtree.distributions.bayesian_bridge.BayesianBridge.from_json"]], "handle_model_changed() (torchtree.distributions.bayesian_bridge.bayesianbridge method)": [[27, "torchtree.distributions.bayesian_bridge.BayesianBridge.handle_model_changed"]], "json_factory() (torchtree.distributions.bayesian_bridge.bayesianbridge static method)": [[27, "torchtree.distributions.bayesian_bridge.BayesianBridge.json_factory"]], "process_object_number() (in module torchtree.distributions.bayesian_bridge)": [[27, "torchtree.distributions.bayesian_bridge.process_object_number"]], "torchtree.distributions.bayesian_bridge": [[27, "module-torchtree.distributions.bayesian_bridge"], [134, "module-torchtree.distributions.bayesian_bridge"]], "ctmcscale (class in torchtree.distributions.ctmc_scale)": [[28, "torchtree.distributions.ctmc_scale.CTMCScale"]], "cpu() (torchtree.distributions.ctmc_scale.ctmcscale method)": [[28, "torchtree.distributions.ctmc_scale.CTMCScale.cpu"]], "cuda() (torchtree.distributions.ctmc_scale.ctmcscale method)": [[28, "torchtree.distributions.ctmc_scale.CTMCScale.cuda"]], "from_json() (torchtree.distributions.ctmc_scale.ctmcscale class method)": [[28, "torchtree.distributions.ctmc_scale.CTMCScale.from_json"]], "json_factory() (torchtree.distributions.ctmc_scale.ctmcscale static method)": [[28, "torchtree.distributions.ctmc_scale.CTMCScale.json_factory"]], "log_gamma_one_half (torchtree.distributions.ctmc_scale.ctmcscale attribute)": [[28, "torchtree.distributions.ctmc_scale.CTMCScale.log_gamma_one_half"]], "shape (torchtree.distributions.ctmc_scale.ctmcscale attribute)": [[28, "torchtree.distributions.ctmc_scale.CTMCScale.shape"]], "to() (torchtree.distributions.ctmc_scale.ctmcscale method)": [[28, "torchtree.distributions.ctmc_scale.CTMCScale.to"]], "torchtree.distributions.ctmc_scale": [[28, "module-torchtree.distributions.ctmc_scale"], [135, "module-torchtree.distributions.ctmc_scale"]], "deterministicnormal (class in torchtree.distributions.deterministic_normal)": [[29, "torchtree.distributions.deterministic_normal.DeterministicNormal"]], "batch_shape (torchtree.distributions.deterministic_normal.deterministicnormal property)": [[29, "torchtree.distributions.deterministic_normal.DeterministicNormal.batch_shape"]], "entropy() (torchtree.distributions.deterministic_normal.deterministicnormal method)": [[29, "torchtree.distributions.deterministic_normal.DeterministicNormal.entropy"]], "event_shape (torchtree.distributions.deterministic_normal.deterministicnormal property)": [[29, "torchtree.distributions.deterministic_normal.DeterministicNormal.event_shape"]], "from_json() (torchtree.distributions.deterministic_normal.deterministicnormal class method)": [[29, "torchtree.distributions.deterministic_normal.DeterministicNormal.from_json"]], "handle_model_changed() (torchtree.distributions.deterministic_normal.deterministicnormal method)": [[29, "torchtree.distributions.deterministic_normal.DeterministicNormal.handle_model_changed"]], "json_factory() (torchtree.distributions.deterministic_normal.deterministicnormal static method)": [[29, "torchtree.distributions.deterministic_normal.DeterministicNormal.json_factory"]], "log_prob() (torchtree.distributions.deterministic_normal.deterministicnormal method)": [[29, "torchtree.distributions.deterministic_normal.DeterministicNormal.log_prob"]], "rsample() (torchtree.distributions.deterministic_normal.deterministicnormal method)": [[29, "torchtree.distributions.deterministic_normal.DeterministicNormal.rsample"]], "sample() (torchtree.distributions.deterministic_normal.deterministicnormal method)": [[29, "torchtree.distributions.deterministic_normal.DeterministicNormal.sample"]], "torchtree.distributions.deterministic_normal": [[29, "module-torchtree.distributions.deterministic_normal"], [136, "module-torchtree.distributions.deterministic_normal"]], "distribution (class in torchtree.distributions.distributions)": [[30, "torchtree.distributions.distributions.Distribution"]], "distributionmodel (class in torchtree.distributions.distributions)": [[30, "torchtree.distributions.distributions.DistributionModel"]], "batch_shape (torchtree.distributions.distributions.distribution property)": [[30, "torchtree.distributions.distributions.Distribution.batch_shape"]], "distribution (torchtree.distributions.distributions.distribution property)": [[30, "torchtree.distributions.distributions.Distribution.distribution"]], "entropy() (torchtree.distributions.distributions.distribution method)": [[30, "torchtree.distributions.distributions.Distribution.entropy"]], "entropy() (torchtree.distributions.distributions.distributionmodel method)": [[30, "torchtree.distributions.distributions.DistributionModel.entropy"]], "event_shape (torchtree.distributions.distributions.distribution property)": [[30, "torchtree.distributions.distributions.Distribution.event_shape"]], "from_json() (torchtree.distributions.distributions.distribution class method)": [[30, "torchtree.distributions.distributions.Distribution.from_json"]], "json_factory() (torchtree.distributions.distributions.distribution static method)": [[30, "torchtree.distributions.distributions.Distribution.json_factory"]], "log_prob() (torchtree.distributions.distributions.distribution method)": [[30, "torchtree.distributions.distributions.Distribution.log_prob"]], "log_prob() (torchtree.distributions.distributions.distributionmodel method)": [[30, "torchtree.distributions.distributions.DistributionModel.log_prob"]], "rsample() (torchtree.distributions.distributions.distribution method)": [[30, "torchtree.distributions.distributions.Distribution.rsample"]], "rsample() (torchtree.distributions.distributions.distributionmodel method)": [[30, "torchtree.distributions.distributions.DistributionModel.rsample"]], "sample() (torchtree.distributions.distributions.distribution method)": [[30, "torchtree.distributions.distributions.Distribution.sample"]], "sample() (torchtree.distributions.distributions.distributionmodel method)": [[30, "torchtree.distributions.distributions.DistributionModel.sample"]], "torchtree.distributions.distributions": [[30, "module-torchtree.distributions.distributions"], [137, "module-torchtree.distributions.distributions"]], "gmrf (class in torchtree.distributions.gmrf)": [[31, "torchtree.distributions.gmrf.GMRF"]], "gmrfcovariate (class in torchtree.distributions.gmrf)": [[31, "torchtree.distributions.gmrf.GMRFCovariate"]], "from_json() (torchtree.distributions.gmrf.gmrf class method)": [[31, "torchtree.distributions.gmrf.GMRF.from_json"]], "from_json() (torchtree.distributions.gmrf.gmrfcovariate class method)": [[31, "torchtree.distributions.gmrf.GMRFCovariate.from_json"]], "precision_matrix() (torchtree.distributions.gmrf.gmrf method)": [[31, "torchtree.distributions.gmrf.GMRF.precision_matrix"]], "torchtree.distributions.gmrf": [[31, "module-torchtree.distributions.gmrf"], [138, "module-torchtree.distributions.gmrf"]], "gmrfgammaintegrated (class in torchtree.distributions.gmrf_integrated)": [[32, "torchtree.distributions.gmrf_integrated.GMRFGammaIntegrated"]], "from_json() (torchtree.distributions.gmrf_integrated.gmrfgammaintegrated class method)": [[32, "torchtree.distributions.gmrf_integrated.GMRFGammaIntegrated.from_json"]], "torchtree.distributions.gmrf_integrated": [[32, "module-torchtree.distributions.gmrf_integrated"], [139, "module-torchtree.distributions.gmrf_integrated"]], "torchtree.distributions": [[33, "module-torchtree.distributions"], [133, "module-torchtree.distributions"]], "inversegamma (class in torchtree.distributions.inverse_gamma)": [[34, "torchtree.distributions.inverse_gamma.InverseGamma"]], "arg_constraints (torchtree.distributions.inverse_gamma.inversegamma attribute)": [[34, "torchtree.distributions.inverse_gamma.InverseGamma.arg_constraints"]], "concentration (torchtree.distributions.inverse_gamma.inversegamma property)": [[34, "torchtree.distributions.inverse_gamma.InverseGamma.concentration"]], "expand() (torchtree.distributions.inverse_gamma.inversegamma method)": [[34, "torchtree.distributions.inverse_gamma.InverseGamma.expand"]], "has_rsample (torchtree.distributions.inverse_gamma.inversegamma attribute)": [[34, "torchtree.distributions.inverse_gamma.InverseGamma.has_rsample"]], "rate (torchtree.distributions.inverse_gamma.inversegamma property)": [[34, "torchtree.distributions.inverse_gamma.InverseGamma.rate"]], "support (torchtree.distributions.inverse_gamma.inversegamma attribute)": [[34, "torchtree.distributions.inverse_gamma.InverseGamma.support"]], "torchtree.distributions.inverse_gamma": [[34, "module-torchtree.distributions.inverse_gamma"], [140, "module-torchtree.distributions.inverse_gamma"]], "jointdistributionmodel (class in torchtree.distributions.joint_distribution)": [[35, "torchtree.distributions.joint_distribution.JointDistributionModel"]], "entropy() (torchtree.distributions.joint_distribution.jointdistributionmodel method)": [[35, "torchtree.distributions.joint_distribution.JointDistributionModel.entropy"]], "from_json() (torchtree.distributions.joint_distribution.jointdistributionmodel class method)": [[35, "torchtree.distributions.joint_distribution.JointDistributionModel.from_json"]], "handle_parameter_changed() (torchtree.distributions.joint_distribution.jointdistributionmodel method)": [[35, "torchtree.distributions.joint_distribution.JointDistributionModel.handle_parameter_changed"]], "log_prob() (torchtree.distributions.joint_distribution.jointdistributionmodel method)": [[35, "torchtree.distributions.joint_distribution.JointDistributionModel.log_prob"]], "rsample() (torchtree.distributions.joint_distribution.jointdistributionmodel method)": [[35, "torchtree.distributions.joint_distribution.JointDistributionModel.rsample"]], "sample() (torchtree.distributions.joint_distribution.jointdistributionmodel method)": [[35, "torchtree.distributions.joint_distribution.JointDistributionModel.sample"]], "torchtree.distributions.joint_distribution": [[35, "module-torchtree.distributions.joint_distribution"], [141, "module-torchtree.distributions.joint_distribution"]], "lognormal (class in torchtree.distributions.log_normal)": [[36, "torchtree.distributions.log_normal.LogNormal"]], "torchtree.distributions.log_normal": [[36, "module-torchtree.distributions.log_normal"], [142, "module-torchtree.distributions.log_normal"]], "multivariatenormal (class in torchtree.distributions.multivariate_normal)": [[37, "torchtree.distributions.multivariate_normal.MultivariateNormal"]], "batch_shape (torchtree.distributions.multivariate_normal.multivariatenormal property)": [[37, "torchtree.distributions.multivariate_normal.MultivariateNormal.batch_shape"]], "entropy() (torchtree.distributions.multivariate_normal.multivariatenormal method)": [[37, "torchtree.distributions.multivariate_normal.MultivariateNormal.entropy"]], "event_shape (torchtree.distributions.multivariate_normal.multivariatenormal property)": [[37, "torchtree.distributions.multivariate_normal.MultivariateNormal.event_shape"]], "from_json() (torchtree.distributions.multivariate_normal.multivariatenormal class method)": [[37, "torchtree.distributions.multivariate_normal.MultivariateNormal.from_json"]], "log_prob() (torchtree.distributions.multivariate_normal.multivariatenormal method)": [[37, "torchtree.distributions.multivariate_normal.MultivariateNormal.log_prob"]], "rsample() (torchtree.distributions.multivariate_normal.multivariatenormal method)": [[37, "torchtree.distributions.multivariate_normal.MultivariateNormal.rsample"]], "sample() (torchtree.distributions.multivariate_normal.multivariatenormal method)": [[37, "torchtree.distributions.multivariate_normal.MultivariateNormal.sample"]], "torchtree.distributions.multivariate_normal": [[37, "module-torchtree.distributions.multivariate_normal"], [143, "module-torchtree.distributions.multivariate_normal"]], "normal (class in torchtree.distributions.normal)": [[38, "torchtree.distributions.normal.Normal"]], "torchtree.distributions.normal": [[38, "module-torchtree.distributions.normal"], [144, "module-torchtree.distributions.normal"]], "oneonx (class in torchtree.distributions.one_on_x)": [[39, "torchtree.distributions.one_on_x.OneOnX"]], "arg_constraints (torchtree.distributions.one_on_x.oneonx attribute)": [[39, "torchtree.distributions.one_on_x.OneOnX.arg_constraints"]], "log_prob() (torchtree.distributions.one_on_x.oneonx method)": [[39, "torchtree.distributions.one_on_x.OneOnX.log_prob"]], "support (torchtree.distributions.one_on_x.oneonx attribute)": [[39, "torchtree.distributions.one_on_x.OneOnX.support"]], "torchtree.distributions.one_on_x": [[39, "module-torchtree.distributions.one_on_x"], [145, "module-torchtree.distributions.one_on_x"]], "scalemixturenormal (class in torchtree.distributions.scale_mixture)": [[40, "torchtree.distributions.scale_mixture.ScaleMixtureNormal"]], "from_json() (torchtree.distributions.scale_mixture.scalemixturenormal class method)": [[40, "torchtree.distributions.scale_mixture.ScaleMixtureNormal.from_json"]], "handle_model_changed() (torchtree.distributions.scale_mixture.scalemixturenormal method)": [[40, "torchtree.distributions.scale_mixture.ScaleMixtureNormal.handle_model_changed"]], "json_factory() (torchtree.distributions.scale_mixture.scalemixturenormal static method)": [[40, "torchtree.distributions.scale_mixture.ScaleMixtureNormal.json_factory"]], "torchtree.distributions.scale_mixture": [[40, "module-torchtree.distributions.scale_mixture"], [146, "module-torchtree.distributions.scale_mixture"]], "convexcombinationtransform (class in torchtree.distributions.transforms)": [[41, "torchtree.distributions.transforms.ConvexCombinationTransform"]], "cumsumexptransform (class in torchtree.distributions.transforms)": [[41, "torchtree.distributions.transforms.CumSumExpTransform"]], "cumsumsoftplustransform (class in torchtree.distributions.transforms)": [[41, "torchtree.distributions.transforms.CumSumSoftPlusTransform"]], "cumsumtransform (class in torchtree.distributions.transforms)": [[41, "torchtree.distributions.transforms.CumSumTransform"]], "lineartransform (class in torchtree.distributions.transforms)": [[41, "torchtree.distributions.transforms.LinearTransform"]], "logtransform (class in torchtree.distributions.transforms)": [[41, "torchtree.distributions.transforms.LogTransform"]], "softplustransform (class in torchtree.distributions.transforms)": [[41, "torchtree.distributions.transforms.SoftPlusTransform"]], "trilexpdiagonaltransform (class in torchtree.distributions.transforms)": [[41, "torchtree.distributions.transforms.TrilExpDiagonalTransform"]], "bijective (torchtree.distributions.transforms.cumsumexptransform attribute)": [[41, "torchtree.distributions.transforms.CumSumExpTransform.bijective"]], "bijective (torchtree.distributions.transforms.cumsumsoftplustransform attribute)": [[41, "torchtree.distributions.transforms.CumSumSoftPlusTransform.bijective"]], "bijective (torchtree.distributions.transforms.cumsumtransform attribute)": [[41, "torchtree.distributions.transforms.CumSumTransform.bijective"]], "bijective (torchtree.distributions.transforms.lineartransform attribute)": [[41, "torchtree.distributions.transforms.LinearTransform.bijective"]], "bijective (torchtree.distributions.transforms.logtransform attribute)": [[41, "torchtree.distributions.transforms.LogTransform.bijective"]], "bijective (torchtree.distributions.transforms.softplustransform attribute)": [[41, "torchtree.distributions.transforms.SoftPlusTransform.bijective"]], "bijective (torchtree.distributions.transforms.trilexpdiagonaltransform attribute)": [[41, "torchtree.distributions.transforms.TrilExpDiagonalTransform.bijective"]], "codomain (torchtree.distributions.transforms.convexcombinationtransform attribute)": [[41, "torchtree.distributions.transforms.ConvexCombinationTransform.codomain"]], "codomain (torchtree.distributions.transforms.cumsumexptransform attribute)": [[41, "torchtree.distributions.transforms.CumSumExpTransform.codomain"]], "codomain (torchtree.distributions.transforms.cumsumsoftplustransform attribute)": [[41, "torchtree.distributions.transforms.CumSumSoftPlusTransform.codomain"]], "codomain (torchtree.distributions.transforms.cumsumtransform attribute)": [[41, "torchtree.distributions.transforms.CumSumTransform.codomain"]], "codomain (torchtree.distributions.transforms.lineartransform attribute)": [[41, "torchtree.distributions.transforms.LinearTransform.codomain"]], "codomain (torchtree.distributions.transforms.logtransform attribute)": [[41, "torchtree.distributions.transforms.LogTransform.codomain"]], "codomain (torchtree.distributions.transforms.softplustransform attribute)": [[41, "torchtree.distributions.transforms.SoftPlusTransform.codomain"]], "domain (torchtree.distributions.transforms.convexcombinationtransform attribute)": [[41, "torchtree.distributions.transforms.ConvexCombinationTransform.domain"]], "domain (torchtree.distributions.transforms.cumsumexptransform attribute)": [[41, "torchtree.distributions.transforms.CumSumExpTransform.domain"]], "domain (torchtree.distributions.transforms.cumsumsoftplustransform attribute)": [[41, "torchtree.distributions.transforms.CumSumSoftPlusTransform.domain"]], "domain (torchtree.distributions.transforms.cumsumtransform attribute)": [[41, "torchtree.distributions.transforms.CumSumTransform.domain"]], "domain (torchtree.distributions.transforms.lineartransform attribute)": [[41, "torchtree.distributions.transforms.LinearTransform.domain"]], "domain (torchtree.distributions.transforms.logtransform attribute)": [[41, "torchtree.distributions.transforms.LogTransform.domain"]], "domain (torchtree.distributions.transforms.softplustransform attribute)": [[41, "torchtree.distributions.transforms.SoftPlusTransform.domain"]], "log_abs_det_jacobian() (torchtree.distributions.transforms.convexcombinationtransform method)": [[41, "torchtree.distributions.transforms.ConvexCombinationTransform.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torchtree.distributions.transforms.cumsumexptransform method)": [[41, "torchtree.distributions.transforms.CumSumExpTransform.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torchtree.distributions.transforms.cumsumsoftplustransform method)": [[41, "torchtree.distributions.transforms.CumSumSoftPlusTransform.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torchtree.distributions.transforms.cumsumtransform method)": [[41, "torchtree.distributions.transforms.CumSumTransform.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torchtree.distributions.transforms.lineartransform method)": [[41, "torchtree.distributions.transforms.LinearTransform.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torchtree.distributions.transforms.logtransform method)": [[41, "torchtree.distributions.transforms.LogTransform.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torchtree.distributions.transforms.softplustransform method)": [[41, "torchtree.distributions.transforms.SoftPlusTransform.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torchtree.distributions.transforms.trilexpdiagonaltransform method)": [[41, "torchtree.distributions.transforms.TrilExpDiagonalTransform.log_abs_det_jacobian"]], "sign (torchtree.distributions.transforms.cumsumexptransform attribute)": [[41, "torchtree.distributions.transforms.CumSumExpTransform.sign"]], "sign (torchtree.distributions.transforms.cumsumsoftplustransform attribute)": [[41, "torchtree.distributions.transforms.CumSumSoftPlusTransform.sign"]], "sign (torchtree.distributions.transforms.cumsumtransform attribute)": [[41, "torchtree.distributions.transforms.CumSumTransform.sign"]], "sign (torchtree.distributions.transforms.lineartransform attribute)": [[41, "torchtree.distributions.transforms.LinearTransform.sign"]], "sign (torchtree.distributions.transforms.logtransform attribute)": [[41, "torchtree.distributions.transforms.LogTransform.sign"]], "sign (torchtree.distributions.transforms.softplustransform attribute)": [[41, "torchtree.distributions.transforms.SoftPlusTransform.sign"]], "sign (torchtree.distributions.transforms.trilexpdiagonaltransform attribute)": [[41, "torchtree.distributions.transforms.TrilExpDiagonalTransform.sign"]], "torchtree.distributions.transforms": [[41, "module-torchtree.distributions.transforms"], [147, "module-torchtree.distributions.transforms"]], "compoundgammadirichletprior (class in torchtree.distributions.tree_prior)": [[42, "torchtree.distributions.tree_prior.CompoundGammaDirichletPrior"]], "from_json() (torchtree.distributions.tree_prior.compoundgammadirichletprior class method)": [[42, "torchtree.distributions.tree_prior.CompoundGammaDirichletPrior.from_json"]], "handle_parameter_changed() (torchtree.distributions.tree_prior.compoundgammadirichletprior method)": [[42, "torchtree.distributions.tree_prior.CompoundGammaDirichletPrior.handle_parameter_changed"]], "torchtree.distributions.tree_prior": [[42, "module-torchtree.distributions.tree_prior"], [148, "module-torchtree.distributions.tree_prior"]], "alignment (class in torchtree.evolution.alignment)": [[43, "torchtree.evolution.alignment.Alignment"]], "sequence (in module torchtree.evolution.alignment)": [[43, "torchtree.evolution.alignment.Sequence"]], "calculate_f3x4() (in module torchtree.evolution.alignment)": [[43, "torchtree.evolution.alignment.calculate_F3x4"]], "calculate_f3x4_from_nucleotide() (in module torchtree.evolution.alignment)": [[43, "torchtree.evolution.alignment.calculate_F3x4_from_nucleotide"]], "calculate_frequencies() (in module torchtree.evolution.alignment)": [[43, "torchtree.evolution.alignment.calculate_frequencies"]], "calculate_frequencies_per_codon_position() (in module torchtree.evolution.alignment)": [[43, "torchtree.evolution.alignment.calculate_frequencies_per_codon_position"]], "calculate_kappa() (in module torchtree.evolution.alignment)": [[43, "torchtree.evolution.alignment.calculate_kappa"]], "calculate_substitutions() (in module torchtree.evolution.alignment)": [[43, "torchtree.evolution.alignment.calculate_substitutions"]], "calculate_ts_tv() (in module torchtree.evolution.alignment)": [[43, "torchtree.evolution.alignment.calculate_ts_tv"]], "data_type (torchtree.evolution.alignment.alignment property)": [[43, "torchtree.evolution.alignment.Alignment.data_type"]], "from_json() (torchtree.evolution.alignment.alignment class method)": [[43, "torchtree.evolution.alignment.Alignment.from_json"]], "get() (torchtree.evolution.alignment.alignment class method)": [[43, "torchtree.evolution.alignment.Alignment.get"]], "read_fasta_sequences() (in module torchtree.evolution.alignment)": [[43, "torchtree.evolution.alignment.read_fasta_sequences"]], "sequence_size (torchtree.evolution.alignment.alignment property)": [[43, "torchtree.evolution.alignment.Alignment.sequence_size"]], "taxa (torchtree.evolution.alignment.alignment property)": [[43, "torchtree.evolution.alignment.Alignment.taxa"]], "torchtree.evolution.alignment": [[43, "module-torchtree.evolution.alignment"], [150, "module-torchtree.evolution.alignment"]], "attributepattern (class in torchtree.evolution.attribute_pattern)": [[44, "torchtree.evolution.attribute_pattern.AttributePattern"]], "compute_tips_partials() (torchtree.evolution.attribute_pattern.attributepattern method)": [[44, "torchtree.evolution.attribute_pattern.AttributePattern.compute_tips_partials"]], "compute_tips_states() (torchtree.evolution.attribute_pattern.attributepattern method)": [[44, "torchtree.evolution.attribute_pattern.AttributePattern.compute_tips_states"]], "cpu() (torchtree.evolution.attribute_pattern.attributepattern method)": [[44, "torchtree.evolution.attribute_pattern.AttributePattern.cpu"]], "cuda() (torchtree.evolution.attribute_pattern.attributepattern method)": [[44, "torchtree.evolution.attribute_pattern.AttributePattern.cuda"]], "from_json() (torchtree.evolution.attribute_pattern.attributepattern class method)": [[44, "torchtree.evolution.attribute_pattern.AttributePattern.from_json"]], "handle_model_changed() (torchtree.evolution.attribute_pattern.attributepattern method)": [[44, "torchtree.evolution.attribute_pattern.AttributePattern.handle_model_changed"]], "handle_parameter_changed() (torchtree.evolution.attribute_pattern.attributepattern method)": [[44, "torchtree.evolution.attribute_pattern.AttributePattern.handle_parameter_changed"]], "torchtree.evolution.attribute_pattern": [[44, "module-torchtree.evolution.attribute_pattern"], [151, "module-torchtree.evolution.attribute_pattern"]], "bdskmodel (class in torchtree.evolution.bdsk)": [[45, "torchtree.evolution.bdsk.BDSKModel"]], "piecewiseconstantbirthdeath (class in torchtree.evolution.bdsk)": [[45, "torchtree.evolution.bdsk.PiecewiseConstantBirthDeath"]], "arg_constraints (torchtree.evolution.bdsk.piecewiseconstantbirthdeath attribute)": [[45, "torchtree.evolution.bdsk.PiecewiseConstantBirthDeath.arg_constraints"]], "epidemiology_to_birth_death() (in module torchtree.evolution.bdsk)": [[45, "torchtree.evolution.bdsk.epidemiology_to_birth_death"]], "from_json() (torchtree.evolution.bdsk.bdskmodel class method)": [[45, "torchtree.evolution.bdsk.BDSKModel.from_json"]], "log_p() (torchtree.evolution.bdsk.piecewiseconstantbirthdeath method)": [[45, "torchtree.evolution.bdsk.PiecewiseConstantBirthDeath.log_p"]], "log_prob() (torchtree.evolution.bdsk.piecewiseconstantbirthdeath method)": [[45, "torchtree.evolution.bdsk.PiecewiseConstantBirthDeath.log_prob"]], "log_q() (torchtree.evolution.bdsk.piecewiseconstantbirthdeath method)": [[45, "torchtree.evolution.bdsk.PiecewiseConstantBirthDeath.log_q"]], "p0() (torchtree.evolution.bdsk.piecewiseconstantbirthdeath method)": [[45, "torchtree.evolution.bdsk.PiecewiseConstantBirthDeath.p0"]], "support (torchtree.evolution.bdsk.piecewiseconstantbirthdeath attribute)": [[45, "torchtree.evolution.bdsk.PiecewiseConstantBirthDeath.support"]], "torchtree.evolution.bdsk": [[45, "module-torchtree.evolution.bdsk"], [152, "module-torchtree.evolution.bdsk"]], "birthdeath (class in torchtree.evolution.birth_death)": [[46, "torchtree.evolution.birth_death.BirthDeath"]], "birthdeathmodel (class in torchtree.evolution.birth_death)": [[46, "torchtree.evolution.birth_death.BirthDeathModel"]], "arg_constraints (torchtree.evolution.birth_death.birthdeath attribute)": [[46, "torchtree.evolution.birth_death.BirthDeath.arg_constraints"]], "from_json() (torchtree.evolution.birth_death.birthdeathmodel class method)": [[46, "torchtree.evolution.birth_death.BirthDeathModel.from_json"]], "handle_model_changed() (torchtree.evolution.birth_death.birthdeathmodel method)": [[46, "torchtree.evolution.birth_death.BirthDeathModel.handle_model_changed"]], "log_p() (torchtree.evolution.birth_death.birthdeath method)": [[46, "torchtree.evolution.birth_death.BirthDeath.log_p"]], "log_prob() (torchtree.evolution.birth_death.birthdeath method)": [[46, "torchtree.evolution.birth_death.BirthDeath.log_prob"]], "log_q() (torchtree.evolution.birth_death.birthdeath method)": [[46, "torchtree.evolution.birth_death.BirthDeath.log_q"]], "torchtree.evolution.birth_death": [[46, "module-torchtree.evolution.birth_death"], [153, "module-torchtree.evolution.birth_death"]], "abstractclockmodel (class in torchtree.evolution.branch_model)": [[47, "torchtree.evolution.branch_model.AbstractClockModel"]], "branchmodel (class in torchtree.evolution.branch_model)": [[47, "torchtree.evolution.branch_model.BranchModel"]], "simpleclockmodel (class in torchtree.evolution.branch_model)": [[47, "torchtree.evolution.branch_model.SimpleClockModel"]], "strictclockmodel (class in torchtree.evolution.branch_model)": [[47, "torchtree.evolution.branch_model.StrictClockModel"]], "from_json() (torchtree.evolution.branch_model.simpleclockmodel class method)": [[47, "torchtree.evolution.branch_model.SimpleClockModel.from_json"]], "from_json() (torchtree.evolution.branch_model.strictclockmodel class method)": [[47, "torchtree.evolution.branch_model.StrictClockModel.from_json"]], "handle_model_changed() (torchtree.evolution.branch_model.abstractclockmodel method)": [[47, "torchtree.evolution.branch_model.AbstractClockModel.handle_model_changed"]], "handle_parameter_changed() (torchtree.evolution.branch_model.abstractclockmodel method)": [[47, "torchtree.evolution.branch_model.AbstractClockModel.handle_parameter_changed"]], "json_factory() (torchtree.evolution.branch_model.simpleclockmodel static method)": [[47, "torchtree.evolution.branch_model.SimpleClockModel.json_factory"]], "rates (torchtree.evolution.branch_model.branchmodel property)": [[47, "torchtree.evolution.branch_model.BranchModel.rates"]], "rates (torchtree.evolution.branch_model.simpleclockmodel property)": [[47, "torchtree.evolution.branch_model.SimpleClockModel.rates"]], "rates (torchtree.evolution.branch_model.strictclockmodel property)": [[47, "torchtree.evolution.branch_model.StrictClockModel.rates"]], "torchtree.evolution.branch_model": [[47, "module-torchtree.evolution.branch_model"], [154, "module-torchtree.evolution.branch_model"]], "abstractcoalescentdistribution (class in torchtree.evolution.coalescent)": [[48, "torchtree.evolution.coalescent.AbstractCoalescentDistribution"]], "abstractcoalescentmodel (class in torchtree.evolution.coalescent)": [[48, "torchtree.evolution.coalescent.AbstractCoalescentModel"]], "constantcoalescent (class in torchtree.evolution.coalescent)": [[48, "torchtree.evolution.coalescent.ConstantCoalescent"]], "constantcoalescentmodel (class in torchtree.evolution.coalescent)": [[48, "torchtree.evolution.coalescent.ConstantCoalescentModel"]], "exponentialcoalescent (class in torchtree.evolution.coalescent)": [[48, "torchtree.evolution.coalescent.ExponentialCoalescent"]], "exponentialcoalescentmodel (class in torchtree.evolution.coalescent)": [[48, "torchtree.evolution.coalescent.ExponentialCoalescentModel"]], "faketreemodel (class in torchtree.evolution.coalescent)": [[48, "torchtree.evolution.coalescent.FakeTreeModel"]], "piecewiseconstantcoalescent (class in torchtree.evolution.coalescent)": [[48, "torchtree.evolution.coalescent.PiecewiseConstantCoalescent"]], "piecewiseconstantcoalescentgrid (class in torchtree.evolution.coalescent)": [[48, "torchtree.evolution.coalescent.PiecewiseConstantCoalescentGrid"]], "piecewiseconstantcoalescentgridmodel (class in torchtree.evolution.coalescent)": [[48, "torchtree.evolution.coalescent.PiecewiseConstantCoalescentGridModel"]], "piecewiseconstantcoalescentmodel (class in torchtree.evolution.coalescent)": [[48, "torchtree.evolution.coalescent.PiecewiseConstantCoalescentModel"]], "piecewiseexponentialcoalescentgrid (class in torchtree.evolution.coalescent)": [[48, "torchtree.evolution.coalescent.PiecewiseExponentialCoalescentGrid"]], "softpiecewiseconstantcoalescentgrid (class in torchtree.evolution.coalescent)": [[48, "torchtree.evolution.coalescent.SoftPiecewiseConstantCoalescentGrid"]], "arg_constraints (torchtree.evolution.coalescent.abstractcoalescentdistribution attribute)": [[48, "torchtree.evolution.coalescent.AbstractCoalescentDistribution.arg_constraints"]], "arg_constraints (torchtree.evolution.coalescent.exponentialcoalescent attribute)": [[48, "torchtree.evolution.coalescent.ExponentialCoalescent.arg_constraints"]], "arg_constraints (torchtree.evolution.coalescent.piecewiseexponentialcoalescentgrid attribute)": [[48, "torchtree.evolution.coalescent.PiecewiseExponentialCoalescentGrid.arg_constraints"]], "from_json() (torchtree.evolution.coalescent.constantcoalescentmodel class method)": [[48, "torchtree.evolution.coalescent.ConstantCoalescentModel.from_json"]], "from_json() (torchtree.evolution.coalescent.exponentialcoalescentmodel class method)": [[48, "torchtree.evolution.coalescent.ExponentialCoalescentModel.from_json"]], "from_json() (torchtree.evolution.coalescent.piecewiseconstantcoalescentgridmodel class method)": [[48, "torchtree.evolution.coalescent.PiecewiseConstantCoalescentGridModel.from_json"]], "has_rsample (torchtree.evolution.coalescent.abstractcoalescentdistribution attribute)": [[48, "torchtree.evolution.coalescent.AbstractCoalescentDistribution.has_rsample"]], "has_rsample (torchtree.evolution.coalescent.constantcoalescent attribute)": [[48, "torchtree.evolution.coalescent.ConstantCoalescent.has_rsample"]], "has_rsample (torchtree.evolution.coalescent.exponentialcoalescent attribute)": [[48, "torchtree.evolution.coalescent.ExponentialCoalescent.has_rsample"]], "has_rsample (torchtree.evolution.coalescent.piecewiseexponentialcoalescentgrid attribute)": [[48, "torchtree.evolution.coalescent.PiecewiseExponentialCoalescentGrid.has_rsample"]], "log_prob() (torchtree.evolution.coalescent.constantcoalescent method)": [[48, "torchtree.evolution.coalescent.ConstantCoalescent.log_prob"]], "log_prob() (torchtree.evolution.coalescent.exponentialcoalescent method)": [[48, "torchtree.evolution.coalescent.ExponentialCoalescent.log_prob"]], "log_prob() (torchtree.evolution.coalescent.piecewiseconstantcoalescent method)": [[48, "torchtree.evolution.coalescent.PiecewiseConstantCoalescent.log_prob"]], "log_prob() (torchtree.evolution.coalescent.piecewiseconstantcoalescentgrid method)": [[48, "torchtree.evolution.coalescent.PiecewiseConstantCoalescentGrid.log_prob"]], "log_prob() (torchtree.evolution.coalescent.piecewiseexponentialcoalescentgrid method)": [[48, "torchtree.evolution.coalescent.PiecewiseExponentialCoalescentGrid.log_prob"]], "log_prob() (torchtree.evolution.coalescent.softpiecewiseconstantcoalescentgrid method)": [[48, "torchtree.evolution.coalescent.SoftPiecewiseConstantCoalescentGrid.log_prob"]], "maximum_likelihood() (torchtree.evolution.coalescent.abstractcoalescentdistribution class method)": [[48, "torchtree.evolution.coalescent.AbstractCoalescentDistribution.maximum_likelihood"]], "maximum_likelihood() (torchtree.evolution.coalescent.constantcoalescent class method)": [[48, "torchtree.evolution.coalescent.ConstantCoalescent.maximum_likelihood"]], "maximum_likelihood() (torchtree.evolution.coalescent.piecewiseconstantcoalescent class method)": [[48, "torchtree.evolution.coalescent.PiecewiseConstantCoalescent.maximum_likelihood"]], "node_heights (torchtree.evolution.coalescent.faketreemodel property)": [[48, "torchtree.evolution.coalescent.FakeTreeModel.node_heights"]], "process_data_coalesent() (in module torchtree.evolution.coalescent)": [[48, "torchtree.evolution.coalescent.process_data_coalesent"]], "rsample() (torchtree.evolution.coalescent.constantcoalescent method)": [[48, "torchtree.evolution.coalescent.ConstantCoalescent.rsample"]], "support (torchtree.evolution.coalescent.abstractcoalescentdistribution attribute)": [[48, "torchtree.evolution.coalescent.AbstractCoalescentDistribution.support"]], "support (torchtree.evolution.coalescent.exponentialcoalescent attribute)": [[48, "torchtree.evolution.coalescent.ExponentialCoalescent.support"]], "support (torchtree.evolution.coalescent.piecewiseexponentialcoalescentgrid attribute)": [[48, "torchtree.evolution.coalescent.PiecewiseExponentialCoalescentGrid.support"]], "torchtree.evolution.coalescent": [[48, "module-torchtree.evolution.coalescent"], [155, "module-torchtree.evolution.coalescent"]], "amino_acids (torchtree.evolution.datatype.aminoaciddatatype attribute)": [[49, "torchtree.evolution.datatype.AminoAcidDataType.AMINO_ACIDS"]], "amino_acids_ambiguity_states (torchtree.evolution.datatype.aminoaciddatatype attribute)": [[49, "id0"], [49, "torchtree.evolution.datatype.AminoAcidDataType.AMINO_ACIDS_AMBIGUITY_STATES"]], "amino_acids_states (torchtree.evolution.datatype.aminoaciddatatype attribute)": [[49, "torchtree.evolution.datatype.AminoAcidDataType.AMINO_ACIDS_STATES"]], "abstractdatatype (class in torchtree.evolution.datatype)": [[49, "torchtree.evolution.datatype.AbstractDataType"]], "aminoaciddatatype (class in torchtree.evolution.datatype)": [[49, "torchtree.evolution.datatype.AminoAcidDataType"]], "codon_triplets (torchtree.evolution.datatype.codondatatype attribute)": [[49, "torchtree.evolution.datatype.CodonDataType.CODON_TRIPLETS"]], "codondatatype (class in torchtree.evolution.datatype)": [[49, "torchtree.evolution.datatype.CodonDataType"]], "datatype (class in torchtree.evolution.datatype)": [[49, "torchtree.evolution.datatype.DataType"]], "genetic_code_names (torchtree.evolution.datatype.codondatatype attribute)": [[49, "torchtree.evolution.datatype.CodonDataType.GENETIC_CODE_NAMES"]], "genetic_code_tables (torchtree.evolution.datatype.codondatatype attribute)": [[49, "torchtree.evolution.datatype.CodonDataType.GENETIC_CODE_TABLES"]], "generaldatatype (class in torchtree.evolution.datatype)": [[49, "torchtree.evolution.datatype.GeneralDataType"]], "nucleotides (torchtree.evolution.datatype.nucleotidedatatype attribute)": [[49, "torchtree.evolution.datatype.NucleotideDataType.NUCLEOTIDES"]], "nucleotide_ambiguity_states (torchtree.evolution.datatype.nucleotidedatatype attribute)": [[49, "torchtree.evolution.datatype.NucleotideDataType.NUCLEOTIDE_AMBIGUITY_STATES"]], "nucleotide_states (torchtree.evolution.datatype.nucleotidedatatype attribute)": [[49, "torchtree.evolution.datatype.NucleotideDataType.NUCLEOTIDE_STATES"]], "number_of_codons (torchtree.evolution.datatype.codondatatype attribute)": [[49, "torchtree.evolution.datatype.CodonDataType.NUMBER_OF_CODONS"]], "nucleotidedatatype (class in torchtree.evolution.datatype)": [[49, "torchtree.evolution.datatype.NucleotideDataType"]], "encoding() (torchtree.evolution.datatype.aminoaciddatatype method)": [[49, "torchtree.evolution.datatype.AminoAcidDataType.encoding"]], "encoding() (torchtree.evolution.datatype.codondatatype method)": [[49, "torchtree.evolution.datatype.CodonDataType.encoding"]], "encoding() (torchtree.evolution.datatype.datatype method)": [[49, "torchtree.evolution.datatype.DataType.encoding"]], "encoding() (torchtree.evolution.datatype.generaldatatype method)": [[49, "torchtree.evolution.datatype.GeneralDataType.encoding"]], "encoding() (torchtree.evolution.datatype.nucleotidedatatype method)": [[49, "torchtree.evolution.datatype.NucleotideDataType.encoding"]], "from_json() (torchtree.evolution.datatype.aminoaciddatatype class method)": [[49, "torchtree.evolution.datatype.AminoAcidDataType.from_json"]], "from_json() (torchtree.evolution.datatype.codondatatype class method)": [[49, "torchtree.evolution.datatype.CodonDataType.from_json"]], "from_json() (torchtree.evolution.datatype.generaldatatype class method)": [[49, "torchtree.evolution.datatype.GeneralDataType.from_json"]], "from_json() (torchtree.evolution.datatype.nucleotidedatatype class method)": [[49, "torchtree.evolution.datatype.NucleotideDataType.from_json"]], "partial() (torchtree.evolution.datatype.aminoaciddatatype method)": [[49, "torchtree.evolution.datatype.AminoAcidDataType.partial"]], "partial() (torchtree.evolution.datatype.codondatatype method)": [[49, "torchtree.evolution.datatype.CodonDataType.partial"]], "partial() (torchtree.evolution.datatype.datatype method)": [[49, "torchtree.evolution.datatype.DataType.partial"]], "partial() (torchtree.evolution.datatype.generaldatatype method)": [[49, "torchtree.evolution.datatype.GeneralDataType.partial"]], "partial() (torchtree.evolution.datatype.nucleotidedatatype method)": [[49, "torchtree.evolution.datatype.NucleotideDataType.partial"]], "size (torchtree.evolution.datatype.abstractdatatype property)": [[49, "torchtree.evolution.datatype.AbstractDataType.size"]], "size (torchtree.evolution.datatype.datatype property)": [[49, "torchtree.evolution.datatype.DataType.size"]], "state_count (torchtree.evolution.datatype.abstractdatatype property)": [[49, "torchtree.evolution.datatype.AbstractDataType.state_count"]], "state_count (torchtree.evolution.datatype.datatype property)": [[49, "torchtree.evolution.datatype.DataType.state_count"]], "states (torchtree.evolution.datatype.abstractdatatype property)": [[49, "torchtree.evolution.datatype.AbstractDataType.states"]], "states (torchtree.evolution.datatype.datatype property)": [[49, "torchtree.evolution.datatype.DataType.states"]], "torchtree.evolution.datatype": [[49, "module-torchtree.evolution.datatype"], [156, "module-torchtree.evolution.datatype"]], "torchtree.evolution": [[50, "module-torchtree.evolution"], [149, "module-torchtree.evolution"]], "node (class in torchtree.evolution.io)": [[51, "torchtree.evolution.io.Node"]], "convert_samples_to_nexus() (in module torchtree.evolution.io)": [[51, "torchtree.evolution.io.convert_samples_to_nexus"]], "extract_taxa() (in module torchtree.evolution.io)": [[51, "torchtree.evolution.io.extract_taxa"]], "parse_taxa() (in module torchtree.evolution.io)": [[51, "torchtree.evolution.io.parse_taxa"]], "parse_translate() (in module torchtree.evolution.io)": [[51, "torchtree.evolution.io.parse_translate"]], "parse_trees() (in module torchtree.evolution.io)": [[51, "torchtree.evolution.io.parse_trees"]], "random_tree_from_heights() (in module torchtree.evolution.io)": [[51, "torchtree.evolution.io.random_tree_from_heights"]], "read_tree() (in module torchtree.evolution.io)": [[51, "torchtree.evolution.io.read_tree"]], "read_tree_and_alignment() (in module torchtree.evolution.io)": [[51, "torchtree.evolution.io.read_tree_and_alignment"]], "split_newick() (in module torchtree.evolution.io)": [[51, "torchtree.evolution.io.split_newick"]], "to_nexus() (in module torchtree.evolution.io)": [[51, "torchtree.evolution.io.to_nexus"]], "torchtree.evolution.io": [[51, "module-torchtree.evolution.io"], [157, "module-torchtree.evolution.io"]], "poissontreelikelihood (class in torchtree.evolution.poisson_tree_likelihood)": [[52, "torchtree.evolution.poisson_tree_likelihood.PoissonTreeLikelihood"]], "from_json() (torchtree.evolution.poisson_tree_likelihood.poissontreelikelihood class method)": [[52, "torchtree.evolution.poisson_tree_likelihood.PoissonTreeLikelihood.from_json"]], "handle_parameter_changed() (torchtree.evolution.poisson_tree_likelihood.poissontreelikelihood method)": [[52, "torchtree.evolution.poisson_tree_likelihood.PoissonTreeLikelihood.handle_parameter_changed"]], "torchtree.evolution.poisson_tree_likelihood": [[52, "module-torchtree.evolution.poisson_tree_likelihood"], [158, "module-torchtree.evolution.poisson_tree_likelihood"]], "logdifferenceratetransform (class in torchtree.evolution.rate_transform)": [[53, "torchtree.evolution.rate_transform.LogDifferenceRateTransform"]], "rescaledratetransform (class in torchtree.evolution.rate_transform)": [[53, "torchtree.evolution.rate_transform.RescaledRateTransform"]], "bijective (torchtree.evolution.rate_transform.logdifferenceratetransform attribute)": [[53, "torchtree.evolution.rate_transform.LogDifferenceRateTransform.bijective"]], "bijective (torchtree.evolution.rate_transform.rescaledratetransform attribute)": [[53, "torchtree.evolution.rate_transform.RescaledRateTransform.bijective"]], "log_abs_det_jacobian() (torchtree.evolution.rate_transform.logdifferenceratetransform method)": [[53, "torchtree.evolution.rate_transform.LogDifferenceRateTransform.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torchtree.evolution.rate_transform.rescaledratetransform method)": [[53, "torchtree.evolution.rate_transform.RescaledRateTransform.log_abs_det_jacobian"]], "sign (torchtree.evolution.rate_transform.logdifferenceratetransform attribute)": [[53, "torchtree.evolution.rate_transform.LogDifferenceRateTransform.sign"]], "sign (torchtree.evolution.rate_transform.rescaledratetransform attribute)": [[53, "torchtree.evolution.rate_transform.RescaledRateTransform.sign"]], "torchtree.evolution.rate_transform": [[53, "module-torchtree.evolution.rate_transform"], [159, "module-torchtree.evolution.rate_transform"]], "rootparameter (class in torchtree.evolution.root_transform)": [[54, "torchtree.evolution.root_transform.RootParameter"]], "add_parameter_listener() (torchtree.evolution.root_transform.rootparameter method)": [[54, "torchtree.evolution.root_transform.RootParameter.add_parameter_listener"]], "fire_parameter_changed() (torchtree.evolution.root_transform.rootparameter method)": [[54, "torchtree.evolution.root_transform.RootParameter.fire_parameter_changed"]], "from_json() (torchtree.evolution.root_transform.rootparameter class method)": [[54, "torchtree.evolution.root_transform.RootParameter.from_json"]], "handle_model_changed() (torchtree.evolution.root_transform.rootparameter method)": [[54, "torchtree.evolution.root_transform.RootParameter.handle_model_changed"]], "handle_parameter_changed() (torchtree.evolution.root_transform.rootparameter method)": [[54, "torchtree.evolution.root_transform.RootParameter.handle_parameter_changed"]], "parameters() (torchtree.evolution.root_transform.rootparameter method)": [[54, "torchtree.evolution.root_transform.RootParameter.parameters"]], "tensor (torchtree.evolution.root_transform.rootparameter property)": [[54, "torchtree.evolution.root_transform.RootParameter.tensor"]], "torchtree.evolution.root_transform": [[54, "module-torchtree.evolution.root_transform"], [160, "module-torchtree.evolution.root_transform"]], "transform() (torchtree.evolution.root_transform.rootparameter method)": [[54, "torchtree.evolution.root_transform.RootParameter.transform"]], "constantsitemodel (class in torchtree.evolution.site_model)": [[55, "torchtree.evolution.site_model.ConstantSiteModel"]], "invariantsitemodel (class in torchtree.evolution.site_model)": [[55, "torchtree.evolution.site_model.InvariantSiteModel"]], "lognormalsitemodel (class in torchtree.evolution.site_model)": [[55, "torchtree.evolution.site_model.LogNormalSiteModel"]], "sitemodel (class in torchtree.evolution.site_model)": [[55, "torchtree.evolution.site_model.SiteModel"]], "univariatediscretizedsitemodel (class in torchtree.evolution.site_model)": [[55, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel"]], "weibullsitemodel (class in torchtree.evolution.site_model)": [[55, "torchtree.evolution.site_model.WeibullSiteModel"]], "cpu() (torchtree.evolution.site_model.constantsitemodel method)": [[55, "torchtree.evolution.site_model.ConstantSiteModel.cpu"]], "cpu() (torchtree.evolution.site_model.univariatediscretizedsitemodel method)": [[55, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel.cpu"]], "cuda() (torchtree.evolution.site_model.constantsitemodel method)": [[55, "torchtree.evolution.site_model.ConstantSiteModel.cuda"]], "cuda() (torchtree.evolution.site_model.univariatediscretizedsitemodel method)": [[55, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel.cuda"]], "from_json() (torchtree.evolution.site_model.constantsitemodel class method)": [[55, "torchtree.evolution.site_model.ConstantSiteModel.from_json"]], "from_json() (torchtree.evolution.site_model.invariantsitemodel class method)": [[55, "torchtree.evolution.site_model.InvariantSiteModel.from_json"]], "from_json() (torchtree.evolution.site_model.lognormalsitemodel class method)": [[55, "torchtree.evolution.site_model.LogNormalSiteModel.from_json"]], "from_json() (torchtree.evolution.site_model.weibullsitemodel class method)": [[55, "torchtree.evolution.site_model.WeibullSiteModel.from_json"]], "handle_model_changed() (torchtree.evolution.site_model.constantsitemodel method)": [[55, "torchtree.evolution.site_model.ConstantSiteModel.handle_model_changed"]], "handle_model_changed() (torchtree.evolution.site_model.invariantsitemodel method)": [[55, "torchtree.evolution.site_model.InvariantSiteModel.handle_model_changed"]], "handle_model_changed() (torchtree.evolution.site_model.univariatediscretizedsitemodel method)": [[55, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel.handle_model_changed"]], "handle_parameter_changed() (torchtree.evolution.site_model.constantsitemodel method)": [[55, "torchtree.evolution.site_model.ConstantSiteModel.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.evolution.site_model.invariantsitemodel method)": [[55, "torchtree.evolution.site_model.InvariantSiteModel.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.evolution.site_model.univariatediscretizedsitemodel method)": [[55, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel.handle_parameter_changed"]], "invariant (torchtree.evolution.site_model.invariantsitemodel property)": [[55, "torchtree.evolution.site_model.InvariantSiteModel.invariant"]], "invariant (torchtree.evolution.site_model.univariatediscretizedsitemodel property)": [[55, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel.invariant"]], "inverse_cdf() (torchtree.evolution.site_model.univariatediscretizedsitemodel method)": [[55, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel.inverse_cdf"]], "inverse_cdf() (torchtree.evolution.site_model.weibullsitemodel method)": [[55, "torchtree.evolution.site_model.WeibullSiteModel.inverse_cdf"]], "probabilities() (torchtree.evolution.site_model.constantsitemodel method)": [[55, "torchtree.evolution.site_model.ConstantSiteModel.probabilities"]], "probabilities() (torchtree.evolution.site_model.invariantsitemodel method)": [[55, "torchtree.evolution.site_model.InvariantSiteModel.probabilities"]], "probabilities() (torchtree.evolution.site_model.sitemodel method)": [[55, "torchtree.evolution.site_model.SiteModel.probabilities"]], "probabilities() (torchtree.evolution.site_model.univariatediscretizedsitemodel method)": [[55, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel.probabilities"]], "rates() (torchtree.evolution.site_model.constantsitemodel method)": [[55, "torchtree.evolution.site_model.ConstantSiteModel.rates"]], "rates() (torchtree.evolution.site_model.invariantsitemodel method)": [[55, "torchtree.evolution.site_model.InvariantSiteModel.rates"]], "rates() (torchtree.evolution.site_model.sitemodel method)": [[55, "torchtree.evolution.site_model.SiteModel.rates"]], "rates() (torchtree.evolution.site_model.univariatediscretizedsitemodel method)": [[55, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel.rates"]], "scale (torchtree.evolution.site_model.lognormalsitemodel property)": [[55, "torchtree.evolution.site_model.LogNormalSiteModel.scale"]], "shape (torchtree.evolution.site_model.weibullsitemodel property)": [[55, "torchtree.evolution.site_model.WeibullSiteModel.shape"]], "torchtree.evolution.site_model": [[55, "module-torchtree.evolution.site_model"], [161, "module-torchtree.evolution.site_model"]], "update_rates() (torchtree.evolution.site_model.lognormalsitemodel method)": [[55, "torchtree.evolution.site_model.LogNormalSiteModel.update_rates"]], "update_rates() (torchtree.evolution.site_model.univariatediscretizedsitemodel method)": [[55, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel.update_rates"]], "update_rates_probs() (torchtree.evolution.site_model.invariantsitemodel method)": [[55, "torchtree.evolution.site_model.InvariantSiteModel.update_rates_probs"]], "sitepattern (class in torchtree.evolution.site_pattern)": [[56, "torchtree.evolution.site_pattern.SitePattern"]], "compress() (in module torchtree.evolution.site_pattern)": [[56, "torchtree.evolution.site_pattern.compress"]], "compress_alignment() (in module torchtree.evolution.site_pattern)": [[56, "torchtree.evolution.site_pattern.compress_alignment"]], "compress_alignment_states() (in module torchtree.evolution.site_pattern)": [[56, "torchtree.evolution.site_pattern.compress_alignment_states"]], "compute_tips_partials() (torchtree.evolution.site_pattern.sitepattern method)": [[56, "torchtree.evolution.site_pattern.SitePattern.compute_tips_partials"]], "compute_tips_states() (torchtree.evolution.site_pattern.sitepattern method)": [[56, "torchtree.evolution.site_pattern.SitePattern.compute_tips_states"]], "cpu() (torchtree.evolution.site_pattern.sitepattern method)": [[56, "torchtree.evolution.site_pattern.SitePattern.cpu"]], "cuda() (torchtree.evolution.site_pattern.sitepattern method)": [[56, "torchtree.evolution.site_pattern.SitePattern.cuda"]], "from_json() (torchtree.evolution.site_pattern.sitepattern class method)": [[56, "torchtree.evolution.site_pattern.SitePattern.from_json"]], "handle_model_changed() (torchtree.evolution.site_pattern.sitepattern method)": [[56, "torchtree.evolution.site_pattern.SitePattern.handle_model_changed"]], "handle_parameter_changed() (torchtree.evolution.site_pattern.sitepattern method)": [[56, "torchtree.evolution.site_pattern.SitePattern.handle_parameter_changed"]], "torchtree.evolution.site_pattern": [[56, "module-torchtree.evolution.site_pattern"], [162, "module-torchtree.evolution.site_pattern"]], "abstractsubstitutionmodel (class in torchtree.evolution.substitution_model.abstract)": [[57, "torchtree.evolution.substitution_model.abstract.AbstractSubstitutionModel"]], "nonsymmetricsubstitutionmodel (class in torchtree.evolution.substitution_model.abstract)": [[57, "torchtree.evolution.substitution_model.abstract.NonSymmetricSubstitutionModel"]], "substitutionmodel (class in torchtree.evolution.substitution_model.abstract)": [[57, "torchtree.evolution.substitution_model.abstract.SubstitutionModel"]], "symmetricsubstitutionmodel (class in torchtree.evolution.substitution_model.abstract)": [[57, "torchtree.evolution.substitution_model.abstract.SymmetricSubstitutionModel"]], "eigen() (torchtree.evolution.substitution_model.abstract.nonsymmetricsubstitutionmodel method)": [[57, "torchtree.evolution.substitution_model.abstract.NonSymmetricSubstitutionModel.eigen"]], "eigen() (torchtree.evolution.substitution_model.abstract.symmetricsubstitutionmodel method)": [[57, "torchtree.evolution.substitution_model.abstract.SymmetricSubstitutionModel.eigen"]], "frequencies (torchtree.evolution.substitution_model.abstract.abstractsubstitutionmodel property)": [[57, "torchtree.evolution.substitution_model.abstract.AbstractSubstitutionModel.frequencies"]], "frequencies (torchtree.evolution.substitution_model.abstract.substitutionmodel property)": [[57, "torchtree.evolution.substitution_model.abstract.SubstitutionModel.frequencies"]], "norm() (torchtree.evolution.substitution_model.abstract.abstractsubstitutionmodel method)": [[57, "torchtree.evolution.substitution_model.abstract.AbstractSubstitutionModel.norm"]], "p_t() (torchtree.evolution.substitution_model.abstract.nonsymmetricsubstitutionmodel method)": [[57, "torchtree.evolution.substitution_model.abstract.NonSymmetricSubstitutionModel.p_t"]], "p_t() (torchtree.evolution.substitution_model.abstract.substitutionmodel method)": [[57, "torchtree.evolution.substitution_model.abstract.SubstitutionModel.p_t"]], "p_t() (torchtree.evolution.substitution_model.abstract.symmetricsubstitutionmodel method)": [[57, "torchtree.evolution.substitution_model.abstract.SymmetricSubstitutionModel.p_t"]], "q() (torchtree.evolution.substitution_model.abstract.substitutionmodel method)": [[57, "torchtree.evolution.substitution_model.abstract.SubstitutionModel.q"]], "torchtree.evolution.substitution_model.abstract": [[57, "module-torchtree.evolution.substitution_model.abstract"], [164, "module-torchtree.evolution.substitution_model.abstract"]], "lg (class in torchtree.evolution.substitution_model.amino_acid)": [[58, "torchtree.evolution.substitution_model.amino_acid.LG"]], "wag (class in torchtree.evolution.substitution_model.amino_acid)": [[58, "torchtree.evolution.substitution_model.amino_acid.WAG"]], "from_json() (torchtree.evolution.substitution_model.amino_acid.lg class method)": [[58, "torchtree.evolution.substitution_model.amino_acid.LG.from_json"]], "from_json() (torchtree.evolution.substitution_model.amino_acid.wag class method)": [[58, "torchtree.evolution.substitution_model.amino_acid.WAG.from_json"]], "torchtree.evolution.substitution_model.amino_acid": [[58, "module-torchtree.evolution.substitution_model.amino_acid"], [165, "module-torchtree.evolution.substitution_model.amino_acid"]], "mg94 (class in torchtree.evolution.substitution_model.codon)": [[59, "torchtree.evolution.substitution_model.codon.MG94"]], "from_json() (torchtree.evolution.substitution_model.codon.mg94 class method)": [[59, "torchtree.evolution.substitution_model.codon.MG94.from_json"]], "handle_model_changed() (torchtree.evolution.substitution_model.codon.mg94 method)": [[59, "torchtree.evolution.substitution_model.codon.MG94.handle_model_changed"]], "handle_parameter_changed() (torchtree.evolution.substitution_model.codon.mg94 method)": [[59, "torchtree.evolution.substitution_model.codon.MG94.handle_parameter_changed"]], "q() (torchtree.evolution.substitution_model.codon.mg94 method)": [[59, "torchtree.evolution.substitution_model.codon.MG94.q"]], "torchtree.evolution.substitution_model.codon": [[59, "module-torchtree.evolution.substitution_model.codon"], [166, "module-torchtree.evolution.substitution_model.codon"]], "empiricalsubstitutionmodel (class in torchtree.evolution.substitution_model.general)": [[60, "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel"]], "generaljc69 (class in torchtree.evolution.substitution_model.general)": [[60, "torchtree.evolution.substitution_model.general.GeneralJC69"]], "generalnonsymmetricsubstitutionmodel (class in torchtree.evolution.substitution_model.general)": [[60, "torchtree.evolution.substitution_model.general.GeneralNonSymmetricSubstitutionModel"]], "generalsymmetricsubstitutionmodel (class in torchtree.evolution.substitution_model.general)": [[60, "torchtree.evolution.substitution_model.general.GeneralSymmetricSubstitutionModel"]], "cpu() (torchtree.evolution.substitution_model.general.generaljc69 method)": [[60, "torchtree.evolution.substitution_model.general.GeneralJC69.cpu"]], "create_rate_matrix() (torchtree.evolution.substitution_model.general.empiricalsubstitutionmodel static method)": [[60, "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel.create_rate_matrix"]], "cuda() (torchtree.evolution.substitution_model.general.generaljc69 method)": [[60, "torchtree.evolution.substitution_model.general.GeneralJC69.cuda"]], "eigen() (torchtree.evolution.substitution_model.general.empiricalsubstitutionmodel method)": [[60, "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel.eigen"]], "frequencies (torchtree.evolution.substitution_model.general.empiricalsubstitutionmodel property)": [[60, "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel.frequencies"]], "frequencies (torchtree.evolution.substitution_model.general.generaljc69 property)": [[60, "torchtree.evolution.substitution_model.general.GeneralJC69.frequencies"]], "from_json() (torchtree.evolution.substitution_model.general.empiricalsubstitutionmodel class method)": [[60, "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel.from_json"]], "from_json() (torchtree.evolution.substitution_model.general.generaljc69 class method)": [[60, "torchtree.evolution.substitution_model.general.GeneralJC69.from_json"]], "from_json() (torchtree.evolution.substitution_model.general.generalnonsymmetricsubstitutionmodel class method)": [[60, "torchtree.evolution.substitution_model.general.GeneralNonSymmetricSubstitutionModel.from_json"]], "from_json() (torchtree.evolution.substitution_model.general.generalsymmetricsubstitutionmodel class method)": [[60, "torchtree.evolution.substitution_model.general.GeneralSymmetricSubstitutionModel.from_json"]], "handle_model_changed() (torchtree.evolution.substitution_model.general.empiricalsubstitutionmodel method)": [[60, "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel.handle_model_changed"]], "handle_model_changed() (torchtree.evolution.substitution_model.general.generaljc69 method)": [[60, "torchtree.evolution.substitution_model.general.GeneralJC69.handle_model_changed"]], "handle_model_changed() (torchtree.evolution.substitution_model.general.generalnonsymmetricsubstitutionmodel method)": [[60, "torchtree.evolution.substitution_model.general.GeneralNonSymmetricSubstitutionModel.handle_model_changed"]], "handle_model_changed() (torchtree.evolution.substitution_model.general.generalsymmetricsubstitutionmodel method)": [[60, "torchtree.evolution.substitution_model.general.GeneralSymmetricSubstitutionModel.handle_model_changed"]], "handle_parameter_changed() (torchtree.evolution.substitution_model.general.empiricalsubstitutionmodel method)": [[60, "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.evolution.substitution_model.general.generaljc69 method)": [[60, "torchtree.evolution.substitution_model.general.GeneralJC69.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.evolution.substitution_model.general.generalnonsymmetricsubstitutionmodel method)": [[60, "torchtree.evolution.substitution_model.general.GeneralNonSymmetricSubstitutionModel.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.evolution.substitution_model.general.generalsymmetricsubstitutionmodel method)": [[60, "torchtree.evolution.substitution_model.general.GeneralSymmetricSubstitutionModel.handle_parameter_changed"]], "p_t() (torchtree.evolution.substitution_model.general.empiricalsubstitutionmodel method)": [[60, "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel.p_t"]], "p_t() (torchtree.evolution.substitution_model.general.generaljc69 method)": [[60, "torchtree.evolution.substitution_model.general.GeneralJC69.p_t"]], "q() (torchtree.evolution.substitution_model.general.empiricalsubstitutionmodel method)": [[60, "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel.q"]], "q() (torchtree.evolution.substitution_model.general.generaljc69 method)": [[60, "torchtree.evolution.substitution_model.general.GeneralJC69.q"]], "q() (torchtree.evolution.substitution_model.general.generalnonsymmetricsubstitutionmodel method)": [[60, "torchtree.evolution.substitution_model.general.GeneralNonSymmetricSubstitutionModel.q"]], "q() (torchtree.evolution.substitution_model.general.generalsymmetricsubstitutionmodel method)": [[60, "torchtree.evolution.substitution_model.general.GeneralSymmetricSubstitutionModel.q"]], "rates (torchtree.evolution.substitution_model.general.generalnonsymmetricsubstitutionmodel property)": [[60, "torchtree.evolution.substitution_model.general.GeneralNonSymmetricSubstitutionModel.rates"]], "rates (torchtree.evolution.substitution_model.general.generalsymmetricsubstitutionmodel property)": [[60, "torchtree.evolution.substitution_model.general.GeneralSymmetricSubstitutionModel.rates"]], "torchtree.evolution.substitution_model.general": [[60, "module-torchtree.evolution.substitution_model.general"], [167, "module-torchtree.evolution.substitution_model.general"]], "torchtree.evolution.substitution_model": [[61, "module-torchtree.evolution.substitution_model"], [163, "module-torchtree.evolution.substitution_model"]], "gtr (class in torchtree.evolution.substitution_model.nucleotide)": [[62, "torchtree.evolution.substitution_model.nucleotide.GTR"]], "hky (class in torchtree.evolution.substitution_model.nucleotide)": [[62, "torchtree.evolution.substitution_model.nucleotide.HKY"]], "jc69 (class in torchtree.evolution.substitution_model.nucleotide)": [[62, "torchtree.evolution.substitution_model.nucleotide.JC69"]], "cpu() (torchtree.evolution.substitution_model.nucleotide.jc69 method)": [[62, "torchtree.evolution.substitution_model.nucleotide.JC69.cpu"]], "cuda() (torchtree.evolution.substitution_model.nucleotide.jc69 method)": [[62, "torchtree.evolution.substitution_model.nucleotide.JC69.cuda"]], "frequencies (torchtree.evolution.substitution_model.nucleotide.jc69 property)": [[62, "torchtree.evolution.substitution_model.nucleotide.JC69.frequencies"]], "from_json() (torchtree.evolution.substitution_model.nucleotide.gtr class method)": [[62, "torchtree.evolution.substitution_model.nucleotide.GTR.from_json"]], "from_json() (torchtree.evolution.substitution_model.nucleotide.hky class method)": [[62, "torchtree.evolution.substitution_model.nucleotide.HKY.from_json"]], "from_json() (torchtree.evolution.substitution_model.nucleotide.jc69 class method)": [[62, "torchtree.evolution.substitution_model.nucleotide.JC69.from_json"]], "handle_model_changed() (torchtree.evolution.substitution_model.nucleotide.gtr method)": [[62, "torchtree.evolution.substitution_model.nucleotide.GTR.handle_model_changed"]], "handle_model_changed() (torchtree.evolution.substitution_model.nucleotide.hky method)": [[62, "torchtree.evolution.substitution_model.nucleotide.HKY.handle_model_changed"]], "handle_model_changed() (torchtree.evolution.substitution_model.nucleotide.jc69 method)": [[62, "torchtree.evolution.substitution_model.nucleotide.JC69.handle_model_changed"]], "handle_parameter_changed() (torchtree.evolution.substitution_model.nucleotide.gtr method)": [[62, "torchtree.evolution.substitution_model.nucleotide.GTR.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.evolution.substitution_model.nucleotide.hky method)": [[62, "torchtree.evolution.substitution_model.nucleotide.HKY.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.evolution.substitution_model.nucleotide.jc69 method)": [[62, "torchtree.evolution.substitution_model.nucleotide.JC69.handle_parameter_changed"]], "kappa (torchtree.evolution.substitution_model.nucleotide.hky property)": [[62, "torchtree.evolution.substitution_model.nucleotide.HKY.kappa"]], "p_t() (torchtree.evolution.substitution_model.nucleotide.jc69 method)": [[62, "torchtree.evolution.substitution_model.nucleotide.JC69.p_t"]], "p_t_analytical() (torchtree.evolution.substitution_model.nucleotide.hky method)": [[62, "torchtree.evolution.substitution_model.nucleotide.HKY.p_t_analytical"]], "q() (torchtree.evolution.substitution_model.nucleotide.gtr method)": [[62, "torchtree.evolution.substitution_model.nucleotide.GTR.q"]], "q() (torchtree.evolution.substitution_model.nucleotide.hky method)": [[62, "torchtree.evolution.substitution_model.nucleotide.HKY.q"]], "q() (torchtree.evolution.substitution_model.nucleotide.jc69 method)": [[62, "torchtree.evolution.substitution_model.nucleotide.JC69.q"]], "rates (torchtree.evolution.substitution_model.nucleotide.gtr property)": [[62, "torchtree.evolution.substitution_model.nucleotide.GTR.rates"]], "torchtree.evolution.substitution_model.nucleotide": [[62, "module-torchtree.evolution.substitution_model.nucleotide"], [168, "module-torchtree.evolution.substitution_model.nucleotide"]], "taxa (class in torchtree.evolution.taxa)": [[63, "torchtree.evolution.taxa.Taxa"]], "taxon (class in torchtree.evolution.taxa)": [[63, "torchtree.evolution.taxa.Taxon"]], "from_json() (torchtree.evolution.taxa.taxa class method)": [[63, "torchtree.evolution.taxa.Taxa.from_json"]], "from_json() (torchtree.evolution.taxa.taxon class method)": [[63, "torchtree.evolution.taxa.Taxon.from_json"]], "torchtree.evolution.taxa": [[63, "module-torchtree.evolution.taxa"], [169, "module-torchtree.evolution.taxa"]], "differencenodeheighttransform (class in torchtree.evolution.tree_height_transform)": [[64, "torchtree.evolution.tree_height_transform.DifferenceNodeHeightTransform"]], "generalnodeheighttransform (class in torchtree.evolution.tree_height_transform)": [[64, "torchtree.evolution.tree_height_transform.GeneralNodeHeightTransform"]], "bijective (torchtree.evolution.tree_height_transform.differencenodeheighttransform attribute)": [[64, "torchtree.evolution.tree_height_transform.DifferenceNodeHeightTransform.bijective"]], "bijective (torchtree.evolution.tree_height_transform.generalnodeheighttransform attribute)": [[64, "torchtree.evolution.tree_height_transform.GeneralNodeHeightTransform.bijective"]], "log_abs_det_jacobian() (torchtree.evolution.tree_height_transform.differencenodeheighttransform method)": [[64, "torchtree.evolution.tree_height_transform.DifferenceNodeHeightTransform.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torchtree.evolution.tree_height_transform.generalnodeheighttransform method)": [[64, "torchtree.evolution.tree_height_transform.GeneralNodeHeightTransform.log_abs_det_jacobian"]], "sign (torchtree.evolution.tree_height_transform.differencenodeheighttransform attribute)": [[64, "torchtree.evolution.tree_height_transform.DifferenceNodeHeightTransform.sign"]], "sign (torchtree.evolution.tree_height_transform.generalnodeheighttransform attribute)": [[64, "torchtree.evolution.tree_height_transform.GeneralNodeHeightTransform.sign"]], "sort_indices() (torchtree.evolution.tree_height_transform.generalnodeheighttransform method)": [[64, "torchtree.evolution.tree_height_transform.GeneralNodeHeightTransform.sort_indices"]], "torchtree.evolution.tree_height_transform": [[64, "module-torchtree.evolution.tree_height_transform"], [170, "module-torchtree.evolution.tree_height_transform"]], "update_bounds() (torchtree.evolution.tree_height_transform.generalnodeheighttransform method)": [[64, "torchtree.evolution.tree_height_transform.GeneralNodeHeightTransform.update_bounds"]], "treelikelihoodmodel (class in torchtree.evolution.tree_likelihood)": [[65, "torchtree.evolution.tree_likelihood.TreeLikelihoodModel"]], "calculate_treelikelihood() (in module torchtree.evolution.tree_likelihood)": [[65, "torchtree.evolution.tree_likelihood.calculate_treelikelihood"]], "calculate_treelikelihood_discrete() (in module torchtree.evolution.tree_likelihood)": [[65, "torchtree.evolution.tree_likelihood.calculate_treelikelihood_discrete"]], "calculate_treelikelihood_discrete_rescaled() (in module torchtree.evolution.tree_likelihood)": [[65, "torchtree.evolution.tree_likelihood.calculate_treelikelihood_discrete_rescaled"]], "calculate_treelikelihood_discrete_safe() (in module torchtree.evolution.tree_likelihood)": [[65, "torchtree.evolution.tree_likelihood.calculate_treelikelihood_discrete_safe"]], "calculate_treelikelihood_tip_states_discrete() (in module torchtree.evolution.tree_likelihood)": [[65, "torchtree.evolution.tree_likelihood.calculate_treelikelihood_tip_states_discrete"]], "calculate_treelikelihood_tip_states_discrete_rescaled() (in module torchtree.evolution.tree_likelihood)": [[65, "torchtree.evolution.tree_likelihood.calculate_treelikelihood_tip_states_discrete_rescaled"]], "calculate_with_tip_partials() (torchtree.evolution.tree_likelihood.treelikelihoodmodel method)": [[65, "torchtree.evolution.tree_likelihood.TreeLikelihoodModel.calculate_with_tip_partials"]], "calculate_with_tip_states() (torchtree.evolution.tree_likelihood.treelikelihoodmodel method)": [[65, "torchtree.evolution.tree_likelihood.TreeLikelihoodModel.calculate_with_tip_states"]], "from_json() (torchtree.evolution.tree_likelihood.treelikelihoodmodel class method)": [[65, "torchtree.evolution.tree_likelihood.TreeLikelihoodModel.from_json"]], "handle_parameter_changed() (torchtree.evolution.tree_likelihood.treelikelihoodmodel method)": [[65, "torchtree.evolution.tree_likelihood.TreeLikelihoodModel.handle_parameter_changed"]], "torchtree.evolution.tree_likelihood": [[65, "module-torchtree.evolution.tree_likelihood"], [171, "module-torchtree.evolution.tree_likelihood"]], "abstracttreemodel (class in torchtree.evolution.tree_model)": [[66, "torchtree.evolution.tree_model.AbstractTreeModel"]], "reparameterizedtimetreemodel (class in torchtree.evolution.tree_model)": [[66, "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel"]], "timetreemodel (class in torchtree.evolution.tree_model)": [[66, "torchtree.evolution.tree_model.TimeTreeModel"]], "treemodel (class in torchtree.evolution.tree_model)": [[66, "torchtree.evolution.tree_model.TreeModel"]], "unrootedtreemodel (class in torchtree.evolution.tree_model)": [[66, "torchtree.evolution.tree_model.UnRootedTreeModel"]], "as_newick() (torchtree.evolution.tree_model.abstracttreemodel method)": [[66, "torchtree.evolution.tree_model.AbstractTreeModel.as_newick"]], "branch_lengths() (torchtree.evolution.tree_model.timetreemodel method)": [[66, "torchtree.evolution.tree_model.TimeTreeModel.branch_lengths"]], "branch_lengths() (torchtree.evolution.tree_model.treemodel method)": [[66, "torchtree.evolution.tree_model.TreeModel.branch_lengths"]], "branch_lengths() (torchtree.evolution.tree_model.unrootedtreemodel method)": [[66, "torchtree.evolution.tree_model.UnRootedTreeModel.branch_lengths"]], "cpu() (torchtree.evolution.tree_model.reparameterizedtimetreemodel method)": [[66, "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel.cpu"]], "cpu() (torchtree.evolution.tree_model.timetreemodel method)": [[66, "torchtree.evolution.tree_model.TimeTreeModel.cpu"]], "cuda() (torchtree.evolution.tree_model.reparameterizedtimetreemodel method)": [[66, "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel.cuda"]], "cuda() (torchtree.evolution.tree_model.timetreemodel method)": [[66, "torchtree.evolution.tree_model.TimeTreeModel.cuda"]], "from_json() (torchtree.evolution.tree_model.reparameterizedtimetreemodel class method)": [[66, "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel.from_json"]], "from_json() (torchtree.evolution.tree_model.timetreemodel class method)": [[66, "torchtree.evolution.tree_model.TimeTreeModel.from_json"]], "from_json() (torchtree.evolution.tree_model.unrootedtreemodel class method)": [[66, "torchtree.evolution.tree_model.UnRootedTreeModel.from_json"]], "handle_model_changed() (torchtree.evolution.tree_model.abstracttreemodel method)": [[66, "torchtree.evolution.tree_model.AbstractTreeModel.handle_model_changed"]], "handle_model_changed() (torchtree.evolution.tree_model.reparameterizedtimetreemodel method)": [[66, "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel.handle_model_changed"]], "handle_parameter_changed() (torchtree.evolution.tree_model.reparameterizedtimetreemodel method)": [[66, "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.evolution.tree_model.timetreemodel method)": [[66, "torchtree.evolution.tree_model.TimeTreeModel.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.evolution.tree_model.unrootedtreemodel method)": [[66, "torchtree.evolution.tree_model.UnRootedTreeModel.handle_parameter_changed"]], "heights_from_branch_lengths() (in module torchtree.evolution.tree_model)": [[66, "torchtree.evolution.tree_model.heights_from_branch_lengths"]], "heights_to_branch_lengths() (in module torchtree.evolution.tree_model)": [[66, "torchtree.evolution.tree_model.heights_to_branch_lengths"]], "initialize_dates_from_taxa() (in module torchtree.evolution.tree_model)": [[66, "torchtree.evolution.tree_model.initialize_dates_from_taxa"]], "json_factory() (torchtree.evolution.tree_model.reparameterizedtimetreemodel static method)": [[66, "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel.json_factory"]], "json_factory() (torchtree.evolution.tree_model.timetreemodel static method)": [[66, "torchtree.evolution.tree_model.TimeTreeModel.json_factory"]], "json_factory() (torchtree.evolution.tree_model.unrootedtreemodel static method)": [[66, "torchtree.evolution.tree_model.UnRootedTreeModel.json_factory"]], "node_heights (torchtree.evolution.tree_model.reparameterizedtimetreemodel property)": [[66, "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel.node_heights"]], "node_heights (torchtree.evolution.tree_model.timetreemodel property)": [[66, "torchtree.evolution.tree_model.TimeTreeModel.node_heights"]], "parse_tree() (in module torchtree.evolution.tree_model)": [[66, "torchtree.evolution.tree_model.parse_tree"]], "postorder (torchtree.evolution.tree_model.abstracttreemodel property)": [[66, "torchtree.evolution.tree_model.AbstractTreeModel.postorder"]], "postorder (torchtree.evolution.tree_model.treemodel property)": [[66, "torchtree.evolution.tree_model.TreeModel.postorder"]], "setup_dates() (in module torchtree.evolution.tree_model)": [[66, "torchtree.evolution.tree_model.setup_dates"]], "setup_indexes() (in module torchtree.evolution.tree_model)": [[66, "torchtree.evolution.tree_model.setup_indexes"]], "taxa (torchtree.evolution.tree_model.abstracttreemodel property)": [[66, "torchtree.evolution.tree_model.AbstractTreeModel.taxa"]], "taxa (torchtree.evolution.tree_model.treemodel property)": [[66, "torchtree.evolution.tree_model.TreeModel.taxa"]], "torchtree.evolution.tree_model": [[66, "module-torchtree.evolution.tree_model"], [172, "module-torchtree.evolution.tree_model"]], "update_leaf_heights() (torchtree.evolution.tree_model.timetreemodel method)": [[66, "torchtree.evolution.tree_model.TimeTreeModel.update_leaf_heights"]], "update_node_heights() (torchtree.evolution.tree_model.reparameterizedtimetreemodel method)": [[66, "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel.update_node_heights"]], "update_traversals() (torchtree.evolution.tree_model.abstracttreemodel method)": [[66, "torchtree.evolution.tree_model.AbstractTreeModel.update_traversals"]], "update_traversals() (torchtree.evolution.tree_model.timetreemodel method)": [[66, "torchtree.evolution.tree_model.TimeTreeModel.update_traversals"]], "write_newick() (torchtree.evolution.tree_model.abstracttreemodel method)": [[66, "torchtree.evolution.tree_model.AbstractTreeModel.write_newick"]], "write_newick() (torchtree.evolution.tree_model.treemodel method)": [[66, "torchtree.evolution.tree_model.TreeModel.write_newick"]], "flexibletimetreemodel (class in torchtree.evolution.tree_model_flexible)": [[67, "torchtree.evolution.tree_model_flexible.FlexibleTimeTreeModel"]], "from_json() (torchtree.evolution.tree_model_flexible.flexibletimetreemodel class method)": [[67, "torchtree.evolution.tree_model_flexible.FlexibleTimeTreeModel.from_json"]], "json_factory() (torchtree.evolution.tree_model_flexible.flexibletimetreemodel static method)": [[67, "torchtree.evolution.tree_model_flexible.FlexibleTimeTreeModel.json_factory"]], "torchtree.evolution.tree_model_flexible": [[67, "module-torchtree.evolution.tree_model_flexible"], [173, "module-torchtree.evolution.tree_model_flexible"]], "torchtree": [[68, "module-torchtree"], [107, "module-torchtree"]], "adaptivestepsize (class in torchtree.inference.hmc.adaptation)": [[69, "torchtree.inference.hmc.adaptation.AdaptiveStepSize"]], "adaptor (class in torchtree.inference.hmc.adaptation)": [[69, "torchtree.inference.hmc.adaptation.Adaptor"]], "dualaveragingstepsize (class in torchtree.inference.hmc.adaptation)": [[69, "torchtree.inference.hmc.adaptation.DualAveragingStepSize"]], "massmatrixadaptor (class in torchtree.inference.hmc.adaptation)": [[69, "torchtree.inference.hmc.adaptation.MassMatrixAdaptor"]], "warmupadaptation (class in torchtree.inference.hmc.adaptation)": [[69, "torchtree.inference.hmc.adaptation.WarmupAdaptation"]], "find_reasonable_step_size() (in module torchtree.inference.hmc.adaptation)": [[69, "torchtree.inference.hmc.adaptation.find_reasonable_step_size"]], "from_json() (torchtree.inference.hmc.adaptation.adaptivestepsize class method)": [[69, "torchtree.inference.hmc.adaptation.AdaptiveStepSize.from_json"]], "from_json() (torchtree.inference.hmc.adaptation.dualaveragingstepsize class method)": [[69, "torchtree.inference.hmc.adaptation.DualAveragingStepSize.from_json"]], "from_json() (torchtree.inference.hmc.adaptation.massmatrixadaptor class method)": [[69, "torchtree.inference.hmc.adaptation.MassMatrixAdaptor.from_json"]], "inverse_mass_matrix (torchtree.inference.hmc.adaptation.warmupadaptation property)": [[69, "torchtree.inference.hmc.adaptation.WarmupAdaptation.inverse_mass_matrix"]], "learn() (torchtree.inference.hmc.adaptation.adaptivestepsize method)": [[69, "torchtree.inference.hmc.adaptation.AdaptiveStepSize.learn"]], "learn() (torchtree.inference.hmc.adaptation.adaptor method)": [[69, "torchtree.inference.hmc.adaptation.Adaptor.learn"]], "learn() (torchtree.inference.hmc.adaptation.dualaveragingstepsize method)": [[69, "torchtree.inference.hmc.adaptation.DualAveragingStepSize.learn"]], "learn() (torchtree.inference.hmc.adaptation.massmatrixadaptor method)": [[69, "torchtree.inference.hmc.adaptation.MassMatrixAdaptor.learn"]], "mass_matrix (torchtree.inference.hmc.adaptation.massmatrixadaptor property)": [[69, "torchtree.inference.hmc.adaptation.MassMatrixAdaptor.mass_matrix"]], "mass_matrix (torchtree.inference.hmc.adaptation.warmupadaptation property)": [[69, "torchtree.inference.hmc.adaptation.WarmupAdaptation.mass_matrix"]], "restart() (torchtree.inference.hmc.adaptation.adaptivestepsize method)": [[69, "torchtree.inference.hmc.adaptation.AdaptiveStepSize.restart"]], "restart() (torchtree.inference.hmc.adaptation.adaptor method)": [[69, "torchtree.inference.hmc.adaptation.Adaptor.restart"]], "restart() (torchtree.inference.hmc.adaptation.dualaveragingstepsize method)": [[69, "torchtree.inference.hmc.adaptation.DualAveragingStepSize.restart"]], "restart() (torchtree.inference.hmc.adaptation.massmatrixadaptor method)": [[69, "torchtree.inference.hmc.adaptation.MassMatrixAdaptor.restart"]], "sqrt_mass_matrix (torchtree.inference.hmc.adaptation.warmupadaptation property)": [[69, "torchtree.inference.hmc.adaptation.WarmupAdaptation.sqrt_mass_matrix"]], "step_size (torchtree.inference.hmc.adaptation.warmupadaptation property)": [[69, "torchtree.inference.hmc.adaptation.WarmupAdaptation.step_size"]], "torchtree.inference.hmc.adaptation": [[69, "module-torchtree.inference.hmc.adaptation"], [176, "module-torchtree.inference.hmc.adaptation"]], "torchtree.inference.hmc.adaptors": [[70, "module-torchtree.inference.hmc.adaptors"], [177, "module-torchtree.inference.hmc.adaptors"]], "hamiltonian (class in torchtree.inference.hmc.hamiltonian)": [[71, "torchtree.inference.hmc.hamiltonian.Hamiltonian"]], "from_json() (torchtree.inference.hmc.hamiltonian.hamiltonian class method)": [[71, "torchtree.inference.hmc.hamiltonian.Hamiltonian.from_json"]], "handle_parameter_changed() (torchtree.inference.hmc.hamiltonian.hamiltonian method)": [[71, "torchtree.inference.hmc.hamiltonian.Hamiltonian.handle_parameter_changed"]], "kinetic_energy() (torchtree.inference.hmc.hamiltonian.hamiltonian method)": [[71, "torchtree.inference.hmc.hamiltonian.Hamiltonian.kinetic_energy"]], "potential_energy() (torchtree.inference.hmc.hamiltonian.hamiltonian method)": [[71, "torchtree.inference.hmc.hamiltonian.Hamiltonian.potential_energy"]], "sample_momentum() (torchtree.inference.hmc.hamiltonian.hamiltonian method)": [[71, "torchtree.inference.hmc.hamiltonian.Hamiltonian.sample_momentum"]], "torchtree.inference.hmc.hamiltonian": [[71, "module-torchtree.inference.hmc.hamiltonian"], [178, "module-torchtree.inference.hmc.hamiltonian"]], "hmc (class in torchtree.inference.hmc.hmc)": [[72, "torchtree.inference.hmc.hmc.HMC"]], "find_reasonable_step_size() (torchtree.inference.hmc.hmc.hmc method)": [[72, "torchtree.inference.hmc.hmc.HMC.find_reasonable_step_size"]], "from_json() (torchtree.inference.hmc.hmc.hmc class method)": [[72, "torchtree.inference.hmc.hmc.HMC.from_json"]], "hamiltonian() (torchtree.inference.hmc.hmc.hmc method)": [[72, "torchtree.inference.hmc.hmc.HMC.hamiltonian"]], "run() (torchtree.inference.hmc.hmc.hmc method)": [[72, "torchtree.inference.hmc.hmc.HMC.run"]], "sample_momentum() (torchtree.inference.hmc.hmc.hmc method)": [[72, "torchtree.inference.hmc.hmc.HMC.sample_momentum"]], "torchtree.inference.hmc.hmc": [[72, "module-torchtree.inference.hmc.hmc"], [179, "module-torchtree.inference.hmc.hmc"]], "torchtree.inference.hmc": [[73, "module-torchtree.inference.hmc"], [175, "module-torchtree.inference.hmc"]], "integrator (class in torchtree.inference.hmc.integrator)": [[74, "torchtree.inference.hmc.integrator.Integrator"]], "leapfrogintegrator (class in torchtree.inference.hmc.integrator)": [[74, "torchtree.inference.hmc.integrator.LeapfrogIntegrator"]], "from_json() (torchtree.inference.hmc.integrator.leapfrogintegrator class method)": [[74, "torchtree.inference.hmc.integrator.LeapfrogIntegrator.from_json"]], "set_tensor() (in module torchtree.inference.hmc.integrator)": [[74, "torchtree.inference.hmc.integrator.set_tensor"]], "torchtree.inference.hmc.integrator": [[74, "module-torchtree.inference.hmc.integrator"], [180, "module-torchtree.inference.hmc.integrator"]], "hmcoperator (class in torchtree.inference.hmc.operator)": [[75, "torchtree.inference.hmc.operator.HMCOperator"]], "adaptable_parameter() (torchtree.inference.hmc.operator.hmcoperator method)": [[75, "torchtree.inference.hmc.operator.HMCOperator.adaptable_parameter"]], "from_json() (torchtree.inference.hmc.operator.hmcoperator class method)": [[75, "torchtree.inference.hmc.operator.HMCOperator.from_json"]], "handle_parameter_changed() (torchtree.inference.hmc.operator.hmcoperator method)": [[75, "torchtree.inference.hmc.operator.HMCOperator.handle_parameter_changed"]], "mass_matrix (torchtree.inference.hmc.operator.hmcoperator property)": [[75, "torchtree.inference.hmc.operator.HMCOperator.mass_matrix"]], "set_adaptable_parameter() (torchtree.inference.hmc.operator.hmcoperator method)": [[75, "torchtree.inference.hmc.operator.HMCOperator.set_adaptable_parameter"]], "torchtree.inference.hmc.operator": [[75, "module-torchtree.inference.hmc.operator"], [181, "module-torchtree.inference.hmc.operator"]], "tune() (torchtree.inference.hmc.operator.hmcoperator method)": [[75, "torchtree.inference.hmc.operator.HMCOperator.tune"]], "tuning_parameter (torchtree.inference.hmc.operator.hmcoperator property)": [[75, "torchtree.inference.hmc.operator.HMCOperator.tuning_parameter"]], "update_mass_matrices() (torchtree.inference.hmc.operator.hmcoperator method)": [[75, "torchtree.inference.hmc.operator.HMCOperator.update_mass_matrices"]], "stanwindowedadaptation (class in torchtree.inference.hmc.stan_adaptation)": [[76, "torchtree.inference.hmc.stan_adaptation.StanWindowedAdaptation"]], "from_json() (torchtree.inference.hmc.stan_adaptation.stanwindowedadaptation class method)": [[76, "torchtree.inference.hmc.stan_adaptation.StanWindowedAdaptation.from_json"]], "learn() (torchtree.inference.hmc.stan_adaptation.stanwindowedadaptation method)": [[76, "torchtree.inference.hmc.stan_adaptation.StanWindowedAdaptation.learn"]], "restart() (torchtree.inference.hmc.stan_adaptation.stanwindowedadaptation method)": [[76, "torchtree.inference.hmc.stan_adaptation.StanWindowedAdaptation.restart"]], "torchtree.inference.hmc.stan_adaptation": [[76, "module-torchtree.inference.hmc.stan_adaptation"], [182, "module-torchtree.inference.hmc.stan_adaptation"]], "torchtree.inference": [[77, "module-torchtree.inference"], [174, "module-torchtree.inference"]], "torchtree.inference.mcmc": [[78, "module-torchtree.inference.mcmc"], [183, "module-torchtree.inference.mcmc"]], "mcmc (class in torchtree.inference.mcmc.mcmc)": [[79, "torchtree.inference.mcmc.mcmc.MCMC"]], "from_json() (torchtree.inference.mcmc.mcmc.mcmc class method)": [[79, "torchtree.inference.mcmc.mcmc.MCMC.from_json"]], "run() (torchtree.inference.mcmc.mcmc.mcmc method)": [[79, "torchtree.inference.mcmc.mcmc.MCMC.run"]], "torchtree.inference.mcmc.mcmc": [[79, "module-torchtree.inference.mcmc.mcmc"], [184, "module-torchtree.inference.mcmc.mcmc"]], "mcmcoperator (class in torchtree.inference.mcmc.operator)": [[80, "torchtree.inference.mcmc.operator.MCMCOperator"]], "scaleroperator (class in torchtree.inference.mcmc.operator)": [[80, "torchtree.inference.mcmc.operator.ScalerOperator"]], "slidingwindowoperator (class in torchtree.inference.mcmc.operator)": [[80, "torchtree.inference.mcmc.operator.SlidingWindowOperator"]], "accept() (torchtree.inference.mcmc.operator.mcmcoperator method)": [[80, "torchtree.inference.mcmc.operator.MCMCOperator.accept"]], "adaptable_parameter (torchtree.inference.mcmc.operator.mcmcoperator property)": [[80, "torchtree.inference.mcmc.operator.MCMCOperator.adaptable_parameter"]], "adaptable_parameter() (torchtree.inference.mcmc.operator.scaleroperator method)": [[80, "torchtree.inference.mcmc.operator.ScalerOperator.adaptable_parameter"]], "adaptable_parameter() (torchtree.inference.mcmc.operator.slidingwindowoperator method)": [[80, "torchtree.inference.mcmc.operator.SlidingWindowOperator.adaptable_parameter"]], "from_json() (torchtree.inference.mcmc.operator.scaleroperator class method)": [[80, "torchtree.inference.mcmc.operator.ScalerOperator.from_json"]], "from_json() (torchtree.inference.mcmc.operator.slidingwindowoperator class method)": [[80, "torchtree.inference.mcmc.operator.SlidingWindowOperator.from_json"]], "reject() (torchtree.inference.mcmc.operator.mcmcoperator method)": [[80, "torchtree.inference.mcmc.operator.MCMCOperator.reject"]], "set_adaptable_parameter() (torchtree.inference.mcmc.operator.mcmcoperator method)": [[80, "torchtree.inference.mcmc.operator.MCMCOperator.set_adaptable_parameter"]], "set_adaptable_parameter() (torchtree.inference.mcmc.operator.scaleroperator method)": [[80, "torchtree.inference.mcmc.operator.ScalerOperator.set_adaptable_parameter"]], "set_adaptable_parameter() (torchtree.inference.mcmc.operator.slidingwindowoperator method)": [[80, "torchtree.inference.mcmc.operator.SlidingWindowOperator.set_adaptable_parameter"]], "step() (torchtree.inference.mcmc.operator.mcmcoperator method)": [[80, "torchtree.inference.mcmc.operator.MCMCOperator.step"]], "torchtree.inference.mcmc.operator": [[80, "module-torchtree.inference.mcmc.operator"], [185, "module-torchtree.inference.mcmc.operator"]], "tune() (torchtree.inference.mcmc.operator.mcmcoperator method)": [[80, "torchtree.inference.mcmc.operator.MCMCOperator.tune"]], "tuning_parameter (torchtree.inference.mcmc.operator.mcmcoperator property)": [[80, "torchtree.inference.mcmc.operator.MCMCOperator.tuning_parameter"]], "tuning_parameter (torchtree.inference.mcmc.operator.scaleroperator property)": [[80, "torchtree.inference.mcmc.operator.ScalerOperator.tuning_parameter"]], "tuning_parameter (torchtree.inference.mcmc.operator.slidingwindowoperator property)": [[80, "torchtree.inference.mcmc.operator.SlidingWindowOperator.tuning_parameter"]], "sampler (class in torchtree.inference.sampler)": [[81, "torchtree.inference.sampler.Sampler"]], "from_json() (torchtree.inference.sampler.sampler class method)": [[81, "torchtree.inference.sampler.Sampler.from_json"]], "run() (torchtree.inference.sampler.sampler method)": [[81, "torchtree.inference.sampler.Sampler.run"]], "torchtree.inference.sampler": [[81, "module-torchtree.inference.sampler"], [186, "module-torchtree.inference.sampler"]], "extract_tensors_and_parameters() (in module torchtree.inference.utils)": [[82, "torchtree.inference.utils.extract_tensors_and_parameters"]], "torchtree.inference.utils": [[82, "module-torchtree.inference.utils"], [187, "module-torchtree.inference.utils"]], "soft_max() (in module torchtree.math)": [[83, "torchtree.math.soft_max"]], "soft_searchsorted() (in module torchtree.math)": [[83, "torchtree.math.soft_searchsorted"]], "soft_sort() (in module torchtree.math)": [[83, "torchtree.math.soft_sort"]], "torchtree.math": [[83, "module-torchtree.math"], [188, "module-torchtree.math"]], "energyfunctionmodel (class in torchtree.nf.energy_functions)": [[84, "torchtree.nf.energy_functions.EnergyFunctionModel"]], "from_json() (torchtree.nf.energy_functions.energyfunctionmodel class method)": [[84, "torchtree.nf.energy_functions.EnergyFunctionModel.from_json"]], "handle_model_changed() (torchtree.nf.energy_functions.energyfunctionmodel method)": [[84, "torchtree.nf.energy_functions.EnergyFunctionModel.handle_model_changed"]], "torchtree.nf.energy_functions": [[84, "module-torchtree.nf.energy_functions"], [190, "module-torchtree.nf.energy_functions"]], "w1() (in module torchtree.nf.energy_functions)": [[84, "torchtree.nf.energy_functions.w1"]], "w2() (in module torchtree.nf.energy_functions)": [[84, "torchtree.nf.energy_functions.w2"]], "w3() (in module torchtree.nf.energy_functions)": [[84, "torchtree.nf.energy_functions.w3"]], "normalizingflow (class in torchtree.nf.flow)": [[85, "torchtree.nf.flow.NormalizingFlow"]], "apply_flow() (torchtree.nf.flow.normalizingflow method)": [[85, "torchtree.nf.flow.NormalizingFlow.apply_flow"]], "cpu() (torchtree.nf.flow.normalizingflow method)": [[85, "torchtree.nf.flow.NormalizingFlow.cpu"]], "cuda() (torchtree.nf.flow.normalizingflow method)": [[85, "torchtree.nf.flow.NormalizingFlow.cuda"]], "entropy() (torchtree.nf.flow.normalizingflow method)": [[85, "torchtree.nf.flow.NormalizingFlow.entropy"]], "forward() (torchtree.nf.flow.normalizingflow method)": [[85, "torchtree.nf.flow.NormalizingFlow.forward"]], "from_json() (torchtree.nf.flow.normalizingflow class method)": [[85, "torchtree.nf.flow.NormalizingFlow.from_json"]], "log_prob() (torchtree.nf.flow.normalizingflow method)": [[85, "torchtree.nf.flow.NormalizingFlow.log_prob"]], "parameters() (torchtree.nf.flow.normalizingflow method)": [[85, "torchtree.nf.flow.NormalizingFlow.parameters"]], "rsample() (torchtree.nf.flow.normalizingflow method)": [[85, "torchtree.nf.flow.NormalizingFlow.rsample"]], "sample() (torchtree.nf.flow.normalizingflow method)": [[85, "torchtree.nf.flow.NormalizingFlow.sample"]], "to() (torchtree.nf.flow.normalizingflow method)": [[85, "torchtree.nf.flow.NormalizingFlow.to"]], "torchtree.nf.flow": [[85, "module-torchtree.nf.flow"], [191, "module-torchtree.nf.flow"]], "torchtree.nf": [[86, "module-torchtree.nf"], [189, "module-torchtree.nf"]], "planartransform (class in torchtree.nf.planar)": [[87, "torchtree.nf.planar.PlanarTransform"]], "forward() (torchtree.nf.planar.planartransform method)": [[87, "torchtree.nf.planar.PlanarTransform.forward"]], "log_abs_det_jacobian() (torchtree.nf.planar.planartransform method)": [[87, "torchtree.nf.planar.PlanarTransform.log_abs_det_jacobian"]], "torchtree.nf.planar": [[87, "module-torchtree.nf.planar"], [192, "module-torchtree.nf.planar"]], "u_hat() (torchtree.nf.planar.planartransform method)": [[87, "torchtree.nf.planar.PlanarTransform.u_hat"]], "batchnorm (class in torchtree.nf.realnvp)": [[88, "torchtree.nf.realnvp.BatchNorm"]], "flowsequential (class in torchtree.nf.realnvp)": [[88, "torchtree.nf.realnvp.FlowSequential"]], "linearmaskedcoupling (class in torchtree.nf.realnvp)": [[88, "torchtree.nf.realnvp.LinearMaskedCoupling"]], "realnvp (class in torchtree.nf.realnvp)": [[88, "torchtree.nf.realnvp.RealNVP"]], "apply_flow() (torchtree.nf.realnvp.realnvp method)": [[88, "torchtree.nf.realnvp.RealNVP.apply_flow"]], "batch_shape (torchtree.nf.realnvp.realnvp property)": [[88, "torchtree.nf.realnvp.RealNVP.batch_shape"]], "entropy() (torchtree.nf.realnvp.realnvp method)": [[88, "torchtree.nf.realnvp.RealNVP.entropy"]], "forward() (torchtree.nf.realnvp.batchnorm method)": [[88, "torchtree.nf.realnvp.BatchNorm.forward"]], "forward() (torchtree.nf.realnvp.flowsequential method)": [[88, "torchtree.nf.realnvp.FlowSequential.forward"]], "forward() (torchtree.nf.realnvp.linearmaskedcoupling method)": [[88, "torchtree.nf.realnvp.LinearMaskedCoupling.forward"]], "forward() (torchtree.nf.realnvp.realnvp method)": [[88, "torchtree.nf.realnvp.RealNVP.forward"]], "from_json() (torchtree.nf.realnvp.realnvp class method)": [[88, "torchtree.nf.realnvp.RealNVP.from_json"]], "inverse() (torchtree.nf.realnvp.batchnorm method)": [[88, "torchtree.nf.realnvp.BatchNorm.inverse"]], "inverse() (torchtree.nf.realnvp.flowsequential method)": [[88, "torchtree.nf.realnvp.FlowSequential.inverse"]], "inverse() (torchtree.nf.realnvp.linearmaskedcoupling method)": [[88, "torchtree.nf.realnvp.LinearMaskedCoupling.inverse"]], "inverse() (torchtree.nf.realnvp.realnvp method)": [[88, "torchtree.nf.realnvp.RealNVP.inverse"]], "log_prob() (torchtree.nf.realnvp.realnvp method)": [[88, "torchtree.nf.realnvp.RealNVP.log_prob"]], "parameters() (torchtree.nf.realnvp.realnvp method)": [[88, "torchtree.nf.realnvp.RealNVP.parameters"]], "rsample() (torchtree.nf.realnvp.realnvp method)": [[88, "torchtree.nf.realnvp.RealNVP.rsample"]], "sample() (torchtree.nf.realnvp.realnvp method)": [[88, "torchtree.nf.realnvp.RealNVP.sample"]], "torchtree.nf.realnvp": [[88, "module-torchtree.nf.realnvp"], [193, "module-torchtree.nf.realnvp"]], "torchtree.nn": [[89, "module-torchtree.nn"], [194, "module-torchtree.nn"]], "module (class in torchtree.nn.module)": [[90, "torchtree.nn.module.Module"]], "cpu() (torchtree.nn.module.module method)": [[90, "torchtree.nn.module.Module.cpu"]], "cuda() (torchtree.nn.module.module method)": [[90, "torchtree.nn.module.Module.cuda"]], "from_json() (torchtree.nn.module.module class method)": [[90, "torchtree.nn.module.Module.from_json"]], "module (torchtree.nn.module.module property)": [[90, "torchtree.nn.module.Module.module"]], "to() (torchtree.nn.module.module method)": [[90, "torchtree.nn.module.Module.to"]], "torchtree.nn.module": [[90, "module-torchtree.nn.module"], [195, "module-torchtree.nn.module"]], "dualaveraging (class in torchtree.ops.dual_averaging)": [[91, "torchtree.ops.dual_averaging.DualAveraging"]], "restart() (torchtree.ops.dual_averaging.dualaveraging method)": [[91, "torchtree.ops.dual_averaging.DualAveraging.restart"]], "step() (torchtree.ops.dual_averaging.dualaveraging method)": [[91, "torchtree.ops.dual_averaging.DualAveraging.step"]], "torchtree.ops.dual_averaging": [[91, "module-torchtree.ops.dual_averaging"], [197, "module-torchtree.ops.dual_averaging"]], "torchtree.ops": [[92, "module-torchtree.ops"], [196, "module-torchtree.ops"]], "welfordvariance (class in torchtree.ops.welford)": [[93, "torchtree.ops.welford.WelfordVariance"]], "add_sample() (torchtree.ops.welford.welfordvariance method)": [[93, "torchtree.ops.welford.WelfordVariance.add_sample"]], "mean() (torchtree.ops.welford.welfordvariance method)": [[93, "torchtree.ops.welford.WelfordVariance.mean"]], "reset() (torchtree.ops.welford.welfordvariance method)": [[93, "torchtree.ops.welford.WelfordVariance.reset"]], "torchtree.ops.welford": [[93, "module-torchtree.ops.welford"], [198, "module-torchtree.ops.welford"]], "variance() (torchtree.ops.welford.welfordvariance method)": [[93, "torchtree.ops.welford.WelfordVariance.variance"]], "baseconvergence (class in torchtree.optim.convergence)": [[94, "torchtree.optim.convergence.BaseConvergence"]], "stanvariationalconvergence (class in torchtree.optim.convergence)": [[94, "torchtree.optim.convergence.StanVariationalConvergence"]], "variationalconvergence (class in torchtree.optim.convergence)": [[94, "torchtree.optim.convergence.VariationalConvergence"]], "check() (torchtree.optim.convergence.baseconvergence method)": [[94, "torchtree.optim.convergence.BaseConvergence.check"]], "check() (torchtree.optim.convergence.stanvariationalconvergence method)": [[94, "torchtree.optim.convergence.StanVariationalConvergence.check"]], "check() (torchtree.optim.convergence.variationalconvergence method)": [[94, "torchtree.optim.convergence.VariationalConvergence.check"]], "from_json() (torchtree.optim.convergence.stanvariationalconvergence class method)": [[94, "torchtree.optim.convergence.StanVariationalConvergence.from_json"]], "from_json() (torchtree.optim.convergence.variationalconvergence class method)": [[94, "torchtree.optim.convergence.VariationalConvergence.from_json"]], "rel_difference() (torchtree.optim.convergence.stanvariationalconvergence static method)": [[94, "torchtree.optim.convergence.StanVariationalConvergence.rel_difference"]], "torchtree.optim.convergence": [[94, "module-torchtree.optim.convergence"], [200, "module-torchtree.optim.convergence"]], "torchtree.optim": [[95, "module-torchtree.optim"], [199, "module-torchtree.optim"]], "scheduler (class in torchtree.optim.lr_scheduler)": [[96, "torchtree.optim.lr_scheduler.Scheduler"]], "from_json() (torchtree.optim.lr_scheduler.scheduler class method)": [[96, "torchtree.optim.lr_scheduler.Scheduler.from_json"]], "step() (torchtree.optim.lr_scheduler.scheduler method)": [[96, "torchtree.optim.lr_scheduler.Scheduler.step"]], "torchtree.optim.lr_scheduler": [[96, "module-torchtree.optim.lr_scheduler"], [201, "module-torchtree.optim.lr_scheduler"]], "optimizer (class in torchtree.optim.optimizer)": [[97, "torchtree.optim.optimizer.Optimizer"]], "from_json() (torchtree.optim.optimizer.optimizer class method)": [[97, "torchtree.optim.optimizer.Optimizer.from_json"]], "run() (torchtree.optim.optimizer.optimizer method)": [[97, "torchtree.optim.optimizer.Optimizer.run"]], "torchtree.optim.optimizer": [[97, "module-torchtree.optim.optimizer"], [202, "module-torchtree.optim.optimizer"]], "main() (in module torchtree.torchtree)": [[98, "torchtree.torchtree.main"]], "torchtree.torchtree": [[98, "module-torchtree.torchtree"], [203, "module-torchtree.torchtree"]], "regression() (in module torchtree.treeregression)": [[99, "torchtree.treeregression.regression"]], "torchtree.treeregression": [[99, "module-torchtree.treeregression"], [204, "module-torchtree.treeregression"]], "id (in module torchtree.typing)": [[100, "torchtree.typing.ID"]], "listparameter (in module torchtree.typing)": [[100, "torchtree.typing.ListParameter"]], "listtensor (in module torchtree.typing)": [[100, "torchtree.typing.ListTensor"]], "ordereddicttype (in module torchtree.typing)": [[100, "torchtree.typing.OrderedDictType"]], "torchtree.typing": [[100, "module-torchtree.typing"], [205, "module-torchtree.typing"]], "cubo (class in torchtree.variational.chi)": [[101, "torchtree.variational.chi.CUBO"]], "from_json() (torchtree.variational.chi.cubo class method)": [[101, "torchtree.variational.chi.CUBO.from_json"]], "handle_parameter_changed() (torchtree.variational.chi.cubo method)": [[101, "torchtree.variational.chi.CUBO.handle_parameter_changed"]], "torchtree.variational.chi": [[101, "module-torchtree.variational.chi"], [207, "module-torchtree.variational.chi"]], "torchtree.variational": [[102, "module-torchtree.variational"], [206, "module-torchtree.variational"]], "elbo (class in torchtree.variational.kl)": [[103, "torchtree.variational.kl.ELBO"]], "klpq (class in torchtree.variational.kl)": [[103, "torchtree.variational.kl.KLpq"]], "klpqimportance (class in torchtree.variational.kl)": [[103, "torchtree.variational.kl.KLpqImportance"]], "selbo (class in torchtree.variational.kl)": [[103, "torchtree.variational.kl.SELBO"]], "from_json() (torchtree.variational.kl.elbo class method)": [[103, "torchtree.variational.kl.ELBO.from_json"]], "from_json() (torchtree.variational.kl.klpq class method)": [[103, "torchtree.variational.kl.KLpq.from_json"]], "from_json() (torchtree.variational.kl.klpqimportance class method)": [[103, "torchtree.variational.kl.KLpqImportance.from_json"]], "from_json() (torchtree.variational.kl.selbo class method)": [[103, "torchtree.variational.kl.SELBO.from_json"]], "handle_parameter_changed() (torchtree.variational.kl.elbo method)": [[103, "torchtree.variational.kl.ELBO.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.variational.kl.klpq method)": [[103, "torchtree.variational.kl.KLpq.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.variational.kl.klpqimportance method)": [[103, "torchtree.variational.kl.KLpqImportance.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.variational.kl.selbo method)": [[103, "torchtree.variational.kl.SELBO.handle_parameter_changed"]], "torchtree.variational.kl": [[103, "module-torchtree.variational.kl"], [208, "module-torchtree.variational.kl"]], "vr (class in torchtree.variational.renyi)": [[104, "torchtree.variational.renyi.VR"]], "from_json() (torchtree.variational.renyi.vr class method)": [[104, "torchtree.variational.renyi.VR.from_json"]], "handle_parameter_changed() (torchtree.variational.renyi.vr method)": [[104, "torchtree.variational.renyi.VR.handle_parameter_changed"]], "torchtree.variational.renyi": [[104, "module-torchtree.variational.renyi"], [209, "module-torchtree.variational.renyi"]]}})