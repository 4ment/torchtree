Search.setIndex({"docnames": ["autoapi/torchtree/_version/index", "autoapi/torchtree/cli/advi/index", "autoapi/torchtree/cli/argparse_utils/index", "autoapi/torchtree/cli/cli/index", "autoapi/torchtree/cli/evolution/index", "autoapi/torchtree/cli/hmc/index", "autoapi/torchtree/cli/index", "autoapi/torchtree/cli/jacobians/index", "autoapi/torchtree/cli/loggers/index", "autoapi/torchtree/cli/map/index", "autoapi/torchtree/cli/mcmc/index", "autoapi/torchtree/cli/operators/index", "autoapi/torchtree/cli/plugin/index", "autoapi/torchtree/cli/plugin_manager/index", "autoapi/torchtree/cli/priors/index", "autoapi/torchtree/cli/utils/index", "autoapi/torchtree/core/abstractparameter/index", "autoapi/torchtree/core/classproperty_decorator/index", "autoapi/torchtree/core/container/index", "autoapi/torchtree/core/identifiable/index", "autoapi/torchtree/core/index", "autoapi/torchtree/core/logger/index", "autoapi/torchtree/core/model/index", "autoapi/torchtree/core/parameter/index", "autoapi/torchtree/core/parameter_encoder/index", "autoapi/torchtree/core/parameter_utils/index", "autoapi/torchtree/core/parametric/index", "autoapi/torchtree/core/runnable/index", "autoapi/torchtree/core/serializable/index", "autoapi/torchtree/core/utils/index", "autoapi/torchtree/distributions/bayesian_bridge/index", "autoapi/torchtree/distributions/ctmc_scale/index", "autoapi/torchtree/distributions/deterministic_normal/index", "autoapi/torchtree/distributions/distributions/index", "autoapi/torchtree/distributions/gmrf/index", "autoapi/torchtree/distributions/gmrf_integrated/index", "autoapi/torchtree/distributions/index", "autoapi/torchtree/distributions/inverse_gamma/index", "autoapi/torchtree/distributions/joint_distribution/index", "autoapi/torchtree/distributions/log_normal/index", "autoapi/torchtree/distributions/multivariate_normal/index", "autoapi/torchtree/distributions/normal/index", "autoapi/torchtree/distributions/one_on_x/index", "autoapi/torchtree/distributions/scale_mixture/index", "autoapi/torchtree/distributions/transforms/index", "autoapi/torchtree/distributions/tree_prior/index", "autoapi/torchtree/evolution/alignment/index", "autoapi/torchtree/evolution/attribute_pattern/index", "autoapi/torchtree/evolution/bdsk/index", "autoapi/torchtree/evolution/birth_death/index", "autoapi/torchtree/evolution/branch_model/index", "autoapi/torchtree/evolution/coalescent/index", "autoapi/torchtree/evolution/datatype/index", "autoapi/torchtree/evolution/index", "autoapi/torchtree/evolution/io/index", "autoapi/torchtree/evolution/poisson_tree_likelihood/index", "autoapi/torchtree/evolution/rate_transform/index", "autoapi/torchtree/evolution/root_transform/index", "autoapi/torchtree/evolution/site_model/index", "autoapi/torchtree/evolution/site_pattern/index", "autoapi/torchtree/evolution/substitution_model/abstract/index", "autoapi/torchtree/evolution/substitution_model/amino_acid/index", "autoapi/torchtree/evolution/substitution_model/codon/index", "autoapi/torchtree/evolution/substitution_model/general/index", "autoapi/torchtree/evolution/substitution_model/index", "autoapi/torchtree/evolution/substitution_model/nucleotide/index", "autoapi/torchtree/evolution/taxa/index", "autoapi/torchtree/evolution/tree_height_transform/index", "autoapi/torchtree/evolution/tree_likelihood/index", "autoapi/torchtree/evolution/tree_model/index", "autoapi/torchtree/evolution/tree_model_flexible/index", "autoapi/torchtree/evolution/tree_regression/index", "autoapi/torchtree/index", "autoapi/torchtree/inference/hmc/adaptation/index", "autoapi/torchtree/inference/hmc/hamiltonian/index", "autoapi/torchtree/inference/hmc/hmc/index", "autoapi/torchtree/inference/hmc/index", "autoapi/torchtree/inference/hmc/integrator/index", "autoapi/torchtree/inference/hmc/operator/index", "autoapi/torchtree/inference/hmc/stan_adaptation/index", "autoapi/torchtree/inference/index", "autoapi/torchtree/inference/mcmc/gmrf_block_updating/index", "autoapi/torchtree/inference/mcmc/index", "autoapi/torchtree/inference/mcmc/mcmc/index", "autoapi/torchtree/inference/mcmc/operator/index", "autoapi/torchtree/inference/sampler/index", "autoapi/torchtree/inference/utils/index", "autoapi/torchtree/nf/energy_functions/index", "autoapi/torchtree/nf/flow/index", "autoapi/torchtree/nf/index", "autoapi/torchtree/nf/planar/index", "autoapi/torchtree/nf/realnvp/index", "autoapi/torchtree/nn/index", "autoapi/torchtree/nn/module/index", "autoapi/torchtree/ops/dual_averaging/index", "autoapi/torchtree/ops/index", "autoapi/torchtree/ops/smooth/index", "autoapi/torchtree/ops/welford/index", "autoapi/torchtree/optim/convergence/index", "autoapi/torchtree/optim/index", "autoapi/torchtree/optim/lr_scheduler/index", "autoapi/torchtree/optim/optimizer/index", "autoapi/torchtree/torchtree/index", "autoapi/torchtree/typing/index", "autoapi/torchtree/variational/chi/index", "autoapi/torchtree/variational/index", "autoapi/torchtree/variational/kl/index", "autoapi/torchtree/variational/renyi/index", "bibliography/bib", "index"], "filenames": ["autoapi/torchtree/_version/index.rst", "autoapi/torchtree/cli/advi/index.rst", "autoapi/torchtree/cli/argparse_utils/index.rst", "autoapi/torchtree/cli/cli/index.rst", "autoapi/torchtree/cli/evolution/index.rst", "autoapi/torchtree/cli/hmc/index.rst", "autoapi/torchtree/cli/index.rst", "autoapi/torchtree/cli/jacobians/index.rst", "autoapi/torchtree/cli/loggers/index.rst", "autoapi/torchtree/cli/map/index.rst", "autoapi/torchtree/cli/mcmc/index.rst", "autoapi/torchtree/cli/operators/index.rst", "autoapi/torchtree/cli/plugin/index.rst", "autoapi/torchtree/cli/plugin_manager/index.rst", "autoapi/torchtree/cli/priors/index.rst", "autoapi/torchtree/cli/utils/index.rst", "autoapi/torchtree/core/abstractparameter/index.rst", "autoapi/torchtree/core/classproperty_decorator/index.rst", "autoapi/torchtree/core/container/index.rst", "autoapi/torchtree/core/identifiable/index.rst", "autoapi/torchtree/core/index.rst", "autoapi/torchtree/core/logger/index.rst", "autoapi/torchtree/core/model/index.rst", "autoapi/torchtree/core/parameter/index.rst", "autoapi/torchtree/core/parameter_encoder/index.rst", "autoapi/torchtree/core/parameter_utils/index.rst", "autoapi/torchtree/core/parametric/index.rst", "autoapi/torchtree/core/runnable/index.rst", "autoapi/torchtree/core/serializable/index.rst", "autoapi/torchtree/core/utils/index.rst", "autoapi/torchtree/distributions/bayesian_bridge/index.rst", "autoapi/torchtree/distributions/ctmc_scale/index.rst", "autoapi/torchtree/distributions/deterministic_normal/index.rst", "autoapi/torchtree/distributions/distributions/index.rst", "autoapi/torchtree/distributions/gmrf/index.rst", "autoapi/torchtree/distributions/gmrf_integrated/index.rst", "autoapi/torchtree/distributions/index.rst", "autoapi/torchtree/distributions/inverse_gamma/index.rst", "autoapi/torchtree/distributions/joint_distribution/index.rst", "autoapi/torchtree/distributions/log_normal/index.rst", "autoapi/torchtree/distributions/multivariate_normal/index.rst", "autoapi/torchtree/distributions/normal/index.rst", "autoapi/torchtree/distributions/one_on_x/index.rst", "autoapi/torchtree/distributions/scale_mixture/index.rst", "autoapi/torchtree/distributions/transforms/index.rst", "autoapi/torchtree/distributions/tree_prior/index.rst", "autoapi/torchtree/evolution/alignment/index.rst", "autoapi/torchtree/evolution/attribute_pattern/index.rst", "autoapi/torchtree/evolution/bdsk/index.rst", "autoapi/torchtree/evolution/birth_death/index.rst", "autoapi/torchtree/evolution/branch_model/index.rst", "autoapi/torchtree/evolution/coalescent/index.rst", "autoapi/torchtree/evolution/datatype/index.rst", "autoapi/torchtree/evolution/index.rst", "autoapi/torchtree/evolution/io/index.rst", "autoapi/torchtree/evolution/poisson_tree_likelihood/index.rst", "autoapi/torchtree/evolution/rate_transform/index.rst", "autoapi/torchtree/evolution/root_transform/index.rst", "autoapi/torchtree/evolution/site_model/index.rst", "autoapi/torchtree/evolution/site_pattern/index.rst", "autoapi/torchtree/evolution/substitution_model/abstract/index.rst", "autoapi/torchtree/evolution/substitution_model/amino_acid/index.rst", "autoapi/torchtree/evolution/substitution_model/codon/index.rst", "autoapi/torchtree/evolution/substitution_model/general/index.rst", "autoapi/torchtree/evolution/substitution_model/index.rst", "autoapi/torchtree/evolution/substitution_model/nucleotide/index.rst", "autoapi/torchtree/evolution/taxa/index.rst", "autoapi/torchtree/evolution/tree_height_transform/index.rst", "autoapi/torchtree/evolution/tree_likelihood/index.rst", "autoapi/torchtree/evolution/tree_model/index.rst", "autoapi/torchtree/evolution/tree_model_flexible/index.rst", "autoapi/torchtree/evolution/tree_regression/index.rst", "autoapi/torchtree/index.rst", "autoapi/torchtree/inference/hmc/adaptation/index.rst", "autoapi/torchtree/inference/hmc/hamiltonian/index.rst", "autoapi/torchtree/inference/hmc/hmc/index.rst", "autoapi/torchtree/inference/hmc/index.rst", "autoapi/torchtree/inference/hmc/integrator/index.rst", "autoapi/torchtree/inference/hmc/operator/index.rst", "autoapi/torchtree/inference/hmc/stan_adaptation/index.rst", "autoapi/torchtree/inference/index.rst", "autoapi/torchtree/inference/mcmc/gmrf_block_updating/index.rst", "autoapi/torchtree/inference/mcmc/index.rst", "autoapi/torchtree/inference/mcmc/mcmc/index.rst", "autoapi/torchtree/inference/mcmc/operator/index.rst", "autoapi/torchtree/inference/sampler/index.rst", "autoapi/torchtree/inference/utils/index.rst", "autoapi/torchtree/nf/energy_functions/index.rst", "autoapi/torchtree/nf/flow/index.rst", "autoapi/torchtree/nf/index.rst", "autoapi/torchtree/nf/planar/index.rst", "autoapi/torchtree/nf/realnvp/index.rst", "autoapi/torchtree/nn/index.rst", "autoapi/torchtree/nn/module/index.rst", "autoapi/torchtree/ops/dual_averaging/index.rst", "autoapi/torchtree/ops/index.rst", "autoapi/torchtree/ops/smooth/index.rst", "autoapi/torchtree/ops/welford/index.rst", "autoapi/torchtree/optim/convergence/index.rst", "autoapi/torchtree/optim/index.rst", "autoapi/torchtree/optim/lr_scheduler/index.rst", "autoapi/torchtree/optim/optimizer/index.rst", "autoapi/torchtree/torchtree/index.rst", "autoapi/torchtree/typing/index.rst", "autoapi/torchtree/variational/chi/index.rst", "autoapi/torchtree/variational/index.rst", "autoapi/torchtree/variational/kl/index.rst", "autoapi/torchtree/variational/renyi/index.rst", "bibliography/bib.rst", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree._version</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.advi</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.argparse_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.cli</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.evolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.hmc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.jacobians</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.loggers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.mcmc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.plugin</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.plugin_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.priors</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.abstractparameter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.classproperty_decorator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.container</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.identifiable</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.parameter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.parameter_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.parameter_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.parametric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.runnable</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.serializable</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.bayesian_bridge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.ctmc_scale</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.deterministic_normal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.distributions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.gmrf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.gmrf_integrated</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.inverse_gamma</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.joint_distribution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.log_normal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.multivariate_normal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.normal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.one_on_x</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.scale_mixture</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.tree_prior</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.alignment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.attribute_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.bdsk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.birth_death</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.branch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.coalescent</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.datatype</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.io</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.poisson_tree_likelihood</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.rate_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.root_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.site_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.site_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.substitution_model.abstract</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.substitution_model.amino_acid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.substitution_model.codon</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.substitution_model.general</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.substitution_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.substitution_model.nucleotide</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.taxa</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.tree_height_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.tree_likelihood</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.tree_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.tree_model_flexible</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.tree_regression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.hmc.adaptation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.hmc.hamiltonian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.hmc.hmc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.hmc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.hmc.integrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.hmc.operator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.hmc.stan_adaptation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.mcmc.gmrf_block_updating</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.mcmc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.mcmc.mcmc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.mcmc.operator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.nf.energy_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.nf.flow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.nf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.nf.planar</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.nf.realnvp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.nn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.nn.module</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.ops.dual_averaging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.ops.smooth</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.ops.welford</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.optim.convergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.optim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.optim.lr_scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.optim.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.torchtree</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.typing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.variational.chi</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.variational</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.variational.kl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.variational.renyi</span></code>", "Bibliography", "Welcome to torchtree!"], "terms": {"version": [0, 30, 109], "inform": [0, 43, 107, 108], "number": [0, 2, 23, 24, 29, 30, 48, 57, 68, 79, 85, 98, 101, 104, 106, 107], "major": 0, "minor": 0, "patch": 0, "label": 0, "logger": [1, 4, 6, 20, 72, 85], "create_variational_pars": 1, "subpras": [1, 5, 9, 10], "sourc": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 83, 84, 85, 86, 87, 88, 90, 91, 93, 94, 96, 97, 98, 100, 101, 102, 104, 106, 107], "create_tril": 1, "scale": [1, 30, 31, 32, 33, 39, 40, 41, 43, 56, 90], "torch": [1, 16, 22, 23, 25, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 44, 47, 48, 49, 50, 51, 54, 56, 57, 58, 59, 60, 61, 62, 63, 65, 67, 68, 69, 71, 73, 74, 77, 78, 79, 84, 88, 90, 91, 92, 93, 96, 97, 98, 100, 101, 104, 106, 107], "tensor": [1, 16, 22, 23, 25, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 54, 56, 57, 58, 59, 60, 61, 62, 63, 65, 68, 69, 71, 73, 74, 77, 78, 79, 84, 86, 88, 90, 91, 93, 96, 97, 104], "creat": [1, 6, 12, 18, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 43, 45, 46, 47, 48, 49, 50, 51, 52, 55, 57, 58, 59, 61, 62, 63, 65, 66, 68, 69, 70, 73, 74, 75, 77, 78, 79, 81, 83, 84, 85, 87, 88, 91, 93, 98, 100, 101, 104, 106, 107], "1": [1, 2, 23, 29, 30, 31, 33, 34, 35, 41, 42, 43, 44, 45, 48, 51, 52, 54, 67, 68, 78, 81, 90, 96, 104, 106, 107, 108], "diment": 1, "contain": [1, 6, 7, 20, 21, 22, 23, 28, 30, 31, 32, 33, 34, 35, 36, 38, 40, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 91, 93, 95, 96, 98, 99, 100, 101, 104, 105, 106, 107], "flatten": 1, "tridiagon": 1, "matrix": [1, 44, 79, 96], "A": [1, 22, 23, 29, 30, 31, 34, 38, 47, 48, 49, 50, 58, 59, 60, 61, 62, 63, 65, 69, 70, 100, 101, 108], "covari": [1, 34, 40, 108], "i": [1, 4, 16, 17, 22, 23, 29, 30, 34, 35, 37, 43, 44, 47, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 72, 74, 81, 87, 90, 98, 106, 107, 108, 109], "us": [1, 2, 4, 12, 17, 22, 23, 26, 27, 29, 31, 32, 33, 34, 35, 40, 44, 47, 51, 55, 57, 58, 59, 63, 65, 67, 68, 69, 71, 73, 74, 87, 88, 90, 93, 96, 98, 106, 109], "2": [1, 23, 29, 30, 33, 34, 35, 41, 43, 44, 54, 68, 81, 96, 106, 108], "varianc": [1, 97], "ar": [1, 22, 23, 30, 31, 32, 33, 34, 38, 40, 48, 51, 68, 69, 74, 87, 88, 90, 91, 108], "set": [1, 16, 17, 23, 29, 34, 57], "zero": [1, 23, 34, 48], "choleski": 1, "decomposit": 1, "diagon": [1, 23, 44], "element": 1, "replac": [1, 29], "log": [1, 21, 23, 32, 33, 38, 39, 40, 42, 44, 48, 49, 51, 56, 67, 68, 85, 88, 91, 106], "paramet": [1, 4, 5, 7, 8, 9, 10, 11, 15, 16, 18, 19, 20, 21, 22, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 81, 83, 84, 85, 86, 87, 88, 90, 91, 93, 96, 98, 100, 101, 104, 106, 107], "standard": [1, 12, 26, 27, 32, 39, 41, 106], "deviat": [1, 39, 41], "return": [1, 7, 15, 16, 17, 18, 19, 21, 22, 23, 24, 26, 28, 29, 31, 32, 33, 37, 38, 40, 42, 46, 47, 48, 49, 50, 51, 52, 54, 55, 57, 58, 59, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 83, 84, 85, 86, 87, 88, 91, 93, 96, 98, 100, 101, 104, 106], "create_fullrank_from_meanfield": 1, "param": [1, 15, 18, 23, 75, 86], "path": [1, 23, 25, 33, 54], "create_fullrank": 1, "var_id": 1, "json_object": [1, 15, 29], "arg": [1, 2, 4, 5, 8, 9, 10, 11, 12, 16, 21, 22, 23, 29, 31, 37, 58, 88, 91, 93, 98, 100], "create_flexible_vari": 1, "create_realnp_distribut": 1, "str": [1, 4, 7, 8, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 38, 40, 43, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 57, 58, 59, 61, 62, 63, 65, 66, 68, 69, 70, 73, 74, 75, 77, 78, 79, 81, 83, 84, 85, 86, 87, 88, 91, 93, 98, 100, 101, 104, 106, 107], "x": [1, 17, 23, 30, 31, 32, 33, 34, 35, 38, 40, 41, 42, 43, 44, 56, 67, 87, 88, 90, 91, 97, 106], "create_realnvp": 1, "gather_paramet": 1, "dict": [1, 4, 7, 8, 15, 18, 21, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 38, 40, 43, 45, 46, 47, 48, 49, 50, 51, 52, 55, 57, 58, 59, 61, 62, 63, 65, 66, 68, 69, 70, 73, 74, 75, 77, 78, 79, 81, 83, 84, 85, 86, 87, 88, 91, 98, 100, 101, 104, 106, 107], "group_map": 1, "apply_sigmoid_transform": 1, "valu": [1, 4, 17, 21, 22, 23, 29, 32, 33, 35, 38, 40, 42, 48, 49, 51, 68, 74, 78, 81, 84, 87, 88, 91, 96, 98], "none": [1, 4, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 55, 57, 58, 59, 62, 63, 65, 66, 67, 68, 69, 73, 74, 75, 77, 78, 79, 81, 83, 84, 85, 87, 88, 91, 93, 94, 97, 98, 100, 101, 104, 106], "apply_affine_transform": 1, "loc": [1, 32, 33, 40, 41, 43], "apply_exp_transform": 1, "apply_simplex_transform": 1, "create_normal_distribut": 1, "x_unr": 1, "create_gamma_distribut": 1, "concentr": [1, 37, 45], "rate": [1, 30, 31, 33, 35, 37, 45, 48, 49, 50, 51, 56, 57, 58, 60, 61, 62, 63, 65, 68, 71, 108], "create_weibull_distribut": 1, "create_meanfield": 1, "distribut": [1, 4, 23, 29, 48, 49, 51, 56, 67, 72, 81, 85, 88, 91, 104, 106, 107], "tupl": [1, 15, 23, 24, 29, 52, 59, 71, 86, 88, 96], "list": [1, 2, 7, 8, 15, 16, 18, 21, 23, 24, 25, 26, 29, 32, 33, 34, 38, 40, 46, 54, 57, 59, 60, 61, 62, 63, 65, 68, 69, 70, 78, 83, 84, 85, 86, 88, 91, 101, 106, 107], "apply_transforms_for_fullrank": 1, "create_variational_model": 1, "id_": [1, 4, 5, 9, 11, 14, 16, 18, 19, 22, 23, 30, 31, 32, 33, 34, 35, 38, 40, 43, 45, 46, 47, 48, 49, 50, 51, 52, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 68, 69, 70, 73, 74, 77, 78, 81, 83, 84, 85, 87, 88, 91, 93, 101, 104, 106, 107], "joint": [1, 5, 9, 10, 11, 32, 38, 74, 75, 78, 83, 104, 106, 107], "create_advi": 1, "variat": [1, 32, 44, 72, 108, 109], "create_logg": [1, 8, 9], "create_sampl": 1, "build_advi": 1, "zero_or_path": 2, "str_or_float": 2, "choic": [2, 4], "argpars": [2, 4], "when": [2, 37, 43, 67, 68], "argument": [2, 4, 23, 33], "can": [2, 21, 22, 23, 30, 47, 50, 57, 58, 59, 60, 61, 62, 63, 65, 67, 69, 70, 88, 93, 109], "either": 2, "string": [2, 24, 29, 30, 33, 34, 35, 43, 45, 52, 54, 81, 107], "from": [2, 18, 22, 23, 28, 30, 31, 32, 33, 34, 35, 38, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 57, 58, 59, 61, 62, 63, 65, 66, 67, 68, 69, 70, 73, 74, 75, 77, 78, 79, 81, 83, 84, 85, 86, 87, 91, 94, 98, 100, 101, 104, 106, 107, 109], "prespecifi": 2, "option": [2, 4, 21, 23, 30, 33, 34, 35, 43, 81, 85, 101, 107], "list_of_float": 2, "length": [2, 45, 55, 65, 69, 108], "should": [2, 18, 23, 24, 29, 34, 35], "float": [2, 23, 24, 29, 30, 35, 37, 39, 41, 43, 45, 51, 52, 57, 67, 68, 69, 70, 73, 77, 78, 81, 84, 96, 98, 107], "list_or_int": 2, "min": 2, "max": [2, 67], "math": [2, 95], "inf": [2, 68], "int": [2, 15, 16, 21, 22, 23, 24, 29, 31, 35, 46, 47, 52, 58, 59, 63, 65, 69, 73, 75, 77, 78, 79, 83, 84, 85, 88, 91, 93, 96, 98, 101, 107], "main": [3, 102, 109], "create_evolution_pars": 4, "parser": 4, "add_birth_death": 4, "add_coalesc": 4, "distribution_typ": 4, "specifi": [4, 23, 30, 34, 35], "run_tree_regress": 4, "taxa": [4, 46, 47, 53, 54, 69, 70, 72], "create_tree_model": 4, "create_poisson_tree_likelihood": 4, "create_tree_likelihood_singl": 4, "tree_model": [4, 21, 31, 34, 35, 45, 48, 49, 50, 51, 53, 55, 56, 67, 68, 70, 72], "branch_model": [4, 53, 55, 68, 72], "substitution_model": [4, 53, 68, 72], "site_model": [4, 53, 68, 72], "site_pattern": [4, 53, 68, 72], "create_tree_likelihood_gener": 4, "trait": 4, "data_typ": [4, 46, 47, 59, 62, 63], "create_tree_likelihood": 4, "align": [4, 53, 54, 59, 72], "create_site_model": 4, "w": [4, 34, 90], "create_site_model_srd06_mu": 4, "is_float": 4, "create_branch_model": 4, "tree_id": [4, 9, 14], "taxa_count": 4, "rate_init": 4, "build_align": 4, "file_nam": [4, 25, 54, 98], "create_substitution_model": 4, "model": [4, 7, 18, 20, 21, 23, 26, 30, 31, 32, 33, 34, 35, 40, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 68, 69, 70, 72, 74, 75, 78, 81, 83, 85, 87, 93, 98, 101, 104, 106, 107, 108, 109], "create_site_pattern": 4, "indic": [4, 23, 59, 96], "create_data_typ": 4, "create_general_data_typ": 4, "create_align": 4, "create_taxa": 4, "create_birth_death": 4, "birth_death_id": 4, "create_constant_birth_death": 4, "create_bdsk": 4, "create_coales": 4, "create_substitution_model_prior": 4, "substmodel_id": 4, "create_ucln_prior": 4, "branch_model_id": [4, 14], "parse_distribut": 4, "desc": [4, 87], "create_clock_prior": 4, "create_evolution_prior": 4, "create_time_tree_prior": 4, "create_bd_prior": 4, "create_constant_bd_prior": 4, "create_bdsk_prior": 4, "create_poisson_evolution_joint": 4, "create_evolution_joint": 4, "get_engin": 4, "import": [4, 106], "cash": 4, "engin": 4, "create_hmc_pars": 5, "create_stan_windowed_adapt": 5, "parameters_unr": [5, 10], "create_hmc_oper": 5, "create_hmc": 5, "build_hmc": 5, "The": [6, 16, 20, 23, 30, 33, 34, 35, 36, 44, 51, 53, 57, 67, 68, 80, 81, 90, 106, 108, 109], "modul": [6, 20, 72, 80, 92, 95, 99, 105], "json": [6, 21, 23, 24, 25, 28, 29, 30, 33, 34, 35, 43, 45, 57, 69, 70, 75, 81, 88, 93, 107], "configur": 6, "file": [6, 21, 25, 54, 107, 108], "through": 6, "command": 6, "line": 6, "interfac": [6, 16, 19, 21, 28, 75, 109], "advi": [6, 72], "argparse_util": [6, 72], "evolut": [6, 21, 31, 34, 35, 45, 72, 81, 108], "hmc": [6, 72, 80], "jacobian": [6, 23, 44, 56, 67, 72, 81], "map": [6, 44, 46, 63, 72], "mcmc": [6, 72, 78, 80], "oper": [6, 23, 72, 76, 80, 81, 82, 83, 96, 108], "plugin": [6, 13, 72], "plugin_manag": [6, 72], "prior": [6, 30, 31, 34, 42, 43, 45, 72, 108], "util": [6, 20, 72, 80, 95], "create_jacobian": 7, "dict_def": 7, "ani": [7, 18, 21, 22, 23, 28, 30, 31, 32, 33, 34, 35, 37, 38, 40, 43, 45, 46, 47, 48, 49, 50, 51, 52, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 68, 69, 70, 73, 74, 75, 77, 78, 79, 81, 83, 84, 85, 86, 87, 88, 91, 98, 100, 101, 104, 106, 107], "thi": [7, 16, 18, 22, 23, 24, 29, 30, 32, 37, 47, 50, 51, 54, 57, 58, 59, 60, 61, 62, 63, 65, 68, 69, 70, 72, 74, 87, 89, 92, 95, 96, 99, 105], "look": 7, "type": [7, 16, 18, 21, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 38, 40, 43, 45, 46, 47, 48, 49, 50, 51, 52, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 81, 83, 84, 85, 86, 87, 88, 91, 93, 96, 98, 100, 101, 104, 106, 107], "transformedparamet": [7, 23], "id": [7, 15, 18, 19, 21, 23, 28, 30, 31, 32, 33, 34, 35, 38, 40, 43, 45, 46, 47, 48, 49, 50, 51, 52, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 68, 69, 70, 73, 74, 75, 77, 78, 79, 81, 83, 84, 85, 87, 88, 91, 93, 98, 100, 101, 103, 104, 106, 107], "dictionari": [7, 18, 21, 23, 28, 29, 30, 31, 32, 33, 34, 35, 38, 40, 43, 45, 46, 47, 48, 49, 50, 51, 52, 55, 57, 58, 59, 61, 62, 63, 65, 66, 68, 69, 70, 73, 74, 75, 77, 78, 79, 81, 83, 84, 85, 86, 87, 88, 91, 93, 98, 100, 101, 104, 106, 107], "specif": [7, 23], "transform": [7, 23, 32, 36, 56, 57, 67, 69, 70, 72, 88, 90], "create_map_pars": 9, "create_optim": 9, "create_tree_logg": 9, "build_optim": 9, "create_mcmc_pars": 10, "create_mcmc": 10, "build_mcmc": 10, "create_scaler_oper": 11, "create_sliding_window_oper": 11, "create_block_updating_oper": 11, "gmrf": [11, 35, 36, 72, 81], "coalesc": [11, 34, 53, 72, 81, 108, 109], "base": [12, 16, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 73, 74, 75, 77, 78, 79, 81, 83, 84, 85, 87, 88, 90, 91, 93, 98, 100, 101, 104, 106, 107, 108, 109], "abc": [12, 16, 19, 22, 23, 26, 27, 28, 50, 51, 52, 60, 68, 69, 73, 74, 77, 84, 87], "helper": [12, 26, 27], "provid": [12, 23, 26, 27, 37, 43], "wai": [12, 23, 26, 27], "an": [12, 17, 18, 19, 23, 26, 27, 28, 29, 37, 45, 48, 51, 52, 66, 68, 73, 75, 77, 78, 83, 84], "inherit": [12, 18, 22, 26, 27, 44, 51, 68, 74, 86, 87], "abstract": [12, 16, 18, 19, 21, 22, 23, 26, 27, 28, 31, 32, 33, 38, 40, 44, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 61, 62, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 83, 84, 87, 91, 98, 100, 101, 104, 106], "load_argu": [12, 13], "subpars": [12, 13], "process_tree_likelihood": 12, "data": [12, 18, 21, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 38, 40, 43, 45, 46, 47, 48, 49, 50, 51, 52, 55, 57, 58, 59, 61, 62, 63, 65, 66, 68, 69, 70, 73, 74, 75, 77, 78, 79, 81, 83, 84, 85, 87, 88, 91, 93, 98, 100, 101, 104, 106, 107], "process_coalesc": 12, "process_al": 12, "pluginmanag": 13, "load_plugin": 13, "disable_plugin": 13, "create_one_on_x_prior": 14, "theta": [14, 51], "create_clock_horseshoe_prior": 14, "convert_date_to_r": 15, "dai": 15, "month": 15, "year": 15, "read_dates_from_csv": 15, "input_fil": 15, "date_format": 15, "make_unconstrain": 15, "constrain": 15, "correspond": [15, 29, 69, 70, 86, 109], "length_of_tensor_in_dict_paramet": 15, "devic": [16, 22, 23, 29, 31, 47, 58, 59, 63, 65, 69, 87, 88, 93], "need": [16, 22, 23, 37, 51, 68, 74, 87], "alloc": [16, 37], "properti": [16, 17, 19, 22, 23, 29, 32, 33, 37, 40, 46, 50, 51, 52, 57, 58, 60, 61, 62, 63, 65, 69, 73, 78, 81, 84, 91, 93], "where": [16, 23, 34, 41, 44, 67, 90, 106], "kwarg": [16, 21, 22, 23, 29, 31, 33, 58, 69, 70, 73, 75, 78, 81, 83, 84, 88, 93, 98, 100, 101], "perform": [16, 22, 23, 29, 31, 58, 88, 93], "dtype": [16, 22, 23, 29, 31, 51, 58, 87, 88, 93], "convers": [16, 22, 23, 31, 58, 88, 93], "cuda": [16, 22, 23, 31, 47, 58, 59, 63, 65, 69, 88, 93], "move": [16, 22, 23, 31, 47, 58, 59, 63, 65, 69, 88, 93], "object": [16, 17, 18, 19, 21, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 38, 40, 43, 45, 46, 47, 48, 49, 50, 51, 52, 55, 57, 58, 59, 61, 62, 63, 65, 66, 68, 69, 70, 73, 74, 75, 77, 78, 79, 81, 83, 84, 85, 86, 87, 88, 91, 93, 98, 100, 101, 104, 105, 106, 107], "memori": [16, 22, 23, 31, 37, 47, 58, 59, 63, 65, 69, 88, 93], "cpu": [16, 22, 23, 31, 47, 58, 59, 63, 65, 69, 88, 93], "identifi": [16, 20, 21, 22, 23, 30, 33, 34, 35, 43, 45, 46, 52, 66, 72, 73, 77, 78, 81, 83, 84, 85, 101, 104, 107, 108], "getter": [16, 23, 57], "setter": [16, 17, 23, 57], "shape": [16, 22, 23, 29, 31, 32, 33, 34, 35, 38, 40, 45, 51, 58, 68, 88, 90, 91, 106], "size": [16, 22, 23, 32, 33, 34, 37, 38, 40, 48, 51, 52, 73, 79, 88, 91, 98, 104, 106, 107], "requires_grad": [16, 23, 29], "bool": [16, 23, 25, 34, 35, 48, 49, 63, 73, 78, 79, 81, 84, 96, 98, 106], "true": [16, 23, 24, 25, 29, 30, 33, 34, 35, 37, 41, 43, 44, 48, 49, 51, 52, 54, 56, 59, 67, 69, 73, 96, 101], "gradient": [16, 23, 67, 81, 106, 109], "comput": [16, 23, 29, 44, 56, 67, 98], "fals": [16, 23, 24, 25, 29, 47, 48, 51, 59, 68, 69, 81, 91, 96, 101, 106], "otherwis": [16, 23, 24, 29], "flag": [16, 23], "dim": [16, 23, 96], "dimens": [16, 23, 37, 96, 106], "add_parameter_listen": [16, 22, 23, 57], "listen": [16, 18, 22, 23, 57], "fire_parameter_chang": [16, 23, 57], "index": [16, 18, 22, 23, 26, 30, 32, 38, 43, 45, 47, 49, 50, 55, 57, 58, 59, 62, 63, 65, 68, 69, 74, 78, 87, 104, 106, 107], "event": [16, 18, 22, 23, 26, 38, 45, 47, 48, 50, 55, 57, 58, 59, 62, 63, 65, 68, 69, 74, 78, 104, 106, 107], "classproperti": 17, "attribut": [17, 21, 23, 30, 33, 34, 35, 43, 45, 47, 66, 69, 70, 81, 107], "fget": 17, "function": [17, 32, 33, 34, 38, 40, 42, 44, 49, 67, 88, 91, 98, 101, 106], "get": [17, 46, 54], "fset": 17, "fdel": 17, "del": 17, "ing": 17, "doc": [17, 23, 33, 79], "docstr": 17, "typic": 17, "defin": [17, 106], "manag": 17, "c": [17, 45, 54, 67], "def": [17, 24, 29], "getx": 17, "self": [17, 23, 24, 29, 106], "_x": 17, "setx": 17, "delx": 17, "m": [17, 107, 108], "decor": 17, "make": [17, 19, 28, 52, 66, 73, 75, 77, 78, 83, 84], "new": [17, 37], "modifi": [17, 91, 109], "exist": [17, 37], "ones": [17, 23], "easi": 17, "am": 17, "delet": 17, "abstractparamet": [18, 20, 21, 22, 23, 26, 30, 31, 32, 33, 34, 35, 40, 43, 44, 45, 48, 49, 50, 51, 55, 56, 57, 58, 60, 62, 63, 65, 69, 70, 72, 73, 78, 87, 88, 91, 93, 106], "multipl": [18, 22, 51, 68, 74, 87], "so": 18, "referenc": [18, 21, 57, 88, 93], "updat": [18, 23, 81], "modellisten": [18, 22, 26], "callabl": [18, 22, 23, 51, 68, 74, 87], "handle_model_chang": [18, 22, 23, 26, 30, 32, 43, 47, 49, 50, 57, 58, 59, 62, 63, 65, 69, 87], "obj": [18, 21, 22, 23, 24, 26, 29, 30, 32, 43, 47, 49, 50, 57, 58, 59, 62, 63, 65, 69, 87], "handle_parameter_chang": [18, 22, 23, 26, 38, 45, 47, 50, 55, 57, 58, 59, 62, 63, 65, 68, 69, 74, 78, 104, 106, 107], "variabl": [18, 22, 23, 26, 30, 32, 33, 38, 40, 43, 45, 47, 50, 55, 57, 58, 59, 62, 63, 65, 68, 69, 74, 78, 104, 106, 107], "classmethod": [18, 21, 23, 28, 29, 30, 31, 32, 33, 34, 35, 38, 40, 43, 45, 46, 47, 48, 49, 50, 51, 52, 55, 57, 58, 59, 61, 62, 63, 65, 66, 68, 69, 70, 73, 74, 75, 77, 78, 79, 81, 83, 84, 85, 87, 88, 91, 93, 98, 100, 101, 104, 106, 107], "from_json": [18, 21, 23, 28, 30, 31, 32, 33, 34, 35, 38, 40, 43, 45, 46, 47, 48, 49, 50, 51, 52, 55, 57, 58, 59, 61, 62, 63, 65, 66, 68, 69, 70, 73, 74, 75, 77, 78, 79, 81, 83, 84, 85, 87, 88, 91, 93, 98, 100, 101, 104, 106, 107], "dic": [18, 21, 23, 28, 29, 30, 31, 32, 33, 34, 35, 38, 40, 43, 45, 46, 47, 48, 49, 50, 51, 52, 55, 57, 58, 59, 61, 62, 63, 65, 66, 68, 69, 70, 73, 74, 75, 77, 78, 79, 81, 83, 84, 85, 86, 87, 88, 91, 93, 98, 100, 101, 104, 106, 107], "method": [18, 23, 24, 28, 29, 31, 32, 37, 38, 40, 46, 47, 48, 49, 50, 51, 52, 55, 58, 59, 61, 62, 63, 65, 66, 68, 69, 70, 73, 74, 75, 77, 78, 79, 83, 84, 87, 91, 96, 97, 98, 100, 101, 104, 106], "represent": [18, 21, 23, 28, 29, 30, 31, 32, 33, 34, 35, 38, 40, 43, 45, 46, 47, 48, 49, 50, 51, 52, 55, 57, 58, 59, 61, 62, 63, 65, 66, 68, 69, 70, 73, 74, 75, 77, 78, 79, 81, 83, 84, 85, 87, 88, 91, 93, 98, 100, 101, 104, 106, 107], "other": [18, 23, 24, 28, 29, 31, 32, 38, 40, 43, 46, 47, 48, 49, 50, 51, 52, 55, 58, 59, 61, 62, 63, 65, 66, 68, 69, 70, 73, 74, 75, 77, 78, 79, 83, 84, 87, 91, 98, 100, 101, 104, 106, 108], "kei": [18, 21, 23, 28, 29, 30, 31, 32, 33, 34, 35, 38, 40, 43, 45, 46, 47, 48, 49, 50, 51, 52, 55, 58, 59, 61, 62, 63, 65, 66, 68, 69, 70, 73, 74, 75, 77, 78, 79, 81, 83, 84, 85, 87, 91, 93, 98, 100, 101, 104, 106, 107], "serializ": [19, 20, 21, 24, 29, 72, 75, 98, 100], "jsonserializ": [19, 21, 28, 75, 98, 100], "packag": [20, 23, 33, 53, 80, 89, 95, 109], "framework": [20, 72], "classproperty_decor": [20, 72], "parameter_encod": [20, 72], "parameter_util": [20, 72], "parametr": [20, 22, 23, 37, 39, 41, 47, 50, 58, 59, 60, 61, 62, 63, 65, 69, 70, 72, 78, 86], "runnabl": [20, 21, 72, 75, 83, 85, 101], "loggerinterfac": [21, 85], "thing": [21, 85], "like": [21, 24, 29], "tree": [21, 31, 34, 35, 45, 50, 54, 55, 57, 67, 68, 69, 70, 71, 109], "initi": [21, 29, 79], "close": 21, "run": [21, 27, 75, 83, 85, 101, 102], "callablemodel": [21, 22, 30, 31, 33, 34, 35, 38, 43, 45, 48, 49, 51, 55, 57, 68, 69, 74, 75, 78, 83, 87, 93, 98, 101, 104, 106, 107], "everi": [21, 86, 98], "frequenc": [21, 60, 62, 63, 65, 68], "addit": [21, 57, 88, 93], "treelogg": 21, "treemodel": [21, 31, 50, 56, 68, 69], "csv": 21, "writ": 21, "dumper": 21, "save": [21, 25], "write": 21, "containerlogg": 21, "input": [21, 44, 56, 67, 90, 96], "mandatori": [21, 23, 30, 33, 34, 35, 43, 45, 81, 107], "python": [21, 24, 29, 109], "callableobject": 21, "parameterlisten": [22, 23, 26, 78], "monitor": [22, 47, 50, 58, 59, 60, 61, 62, 63, 65, 69, 70], "chang": [22, 47, 50, 58, 59, 60, 61, 62, 63, 65, 67, 69, 70], "build": [22, 47, 50, 58, 59, 60, 61, 62, 63, 65, 69, 70], "block": [22, 47, 50, 54, 58, 59, 60, 61, 62, 63, 65, 69, 70, 81], "more": [22, 47, 50, 58, 59, 60, 61, 62, 63, 65, 69, 70], "complex": [22, 47, 50, 58, 59, 60, 61, 62, 63, 65, 69, 70], "tag": [22, 69], "sample_shap": [22, 23, 32, 33, 38, 40, 51, 88, 91], "sampl": [22, 30, 32, 33, 38, 40, 48, 49, 51, 54, 57, 73, 78, 79, 81, 84, 85, 88, 91, 97, 98, 104, 106, 107, 108], "add_model_listen": 22, "remove_model_listen": 22, "remove_parameter_listen": 22, "fire_model_chang": 22, "sub": 22, "collect": [22, 23, 46, 51, 66, 68, 74, 87], "cach": [22, 51, 68, 74, 87], "case": [22, 51, 68, 74, 87], "we": [22, 51, 68, 74, 87], "time": [22, 30, 31, 34, 35, 48, 49, 51, 68, 74, 87, 108], "without": [22, 51, 68, 74, 87, 109], "recomput": [22, 51, 68, 74, 87], "implement": [23, 24, 29, 30, 31, 81, 89, 90, 109], "grad_fn": 23, "autograd": 23, "graph": [23, 29], "node": [23, 54, 56, 67, 68, 69, 70], "grad": 23, "detach": 23, "copy_": 23, "clone": [23, 109], "": [23, 34, 37, 40, 48, 68, 96, 97, 98, 106, 107, 108], "infer": [23, 44, 45, 72, 104, 106, 107, 108, 109], "call": [23, 24, 29, 37, 67], "static": [23, 30, 31, 32, 33, 43, 50, 63, 69, 70, 98], "json_factori": [23, 30, 31, 32, 33, 43, 50, 69, 70], "onli": [23, 30], "one": [23, 30, 48, 49], "full_lik": 23, "full": 23, "zeros_lik": 23, "ones_lik": 23, "eye_lik": 23, "ey": 23, "arang": 23, "scalar": [23, 43, 96], "determin": 23, "fill": 23, "0": [23, 29, 30, 33, 35, 41, 43, 44, 52, 54, 56, 67, 69, 73, 78, 81, 91, 94, 96, 97, 98, 106, 107], "d": [23, 35, 51, 96, 106, 107, 108], "elsewher": 23, "2d": 23, "integ": 23, "emul": 23, "If": [23, 34, 35], "equival": [23, 106], "3": [23, 30, 31, 34, 35, 44, 96, 108], "desir": [23, 37], "default": [23, 24, 29, 34, 35, 69, 81, 98, 107], "construct": 23, "result": [23, 29], "record": 23, "nn": [23, 44, 72, 88, 90, 91], "wrap": [23, 29], "exampl": [23, 24, 29, 30, 33, 34, 35, 41, 43, 44, 54, 69, 96, 109], "param2": 23, "p_dic": 23, "isinst": [23, 30, 33, 34, 35, 43], "ones_d": 23, "all": [23, 29, 44, 98], "loos": [23, 92], "follow": [23, 24, 29, 92], "http": [23, 24, 29, 33, 79, 91, 106, 107, 108, 109], "pytorch": [23, 33, 109], "org": [23, 24, 29, 33, 79], "stabl": [23, 33], "html": [23, 33, 79, 106, 108], "invert": [23, 44], "union": 23, "instanc": [23, 26, 37, 57, 88, 91], "complet": [23, 33], "includ": [23, 33, 109], "name": [23, 26, 29, 33, 54], "posit": [23, 44], "exptransform": 23, "unconstrain": 23, "tolist": 23, "t_dic": 23, "t": [23, 48, 49, 51, 68, 90], "exp_transform": 23, "tensor2": 23, "log_abs_det_jacobian": [23, 44, 56, 67, 90], "viewparamet": 23, "slice": [23, 29, 59], "repres": [23, 34, 104, 106, 107], "view": 23, "anoth": [23, 24, 29], "assign": 23, "catparamet": 23, "ellipsi": [23, 52], "concaten": 23, "moduleparamet": 23, "parameterencod": 24, "skipkei": [24, 29], "ensure_ascii": [24, 29], "check_circular": [24, 29], "allow_nan": [24, 29], "sort_kei": [24, 29], "indent": [24, 29], "separ": [24, 29], "jsonencod": [24, 29], "extens": [24, 29], "encod": [24, 29, 52], "structur": [24, 29], "support": [24, 29, 37, 42, 48, 51], "arrai": [24, 29], "null": [24, 29], "To": [24, 29], "extend": [24, 29, 107, 109], "recogn": [24, 29], "subclass": [24, 29, 37], "o": [24, 29], "possibl": [24, 29], "superclass": [24, 29], "rais": [24, 28, 29], "typeerror": [24, 29], "For": [24, 29, 69], "arbitrari": [24, 29], "iter": [24, 29, 75, 79, 83, 98, 101], "you": [24, 29], "could": [24, 29], "try": [24, 29, 54], "except": [24, 29], "pass": [24, 29], "els": [24, 29], "let": [24, 29, 34], "save_paramet": 25, "safe": [25, 101], "overwrit": [25, 101], "output": [25, 44, 54, 56, 67, 96, 98], "temporari": 25, "pack_tensor": 25, "pack": 25, "register_paramet": 26, "register_model": 26, "establish": [28, 75], "from_json_saf": 28, "pars": [28, 86], "jsonparseerror": [28, 29], "error": 28, "registered_class": 29, "tensorencod": 29, "tensordecod": 29, "jsondecod": 29, "simpl": [29, 68], "decod": 29, "translat": 29, "real": 29, "It": [29, 109], "also": [29, 30], "understand": [29, 34, 108], "nan": 29, "infin": 29, "which": [29, 48, 49], "outsid": 29, "spec": 29, "object_hook": 29, "as_tensor": 29, "dct": 29, "float64": 29, "tensor_rand": 29, "given": [29, 42, 44, 56, 67], "continu": [29, 31, 96, 108], "normal": [29, 32, 33, 36, 40, 43, 44, 63, 72, 88, 89, 91, 106], "log_norm": [29, 36, 72], "uniform": 29, "discret": 29, "random": [29, 30, 32, 33, 34, 35, 40, 43, 81], "bernoulli": 29, "e": [29, 34, 35, 48, 49, 51, 68, 106, 107, 108], "g": [29, 30, 108], "sequenc": [29, 46, 59, 96], "_": [29, 106], "manual_se": 29, "t1": 29, "4": [29, 65], "0820": 29, "4131": 29, "t2": 29, "t3": 29, "get_class": 29, "full_nam": 29, "common": 29, "non": [29, 48], "exit": 29, "process_object": 29, "force_list": 29, "process_object_with_kei": 29, "signalhandl": 29, "signum": 29, "frame": 29, "valid": 29, "rule": 29, "remove_com": 29, "remov": [29, 48, 97], "comment": 29, "start": [29, 48, 49, 69, 98], "underscor": 29, "pair": 29, "equal": [29, 81], "ignor": [29, 34, 35], "its": [29, 109], "replace_wildcard_with_str": 29, "wildcard": 29, "replace_star_with_str": 29, "expand_pl": 29, "parent": 29, "idx": 29, "update_paramet": 29, "recurs": 29, "present": [29, 48], "print_graph": 29, "level": 29, "print": [29, 98], "alternativeattributeerror": 29, "custom": 29, "debug": 29, "conflict": 29, "between": [29, 48, 49, 98], "__getattr__": 29, "stackoverflow": 29, "com": [29, 91, 109], "question": 29, "36575068": 29, "attributeerror": 29, "undesir": 29, "interact": [29, 109], "getattr": 29, "wrapper": [29, 33, 93, 100, 101], "f": [29, 90], "rerais": 29, "altern": 29, "string_to_list_index": 29, "index_str": 29, "package_cont": 29, "package_nam": 29, "register_class": 29, "_cl": 29, "bayesian": [30, 31, 34, 108], "bridg": [30, 108], "bayesianbridg": 30, "core": [30, 31, 32, 33, 34, 35, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 68, 69, 70, 72, 73, 74, 75, 77, 78, 81, 83, 84, 85, 86, 87, 88, 91, 93, 98, 100, 101, 104, 106, 107], "alpha": [30, 35, 45, 51, 62, 107], "local_scal": [30, 43], "slab": [30, 43], "regular": [30, 43, 73, 108], "global": [30, 43], "expon": 30, "local": [30, 43], "width": [30, 43, 79, 84], "nichola": [30, 108], "polson": [30, 108], "jame": [30, 108], "scott": [30, 108], "jess": [30, 108], "windl": [30, 108], "journal": [30, 31, 43, 108], "royal": [30, 108], "statist": [30, 31, 42, 43, 80, 94, 106, 108], "societi": [30, 108], "seri": [30, 108], "b": [30, 44, 45, 48, 49, 54, 56, 65, 68, 90, 108], "methodologi": [30, 108], "page": [30, 108], "713": [30, 108], "733": [30, 108], "2014": [30, 108], "doi": [30, 34, 43, 108], "10": [30, 34, 43, 73, 94, 96, 108], "1111": [30, 108], "rssb": [30, 108], "12042": [30, 108], "akihiko": [30, 108], "nishimura": [30, 108], "marc": [30, 31, 34, 108], "suchard": [30, 31, 34, 108], "shrinkag": [30, 43, 108], "shrunken": [30, 108], "shoulder": [30, 108], "gibb": [30, 108], "posterior": [30, 51, 106, 108], "guarante": [30, 108], "converg": [30, 72, 99, 108], "analysi": [30, 31, 108], "18": [30, 108], "367": [30, 108], "390": [30, 108], "2023": [30, 108], "1214": [30, 43, 108], "22": [30, 108], "ba1308": [30, 108], "uniqu": [30, 33, 34, 35, 43, 45, 81, 104, 107], "bridge_d": 30, "them": 30, "must": [30, 33, 34, 35], "process_object_numb": 30, "ctmc": 31, "refer": [31, 69, 70, 79], "ctmcscale": 31, "markov": [31, 34, 35, 81, 108, 109], "chain": [31, 81, 108, 109], "ferreira": [31, 108], "substitut": [31, 56, 57, 71], "marco": [31, 108], "elaps": [31, 108], "canadian": [31, 108], "36": [31, 108], "355": [31, 108], "368": [31, 108], "2008": [31, 108], "log_gamma_one_half": 31, "deterministicnorm": 32, "distributionmodel": [32, 33, 38, 40, 85, 88, 91, 104, 106, 107], "determinist": 32, "drawn": 32, "dure": [32, 79], "creation": 32, "evalu": [32, 33, 38, 40, 42, 48, 49, 51, 88, 91, 98], "locat": [32, 41, 43], "event_shap": [32, 33, 40], "batch_shap": [32, 33, 37, 38, 40, 88, 91], "rsampl": [32, 33, 38, 40, 51, 88, 91], "gener": [32, 33, 38, 40, 51, 53, 61, 64, 72, 88, 91], "reparameter": [32, 33, 38, 40, 51, 88, 91], "batch": [32, 33, 37, 38, 40, 51, 68, 88, 91], "log_prob": [32, 33, 38, 40, 41, 42, 48, 49, 51, 88, 91], "probabl": [32, 33, 36, 38, 40, 42, 48, 49, 51, 58, 65, 68, 81, 88, 91], "densiti": [32, 33, 38, 40, 42, 48, 49, 51, 88, 91], "mass": [32, 33, 38, 40, 42, 48, 49, 51, 79, 88, 91], "entropi": [32, 33, 38, 40, 88, 91, 106], "over": [32, 33, 38, 40, 88, 91], "dist": 33, "instanci": [33, 86], "underli": [33, 51], "exp": [33, 44], "exponenti": [33, 44], "y": [33, 44, 52, 56, 67, 90, 91], "x_dict": 33, "normal_d": 33, "exp_dic": 33, "match": 33, "signatur": 33, "see": [33, 79], "gaussian": [34, 81], "field": [34, 35, 81], "precis": [34, 35, 40, 41, 81], "timetreemodel": [34, 35, 48, 49, 51, 55, 67, 69, 70], "weight": [34, 35, 44, 59, 68, 78, 81, 84, 90, 106], "rescal": [34, 35, 68, 81], "parameter": [34, 35, 37, 39, 41, 44, 67], "tau": [34, 35, 41, 96, 106], "awar": [34, 35], "root": [34, 35, 48, 57, 71, 72, 81], "height": [34, 35, 54, 57, 67, 69, 70, 71, 81], "p": [34, 35, 51, 56, 104, 106, 107, 108], "boldsymbol": 34, "mid": [34, 35, 51], "prod_": [34, 35], "n": [34, 35, 41, 51, 68, 96, 104, 106, 108], "frac": [34, 35, 44, 48, 51, 56, 106], "sqrt": [34, 35], "pi": [34, 35], "x_": [34, 35, 67], "x_i": [34, 35, 42, 44, 67], "precision_matrix": [34, 40, 81], "gmrf_dic": [34, 35], "skygrid": [34, 35], "gmrfcovari": [34, 81], "beta": [34, 35, 51, 62], "propos": [34, 81, 96], "gill": [34, 108], "et": [34, 45], "al": [34, 45], "coeffici": 34, "effect": [34, 48], "z_": 34, "ldot": 34, "z": [34, 87, 90, 106], "predictor": 34, "z_i": 34, "observ": [34, 48, 49], "measur": 34, "point": 34, "linear": [34, 44, 71], "sum": [34, 44, 56], "beta_": 34, "ip": 34, "w_i": 34, "w_1": 34, "w_n": 34, "mean": [34, 39, 40, 41, 43, 45, 97], "process": [34, 48, 49, 107, 108], "beta_1": 34, "beta_n": 34, "propto": [34, 106], "q": [34, 60, 62, 63, 65, 104, 106, 107], "mandev": [34, 108], "philipp": [34, 108], "lemei": [34, 108], "shannon": [34, 108], "bennett": [34, 108], "roman": [34, 108], "biek": [34, 108], "past": [34, 108], "popul": [34, 37, 48, 51, 108], "dynam": [34, 108], "systemat": [34, 108], "biologi": [34, 45, 108], "65": [34, 108], "6": [34, 44, 108], "1041": [34, 108], "1056": [34, 108], "2016": [34, 107, 108], "1093": [34, 108], "sysbio": [34, 108], "syw050": [34, 108], "integr": [35, 51, 72, 73, 75, 76, 78, 80], "gamma": [35, 37, 43, 45, 51, 73, 81, 94], "gmrfgammaintegr": 35, "product": [35, 51], "respect": [35, 51], "left": [35, 51, 106], "right": [35, 51, 106], "sum_": [35, 44, 51, 106], "idea": 35, "cheng": 35, "zhang": 35, "parameteriz": 36, "bayesian_bridg": [36, 72], "ctmc_scale": [36, 72], "deterministic_norm": [36, 72], "gmrf_integr": [36, 72], "inverse_gamma": [36, 72], "joint_distribut": [36, 72], "multivariate_norm": [36, 72], "one_on_x": [36, 72], "scale_mixtur": [36, 72], "tree_prior": [36, 72], "invers": [37, 51, 91], "inversegamma": 37, "validate_arg": [37, 39, 41, 42, 48, 49, 51], "transformeddistribut": 37, "arg_constraint": [37, 42, 48, 49, 51], "has_rsampl": [37, 51], "expand": 37, "_instanc": 37, "deriv": 37, "As": 37, "doe": [37, 98], "addition": 37, "repeat": 37, "check": [37, 98], "broadcast": 37, "__init__": 37, "py": 37, "first": [37, 68], "overrid": 37, "batch_siz": [37, 90], "independ": 38, "jointdistributionmodel": 38, "lognorm": 39, "scale_r": 39, "multivari": [40, 44], "multivariatenorm": 40, "covariance_matrix": 40, "scale_tril": [40, 44], "tril": 40, "sim": [41, 106], "mathcal": [41, 106], "mu": [41, 48, 49, 56, 58, 73, 94], "sigma": 41, "norm1": 41, "5": [41, 44, 73, 94], "norm2": 41, "One": 42, "oneonx": 42, "calcul": [42, 57, 65, 68, 69, 71, 97, 98, 106, 109], "improp": 42, "proport": [42, 68], "prod_i": 42, "mixtur": [43, 106, 108], "scalemixturenorm": 43, "juho": [43, 108], "piironen": [43, 108], "aki": [43, 108], "vehtari": [43, 108], "sparsiti": [43, 108], "horsesho": [43, 108], "electron": [43, 108], "11": [43, 96, 108], "5018": [43, 108], "5051": [43, 108], "jan": [43, 108], "2017": [43, 108], "17": [43, 52, 108], "ejs1337si": [43, 108], "global_scal": 43, "mixture_d": 43, "trilexpdiagonaltransform": 44, "cache_s": [44, 56, 67], "1d": 44, "triangular": 44, "lower": [44, 106], "7183": 44, "0000": 44, "20": 44, "0855": 44, "allclos": 44, "inv": 44, "biject": [44, 56, 67], "sign": [44, 56, 67], "det": [44, 56, 67], "dy": [44, 56, 67], "dx": [44, 56, 67], "cumsumtransform": 44, "via": [44, 104], "y_i": [44, 56, 67], "j": [44, 67], "x_j": 44, "domain": 44, "codomain": 44, "cumsumexptransform": 44, "softplustransform": 44, "cumsumsoftplustransform": 44, "convexcombinationtransform": 44, "k": [44, 65, 67, 68, 96, 106], "alpha_i": [44, 106], "satisfi": 44, "geq": 44, "logtransform": 44, "lineartransform": 44, "bia": [44, 90], "xa": 44, "rand": 44, "phylogenet": [45, 109], "compoundgammadirichletprior": 45, "unrootedtreemodel": [45, 69], "compound": 45, "dirichlet": 45, "unroot": 45, "rannala": [45, 108], "ratio": [45, 67, 69], "intern": [45, 68, 69, 70, 96, 106, 108], "extern": [45, 109], "branch": [45, 48, 65, 68, 69, 108, 109], "bruce": [45, 108], "tianqi": [45, 108], "zhu": [45, 108], "ziheng": [45, 108], "yang": [45, 108], "tail": [45, 108], "paradox": [45, 108], "partial": [45, 52, 59, 68, 108], "influenti": [45, 108], "ayesian": [45, 108], "molecular": [45, 108, 109], "29": [45, 107, 108], "325": [45, 108], "335": [45, 108], "2012": [45, 106, 108], "datatyp": [46, 47, 53, 62, 63, 72], "userlist": [46, 66], "sequence_s": 46, "filenam": 46, "read_fasta_sequ": 46, "calculate_frequ": 46, "calculate_frequencies_per_codon_posit": 46, "calculate_f3x4_from_nucleotid": 46, "nuc_freq": 46, "calculate_f3x4": 46, "calculate_substitut": 46, "calculate_ts_tv": 46, "calculate_kappa": 46, "freq": [46, 68], "attributepattern": 47, "compute_tips_st": [47, 59], "compute_tips_parti": [47, 59], "use_ambigu": [47, 52, 59, 68], "epidemiology_to_birth_death": 48, "r": [48, 56, 67, 107, 108], "delta": [48, 73], "convert": 48, "epidemiologi": 48, "birth": [48, 49], "death": [48, 49], "reproduct": 48, "total": 48, "becom": 48, "infecti": 48, "individu": 48, "being": 48, "lambda": [48, 49], "psi": [48, 49], "bdskmodel": 48, "rho": [48, 49], "origin": [48, 49], "origin_is_root_edg": 48, "relative_tim": 48, "surviv": [48, 49], "removal_prob": 48, "skylin": 48, "plot": 48, "transmiss": 48, "t_0": [48, 49], "abov": [48, 68], "shift": [48, 57, 69], "rel": [48, 98], "condit": [48, 49], "least": [48, 49], "noninfecti": 48, "immedi": 48, "after": [48, 68], "piecewiseconstantbirthdeath": 48, "lambda_": [48, 49], "piecewis": 48, "constant": [48, 49, 51], "effort": [48, 49], "log_q": [48, 49], "t_i": [48, 49, 51], "lineag": [48, 49], "aliv": [48, 49], "give": [48, 49], "rise": [48, 49], "clade": [48, 49], "p0": 48, "log_p": [48, 49], "ha": [48, 49, 96], "descend": [48, 49], "t_m": [48, 49], "node_height": [48, 49, 51, 69], "birthdeathmodel": 49, "birthdeath": 49, "branchmodel": [50, 55, 68], "abstractclockmodel": 50, "strictclockmodel": 50, "simpleclockmodel": 50, "abstractcoalescentdistribut": 51, "maximum_likelihood": 51, "abstractcoalescentmodel": [51, 81], "constantcoalescentmodel": 51, "constantcoalesc": 51, "constantcoalescentintegratedmodel": 51, "constantcoalescentintegr": 51, "distribt": 51, "int_0": 51, "infti": 51, "c_i": 51, "exponentialcoalescentmodel": 51, "growth": 51, "exponentialcoalesc": 51, "piecewiseconstantcoalesc": 51, "piecewiseconstantcoalescentmodel": 51, "piecewiseconstantcoalescentgrid": 51, "grid": 51, "softpiecewiseconstantcoalescentgrid": 51, "temperatur": [51, 96], "piecewiseconstantcoalescentgridmodel": 51, "faketreemodel": 51, "process_data_coales": 51, "piecewiseexponentialcoalescentgrid": 51, "piecewiseexponentialcoalescentgridmodel": 51, "piecewiselinearcoalescentgrid": 51, "piecewiselinearcoalescentgridmodel": 51, "state": [52, 68, 109], "state_count": [52, 63], "abstractdatatyp": 52, "nucleotidedatatyp": 52, "nucleotid": [52, 53, 64, 72], "acgtukmrswybdhvn": 52, "nucleotide_st": 52, "nucleotide_ambiguity_st": 52, "aminoaciddatatyp": 52, "amino_acid": [52, 53, 64, 72], "acdefghiklmnpqrstvwybzx": 52, "amino_acids_st": 52, "25": 52, "amino_acids_ambiguity_st": 52, "codondatatyp": [52, 62], "genetic_cod": 52, "genetic_code_t": 52, "knknttttrsrsiimiqhqhpppprrrrllllededaaaaggggvvvv": 52, "yssss": 52, "cwclflf": 52, "genetic_code_nam": 52, "univers": 52, "vertebr": 52, "mitochondri": 52, "yeast": 52, "mold": 52, "protozoan": 52, "mycoplasma": 52, "number_of_codon": 52, "61": 52, "60": 52, "62": 52, "63": 52, "64": 52, "codon_triplet": 52, "aaa": 52, "aac": 52, "aag": 52, "aat": 52, "aca": 52, "acc": 52, "acg": 52, "act": 52, "aga": 52, "agc": 52, "agg": 52, "agt": 52, "ata": 52, "codon": [52, 53, 64, 72], "generaldatatyp": 52, "code": [52, 73, 79, 91, 94, 98, 109], "ambigu": 52, "evolutionari": 53, "attribute_pattern": [53, 72], "bdsk": [53, 72], "birth_death": [53, 72], "io": [53, 72], "poisson_tree_likelihood": [53, 72], "rate_transform": [53, 72], "root_transform": [53, 72], "tree_height_transform": [53, 72], "tree_likelihood": [53, 72], "tree_model_flex": [53, 72], "tree_regress": [53, 72], "read_tre": 54, "date": [54, 69], "heterochorn": 54, "read_tree_and_align": 54, "to_nexu": 54, "fp": 54, "convert_samples_to_nexu": 54, "random_tree_from_height": 54, "parse_transl": 54, "parse_tre": [54, 69], "count": 54, "parse_taxa": 54, "split_newick": 54, "newick": [54, 69, 70], "split": 54, "format": [54, 69, 70], "around": 54, "extract_taxa": 54, "extract": 54, "taxon": [54, 66, 69], "nexu": 54, "poissontreelikelihood": 55, "clock_model": [55, 68], "edge_length": 55, "likelihood": [55, 68, 109], "poisson": 55, "clock": 55, "edg": 55, "logdifferenceratetransform": 56, "differ": [56, 67, 98, 109], "adjac": 56, "r_i": 56, "r_": 56, "rescaledratetransform": 56, "tild": [56, 106], "_i": [56, 106], "rootparamet": 57, "distanc": 57, "amount": 57, "serial": 57, "sitemodel": [58, 68], "constantsitemodel": 58, "invariantsitemodel": 58, "invari": 58, "update_rates_prob": 58, "univariatediscretizedsitemodel": 58, "categori": [58, 68], "inverse_cdf": 58, "quantil": 58, "update_r": 58, "weibullsitemodel": 58, "sitepattern": [59, 68], "compress": 59, "compress_align": 59, "compress_alignment_st": 59, "substitutionmodel": [60, 63, 65, 68], "p_t": [60, 63, 65], "branch_length": [60, 63, 65, 69], "abstractsubstitutionmodel": 60, "norm": 60, "symmetricsubstitutionmodel": [60, 62, 63, 65], "eigen": [60, 63], "nonsymmetricsubstitutionmodel": [60, 63], "lg": 61, "empiricalsubstitutionmodel": [61, 63], "wag": 61, "mg94": 62, "kappa": [62, 65, 73, 94], "generaljc69": 63, "generalsymmetricsubstitutionmodel": 63, "generalnonsymmetricsubstitutionmodel": 63, "create_rate_matrix": 63, "jc69": 65, "transit": 65, "matric": [65, 68], "hky": 65, "p_t_analyt": 65, "gtr": 65, "userdict": 66, "generalnodeheighttransform": 67, "sort_indic": 67, "update_bound": 67, "topologi": 67, "differencenodeheighttransform": 67, "x_c": 67, "jth": 67, "child": 67, "mathbb": [67, 106], "approxim": [67, 106], "logsumexp": [67, 96], "order": [67, 104, 107], "propag": 67, "calculate_treelikelihood": 68, "post_index": 68, "mat": 68, "leav": 68, "postord": [68, 69], "calculate_treelikelihood_discret": 68, "prop": 68, "tip": 68, "2t": 68, "site": 68, "peel": 68, "calculate_treelikelihood_tip_states_discret": 68, "calculate_treelikelihood_discrete_saf": 68, "threshold": 68, "underflow": 68, "detect": 68, "sinc": 68, "recalcul": 68, "calculate_treelikelihood_discrete_resc": 68, "calculate_treelikelihood_tip_states_discrete_resc": 68, "treelikelihoodmodel": 68, "subst_model": 68, "use_tip_st": 68, "calculate_with_tip_parti": 68, "prob": 68, "calculate_with_tip_st": 68, "heights_to_branch_length": 69, "bound": [69, 104, 106, 107], "setup_index": 69, "indices_postord": 69, "setup_d": 69, "heterochron": 69, "initialize_dates_from_taxa": 69, "heights_from_branch_length": 69, "ep": [69, 91], "1e": [69, 91], "06": 69, "write_newick": 69, "steam": 69, "abstracttreemodel": 69, "update_travers": 69, "as_newick": 69, "stream": 69, "factori": [69, 70], "branch_lengths_id": 69, "taxa_id": 69, "keep_branch_length": 69, "compat": [69, 70], "internal_height": [69, 70], "update_leaf_height": 69, "distal": 69, "side": 69, "internal_heights_id": [69, 70], "reparameterizedtimetreemodel": 69, "ratios_root_height": 69, "update_node_height": 69, "root_height": [69, 71], "flexibletimetreemodel": 70, "linear_regress": 71, "regress": 71, "dendropi": 71, "cli": 72, "adapt": [72, 76, 78, 79, 80, 81, 94, 98], "hamiltonian": [72, 73, 75, 76, 80, 109], "stan_adapt": [72, 76, 80], "gmrf_block_upd": [72, 80, 82], "sampler": [72, 80], "nf": 72, "energy_funct": [72, 89], "flow": [72, 89, 90, 91], "planar": [72, 89], "realnvp": [72, 89], "op": 72, "dual_averag": [72, 95], "smooth": [72, 95], "welford": [72, 95], "optim": 72, "lr_schedul": [72, 99], "chi": [72, 105], "kl": [72, 105], "renyi": [72, 105], "adaptor": [73, 78, 79], "learn": [73, 79, 96, 106, 108], "acceptance_prob": [73, 78, 79, 84], "accept": [73, 78, 79, 81, 84], "restart": [73, 79, 94], "state_dict": [73, 77, 83, 84, 101], "load_state_dict": [73, 77, 83, 84, 101], "adaptivesteps": 73, "leapfrogintegr": [73, 77], "target_acceptance_prob": [73, 78, 81, 84], "dualaveragingsteps": [73, 79], "8": [73, 78], "05": [73, 91, 94], "75": [73, 94], "t0": [73, 94], "step": [73, 77, 79, 84, 94, 100], "dual": [73, 94], "averag": [73, 94], "nesterov": [73, 94], "stan": [73, 79, 94, 98], "dev": [73, 94, 98], "massmatrixadaptor": 73, "listparamet": [73, 75, 78, 86, 101, 103], "mass_matrix": [73, 74, 78], "find_reasonable_step_s": [73, 75], "inverse_mass_matrix": [73, 74], "warmupadapt": 73, "step_siz": [73, 77], "sqrt_mass_matrix": 73, "sample_momentum": [74, 75], "potential_energi": 74, "kinetic_energi": 74, "momentum": [74, 75, 91], "set_tensor": 77, "hmcoper": 78, "mcmcoper": [78, 81, 83, 84], "tuning_paramet": [78, 81, 84], "update_mass_matric": 78, "adaptable_paramet": [78, 81, 84], "set_adaptable_paramet": [78, 81, 84], "tune": [78, 81, 84], "stanwindowedadapt": 79, "step_size_adaptor": 79, "mass_matrix_adaptor": 79, "num_warmup": 79, "init_buff": 79, "term_buff": 79, "base_window": 79, "warmup": 79, "period": 79, "onlin": [79, 97], "manual": 79, "further": 79, "detail": 79, "mc": 79, "algorithm": [79, 98, 109], "fast": [79, 109], "interv": 79, "final": 79, "window": 79, "slow": 79, "gmrfpiecewisecoalescentblockupdatingoper": 81, "scaler": [81, 84], "mont": [81, 106, 109], "carlo": [81, 106, 109], "target": 81, "propose_precis": 81, "wnativ": 81, "numcoalev": 81, "newton_raphson": 81, "24": 81, "disable_adapt": 81, "disabl": 81, "save_full_st": [83, 101], "reject": 84, "smoothed_acceptance_r": 84, "scaleroper": 84, "slidingwindowoper": 84, "dirichletoper": 84, "draw": 85, "extract_tensors_and_paramet": 86, "listtensor": [86, 103], "w1": 87, "w2": 87, "w3": 87, "energyfunctionmodel": 87, "normalizingflow": 88, "forward": [88, 90, 91], "apply_flow": [88, 91], "planartransform": 90, "u": [90, 91, 107, 108], "tanh": 90, "dot": 90, "learnabl": 90, "input_s": [90, 91], "factor": 90, "u_hat": 90, "mask": 91, "autoregress": 91, "estim": [91, 97, 104, 106, 107], "arxiv": 91, "1705": 91, "07057v4": 91, "port": 91, "github": [91, 109], "kamenbliznashki": 91, "normalizing_flow": 91, "linearmaskedcoupl": 91, "hidden_s": 91, "n_hidden": 91, "cond_label_s": 91, "coupl": 91, "layer": 91, "per": 91, "maf": 91, "paper": [91, 107, 108], "batchnorm": 91, "9": 91, "cond_i": 91, "flowsequenti": 91, "ordereddict": [91, 93], "sequenti": 91, "n_block": 91, "batch_norm": 91, "design": 92, "ordereddicttyp": [93, 103], "dualaverag": 94, "relax": [96, 108], "soft_sort": 96, "argsort": [96, 108], "wa": 96, "prillo": [96, 108], "eisenschlo": [96, 108], "permut": 96, "sebastian": [96, 108], "julian": [96, 108], "softsort": [96, 108], "In": [96, 106, 107, 108], "confer": [96, 106, 108], "machin": [96, 106, 108], "7793": [96, 108], "7802": [96, 108], "pmlr": [96, 106, 108], "2020": [96, 108], "smooth_max": 96, "keepdim": 96, "maximum": [96, 98, 109], "reduc": 96, "whether": 96, "retain": 96, "soft_searchsort": 96, "sorted_sequ": 96, "searchsort": 96, "monoton": 96, "increas": 96, "innermost": 96, "search": 96, "select": 96, "100": 96, "0001": 96, "5000": 96, "30": 96, "soft_select": 96, "argmax": 96, "welfordvari": 97, "co": 97, "add_sampl": 97, "add": 97, "remove_sampl": 97, "reset": 97, "baseconverg": 98, "diagnost": 98, "variationalconverg": 98, "loss": [98, 101], "elbo": [98, 106], "sy": 98, "stdout": 98, "stanvariationalconverg": 98, "max_iter": 98, "tol_rel_obj": 98, "01": 98, "sgd": 98, "toler": 98, "rel_differ": 98, "prev": 98, "curr": 98, "two": 98, "doubl": 98, "previou": 98, "current": [98, 109], "absolut": 98, "schedul": 100, "_lrschedul": 100, "checkpoint": 101, "cubo": 104, "upper": 104, "form": [104, 107], "diverg": [104, 106, 107, 108], "adji": 104, "bousso": 104, "dieng": 104, "dustin": 104, "tran": 104, "rajesh": 104, "ranganath": 104, "john": 104, "paislei": 104, "david": 104, "blei": 104, "minim": [104, 106], "score": 106, "evid": 106, "l": 106, "_q": 106, "phi": 106, "maxim": 106, "wrt": 106, "exclus": 106, "kullback": 106, "leibler": 106, "text": 106, "most": 106, "dimension": 106, "multi": 106, "instead": 106, "pathwis": 106, "klpq": 106, "inclus": 106, "instrument": 106, "widehat": 106, "w_": 106, "quad": 106, "kevin": [106, 108], "murphi": [106, 108], "probabilist": [106, 108], "perspect": [106, 108], "mit": [106, 108], "press": [106, 108], "klpqimport": 106, "nabla": 106, "selbo": 106, "compon": 106, "stratifi": 106, "sum_i": 106, "q_i": 106, "klqp": 106, "warren": [106, 108], "morningstar": [106, 108], "sharad": [106, 108], "vikram": [106, 108], "cusuh": [106, 108], "ham": [106, 108], "andrew": [106, 108], "gallagh": [106, 108], "joshua": [106, 108], "dillon": [106, 108], "automat": [106, 108, 109], "differenti": [106, 108, 109], "arindam": [106, 108], "banerje": [106, 108], "kenji": [106, 108], "fukumizu": [106, 108], "editor": [106, 107, 108], "proceed": [106, 107, 108], "24th": [106, 108], "artifici": [106, 108], "intellig": [106, 108], "volum": [106, 107, 108], "130": [106, 108], "research": [106, 108], "3250": [106, 108], "3258": [106, 108], "13": [106, 108], "15": [106, 108], "apr": [106, 108], "2021": [106, 108], "url": [106, 107, 108], "mlr": [106, 108], "v130": [106, 108], "morningstar21b": [106, 108], "vr": 107, "tradit": 107, "r\u00e9nyi": 107, "yingzhen": [107, 108], "li": [107, 108], "richard": [107, 108], "turner": [107, 108], "\u00e9": [107, 108], "nyi": [107, 108], "lee": [107, 108], "sugiyama": [107, 108], "luxburg": [107, 108], "guyon": [107, 108], "garnett": [107, 108], "advanc": [107, 108], "neural": [107, 108], "system": [107, 108], "curran": [107, 108], "associ": [107, 108], "inc": [107, 108], "neurip": [107, 108], "cc": [107, 108], "paper_fil": [107, 108], "7750ca3559e5b8e1f44210283368fc16": [107, 108], "pdf": [107, 108], "fs08": 108, "glb": 108, "16": 108, "lt16": 108, "mvh": 108, "21": 108, "mur12": 108, "ns23": 108, "pv17": 108, "psw14": 108, "pe20": 108, "rzy12": 108, "document": 109, "There": 109, "mai": 109, "latest": 109, "releas": 109, "program": 109, "sequec": 109, "leverag": 109, "posteriori": 109, "pypi": 109, "git": 109, "4ment": 109, "pip": 109, "easili": 109, "thank": 109, "modular": 109, "some": 109, "bito": 109, "librari": 109, "beagl": 109, "physher": 109, "scipi": 109, "tensorflow": 109}, "objects": {"": [[72, 0, 0, "-", "torchtree"]], "torchtree": [[0, 0, 0, "-", "_version"], [6, 0, 0, "-", "cli"], [20, 0, 0, "-", "core"], [36, 0, 0, "-", "distributions"], [53, 0, 0, "-", "evolution"], [80, 0, 0, "-", "inference"], [89, 0, 0, "-", "nf"], [92, 0, 0, "-", "nn"], [95, 0, 0, "-", "ops"], [99, 0, 0, "-", "optim"], [102, 0, 0, "-", "torchtree"], [103, 0, 0, "-", "typing"], [105, 0, 0, "-", "variational"]], "torchtree.cli": [[6, 1, 1, "", "PLUGIN_MANAGER"], [1, 0, 0, "-", "advi"], [2, 0, 0, "-", "argparse_utils"], [3, 0, 0, "-", "cli"], [4, 0, 0, "-", "evolution"], [5, 0, 0, "-", "hmc"], [7, 0, 0, "-", "jacobians"], [8, 0, 0, "-", "loggers"], [9, 0, 0, "-", "map"], [10, 0, 0, "-", "mcmc"], [11, 0, 0, "-", "operators"], [12, 0, 0, "-", "plugin"], [13, 0, 0, "-", "plugin_manager"], [14, 0, 0, "-", "priors"], [15, 0, 0, "-", "utils"]], "torchtree.cli.advi": [[1, 2, 1, "", "apply_affine_transform"], [1, 2, 1, "", "apply_exp_transform"], [1, 2, 1, "", "apply_sigmoid_transformed"], [1, 2, 1, "", "apply_simplex_transform"], [1, 2, 1, "", "apply_transforms_for_fullrank"], [1, 2, 1, "", "build_advi"], [1, 2, 1, "", "create_advi"], [1, 2, 1, "", "create_flexible_variational"], [1, 2, 1, "", "create_fullrank"], [1, 2, 1, "", "create_fullrank_from_meanfield"], [1, 2, 1, "", "create_gamma_distribution"], [1, 2, 1, "", "create_logger"], [1, 2, 1, "", "create_meanfield"], [1, 2, 1, "", "create_normal_distribution"], [1, 2, 1, "", "create_realnp_distribution"], [1, 2, 1, "", "create_realnvp"], [1, 2, 1, "", "create_sampler"], [1, 2, 1, "", "create_tril"], [1, 2, 1, "", "create_variational_model"], [1, 2, 1, "", "create_variational_parser"], [1, 2, 1, "", "create_weibull_distribution"], [1, 2, 1, "", "gather_parameters"], [1, 1, 1, "", "logger"]], "torchtree.cli.argparse_utils": [[2, 2, 1, "", "list_of_float"], [2, 2, 1, "", "list_or_int"], [2, 2, 1, "", "str_or_float"], [2, 2, 1, "", "zero_or_path"]], "torchtree.cli.cli": [[3, 2, 1, "", "main"]], "torchtree.cli.evolution": [[4, 2, 1, "", "add_birth_death"], [4, 2, 1, "", "add_coalescent"], [4, 2, 1, "", "build_alignment"], [4, 2, 1, "", "create_alignment"], [4, 2, 1, "", "create_bd_prior"], [4, 2, 1, "", "create_bdsk"], [4, 2, 1, "", "create_bdsk_prior"], [4, 2, 1, "", "create_birth_death"], [4, 2, 1, "", "create_branch_model"], [4, 2, 1, "", "create_clock_prior"], [4, 2, 1, "", "create_coalesent"], [4, 2, 1, "", "create_constant_bd_prior"], [4, 2, 1, "", "create_constant_birth_death"], [4, 2, 1, "", "create_data_type"], [4, 2, 1, "", "create_evolution_joint"], [4, 2, 1, "", "create_evolution_parser"], [4, 2, 1, "", "create_evolution_priors"], [4, 2, 1, "", "create_general_data_type"], [4, 2, 1, "", "create_poisson_evolution_joint"], [4, 2, 1, "", "create_poisson_tree_likelihood"], [4, 2, 1, "", "create_site_model"], [4, 2, 1, "", "create_site_model_srd06_mus"], [4, 2, 1, "", "create_site_pattern"], [4, 2, 1, "", "create_substitution_model"], [4, 2, 1, "", "create_substitution_model_priors"], [4, 2, 1, "", "create_taxa"], [4, 2, 1, "", "create_time_tree_prior"], [4, 2, 1, "", "create_tree_likelihood"], [4, 2, 1, "", "create_tree_likelihood_general"], [4, 2, 1, "", "create_tree_likelihood_single"], [4, 2, 1, "", "create_tree_model"], [4, 2, 1, "", "create_ucln_prior"], [4, 2, 1, "", "distribution_type"], [4, 2, 1, "", "get_engine"], [4, 2, 1, "", "is_float"], [4, 1, 1, "", "logger"], [4, 2, 1, "", "parse_distribution"], [4, 2, 1, "", "run_tree_regression"]], "torchtree.cli.hmc": [[5, 2, 1, "", "build_hmc"], [5, 2, 1, "", "create_hmc"], [5, 2, 1, "", "create_hmc_operator"], [5, 2, 1, "", "create_hmc_parser"], [5, 2, 1, "", "create_stan_windowed_adaptation"]], "torchtree.cli.jacobians": [[7, 2, 1, "", "create_jacobians"]], "torchtree.cli.loggers": [[8, 2, 1, "", "create_loggers"]], "torchtree.cli.map": [[9, 2, 1, "", "build_optimizer"], [9, 2, 1, "", "create_logger"], [9, 2, 1, "", "create_map_parser"], [9, 2, 1, "", "create_optimizer"], [9, 2, 1, "", "create_tree_logger"]], "torchtree.cli.mcmc": [[10, 2, 1, "", "build_mcmc"], [10, 2, 1, "", "create_mcmc"], [10, 2, 1, "", "create_mcmc_parser"]], "torchtree.cli.operators": [[11, 2, 1, "", "create_block_updating_operator"], [11, 2, 1, "", "create_scaler_operator"], [11, 2, 1, "", "create_sliding_window_operator"]], "torchtree.cli.plugin": [[12, 3, 1, "", "Plugin"]], "torchtree.cli.plugin.Plugin": [[12, 4, 1, "", "load_arguments"], [12, 4, 1, "", "process_all"], [12, 4, 1, "", "process_coalescent"], [12, 4, 1, "", "process_tree_likelihood"]], "torchtree.cli.plugin_manager": [[13, 3, 1, "", "PluginManager"]], "torchtree.cli.plugin_manager.PluginManager": [[13, 4, 1, "", "disable_plugins"], [13, 4, 1, "", "load_arguments"], [13, 4, 1, "", "load_plugins"], [13, 4, 1, "", "plugins"]], "torchtree.cli.priors": [[14, 2, 1, "", "create_clock_horseshoe_prior"], [14, 2, 1, "", "create_one_on_x_prior"]], "torchtree.cli.utils": [[15, 2, 1, "", "convert_date_to_real"], [15, 2, 1, "", "length_of_tensor_in_dict_parameter"], [15, 2, 1, "", "make_unconstrained"], [15, 2, 1, "", "read_dates_from_csv"]], "torchtree.core": [[16, 0, 0, "-", "abstractparameter"], [17, 0, 0, "-", "classproperty_decorator"], [18, 0, 0, "-", "container"], [19, 0, 0, "-", "identifiable"], [21, 0, 0, "-", "logger"], [22, 0, 0, "-", "model"], [23, 0, 0, "-", "parameter"], [24, 0, 0, "-", "parameter_encoder"], [25, 0, 0, "-", "parameter_utils"], [26, 0, 0, "-", "parametric"], [27, 0, 0, "-", "runnable"], [28, 0, 0, "-", "serializable"], [29, 0, 0, "-", "utils"]], "torchtree.core.abstractparameter": [[16, 3, 1, "", "AbstractParameter"], [16, 3, 1, "", "Device"]], "torchtree.core.abstractparameter.AbstractParameter": [[16, 4, 1, "", "add_parameter_listener"], [16, 5, 1, "", "device"], [16, 4, 1, "", "dim"], [16, 5, 1, "", "dtype"], [16, 4, 1, "", "fire_parameter_changed"], [16, 4, 1, "", "parameters"], [16, 5, 1, "", "requires_grad"], [16, 5, 1, "", "shape"], [16, 5, 1, "", "tensor"]], "torchtree.core.abstractparameter.Device": [[16, 4, 1, "", "cpu"], [16, 4, 1, "", "cuda"], [16, 5, 1, "", "device"], [16, 4, 1, "", "to"]], "torchtree.core.classproperty_decorator": [[17, 3, 1, "", "classproperty"]], "torchtree.core.container": [[18, 3, 1, "", "Container"]], "torchtree.core.container.Container": [[18, 4, 1, "", "callables"], [18, 4, 1, "", "from_json"], [18, 4, 1, "", "handle_model_changed"], [18, 4, 1, "", "handle_parameter_changed"], [18, 4, 1, "", "params"]], "torchtree.core.identifiable": [[19, 3, 1, "", "Identifiable"]], "torchtree.core.identifiable.Identifiable": [[19, 5, 1, "", "id"]], "torchtree.core.logger": [[21, 3, 1, "", "CSV"], [21, 3, 1, "", "ContainerLogger"], [21, 3, 1, "", "Dumper"], [21, 3, 1, "", "Logger"], [21, 3, 1, "", "LoggerInterface"], [21, 3, 1, "", "TreeLogger"]], "torchtree.core.logger.CSV": [[21, 4, 1, "", "from_json"], [21, 4, 1, "", "run"]], "torchtree.core.logger.ContainerLogger": [[21, 4, 1, "", "close"], [21, 4, 1, "", "from_json"], [21, 4, 1, "", "initialize"], [21, 4, 1, "", "log"]], "torchtree.core.logger.Dumper": [[21, 4, 1, "", "from_json"], [21, 4, 1, "", "run"]], "torchtree.core.logger.Logger": [[21, 4, 1, "", "close"], [21, 4, 1, "", "from_json"], [21, 4, 1, "", "initialize"], [21, 4, 1, "", "log"]], "torchtree.core.logger.LoggerInterface": [[21, 4, 1, "", "close"], [21, 4, 1, "", "initialize"], [21, 4, 1, "", "log"], [21, 4, 1, "", "run"]], "torchtree.core.logger.TreeLogger": [[21, 4, 1, "", "close"], [21, 4, 1, "", "from_json"], [21, 4, 1, "", "initialize"], [21, 4, 1, "", "log"]], "torchtree.core.model": [[22, 3, 1, "", "CallableModel"], [22, 3, 1, "", "Model"]], "torchtree.core.model.CallableModel": [[22, 4, 1, "", "handle_model_changed"], [22, 4, 1, "", "handle_parameter_changed"]], "torchtree.core.model.Model": [[22, 4, 1, "", "add_model_listener"], [22, 4, 1, "", "add_parameter_listener"], [22, 4, 1, "", "cpu"], [22, 4, 1, "", "cuda"], [22, 4, 1, "", "fire_model_changed"], [22, 4, 1, "", "models"], [22, 4, 1, "", "remove_model_listener"], [22, 4, 1, "", "remove_parameter_listener"], [22, 5, 1, "", "sample_shape"], [22, 5, 1, "", "tag"], [22, 4, 1, "", "to"]], "torchtree.core.parameter": [[23, 3, 1, "", "CatParameter"], [23, 3, 1, "", "ModuleParameter"], [23, 3, 1, "", "Parameter"], [23, 3, 1, "", "TransformedParameter"], [23, 3, 1, "", "ViewParameter"]], "torchtree.core.parameter.CatParameter": [[23, 4, 1, "", "add_parameter_listener"], [23, 4, 1, "", "cpu"], [23, 4, 1, "", "cuda"], [23, 5, 1, "", "device"], [23, 4, 1, "", "fire_parameter_changed"], [23, 4, 1, "", "from_json"], [23, 4, 1, "", "handle_model_changed"], [23, 4, 1, "", "handle_parameter_changed"], [23, 5, 1, "", "requires_grad"], [23, 5, 1, "", "tensor"], [23, 4, 1, "", "to"], [23, 4, 1, "", "update"]], "torchtree.core.parameter.ModuleParameter": [[23, 4, 1, "", "add_parameter_listener"], [23, 4, 1, "", "cpu"], [23, 4, 1, "", "cuda"], [23, 4, 1, "", "fire_parameter_changed"], [23, 4, 1, "", "from_json"], [23, 4, 1, "", "handle_model_changed"], [23, 4, 1, "", "handle_parameter_changed"], [23, 4, 1, "", "parameters"], [23, 5, 1, "", "requires_grad"], [23, 5, 1, "", "sample_shape"], [23, 5, 1, "", "shape"], [23, 5, 1, "", "tensor"], [23, 4, 1, "", "to"]], "torchtree.core.parameter.Parameter": [[23, 4, 1, "", "add_parameter_listener"], [23, 4, 1, "", "clone"], [23, 4, 1, "", "copy_"], [23, 4, 1, "", "cpu"], [23, 4, 1, "", "cuda"], [23, 4, 1, "", "detach"], [23, 4, 1, "", "fire_parameter_changed"], [23, 4, 1, "", "from_json"], [23, 5, 1, "", "grad"], [23, 5, 1, "", "grad_fn"], [23, 4, 1, "", "json_factory"], [23, 5, 1, "", "requires_grad"], [23, 4, 1, "", "size"], [23, 5, 1, "", "tensor"], [23, 2, 1, "id6", "to"]], "torchtree.core.parameter.TransformedParameter": [[23, 4, 1, "", "add_parameter_listener"], [23, 4, 1, "", "cpu"], [23, 4, 1, "", "cuda"], [23, 4, 1, "", "fire_parameter_changed"], [23, 4, 1, "", "from_json"], [23, 4, 1, "", "handle_model_changed"], [23, 4, 1, "", "handle_parameter_changed"], [23, 4, 1, "", "parameters"], [23, 5, 1, "", "requires_grad"], [23, 5, 1, "", "sample_shape"], [23, 5, 1, "", "shape"], [23, 5, 1, "", "tensor"], [23, 4, 1, "", "to"]], "torchtree.core.parameter.ViewParameter": [[23, 4, 1, "", "add_parameter_listener"], [23, 4, 1, "", "assign"], [23, 4, 1, "", "clone"], [23, 4, 1, "", "cpu"], [23, 4, 1, "", "cuda"], [23, 5, 1, "", "dtype"], [23, 4, 1, "", "fire_parameter_changed"], [23, 4, 1, "", "from_json"], [23, 4, 1, "", "handle_parameter_changed"], [23, 4, 1, "", "json_factory"], [23, 5, 1, "", "requires_grad"], [23, 5, 1, "", "shape"], [23, 5, 1, "", "tensor"], [23, 4, 1, "", "to"]], "torchtree.core.parameter_encoder": [[24, 3, 1, "", "ParameterEncoder"]], "torchtree.core.parameter_encoder.ParameterEncoder": [[24, 4, 1, "", "default"]], "torchtree.core.parameter_utils": [[25, 2, 1, "", "pack_tensor"], [25, 2, 1, "", "save_parameters"]], "torchtree.core.parametric": [[26, 3, 1, "", "ModelListener"], [26, 3, 1, "", "ParameterListener"], [26, 3, 1, "", "Parametric"]], "torchtree.core.parametric.ModelListener": [[26, 4, 1, "", "handle_model_changed"]], "torchtree.core.parametric.ParameterListener": [[26, 4, 1, "", "handle_parameter_changed"]], "torchtree.core.parametric.Parametric": [[26, 4, 1, "", "parameters"], [26, 4, 1, "", "register_model"], [26, 4, 1, "", "register_parameter"]], "torchtree.core.runnable": [[27, 3, 1, "", "Runnable"]], "torchtree.core.runnable.Runnable": [[27, 4, 1, "", "run"]], "torchtree.core.serializable": [[28, 3, 1, "", "JSONSerializable"]], "torchtree.core.serializable.JSONSerializable": [[28, 4, 1, "", "from_json"], [28, 4, 1, "", "from_json_safe"]], "torchtree.core.utils": [[29, 6, 1, "", "AlternativeAttributeError"], [29, 6, 1, "", "JSONParseError"], [29, 1, 1, "", "REGISTERED_CLASSES"], [29, 3, 1, "", "SignalHandler"], [29, 3, 1, "", "TensorDecoder"], [29, 3, 1, "", "TensorEncoder"], [29, 2, 1, "", "as_tensor"], [29, 2, 1, "", "expand_plates"], [29, 2, 1, "", "get_class"], [29, 2, 1, "", "package_contents"], [29, 2, 1, "", "print_graph"], [29, 2, 1, "", "process_object"], [29, 2, 1, "", "process_object_with_key"], [29, 2, 1, "", "process_objects"], [29, 2, 1, "", "register_class"], [29, 2, 1, "", "remove_comments"], [29, 2, 1, "", "replace_star_with_str"], [29, 2, 1, "", "replace_wildcard_with_str"], [29, 2, 1, "", "string_to_list_index"], [29, 2, 1, "", "tensor_rand"], [29, 2, 1, "", "update_parameters"], [29, 2, 1, "", "validate"]], "torchtree.core.utils.AlternativeAttributeError": [[29, 4, 1, "", "wrapper"]], "torchtree.core.utils.SignalHandler": [[29, 4, 1, "", "exit"]], "torchtree.core.utils.TensorDecoder": [[29, 4, 1, "", "object_hook"]], "torchtree.core.utils.TensorEncoder": [[29, 4, 1, "", "default"]], "torchtree.distributions": [[30, 0, 0, "-", "bayesian_bridge"], [31, 0, 0, "-", "ctmc_scale"], [32, 0, 0, "-", "deterministic_normal"], [33, 0, 0, "-", "distributions"], [34, 0, 0, "-", "gmrf"], [35, 0, 0, "-", "gmrf_integrated"], [37, 0, 0, "-", "inverse_gamma"], [38, 0, 0, "-", "joint_distribution"], [39, 0, 0, "-", "log_normal"], [40, 0, 0, "-", "multivariate_normal"], [41, 0, 0, "-", "normal"], [42, 0, 0, "-", "one_on_x"], [43, 0, 0, "-", "scale_mixture"], [44, 0, 0, "-", "transforms"], [45, 0, 0, "-", "tree_prior"]], "torchtree.distributions.bayesian_bridge": [[30, 3, 1, "", "BayesianBridge"], [30, 2, 1, "", "process_object_number"]], "torchtree.distributions.bayesian_bridge.BayesianBridge": [[30, 4, 1, "", "from_json"], [30, 4, 1, "", "handle_model_changed"], [30, 4, 1, "", "json_factory"]], "torchtree.distributions.ctmc_scale": [[31, 3, 1, "", "CTMCScale"]], "torchtree.distributions.ctmc_scale.CTMCScale": [[31, 4, 1, "", "cpu"], [31, 4, 1, "", "cuda"], [31, 4, 1, "", "from_json"], [31, 4, 1, "", "json_factory"], [31, 7, 1, "", "log_gamma_one_half"], [31, 7, 1, "", "shape"], [31, 4, 1, "", "to"]], "torchtree.distributions.deterministic_normal": [[32, 3, 1, "", "DeterministicNormal"]], "torchtree.distributions.deterministic_normal.DeterministicNormal": [[32, 5, 1, "", "batch_shape"], [32, 4, 1, "", "entropy"], [32, 5, 1, "", "event_shape"], [32, 4, 1, "", "from_json"], [32, 4, 1, "", "handle_model_changed"], [32, 4, 1, "", "json_factory"], [32, 4, 1, "", "log_prob"], [32, 4, 1, "", "rsample"], [32, 4, 1, "", "sample"]], "torchtree.distributions.distributions": [[33, 3, 1, "", "Distribution"], [33, 3, 1, "", "DistributionModel"]], "torchtree.distributions.distributions.Distribution": [[33, 5, 1, "", "batch_shape"], [33, 5, 1, "", "distribution"], [33, 4, 1, "", "entropy"], [33, 5, 1, "", "event_shape"], [33, 4, 1, "", "from_json"], [33, 4, 1, "", "json_factory"], [33, 4, 1, "", "log_prob"], [33, 4, 1, "", "rsample"], [33, 4, 1, "", "sample"]], "torchtree.distributions.distributions.DistributionModel": [[33, 4, 1, "", "entropy"], [33, 4, 1, "", "log_prob"], [33, 4, 1, "", "rsample"], [33, 4, 1, "", "sample"]], "torchtree.distributions.gmrf": [[34, 3, 1, "", "GMRF"], [34, 3, 1, "", "GMRFCovariate"]], "torchtree.distributions.gmrf.GMRF": [[34, 4, 1, "", "from_json"], [34, 4, 1, "", "precision_matrix"]], "torchtree.distributions.gmrf.GMRFCovariate": [[34, 4, 1, "", "from_json"]], "torchtree.distributions.gmrf_integrated": [[35, 3, 1, "", "GMRFGammaIntegrated"]], "torchtree.distributions.gmrf_integrated.GMRFGammaIntegrated": [[35, 4, 1, "", "from_json"]], "torchtree.distributions.inverse_gamma": [[37, 3, 1, "", "InverseGamma"]], "torchtree.distributions.inverse_gamma.InverseGamma": [[37, 7, 1, "", "arg_constraints"], [37, 5, 1, "", "concentration"], [37, 4, 1, "", "expand"], [37, 7, 1, "", "has_rsample"], [37, 5, 1, "", "rate"], [37, 7, 1, "", "support"]], "torchtree.distributions.joint_distribution": [[38, 3, 1, "", "JointDistributionModel"]], "torchtree.distributions.joint_distribution.JointDistributionModel": [[38, 4, 1, "", "entropy"], [38, 4, 1, "", "from_json"], [38, 4, 1, "", "handle_parameter_changed"], [38, 4, 1, "", "log_prob"], [38, 4, 1, "", "rsample"], [38, 4, 1, "", "sample"]], "torchtree.distributions.log_normal": [[39, 3, 1, "", "LogNormal"]], "torchtree.distributions.multivariate_normal": [[40, 3, 1, "", "MultivariateNormal"]], "torchtree.distributions.multivariate_normal.MultivariateNormal": [[40, 5, 1, "", "batch_shape"], [40, 4, 1, "", "entropy"], [40, 5, 1, "", "event_shape"], [40, 4, 1, "", "from_json"], [40, 4, 1, "", "log_prob"], [40, 4, 1, "", "rsample"], [40, 4, 1, "", "sample"]], "torchtree.distributions.normal": [[41, 3, 1, "", "Normal"]], "torchtree.distributions.one_on_x": [[42, 3, 1, "", "OneOnX"]], "torchtree.distributions.one_on_x.OneOnX": [[42, 7, 1, "", "arg_constraints"], [42, 4, 1, "", "log_prob"], [42, 7, 1, "", "support"]], "torchtree.distributions.scale_mixture": [[43, 3, 1, "", "ScaleMixtureNormal"]], "torchtree.distributions.scale_mixture.ScaleMixtureNormal": [[43, 4, 1, "", "from_json"], [43, 4, 1, "", "handle_model_changed"], [43, 4, 1, "", "json_factory"]], "torchtree.distributions.transforms": [[44, 3, 1, "", "ConvexCombinationTransform"], [44, 3, 1, "", "CumSumExpTransform"], [44, 3, 1, "", "CumSumSoftPlusTransform"], [44, 3, 1, "", "CumSumTransform"], [44, 3, 1, "", "LinearTransform"], [44, 3, 1, "", "LogTransform"], [44, 3, 1, "", "SoftPlusTransform"], [44, 3, 1, "", "TrilExpDiagonalTransform"]], "torchtree.distributions.transforms.ConvexCombinationTransform": [[44, 7, 1, "", "codomain"], [44, 7, 1, "", "domain"], [44, 4, 1, "", "log_abs_det_jacobian"]], "torchtree.distributions.transforms.CumSumExpTransform": [[44, 7, 1, "", "bijective"], [44, 7, 1, "", "codomain"], [44, 7, 1, "", "domain"], [44, 4, 1, "", "log_abs_det_jacobian"], [44, 7, 1, "", "sign"]], "torchtree.distributions.transforms.CumSumSoftPlusTransform": [[44, 7, 1, "", "bijective"], [44, 7, 1, "", "codomain"], [44, 7, 1, "", "domain"], [44, 4, 1, "", "log_abs_det_jacobian"], [44, 7, 1, "", "sign"]], "torchtree.distributions.transforms.CumSumTransform": [[44, 7, 1, "", "bijective"], [44, 7, 1, "", "codomain"], [44, 7, 1, "", "domain"], [44, 4, 1, "", "log_abs_det_jacobian"], [44, 7, 1, "", "sign"]], "torchtree.distributions.transforms.LinearTransform": [[44, 7, 1, "", "codomain"], [44, 7, 1, "", "domain"]], "torchtree.distributions.transforms.LogTransform": [[44, 7, 1, "", "bijective"], [44, 7, 1, "", "codomain"], [44, 7, 1, "", "domain"], [44, 4, 1, "", "log_abs_det_jacobian"], [44, 7, 1, "", "sign"]], "torchtree.distributions.transforms.SoftPlusTransform": [[44, 7, 1, "", "bijective"], [44, 7, 1, "", "codomain"], [44, 7, 1, "", "domain"], [44, 4, 1, "", "log_abs_det_jacobian"], [44, 7, 1, "", "sign"]], "torchtree.distributions.transforms.TrilExpDiagonalTransform": [[44, 7, 1, "", "bijective"], [44, 4, 1, "", "log_abs_det_jacobian"], [44, 7, 1, "", "sign"]], "torchtree.distributions.tree_prior": [[45, 3, 1, "", "CompoundGammaDirichletPrior"]], "torchtree.distributions.tree_prior.CompoundGammaDirichletPrior": [[45, 4, 1, "", "from_json"], [45, 4, 1, "", "handle_parameter_changed"]], "torchtree.evolution": [[46, 0, 0, "-", "alignment"], [47, 0, 0, "-", "attribute_pattern"], [48, 0, 0, "-", "bdsk"], [49, 0, 0, "-", "birth_death"], [50, 0, 0, "-", "branch_model"], [51, 0, 0, "-", "coalescent"], [52, 0, 0, "-", "datatype"], [54, 0, 0, "-", "io"], [55, 0, 0, "-", "poisson_tree_likelihood"], [56, 0, 0, "-", "rate_transform"], [57, 0, 0, "-", "root_transform"], [58, 0, 0, "-", "site_model"], [59, 0, 0, "-", "site_pattern"], [64, 0, 0, "-", "substitution_model"], [66, 0, 0, "-", "taxa"], [67, 0, 0, "-", "tree_height_transform"], [68, 0, 0, "-", "tree_likelihood"], [69, 0, 0, "-", "tree_model"], [70, 0, 0, "-", "tree_model_flexible"], [71, 0, 0, "-", "tree_regression"]], "torchtree.evolution.alignment": [[46, 3, 1, "", "Alignment"], [46, 1, 1, "", "Sequence"], [46, 2, 1, "", "calculate_F3x4"], [46, 2, 1, "", "calculate_F3x4_from_nucleotide"], [46, 2, 1, "", "calculate_frequencies"], [46, 2, 1, "", "calculate_frequencies_per_codon_position"], [46, 2, 1, "", "calculate_kappa"], [46, 2, 1, "", "calculate_substitutions"], [46, 2, 1, "", "calculate_ts_tv"], [46, 2, 1, "", "read_fasta_sequences"]], "torchtree.evolution.alignment.Alignment": [[46, 5, 1, "", "data_type"], [46, 4, 1, "", "from_json"], [46, 4, 1, "", "get"], [46, 5, 1, "", "sequence_size"], [46, 5, 1, "", "taxa"]], "torchtree.evolution.attribute_pattern": [[47, 3, 1, "", "AttributePattern"]], "torchtree.evolution.attribute_pattern.AttributePattern": [[47, 4, 1, "", "compute_tips_partials"], [47, 4, 1, "", "compute_tips_states"], [47, 4, 1, "", "cpu"], [47, 4, 1, "", "cuda"], [47, 4, 1, "", "from_json"], [47, 4, 1, "", "handle_model_changed"], [47, 4, 1, "", "handle_parameter_changed"]], "torchtree.evolution.bdsk": [[48, 3, 1, "", "BDSKModel"], [48, 3, 1, "", "PiecewiseConstantBirthDeath"], [48, 2, 1, "", "epidemiology_to_birth_death"]], "torchtree.evolution.bdsk.BDSKModel": [[48, 4, 1, "", "from_json"]], "torchtree.evolution.bdsk.PiecewiseConstantBirthDeath": [[48, 7, 1, "", "arg_constraints"], [48, 4, 1, "", "log_p"], [48, 4, 1, "", "log_prob"], [48, 4, 1, "", "log_q"], [48, 4, 1, "", "p0"], [48, 7, 1, "", "support"]], "torchtree.evolution.birth_death": [[49, 3, 1, "", "BirthDeath"], [49, 3, 1, "", "BirthDeathModel"]], "torchtree.evolution.birth_death.BirthDeath": [[49, 7, 1, "", "arg_constraints"], [49, 4, 1, "", "log_p"], [49, 4, 1, "", "log_prob"], [49, 4, 1, "", "log_q"]], "torchtree.evolution.birth_death.BirthDeathModel": [[49, 4, 1, "", "from_json"], [49, 4, 1, "", "handle_model_changed"]], "torchtree.evolution.branch_model": [[50, 3, 1, "", "AbstractClockModel"], [50, 3, 1, "", "BranchModel"], [50, 3, 1, "", "SimpleClockModel"], [50, 3, 1, "", "StrictClockModel"]], "torchtree.evolution.branch_model.AbstractClockModel": [[50, 4, 1, "", "handle_model_changed"], [50, 4, 1, "", "handle_parameter_changed"]], "torchtree.evolution.branch_model.BranchModel": [[50, 5, 1, "", "rates"]], "torchtree.evolution.branch_model.SimpleClockModel": [[50, 4, 1, "", "from_json"], [50, 4, 1, "", "json_factory"], [50, 5, 1, "", "rates"]], "torchtree.evolution.branch_model.StrictClockModel": [[50, 4, 1, "", "from_json"], [50, 5, 1, "", "rates"]], "torchtree.evolution.coalescent": [[51, 3, 1, "", "AbstractCoalescentDistribution"], [51, 3, 1, "", "AbstractCoalescentModel"], [51, 3, 1, "", "ConstantCoalescent"], [51, 3, 1, "", "ConstantCoalescentIntegrated"], [51, 3, 1, "", "ConstantCoalescentIntegratedModel"], [51, 3, 1, "", "ConstantCoalescentModel"], [51, 3, 1, "", "ExponentialCoalescent"], [51, 3, 1, "", "ExponentialCoalescentModel"], [51, 3, 1, "", "FakeTreeModel"], [51, 3, 1, "", "PiecewiseConstantCoalescent"], [51, 3, 1, "", "PiecewiseConstantCoalescentGrid"], [51, 3, 1, "", "PiecewiseConstantCoalescentGridModel"], [51, 3, 1, "", "PiecewiseConstantCoalescentModel"], [51, 3, 1, "", "PiecewiseExponentialCoalescentGrid"], [51, 3, 1, "", "PiecewiseExponentialCoalescentGridModel"], [51, 3, 1, "", "PiecewiseLinearCoalescentGrid"], [51, 3, 1, "", "PiecewiseLinearCoalescentGridModel"], [51, 3, 1, "", "SoftPiecewiseConstantCoalescentGrid"], [51, 2, 1, "", "process_data_coalesent"]], "torchtree.evolution.coalescent.AbstractCoalescentDistribution": [[51, 7, 1, "", "arg_constraints"], [51, 7, 1, "", "has_rsample"], [51, 4, 1, "", "maximum_likelihood"], [51, 7, 1, "", "support"]], "torchtree.evolution.coalescent.AbstractCoalescentModel": [[51, 4, 1, "", "distribution"]], "torchtree.evolution.coalescent.ConstantCoalescent": [[51, 7, 1, "", "has_rsample"], [51, 4, 1, "", "log_prob"], [51, 4, 1, "", "maximum_likelihood"], [51, 4, 1, "", "rsample"]], "torchtree.evolution.coalescent.ConstantCoalescentIntegrated": [[51, 7, 1, "", "arg_constraints"], [51, 7, 1, "", "has_rsample"], [51, 4, 1, "", "log_prob"], [51, 7, 1, "", "support"]], "torchtree.evolution.coalescent.ConstantCoalescentIntegratedModel": [[51, 4, 1, "", "distribution"], [51, 4, 1, "", "from_json"]], "torchtree.evolution.coalescent.ConstantCoalescentModel": [[51, 4, 1, "", "distribution"], [51, 4, 1, "", "from_json"]], "torchtree.evolution.coalescent.ExponentialCoalescent": [[51, 7, 1, "", "arg_constraints"], [51, 7, 1, "", "has_rsample"], [51, 4, 1, "", "log_prob"], [51, 7, 1, "", "support"]], "torchtree.evolution.coalescent.ExponentialCoalescentModel": [[51, 4, 1, "", "distribution"], [51, 4, 1, "", "from_json"]], "torchtree.evolution.coalescent.FakeTreeModel": [[51, 5, 1, "", "node_heights"], [51, 5, 1, "", "sample_shape"]], "torchtree.evolution.coalescent.PiecewiseConstantCoalescent": [[51, 4, 1, "", "log_prob"], [51, 4, 1, "", "maximum_likelihood"]], "torchtree.evolution.coalescent.PiecewiseConstantCoalescentGrid": [[51, 4, 1, "", "log_prob"]], "torchtree.evolution.coalescent.PiecewiseConstantCoalescentGridModel": [[51, 4, 1, "", "distribution"], [51, 4, 1, "", "from_json"]], "torchtree.evolution.coalescent.PiecewiseConstantCoalescentModel": [[51, 4, 1, "", "distribution"], [51, 4, 1, "", "from_json"]], "torchtree.evolution.coalescent.PiecewiseExponentialCoalescentGrid": [[51, 7, 1, "", "arg_constraints"], [51, 7, 1, "", "has_rsample"], [51, 4, 1, "", "log_prob"], [51, 7, 1, "", "support"]], "torchtree.evolution.coalescent.PiecewiseExponentialCoalescentGridModel": [[51, 4, 1, "", "distribution"], [51, 4, 1, "", "from_json"]], "torchtree.evolution.coalescent.PiecewiseLinearCoalescentGrid": [[51, 7, 1, "", "arg_constraints"], [51, 7, 1, "", "has_rsample"], [51, 4, 1, "", "log_prob"], [51, 7, 1, "", "support"]], "torchtree.evolution.coalescent.PiecewiseLinearCoalescentGridModel": [[51, 4, 1, "", "distribution"], [51, 4, 1, "", "from_json"]], "torchtree.evolution.coalescent.SoftPiecewiseConstantCoalescentGrid": [[51, 4, 1, "", "log_prob"]], "torchtree.evolution.datatype": [[52, 3, 1, "", "AbstractDataType"], [52, 3, 1, "", "AminoAcidDataType"], [52, 3, 1, "", "CodonDataType"], [52, 3, 1, "", "DataType"], [52, 3, 1, "", "GeneralDataType"], [52, 3, 1, "", "NucleotideDataType"]], "torchtree.evolution.datatype.AbstractDataType": [[52, 5, 1, "", "size"], [52, 5, 1, "", "state_count"], [52, 5, 1, "", "states"]], "torchtree.evolution.datatype.AminoAcidDataType": [[52, 7, 1, "", "AMINO_ACIDS"], [52, 7, 1, "id0", "AMINO_ACIDS_AMBIGUITY_STATES"], [52, 7, 1, "", "AMINO_ACIDS_STATES"], [52, 4, 1, "", "encoding"], [52, 4, 1, "", "from_json"], [52, 4, 1, "", "partial"]], "torchtree.evolution.datatype.CodonDataType": [[52, 7, 1, "", "CODON_TRIPLETS"], [52, 7, 1, "", "GENETIC_CODE_NAMES"], [52, 7, 1, "", "GENETIC_CODE_TABLES"], [52, 7, 1, "", "NUMBER_OF_CODONS"], [52, 4, 1, "", "encoding"], [52, 4, 1, "", "from_json"], [52, 4, 1, "", "partial"]], "torchtree.evolution.datatype.DataType": [[52, 4, 1, "", "encoding"], [52, 4, 1, "", "partial"], [52, 5, 1, "", "size"], [52, 5, 1, "", "state_count"], [52, 5, 1, "", "states"]], "torchtree.evolution.datatype.GeneralDataType": [[52, 4, 1, "", "encoding"], [52, 4, 1, "", "from_json"], [52, 4, 1, "", "partial"]], "torchtree.evolution.datatype.NucleotideDataType": [[52, 7, 1, "", "NUCLEOTIDES"], [52, 7, 1, "", "NUCLEOTIDE_AMBIGUITY_STATES"], [52, 7, 1, "", "NUCLEOTIDE_STATES"], [52, 4, 1, "", "encoding"], [52, 4, 1, "", "from_json"], [52, 4, 1, "", "partial"]], "torchtree.evolution.io": [[54, 3, 1, "", "Node"], [54, 2, 1, "", "convert_samples_to_nexus"], [54, 2, 1, "", "extract_taxa"], [54, 2, 1, "", "parse_taxa"], [54, 2, 1, "", "parse_translate"], [54, 2, 1, "", "parse_trees"], [54, 2, 1, "", "random_tree_from_heights"], [54, 2, 1, "", "read_tree"], [54, 2, 1, "", "read_tree_and_alignment"], [54, 2, 1, "", "split_newick"], [54, 2, 1, "", "to_nexus"]], "torchtree.evolution.poisson_tree_likelihood": [[55, 3, 1, "", "PoissonTreeLikelihood"]], "torchtree.evolution.poisson_tree_likelihood.PoissonTreeLikelihood": [[55, 4, 1, "", "from_json"], [55, 4, 1, "", "handle_parameter_changed"]], "torchtree.evolution.rate_transform": [[56, 3, 1, "", "LogDifferenceRateTransform"], [56, 3, 1, "", "RescaledRateTransform"]], "torchtree.evolution.rate_transform.LogDifferenceRateTransform": [[56, 7, 1, "", "bijective"], [56, 4, 1, "", "log_abs_det_jacobian"], [56, 7, 1, "", "sign"]], "torchtree.evolution.rate_transform.RescaledRateTransform": [[56, 7, 1, "", "bijective"], [56, 4, 1, "", "log_abs_det_jacobian"], [56, 7, 1, "", "sign"]], "torchtree.evolution.root_transform": [[57, 3, 1, "", "RootParameter"]], "torchtree.evolution.root_transform.RootParameter": [[57, 4, 1, "", "add_parameter_listener"], [57, 4, 1, "", "fire_parameter_changed"], [57, 4, 1, "", "from_json"], [57, 4, 1, "", "handle_model_changed"], [57, 4, 1, "", "handle_parameter_changed"], [57, 4, 1, "", "parameters"], [57, 5, 1, "", "tensor"], [57, 4, 1, "", "transform"]], "torchtree.evolution.site_model": [[58, 3, 1, "", "ConstantSiteModel"], [58, 3, 1, "", "InvariantSiteModel"], [58, 3, 1, "", "SiteModel"], [58, 3, 1, "", "UnivariateDiscretizedSiteModel"], [58, 3, 1, "", "WeibullSiteModel"]], "torchtree.evolution.site_model.ConstantSiteModel": [[58, 4, 1, "", "cpu"], [58, 4, 1, "", "cuda"], [58, 4, 1, "", "from_json"], [58, 4, 1, "", "probabilities"], [58, 4, 1, "", "rates"], [58, 4, 1, "", "to"]], "torchtree.evolution.site_model.InvariantSiteModel": [[58, 4, 1, "", "cpu"], [58, 4, 1, "", "cuda"], [58, 4, 1, "", "from_json"], [58, 5, 1, "", "invariant"], [58, 4, 1, "", "probabilities"], [58, 4, 1, "", "rates"], [58, 4, 1, "", "to"], [58, 4, 1, "", "update_rates_probs"]], "torchtree.evolution.site_model.SiteModel": [[58, 4, 1, "", "handle_model_changed"], [58, 4, 1, "", "handle_parameter_changed"], [58, 4, 1, "", "probabilities"], [58, 4, 1, "", "rates"]], "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel": [[58, 4, 1, "", "cpu"], [58, 4, 1, "", "cuda"], [58, 5, 1, "", "invariant"], [58, 4, 1, "", "inverse_cdf"], [58, 4, 1, "", "probabilities"], [58, 4, 1, "", "rates"], [58, 4, 1, "", "to"], [58, 4, 1, "", "update_rates"]], "torchtree.evolution.site_model.WeibullSiteModel": [[58, 4, 1, "", "from_json"], [58, 4, 1, "", "inverse_cdf"], [58, 5, 1, "", "shape"]], "torchtree.evolution.site_pattern": [[59, 3, 1, "", "SitePattern"], [59, 2, 1, "", "compress"], [59, 2, 1, "", "compress_alignment"], [59, 2, 1, "", "compress_alignment_states"]], "torchtree.evolution.site_pattern.SitePattern": [[59, 4, 1, "", "compute_tips_partials"], [59, 4, 1, "", "compute_tips_states"], [59, 4, 1, "", "cpu"], [59, 4, 1, "", "cuda"], [59, 4, 1, "", "from_json"], [59, 4, 1, "", "handle_model_changed"], [59, 4, 1, "", "handle_parameter_changed"]], "torchtree.evolution.substitution_model": [[60, 0, 0, "-", "abstract"], [61, 0, 0, "-", "amino_acid"], [62, 0, 0, "-", "codon"], [63, 0, 0, "-", "general"], [65, 0, 0, "-", "nucleotide"]], "torchtree.evolution.substitution_model.abstract": [[60, 3, 1, "", "AbstractSubstitutionModel"], [60, 3, 1, "", "NonSymmetricSubstitutionModel"], [60, 3, 1, "", "SubstitutionModel"], [60, 3, 1, "", "SymmetricSubstitutionModel"]], "torchtree.evolution.substitution_model.abstract.AbstractSubstitutionModel": [[60, 5, 1, "", "frequencies"], [60, 4, 1, "", "norm"]], "torchtree.evolution.substitution_model.abstract.NonSymmetricSubstitutionModel": [[60, 4, 1, "", "eigen"], [60, 4, 1, "", "p_t"]], "torchtree.evolution.substitution_model.abstract.SubstitutionModel": [[60, 5, 1, "", "frequencies"], [60, 4, 1, "", "p_t"], [60, 4, 1, "", "q"], [60, 5, 1, "", "rates"]], "torchtree.evolution.substitution_model.abstract.SymmetricSubstitutionModel": [[60, 4, 1, "", "eigen"], [60, 4, 1, "", "p_t"]], "torchtree.evolution.substitution_model.amino_acid": [[61, 3, 1, "", "LG"], [61, 3, 1, "", "WAG"]], "torchtree.evolution.substitution_model.amino_acid.LG": [[61, 4, 1, "", "from_json"], [61, 5, 1, "", "rates"]], "torchtree.evolution.substitution_model.amino_acid.WAG": [[61, 4, 1, "", "from_json"], [61, 5, 1, "", "rates"]], "torchtree.evolution.substitution_model.codon": [[62, 3, 1, "", "MG94"]], "torchtree.evolution.substitution_model.codon.MG94": [[62, 4, 1, "", "from_json"], [62, 4, 1, "", "handle_model_changed"], [62, 4, 1, "", "handle_parameter_changed"], [62, 4, 1, "", "q"], [62, 5, 1, "", "rates"]], "torchtree.evolution.substitution_model.general": [[63, 3, 1, "", "EmpiricalSubstitutionModel"], [63, 3, 1, "", "GeneralJC69"], [63, 3, 1, "", "GeneralNonSymmetricSubstitutionModel"], [63, 3, 1, "", "GeneralSymmetricSubstitutionModel"]], "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel": [[63, 4, 1, "", "create_rate_matrix"], [63, 4, 1, "", "eigen"], [63, 5, 1, "", "frequencies"], [63, 4, 1, "", "from_json"], [63, 4, 1, "", "handle_model_changed"], [63, 4, 1, "", "handle_parameter_changed"], [63, 4, 1, "", "p_t"], [63, 4, 1, "", "q"]], "torchtree.evolution.substitution_model.general.GeneralJC69": [[63, 4, 1, "", "cpu"], [63, 4, 1, "", "cuda"], [63, 5, 1, "", "frequencies"], [63, 4, 1, "", "from_json"], [63, 4, 1, "", "handle_model_changed"], [63, 4, 1, "", "handle_parameter_changed"], [63, 4, 1, "", "p_t"], [63, 4, 1, "", "q"], [63, 5, 1, "", "rates"]], "torchtree.evolution.substitution_model.general.GeneralNonSymmetricSubstitutionModel": [[63, 4, 1, "", "from_json"], [63, 4, 1, "", "handle_model_changed"], [63, 4, 1, "", "handle_parameter_changed"], [63, 4, 1, "", "q"], [63, 5, 1, "", "rates"]], "torchtree.evolution.substitution_model.general.GeneralSymmetricSubstitutionModel": [[63, 4, 1, "", "from_json"], [63, 4, 1, "", "handle_model_changed"], [63, 4, 1, "", "handle_parameter_changed"], [63, 4, 1, "", "q"], [63, 5, 1, "", "rates"]], "torchtree.evolution.substitution_model.nucleotide": [[65, 3, 1, "", "GTR"], [65, 3, 1, "", "HKY"], [65, 3, 1, "", "JC69"]], "torchtree.evolution.substitution_model.nucleotide.GTR": [[65, 4, 1, "", "from_json"], [65, 4, 1, "", "handle_model_changed"], [65, 4, 1, "", "handle_parameter_changed"], [65, 4, 1, "", "q"], [65, 5, 1, "", "rates"]], "torchtree.evolution.substitution_model.nucleotide.HKY": [[65, 4, 1, "", "from_json"], [65, 4, 1, "", "handle_model_changed"], [65, 4, 1, "", "handle_parameter_changed"], [65, 5, 1, "", "kappa"], [65, 4, 1, "", "p_t_analytical"], [65, 4, 1, "", "q"], [65, 5, 1, "", "rates"]], "torchtree.evolution.substitution_model.nucleotide.JC69": [[65, 4, 1, "", "cpu"], [65, 4, 1, "", "cuda"], [65, 5, 1, "", "frequencies"], [65, 4, 1, "", "from_json"], [65, 4, 1, "", "handle_model_changed"], [65, 4, 1, "", "handle_parameter_changed"], [65, 4, 1, "", "p_t"], [65, 4, 1, "", "q"], [65, 5, 1, "", "rates"]], "torchtree.evolution.taxa": [[66, 3, 1, "", "Taxa"], [66, 3, 1, "", "Taxon"]], "torchtree.evolution.taxa.Taxa": [[66, 4, 1, "", "from_json"]], "torchtree.evolution.taxa.Taxon": [[66, 4, 1, "", "from_json"]], "torchtree.evolution.tree_height_transform": [[67, 3, 1, "", "DifferenceNodeHeightTransform"], [67, 3, 1, "", "GeneralNodeHeightTransform"]], "torchtree.evolution.tree_height_transform.DifferenceNodeHeightTransform": [[67, 7, 1, "", "bijective"], [67, 4, 1, "", "log_abs_det_jacobian"], [67, 7, 1, "", "sign"]], "torchtree.evolution.tree_height_transform.GeneralNodeHeightTransform": [[67, 7, 1, "", "bijective"], [67, 4, 1, "", "log_abs_det_jacobian"], [67, 7, 1, "", "sign"], [67, 4, 1, "", "sort_indices"], [67, 4, 1, "", "update_bounds"]], "torchtree.evolution.tree_likelihood": [[68, 3, 1, "", "TreeLikelihoodModel"], [68, 2, 1, "", "calculate_treelikelihood"], [68, 2, 1, "", "calculate_treelikelihood_discrete"], [68, 2, 1, "", "calculate_treelikelihood_discrete_rescaled"], [68, 2, 1, "", "calculate_treelikelihood_discrete_safe"], [68, 2, 1, "", "calculate_treelikelihood_tip_states_discrete"], [68, 2, 1, "", "calculate_treelikelihood_tip_states_discrete_rescaled"]], "torchtree.evolution.tree_likelihood.TreeLikelihoodModel": [[68, 4, 1, "", "calculate_with_tip_partials"], [68, 4, 1, "", "calculate_with_tip_states"], [68, 4, 1, "", "from_json"], [68, 4, 1, "", "handle_parameter_changed"]], "torchtree.evolution.tree_model": [[69, 3, 1, "", "AbstractTreeModel"], [69, 3, 1, "", "ReparameterizedTimeTreeModel"], [69, 3, 1, "", "TimeTreeModel"], [69, 3, 1, "", "TreeModel"], [69, 3, 1, "", "UnRootedTreeModel"], [69, 2, 1, "", "heights_from_branch_lengths"], [69, 2, 1, "", "heights_to_branch_lengths"], [69, 2, 1, "", "initialize_dates_from_taxa"], [69, 2, 1, "", "parse_tree"], [69, 2, 1, "", "setup_dates"], [69, 2, 1, "", "setup_indexes"]], "torchtree.evolution.tree_model.AbstractTreeModel": [[69, 4, 1, "", "as_newick"], [69, 4, 1, "", "handle_model_changed"], [69, 5, 1, "", "postorder"], [69, 5, 1, "", "taxa"], [69, 4, 1, "", "update_traversals"], [69, 4, 1, "", "write_newick"]], "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel": [[69, 4, 1, "", "cpu"], [69, 4, 1, "", "cuda"], [69, 4, 1, "", "from_json"], [69, 4, 1, "", "handle_model_changed"], [69, 4, 1, "", "handle_parameter_changed"], [69, 4, 1, "", "json_factory"], [69, 5, 1, "", "node_heights"], [69, 4, 1, "", "update_node_heights"]], "torchtree.evolution.tree_model.TimeTreeModel": [[69, 4, 1, "", "branch_lengths"], [69, 4, 1, "", "cpu"], [69, 4, 1, "", "cuda"], [69, 4, 1, "", "from_json"], [69, 4, 1, "", "handle_parameter_changed"], [69, 4, 1, "", "json_factory"], [69, 5, 1, "", "node_heights"], [69, 4, 1, "", "update_leaf_heights"], [69, 4, 1, "", "update_traversals"]], "torchtree.evolution.tree_model.TreeModel": [[69, 4, 1, "", "branch_lengths"], [69, 5, 1, "", "postorder"], [69, 5, 1, "", "taxa"], [69, 4, 1, "", "write_newick"]], "torchtree.evolution.tree_model.UnRootedTreeModel": [[69, 4, 1, "", "branch_lengths"], [69, 4, 1, "", "from_json"], [69, 4, 1, "", "handle_parameter_changed"], [69, 4, 1, "", "json_factory"]], "torchtree.evolution.tree_model_flexible": [[70, 3, 1, "", "FlexibleTimeTreeModel"]], "torchtree.evolution.tree_model_flexible.FlexibleTimeTreeModel": [[70, 4, 1, "", "from_json"], [70, 4, 1, "", "json_factory"]], "torchtree.evolution.tree_regression": [[71, 2, 1, "", "linear_regression"]], "torchtree.inference": [[76, 0, 0, "-", "hmc"], [82, 0, 0, "-", "mcmc"], [85, 0, 0, "-", "sampler"], [86, 0, 0, "-", "utils"]], "torchtree.inference.hmc": [[73, 0, 0, "-", "adaptation"], [74, 0, 0, "-", "hamiltonian"], [75, 0, 0, "-", "hmc"], [77, 0, 0, "-", "integrator"], [78, 0, 0, "-", "operator"], [79, 0, 0, "-", "stan_adaptation"]], "torchtree.inference.hmc.adaptation": [[73, 3, 1, "", "AdaptiveStepSize"], [73, 3, 1, "", "Adaptor"], [73, 3, 1, "", "DualAveragingStepSize"], [73, 3, 1, "", "MassMatrixAdaptor"], [73, 3, 1, "", "WarmupAdaptation"], [73, 2, 1, "", "find_reasonable_step_size"]], "torchtree.inference.hmc.adaptation.AdaptiveStepSize": [[73, 4, 1, "", "from_json"], [73, 4, 1, "", "learn"], [73, 4, 1, "", "load_state_dict"], [73, 4, 1, "", "restart"]], "torchtree.inference.hmc.adaptation.Adaptor": [[73, 4, 1, "", "learn"], [73, 4, 1, "", "load_state_dict"], [73, 4, 1, "", "restart"], [73, 4, 1, "", "state_dict"]], "torchtree.inference.hmc.adaptation.DualAveragingStepSize": [[73, 4, 1, "", "from_json"], [73, 4, 1, "", "learn"], [73, 4, 1, "", "load_state_dict"], [73, 4, 1, "", "restart"]], "torchtree.inference.hmc.adaptation.MassMatrixAdaptor": [[73, 4, 1, "", "from_json"], [73, 4, 1, "", "learn"], [73, 4, 1, "", "load_state_dict"], [73, 5, 1, "", "mass_matrix"], [73, 4, 1, "", "restart"]], "torchtree.inference.hmc.adaptation.WarmupAdaptation": [[73, 5, 1, "", "inverse_mass_matrix"], [73, 5, 1, "", "mass_matrix"], [73, 5, 1, "", "sqrt_mass_matrix"], [73, 5, 1, "", "step_size"]], "torchtree.inference.hmc.hamiltonian": [[74, 3, 1, "", "Hamiltonian"]], "torchtree.inference.hmc.hamiltonian.Hamiltonian": [[74, 4, 1, "", "from_json"], [74, 4, 1, "", "handle_parameter_changed"], [74, 4, 1, "", "kinetic_energy"], [74, 4, 1, "", "potential_energy"], [74, 4, 1, "", "sample_momentum"]], "torchtree.inference.hmc.hmc": [[75, 3, 1, "", "HMC"]], "torchtree.inference.hmc.hmc.HMC": [[75, 4, 1, "", "find_reasonable_step_size"], [75, 4, 1, "", "from_json"], [75, 4, 1, "", "hamiltonian"], [75, 4, 1, "", "run"], [75, 4, 1, "", "sample_momentum"]], "torchtree.inference.hmc.integrator": [[77, 3, 1, "", "Integrator"], [77, 3, 1, "", "LeapfrogIntegrator"], [77, 2, 1, "", "set_tensor"]], "torchtree.inference.hmc.integrator.Integrator": [[77, 4, 1, "", "load_state_dict"], [77, 4, 1, "", "state_dict"]], "torchtree.inference.hmc.integrator.LeapfrogIntegrator": [[77, 4, 1, "", "from_json"], [77, 4, 1, "", "load_state_dict"]], "torchtree.inference.hmc.operator": [[78, 3, 1, "", "HMCOperator"]], "torchtree.inference.hmc.operator.HMCOperator": [[78, 4, 1, "", "adaptable_parameter"], [78, 4, 1, "", "from_json"], [78, 4, 1, "", "handle_parameter_changed"], [78, 5, 1, "", "mass_matrix"], [78, 4, 1, "", "set_adaptable_parameter"], [78, 4, 1, "", "tune"], [78, 5, 1, "", "tuning_parameter"], [78, 4, 1, "", "update_mass_matrices"]], "torchtree.inference.hmc.stan_adaptation": [[79, 3, 1, "", "StanWindowedAdaptation"]], "torchtree.inference.hmc.stan_adaptation.StanWindowedAdaptation": [[79, 4, 1, "", "from_json"], [79, 4, 1, "", "learn"], [79, 4, 1, "", "restart"]], "torchtree.inference.mcmc": [[81, 0, 0, "-", "gmrf_block_updating"], [83, 0, 0, "-", "mcmc"], [84, 0, 0, "-", "operator"]], "torchtree.inference.mcmc.gmrf_block_updating": [[81, 3, 1, "", "GMRFPiecewiseCoalescentBlockUpdatingOperator"]], "torchtree.inference.mcmc.gmrf_block_updating.GMRFPiecewiseCoalescentBlockUpdatingOperator": [[81, 4, 1, "", "adaptable_parameter"], [81, 4, 1, "", "from_json"], [81, 4, 1, "", "gradient"], [81, 4, 1, "", "jacobian"], [81, 4, 1, "", "newton_raphson"], [81, 4, 1, "", "propose_precision"], [81, 4, 1, "", "set_adaptable_parameter"], [81, 5, 1, "", "tuning_parameter"]], "torchtree.inference.mcmc.mcmc": [[83, 3, 1, "", "MCMC"]], "torchtree.inference.mcmc.mcmc.MCMC": [[83, 4, 1, "", "from_json"], [83, 4, 1, "", "load_state_dict"], [83, 4, 1, "", "run"], [83, 4, 1, "", "save_full_state"], [83, 4, 1, "", "state_dict"]], "torchtree.inference.mcmc.operator": [[84, 3, 1, "", "DirichletOperator"], [84, 3, 1, "", "MCMCOperator"], [84, 3, 1, "", "ScalerOperator"], [84, 3, 1, "", "SlidingWindowOperator"]], "torchtree.inference.mcmc.operator.DirichletOperator": [[84, 4, 1, "", "adaptable_parameter"], [84, 4, 1, "", "from_json"], [84, 4, 1, "", "set_adaptable_parameter"], [84, 5, 1, "", "tuning_parameter"]], "torchtree.inference.mcmc.operator.MCMCOperator": [[84, 4, 1, "", "accept"], [84, 5, 1, "", "adaptable_parameter"], [84, 4, 1, "", "load_state_dict"], [84, 4, 1, "", "reject"], [84, 4, 1, "", "set_adaptable_parameter"], [84, 4, 1, "", "smoothed_acceptance_rate"], [84, 4, 1, "", "state_dict"], [84, 4, 1, "", "step"], [84, 4, 1, "", "tune"], [84, 5, 1, "", "tuning_parameter"]], "torchtree.inference.mcmc.operator.ScalerOperator": [[84, 4, 1, "", "adaptable_parameter"], [84, 4, 1, "", "from_json"], [84, 4, 1, "", "set_adaptable_parameter"], [84, 5, 1, "", "tuning_parameter"]], "torchtree.inference.mcmc.operator.SlidingWindowOperator": [[84, 4, 1, "", "adaptable_parameter"], [84, 4, 1, "", "from_json"], [84, 4, 1, "", "set_adaptable_parameter"], [84, 5, 1, "", "tuning_parameter"]], "torchtree.inference.sampler": [[85, 3, 1, "", "Sampler"]], "torchtree.inference.sampler.Sampler": [[85, 4, 1, "", "from_json"], [85, 4, 1, "", "run"]], "torchtree.inference.utils": [[86, 2, 1, "", "extract_tensors_and_parameters"]], "torchtree.nf": [[87, 0, 0, "-", "energy_functions"], [88, 0, 0, "-", "flow"], [90, 0, 0, "-", "planar"], [91, 0, 0, "-", "realnvp"]], "torchtree.nf.energy_functions": [[87, 3, 1, "", "EnergyFunctionModel"], [87, 2, 1, "", "w1"], [87, 2, 1, "", "w2"], [87, 2, 1, "", "w3"]], "torchtree.nf.energy_functions.EnergyFunctionModel": [[87, 4, 1, "", "from_json"], [87, 4, 1, "", "handle_model_changed"]], "torchtree.nf.flow": [[88, 3, 1, "", "NormalizingFlow"]], "torchtree.nf.flow.NormalizingFlow": [[88, 4, 1, "", "apply_flow"], [88, 4, 1, "", "cpu"], [88, 4, 1, "", "cuda"], [88, 4, 1, "", "entropy"], [88, 4, 1, "", "forward"], [88, 4, 1, "", "from_json"], [88, 4, 1, "", "log_prob"], [88, 4, 1, "", "parameters"], [88, 4, 1, "", "rsample"], [88, 4, 1, "", "sample"], [88, 4, 1, "", "to"]], "torchtree.nf.planar": [[90, 3, 1, "", "PlanarTransform"]], "torchtree.nf.planar.PlanarTransform": [[90, 4, 1, "", "forward"], [90, 4, 1, "", "log_abs_det_jacobian"], [90, 4, 1, "", "u_hat"]], "torchtree.nf.realnvp": [[91, 3, 1, "", "BatchNorm"], [91, 3, 1, "", "FlowSequential"], [91, 3, 1, "", "LinearMaskedCoupling"], [91, 3, 1, "", "RealNVP"]], "torchtree.nf.realnvp.BatchNorm": [[91, 4, 1, "", "forward"], [91, 4, 1, "", "inverse"]], "torchtree.nf.realnvp.FlowSequential": [[91, 4, 1, "", "forward"], [91, 4, 1, "", "inverse"]], "torchtree.nf.realnvp.LinearMaskedCoupling": [[91, 4, 1, "", "forward"], [91, 4, 1, "", "inverse"]], "torchtree.nf.realnvp.RealNVP": [[91, 4, 1, "", "apply_flow"], [91, 5, 1, "", "batch_shape"], [91, 4, 1, "", "entropy"], [91, 4, 1, "", "forward"], [91, 4, 1, "", "from_json"], [91, 4, 1, "", "inverse"], [91, 4, 1, "", "log_prob"], [91, 4, 1, "", "parameters"], [91, 4, 1, "", "rsample"], [91, 4, 1, "", "sample"]], "torchtree.nn": [[93, 0, 0, "-", "module"]], "torchtree.nn.module": [[93, 3, 1, "", "Module"]], "torchtree.nn.module.Module": [[93, 4, 1, "", "cpu"], [93, 4, 1, "", "cuda"], [93, 4, 1, "", "from_json"], [93, 5, 1, "", "module"], [93, 4, 1, "", "to"]], "torchtree.ops": [[94, 0, 0, "-", "dual_averaging"], [96, 0, 0, "-", "smooth"], [97, 0, 0, "-", "welford"]], "torchtree.ops.dual_averaging": [[94, 3, 1, "", "DualAveraging"]], "torchtree.ops.dual_averaging.DualAveraging": [[94, 4, 1, "", "restart"], [94, 4, 1, "", "step"]], "torchtree.ops.smooth": [[96, 2, 1, "", "smooth_max"], [96, 2, 1, "", "soft_searchsorted"], [96, 2, 1, "", "soft_sort"]], "torchtree.ops.welford": [[97, 3, 1, "", "WelfordVariance"]], "torchtree.ops.welford.WelfordVariance": [[97, 4, 1, "", "add_sample"], [97, 4, 1, "", "mean"], [97, 4, 1, "", "remove_sample"], [97, 4, 1, "", "reset"], [97, 4, 1, "", "variance"]], "torchtree.optim": [[98, 0, 0, "-", "convergence"], [100, 0, 0, "-", "lr_scheduler"], [101, 0, 0, "-", "optimizer"]], "torchtree.optim.convergence": [[98, 3, 1, "", "BaseConvergence"], [98, 3, 1, "", "StanVariationalConvergence"], [98, 3, 1, "", "VariationalConvergence"]], "torchtree.optim.convergence.BaseConvergence": [[98, 4, 1, "", "check"]], "torchtree.optim.convergence.StanVariationalConvergence": [[98, 4, 1, "", "check"], [98, 4, 1, "", "from_json"], [98, 4, 1, "", "rel_difference"]], "torchtree.optim.convergence.VariationalConvergence": [[98, 4, 1, "", "check"], [98, 4, 1, "", "from_json"]], "torchtree.optim.lr_scheduler": [[100, 3, 1, "", "Scheduler"]], "torchtree.optim.lr_scheduler.Scheduler": [[100, 4, 1, "", "from_json"], [100, 4, 1, "", "step"]], "torchtree.optim.optimizer": [[101, 3, 1, "", "Optimizer"]], "torchtree.optim.optimizer.Optimizer": [[101, 4, 1, "", "from_json"], [101, 4, 1, "", "load_state_dict"], [101, 4, 1, "", "run"], [101, 4, 1, "", "save_full_state"], [101, 4, 1, "", "state_dict"]], "torchtree.torchtree": [[102, 2, 1, "", "main"]], "torchtree.typing": [[103, 1, 1, "", "ID"], [103, 1, 1, "", "ListParameter"], [103, 1, 1, "", "ListTensor"], [103, 1, 1, "", "OrderedDictType"]], "torchtree.variational": [[104, 0, 0, "-", "chi"], [106, 0, 0, "-", "kl"], [107, 0, 0, "-", "renyi"]], "torchtree.variational.chi": [[104, 3, 1, "", "CUBO"]], "torchtree.variational.chi.CUBO": [[104, 4, 1, "", "from_json"], [104, 4, 1, "", "handle_parameter_changed"]], "torchtree.variational.kl": [[106, 3, 1, "", "ELBO"], [106, 3, 1, "", "KLpq"], [106, 3, 1, "", "KLpqImportance"], [106, 3, 1, "", "SELBO"]], "torchtree.variational.kl.ELBO": [[106, 4, 1, "", "from_json"], [106, 4, 1, "", "handle_parameter_changed"]], "torchtree.variational.kl.KLpq": [[106, 4, 1, "", "from_json"], [106, 4, 1, "", "handle_parameter_changed"]], "torchtree.variational.kl.KLpqImportance": [[106, 4, 1, "", "from_json"], [106, 4, 1, "", "handle_parameter_changed"]], "torchtree.variational.kl.SELBO": [[106, 4, 1, "", "from_json"], [106, 4, 1, "", "handle_parameter_changed"]], "torchtree.variational.renyi": [[107, 3, 1, "", "VR"]], "torchtree.variational.renyi.VR": [[107, 4, 1, "", "from_json"], [107, 4, 1, "", "handle_parameter_changed"]]}, "objtypes": {"0": "py:module", "1": "py:data", "2": "py:function", "3": "py:class", "4": "py:method", "5": "py:property", "6": "py:exception", "7": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "data", "Python data"], "2": ["py", "function", "Python function"], "3": ["py", "class", "Python class"], "4": ["py", "method", "Python method"], "5": ["py", "property", "Python property"], "6": ["py", "exception", "Python exception"], "7": ["py", "attribute", "Python attribute"]}, "titleterms": {"torchtre": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109], "_version": 0, "cli": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "advi": 1, "modul": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 83, 84, 85, 86, 87, 88, 90, 91, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 106, 107], "content": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 81, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "function": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 14, 15, 25, 29, 30, 46, 48, 51, 54, 59, 68, 69, 71, 73, 77, 86, 87, 96, 102], "attribut": [1, 4, 29, 46], "argparse_util": 2, "evolut": [4, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "hmc": [5, 73, 74, 75, 76, 77, 78, 79], "submodul": [6, 20, 36, 53, 64, 72, 76, 80, 82, 89, 92, 95, 99, 105], "packag": [6, 36, 64, 72, 92, 99, 105], "jacobian": 7, "logger": [8, 21], "map": 9, "mcmc": [10, 81, 82, 83, 84], "oper": [11, 78, 84], "plugin": 12, "class": [12, 13, 16, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 81, 83, 84, 85, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 104, 105, 106, 107], "plugin_manag": 13, "prior": 14, "util": [15, 29, 86], "core": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], "abstractparamet": 16, "classproperty_decor": 17, "contain": 18, "identifi": 19, "model": 22, "paramet": 23, "parameter_encod": 24, "parameter_util": 25, "parametr": 26, "runnabl": 27, "serializ": 28, "distribut": [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], "bayesian_bridg": 30, "ctmc_scale": 31, "deterministic_norm": 32, "gmrf": 34, "gmrf_integr": 35, "inverse_gamma": 37, "joint_distribut": 38, "log_norm": 39, "multivariate_norm": 40, "normal": 41, "one_on_x": 42, "scale_mixtur": 43, "transform": 44, "tree_prior": 45, "align": 46, "attribute_pattern": 47, "bdsk": 48, "birth_death": 49, "branch_model": 50, "coalesc": 51, "datatyp": 52, "subpackag": [53, 72, 80], "io": 54, "poisson_tree_likelihood": 55, "rate_transform": 56, "root_transform": 57, "site_model": 58, "site_pattern": 59, "substitution_model": [60, 61, 62, 63, 64, 65], "abstract": 60, "amino_acid": 61, "codon": 62, "gener": 63, "nucleotid": 65, "taxa": 66, "tree_height_transform": 67, "tree_likelihood": 68, "tree_model": 69, "tree_model_flex": 70, "tree_regress": 71, "infer": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86], "adapt": 73, "hamiltonian": 74, "integr": 77, "stan_adapt": 79, "gmrf_block_upd": 81, "sampler": 85, "nf": [87, 88, 89, 90, 91], "energy_funct": 87, "flow": 88, "planar": 90, "realnvp": 91, "nn": [92, 93], "op": [94, 95, 96, 97], "dual_averag": 94, "smooth": 96, "welford": 97, "optim": [98, 99, 100, 101], "converg": 98, "lr_schedul": 100, "type": 103, "variat": [104, 105, 106, 107], "chi": 104, "kl": 106, "renyi": 107, "bibliographi": 108, "welcom": 109, "instal": 109, "plug": 109, "ins": 109}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinxcontrib.bibtex": 9, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"torchtree._version": [[0, "module-torchtree._version"]], "torchtree.cli.advi": [[1, "module-torchtree.cli.advi"]], "Module Contents": [[1, "module-contents"], [2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [81, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [90, "module-contents"], [91, "module-contents"], [93, "module-contents"], [94, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [100, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [106, "module-contents"], [107, "module-contents"]], "Functions": [[1, "functions"], [2, "functions"], [3, "functions"], [4, "functions"], [5, "functions"], [7, "functions"], [8, "functions"], [9, "functions"], [10, "functions"], [11, "functions"], [14, "functions"], [15, "functions"], [25, "functions"], [29, "functions"], [30, "functions"], [46, "functions"], [48, "functions"], [51, "functions"], [54, "functions"], [59, "functions"], [68, "functions"], [69, "functions"], [71, "functions"], [73, "functions"], [77, "functions"], [86, "functions"], [87, "functions"], [96, "functions"], [102, "functions"]], "Attributes": [[1, "attributes"], [4, "attributes"], [29, "attributes"], [46, "attributes"]], "torchtree.cli.argparse_utils": [[2, "module-torchtree.cli.argparse_utils"]], "torchtree.cli.cli": [[3, "module-torchtree.cli.cli"]], "torchtree.cli.evolution": [[4, "module-torchtree.cli.evolution"]], "torchtree.cli.hmc": [[5, "module-torchtree.cli.hmc"]], "torchtree.cli": [[6, "module-torchtree.cli"]], "Submodules": [[6, "submodules"], [20, "submodules"], [36, "submodules"], [53, "submodules"], [64, "submodules"], [72, "submodules"], [76, "submodules"], [80, "submodules"], [82, "submodules"], [89, "submodules"], [92, "submodules"], [95, "submodules"], [99, "submodules"], [105, "submodules"]], "Package Contents": [[6, "package-contents"], [36, "package-contents"], [64, "package-contents"], [72, "package-contents"], [92, "package-contents"], [99, "package-contents"], [105, "package-contents"]], "torchtree.cli.jacobians": [[7, "module-torchtree.cli.jacobians"]], "torchtree.cli.loggers": [[8, "module-torchtree.cli.loggers"]], "torchtree.cli.map": [[9, "module-torchtree.cli.map"]], "torchtree.cli.mcmc": [[10, "module-torchtree.cli.mcmc"]], "torchtree.cli.operators": [[11, "module-torchtree.cli.operators"]], "torchtree.cli.plugin": [[12, "module-torchtree.cli.plugin"]], "Classes": [[12, "classes"], [13, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [81, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [87, "classes"], [88, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [101, "classes"], [104, "classes"], [105, "classes"], [106, "classes"], [107, "classes"]], "torchtree.cli.plugin_manager": [[13, "module-torchtree.cli.plugin_manager"]], "torchtree.cli.priors": [[14, "module-torchtree.cli.priors"]], "torchtree.cli.utils": [[15, "module-torchtree.cli.utils"]], "torchtree.core.abstractparameter": [[16, "module-torchtree.core.abstractparameter"]], "torchtree.core.classproperty_decorator": [[17, "module-torchtree.core.classproperty_decorator"]], "torchtree.core.container": [[18, "module-torchtree.core.container"]], "torchtree.core.identifiable": [[19, "module-torchtree.core.identifiable"]], "torchtree.core": [[20, "module-torchtree.core"]], "torchtree.core.logger": [[21, "module-torchtree.core.logger"]], "torchtree.core.model": [[22, "module-torchtree.core.model"]], "torchtree.core.parameter": [[23, "module-torchtree.core.parameter"]], "torchtree.core.parameter_encoder": [[24, "module-torchtree.core.parameter_encoder"]], "torchtree.core.parameter_utils": [[25, "module-torchtree.core.parameter_utils"]], "torchtree.core.parametric": [[26, "module-torchtree.core.parametric"]], "torchtree.core.runnable": [[27, "module-torchtree.core.runnable"]], "torchtree.core.serializable": [[28, "module-torchtree.core.serializable"]], "torchtree.core.utils": [[29, "module-torchtree.core.utils"]], "torchtree.distributions.bayesian_bridge": [[30, "module-torchtree.distributions.bayesian_bridge"]], "torchtree.distributions.ctmc_scale": [[31, "module-torchtree.distributions.ctmc_scale"]], "torchtree.distributions.deterministic_normal": [[32, "module-torchtree.distributions.deterministic_normal"]], "torchtree.distributions.distributions": [[33, "module-torchtree.distributions.distributions"]], "torchtree.distributions.gmrf": [[34, "module-torchtree.distributions.gmrf"]], "torchtree.distributions.gmrf_integrated": [[35, "module-torchtree.distributions.gmrf_integrated"]], "torchtree.distributions": [[36, "module-torchtree.distributions"]], "torchtree.distributions.inverse_gamma": [[37, "module-torchtree.distributions.inverse_gamma"]], "torchtree.distributions.joint_distribution": [[38, "module-torchtree.distributions.joint_distribution"]], "torchtree.distributions.log_normal": [[39, "module-torchtree.distributions.log_normal"]], "torchtree.distributions.multivariate_normal": [[40, "module-torchtree.distributions.multivariate_normal"]], "torchtree.distributions.normal": [[41, "module-torchtree.distributions.normal"]], "torchtree.distributions.one_on_x": [[42, "module-torchtree.distributions.one_on_x"]], "torchtree.distributions.scale_mixture": [[43, "module-torchtree.distributions.scale_mixture"]], "torchtree.distributions.transforms": [[44, "module-torchtree.distributions.transforms"]], "torchtree.distributions.tree_prior": [[45, "module-torchtree.distributions.tree_prior"]], "torchtree.evolution.alignment": [[46, "module-torchtree.evolution.alignment"]], "torchtree.evolution.attribute_pattern": [[47, "module-torchtree.evolution.attribute_pattern"]], "torchtree.evolution.bdsk": [[48, "module-torchtree.evolution.bdsk"]], "torchtree.evolution.birth_death": [[49, "module-torchtree.evolution.birth_death"]], "torchtree.evolution.branch_model": [[50, "module-torchtree.evolution.branch_model"]], "torchtree.evolution.coalescent": [[51, "module-torchtree.evolution.coalescent"]], "torchtree.evolution.datatype": [[52, "module-torchtree.evolution.datatype"]], "torchtree.evolution": [[53, "module-torchtree.evolution"]], "Subpackages": [[53, "subpackages"], [72, "subpackages"], [80, "subpackages"]], "torchtree.evolution.io": [[54, "module-torchtree.evolution.io"]], "torchtree.evolution.poisson_tree_likelihood": [[55, "module-torchtree.evolution.poisson_tree_likelihood"]], "torchtree.evolution.rate_transform": [[56, "module-torchtree.evolution.rate_transform"]], "torchtree.evolution.root_transform": [[57, "module-torchtree.evolution.root_transform"]], "torchtree.evolution.site_model": [[58, "module-torchtree.evolution.site_model"]], "torchtree.evolution.site_pattern": [[59, "module-torchtree.evolution.site_pattern"]], "torchtree.evolution.substitution_model.abstract": [[60, "module-torchtree.evolution.substitution_model.abstract"]], "torchtree.evolution.substitution_model.amino_acid": [[61, "module-torchtree.evolution.substitution_model.amino_acid"]], "torchtree.evolution.substitution_model.codon": [[62, "module-torchtree.evolution.substitution_model.codon"]], "torchtree.evolution.substitution_model.general": [[63, "module-torchtree.evolution.substitution_model.general"]], "torchtree.evolution.substitution_model": [[64, "module-torchtree.evolution.substitution_model"]], "torchtree.evolution.substitution_model.nucleotide": [[65, "module-torchtree.evolution.substitution_model.nucleotide"]], "torchtree.evolution.taxa": [[66, "module-torchtree.evolution.taxa"]], "torchtree.evolution.tree_height_transform": [[67, "module-torchtree.evolution.tree_height_transform"]], "torchtree.evolution.tree_likelihood": [[68, "module-torchtree.evolution.tree_likelihood"]], "torchtree.evolution.tree_model": [[69, "module-torchtree.evolution.tree_model"]], "torchtree.evolution.tree_model_flexible": [[70, "module-torchtree.evolution.tree_model_flexible"]], "torchtree.evolution.tree_regression": [[71, "module-torchtree.evolution.tree_regression"]], "torchtree": [[72, "module-torchtree"]], "torchtree.inference.hmc.adaptation": [[73, "module-torchtree.inference.hmc.adaptation"]], "torchtree.inference.hmc.hamiltonian": [[74, "module-torchtree.inference.hmc.hamiltonian"]], "torchtree.inference.hmc.hmc": [[75, "module-torchtree.inference.hmc.hmc"]], "torchtree.inference.hmc": [[76, "module-torchtree.inference.hmc"]], "torchtree.inference.hmc.integrator": [[77, "module-torchtree.inference.hmc.integrator"]], "torchtree.inference.hmc.operator": [[78, "module-torchtree.inference.hmc.operator"]], "torchtree.inference.hmc.stan_adaptation": [[79, "module-torchtree.inference.hmc.stan_adaptation"]], "torchtree.inference": [[80, "module-torchtree.inference"]], "torchtree.inference.mcmc.gmrf_block_updating": [[81, "module-torchtree.inference.mcmc.gmrf_block_updating"]], "torchtree.inference.mcmc": [[82, "module-torchtree.inference.mcmc"]], "torchtree.inference.mcmc.mcmc": [[83, "module-torchtree.inference.mcmc.mcmc"]], "torchtree.inference.mcmc.operator": [[84, "module-torchtree.inference.mcmc.operator"]], "torchtree.inference.sampler": [[85, "module-torchtree.inference.sampler"]], "torchtree.inference.utils": [[86, "module-torchtree.inference.utils"]], "torchtree.nf.energy_functions": [[87, "module-torchtree.nf.energy_functions"]], "torchtree.nf.flow": [[88, "module-torchtree.nf.flow"]], "torchtree.nf": [[89, "module-torchtree.nf"]], "torchtree.nf.planar": [[90, "module-torchtree.nf.planar"]], "torchtree.nf.realnvp": [[91, "module-torchtree.nf.realnvp"]], "torchtree.nn": [[92, "module-torchtree.nn"]], "torchtree.nn.module": [[93, "module-torchtree.nn.module"]], "torchtree.ops.dual_averaging": [[94, "module-torchtree.ops.dual_averaging"]], "torchtree.ops": [[95, "module-torchtree.ops"]], "torchtree.ops.smooth": [[96, "module-torchtree.ops.smooth"]], "torchtree.ops.welford": [[97, "module-torchtree.ops.welford"]], "torchtree.optim.convergence": [[98, "module-torchtree.optim.convergence"]], "torchtree.optim": [[99, "module-torchtree.optim"]], "torchtree.optim.lr_scheduler": [[100, "module-torchtree.optim.lr_scheduler"]], "torchtree.optim.optimizer": [[101, "module-torchtree.optim.optimizer"]], "torchtree.torchtree": [[102, "module-torchtree.torchtree"]], "torchtree.typing": [[103, "module-torchtree.typing"]], "torchtree.variational.chi": [[104, "module-torchtree.variational.chi"]], "torchtree.variational": [[105, "module-torchtree.variational"]], "torchtree.variational.kl": [[106, "module-torchtree.variational.kl"]], "torchtree.variational.renyi": [[107, "module-torchtree.variational.renyi"]], "Bibliography": [[108, "bibliography"]], "Welcome to torchtree!": [[109, "welcome-to-torchtree"]], "Installation": [[109, "installation"]], "Plug-ins": [[109, "plug-ins"]]}, "indexentries": {"module": [[0, "module-torchtree._version"], [1, "module-torchtree.cli.advi"], [2, "module-torchtree.cli.argparse_utils"], [3, "module-torchtree.cli.cli"], [4, "module-torchtree.cli.evolution"], [5, "module-torchtree.cli.hmc"], [6, "module-torchtree.cli"], [7, "module-torchtree.cli.jacobians"], [8, "module-torchtree.cli.loggers"], [9, "module-torchtree.cli.map"], [10, "module-torchtree.cli.mcmc"], [11, "module-torchtree.cli.operators"], [12, "module-torchtree.cli.plugin"], [13, "module-torchtree.cli.plugin_manager"], [14, "module-torchtree.cli.priors"], [15, "module-torchtree.cli.utils"], [16, "module-torchtree.core.abstractparameter"], [17, "module-torchtree.core.classproperty_decorator"], [18, "module-torchtree.core.container"], [19, "module-torchtree.core.identifiable"], [20, "module-torchtree.core"], [21, "module-torchtree.core.logger"], [22, "module-torchtree.core.model"], [23, "module-torchtree.core.parameter"], [24, "module-torchtree.core.parameter_encoder"], [25, "module-torchtree.core.parameter_utils"], [26, "module-torchtree.core.parametric"], [27, "module-torchtree.core.runnable"], [28, "module-torchtree.core.serializable"], [29, "module-torchtree.core.utils"], [30, "module-torchtree.distributions.bayesian_bridge"], [31, "module-torchtree.distributions.ctmc_scale"], [32, "module-torchtree.distributions.deterministic_normal"], [33, "module-torchtree.distributions.distributions"], [34, "module-torchtree.distributions.gmrf"], [35, "module-torchtree.distributions.gmrf_integrated"], [36, "module-torchtree.distributions"], [37, "module-torchtree.distributions.inverse_gamma"], [38, "module-torchtree.distributions.joint_distribution"], [39, "module-torchtree.distributions.log_normal"], [40, "module-torchtree.distributions.multivariate_normal"], [41, "module-torchtree.distributions.normal"], [42, "module-torchtree.distributions.one_on_x"], [43, "module-torchtree.distributions.scale_mixture"], [44, "module-torchtree.distributions.transforms"], [45, "module-torchtree.distributions.tree_prior"], [46, "module-torchtree.evolution.alignment"], [47, "module-torchtree.evolution.attribute_pattern"], [48, "module-torchtree.evolution.bdsk"], [49, "module-torchtree.evolution.birth_death"], [50, "module-torchtree.evolution.branch_model"], [51, "module-torchtree.evolution.coalescent"], [52, "module-torchtree.evolution.datatype"], [53, "module-torchtree.evolution"], [54, "module-torchtree.evolution.io"], [55, "module-torchtree.evolution.poisson_tree_likelihood"], [56, "module-torchtree.evolution.rate_transform"], [57, "module-torchtree.evolution.root_transform"], [58, "module-torchtree.evolution.site_model"], [59, "module-torchtree.evolution.site_pattern"], [60, "module-torchtree.evolution.substitution_model.abstract"], [61, "module-torchtree.evolution.substitution_model.amino_acid"], [62, "module-torchtree.evolution.substitution_model.codon"], [63, "module-torchtree.evolution.substitution_model.general"], [64, "module-torchtree.evolution.substitution_model"], [65, "module-torchtree.evolution.substitution_model.nucleotide"], [66, "module-torchtree.evolution.taxa"], [67, "module-torchtree.evolution.tree_height_transform"], [68, "module-torchtree.evolution.tree_likelihood"], [69, "module-torchtree.evolution.tree_model"], [70, "module-torchtree.evolution.tree_model_flexible"], [71, "module-torchtree.evolution.tree_regression"], [72, "module-torchtree"], [73, "module-torchtree.inference.hmc.adaptation"], [74, "module-torchtree.inference.hmc.hamiltonian"], [75, "module-torchtree.inference.hmc.hmc"], [76, "module-torchtree.inference.hmc"], [77, "module-torchtree.inference.hmc.integrator"], [78, "module-torchtree.inference.hmc.operator"], [79, "module-torchtree.inference.hmc.stan_adaptation"], [80, "module-torchtree.inference"], [81, "module-torchtree.inference.mcmc.gmrf_block_updating"], [82, "module-torchtree.inference.mcmc"], [83, "module-torchtree.inference.mcmc.mcmc"], [84, "module-torchtree.inference.mcmc.operator"], [85, "module-torchtree.inference.sampler"], [86, "module-torchtree.inference.utils"], [87, "module-torchtree.nf.energy_functions"], [88, "module-torchtree.nf.flow"], [89, "module-torchtree.nf"], [90, "module-torchtree.nf.planar"], [91, "module-torchtree.nf.realnvp"], [92, "module-torchtree.nn"], [93, "module-torchtree.nn.module"], [94, "module-torchtree.ops.dual_averaging"], [95, "module-torchtree.ops"], [96, "module-torchtree.ops.smooth"], [97, "module-torchtree.ops.welford"], [98, "module-torchtree.optim.convergence"], [99, "module-torchtree.optim"], [100, "module-torchtree.optim.lr_scheduler"], [101, "module-torchtree.optim.optimizer"], [102, "module-torchtree.torchtree"], [103, "module-torchtree.typing"], [104, "module-torchtree.variational.chi"], [105, "module-torchtree.variational"], [106, "module-torchtree.variational.kl"], [107, "module-torchtree.variational.renyi"]], "torchtree._version": [[0, "module-torchtree._version"]], "apply_affine_transform() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.apply_affine_transform"]], "apply_exp_transform() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.apply_exp_transform"]], "apply_sigmoid_transformed() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.apply_sigmoid_transformed"]], "apply_simplex_transform() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.apply_simplex_transform"]], "apply_transforms_for_fullrank() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.apply_transforms_for_fullrank"]], "build_advi() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.build_advi"]], "create_advi() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_advi"]], "create_flexible_variational() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_flexible_variational"]], "create_fullrank() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_fullrank"]], "create_fullrank_from_meanfield() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_fullrank_from_meanfield"]], "create_gamma_distribution() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_gamma_distribution"]], "create_logger() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_logger"]], "create_meanfield() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_meanfield"]], "create_normal_distribution() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_normal_distribution"]], "create_realnp_distribution() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_realnp_distribution"]], "create_realnvp() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_realnvp"]], "create_sampler() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_sampler"]], "create_tril() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_tril"]], "create_variational_model() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_variational_model"]], "create_variational_parser() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_variational_parser"]], "create_weibull_distribution() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_weibull_distribution"]], "gather_parameters() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.gather_parameters"]], "logger (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.logger"]], "torchtree.cli.advi": [[1, "module-torchtree.cli.advi"]], "list_of_float() (in module torchtree.cli.argparse_utils)": [[2, "torchtree.cli.argparse_utils.list_of_float"]], "list_or_int() (in module torchtree.cli.argparse_utils)": [[2, "torchtree.cli.argparse_utils.list_or_int"]], "str_or_float() (in module torchtree.cli.argparse_utils)": [[2, "torchtree.cli.argparse_utils.str_or_float"]], "torchtree.cli.argparse_utils": [[2, "module-torchtree.cli.argparse_utils"]], "zero_or_path() (in module torchtree.cli.argparse_utils)": [[2, "torchtree.cli.argparse_utils.zero_or_path"]], "main() (in module torchtree.cli.cli)": [[3, "torchtree.cli.cli.main"]], "torchtree.cli.cli": [[3, "module-torchtree.cli.cli"]], "add_birth_death() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.add_birth_death"]], "add_coalescent() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.add_coalescent"]], "build_alignment() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.build_alignment"]], "create_alignment() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.create_alignment"]], "create_bd_prior() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.create_bd_prior"]], "create_bdsk() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.create_bdsk"]], "create_bdsk_prior() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.create_bdsk_prior"]], "create_birth_death() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.create_birth_death"]], "create_branch_model() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.create_branch_model"]], "create_clock_prior() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.create_clock_prior"]], "create_coalesent() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.create_coalesent"]], "create_constant_bd_prior() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.create_constant_bd_prior"]], "create_constant_birth_death() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.create_constant_birth_death"]], "create_data_type() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.create_data_type"]], "create_evolution_joint() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.create_evolution_joint"]], "create_evolution_parser() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.create_evolution_parser"]], "create_evolution_priors() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.create_evolution_priors"]], "create_general_data_type() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.create_general_data_type"]], "create_poisson_evolution_joint() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.create_poisson_evolution_joint"]], "create_poisson_tree_likelihood() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.create_poisson_tree_likelihood"]], "create_site_model() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.create_site_model"]], "create_site_model_srd06_mus() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.create_site_model_srd06_mus"]], "create_site_pattern() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.create_site_pattern"]], "create_substitution_model() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.create_substitution_model"]], "create_substitution_model_priors() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.create_substitution_model_priors"]], "create_taxa() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.create_taxa"]], "create_time_tree_prior() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.create_time_tree_prior"]], "create_tree_likelihood() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.create_tree_likelihood"]], "create_tree_likelihood_general() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.create_tree_likelihood_general"]], "create_tree_likelihood_single() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.create_tree_likelihood_single"]], "create_tree_model() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.create_tree_model"]], "create_ucln_prior() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.create_ucln_prior"]], "distribution_type() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.distribution_type"]], "get_engine() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.get_engine"]], "is_float() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.is_float"]], "logger (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.logger"]], "parse_distribution() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.parse_distribution"]], "run_tree_regression() (in module torchtree.cli.evolution)": [[4, "torchtree.cli.evolution.run_tree_regression"]], "torchtree.cli.evolution": [[4, "module-torchtree.cli.evolution"]], "build_hmc() (in module torchtree.cli.hmc)": [[5, "torchtree.cli.hmc.build_hmc"]], "create_hmc() (in module torchtree.cli.hmc)": [[5, "torchtree.cli.hmc.create_hmc"]], "create_hmc_operator() (in module torchtree.cli.hmc)": [[5, "torchtree.cli.hmc.create_hmc_operator"]], "create_hmc_parser() (in module torchtree.cli.hmc)": [[5, "torchtree.cli.hmc.create_hmc_parser"]], "create_stan_windowed_adaptation() (in module torchtree.cli.hmc)": [[5, "torchtree.cli.hmc.create_stan_windowed_adaptation"]], "torchtree.cli.hmc": [[5, "module-torchtree.cli.hmc"]], "plugin_manager (in module torchtree.cli)": [[6, "torchtree.cli.PLUGIN_MANAGER"]], "torchtree.cli": [[6, "module-torchtree.cli"]], "create_jacobians() (in module torchtree.cli.jacobians)": [[7, "torchtree.cli.jacobians.create_jacobians"]], "torchtree.cli.jacobians": [[7, "module-torchtree.cli.jacobians"]], "create_loggers() (in module torchtree.cli.loggers)": [[8, "torchtree.cli.loggers.create_loggers"]], "torchtree.cli.loggers": [[8, "module-torchtree.cli.loggers"]], "build_optimizer() (in module torchtree.cli.map)": [[9, "torchtree.cli.map.build_optimizer"]], "create_logger() (in module torchtree.cli.map)": [[9, "torchtree.cli.map.create_logger"]], "create_map_parser() (in module torchtree.cli.map)": [[9, "torchtree.cli.map.create_map_parser"]], "create_optimizer() (in module torchtree.cli.map)": [[9, "torchtree.cli.map.create_optimizer"]], "create_tree_logger() (in module torchtree.cli.map)": [[9, "torchtree.cli.map.create_tree_logger"]], "torchtree.cli.map": [[9, "module-torchtree.cli.map"]], "build_mcmc() (in module torchtree.cli.mcmc)": [[10, "torchtree.cli.mcmc.build_mcmc"]], "create_mcmc() (in module torchtree.cli.mcmc)": [[10, "torchtree.cli.mcmc.create_mcmc"]], "create_mcmc_parser() (in module torchtree.cli.mcmc)": [[10, "torchtree.cli.mcmc.create_mcmc_parser"]], "torchtree.cli.mcmc": [[10, "module-torchtree.cli.mcmc"]], "create_block_updating_operator() (in module torchtree.cli.operators)": [[11, "torchtree.cli.operators.create_block_updating_operator"]], "create_scaler_operator() (in module torchtree.cli.operators)": [[11, "torchtree.cli.operators.create_scaler_operator"]], "create_sliding_window_operator() (in module torchtree.cli.operators)": [[11, "torchtree.cli.operators.create_sliding_window_operator"]], "torchtree.cli.operators": [[11, "module-torchtree.cli.operators"]], "plugin (class in torchtree.cli.plugin)": [[12, "torchtree.cli.plugin.Plugin"]], "load_arguments() (torchtree.cli.plugin.plugin method)": [[12, "torchtree.cli.plugin.Plugin.load_arguments"]], "process_all() (torchtree.cli.plugin.plugin method)": [[12, "torchtree.cli.plugin.Plugin.process_all"]], "process_coalescent() (torchtree.cli.plugin.plugin method)": [[12, "torchtree.cli.plugin.Plugin.process_coalescent"]], "process_tree_likelihood() (torchtree.cli.plugin.plugin method)": [[12, "torchtree.cli.plugin.Plugin.process_tree_likelihood"]], "torchtree.cli.plugin": [[12, "module-torchtree.cli.plugin"]], "pluginmanager (class in torchtree.cli.plugin_manager)": [[13, "torchtree.cli.plugin_manager.PluginManager"]], "disable_plugins() (torchtree.cli.plugin_manager.pluginmanager method)": [[13, "torchtree.cli.plugin_manager.PluginManager.disable_plugins"]], "load_arguments() (torchtree.cli.plugin_manager.pluginmanager method)": [[13, "torchtree.cli.plugin_manager.PluginManager.load_arguments"]], "load_plugins() (torchtree.cli.plugin_manager.pluginmanager method)": [[13, "torchtree.cli.plugin_manager.PluginManager.load_plugins"]], "plugins() (torchtree.cli.plugin_manager.pluginmanager method)": [[13, "torchtree.cli.plugin_manager.PluginManager.plugins"]], "torchtree.cli.plugin_manager": [[13, "module-torchtree.cli.plugin_manager"]], "create_clock_horseshoe_prior() (in module torchtree.cli.priors)": [[14, "torchtree.cli.priors.create_clock_horseshoe_prior"]], "create_one_on_x_prior() (in module torchtree.cli.priors)": [[14, "torchtree.cli.priors.create_one_on_x_prior"]], "torchtree.cli.priors": [[14, "module-torchtree.cli.priors"]], "convert_date_to_real() (in module torchtree.cli.utils)": [[15, "torchtree.cli.utils.convert_date_to_real"]], "length_of_tensor_in_dict_parameter() (in module torchtree.cli.utils)": [[15, "torchtree.cli.utils.length_of_tensor_in_dict_parameter"]], "make_unconstrained() (in module torchtree.cli.utils)": [[15, "torchtree.cli.utils.make_unconstrained"]], "read_dates_from_csv() (in module torchtree.cli.utils)": [[15, "torchtree.cli.utils.read_dates_from_csv"]], "torchtree.cli.utils": [[15, "module-torchtree.cli.utils"]], "abstractparameter (class in torchtree.core.abstractparameter)": [[16, "torchtree.core.abstractparameter.AbstractParameter"]], "device (class in torchtree.core.abstractparameter)": [[16, "torchtree.core.abstractparameter.Device"]], "add_parameter_listener() (torchtree.core.abstractparameter.abstractparameter method)": [[16, "torchtree.core.abstractparameter.AbstractParameter.add_parameter_listener"]], "cpu() (torchtree.core.abstractparameter.device method)": [[16, "torchtree.core.abstractparameter.Device.cpu"]], "cuda() (torchtree.core.abstractparameter.device method)": [[16, "torchtree.core.abstractparameter.Device.cuda"]], "device (torchtree.core.abstractparameter.abstractparameter property)": [[16, "torchtree.core.abstractparameter.AbstractParameter.device"]], "device (torchtree.core.abstractparameter.device property)": [[16, "torchtree.core.abstractparameter.Device.device"]], "dim() (torchtree.core.abstractparameter.abstractparameter method)": [[16, "torchtree.core.abstractparameter.AbstractParameter.dim"]], "dtype (torchtree.core.abstractparameter.abstractparameter property)": [[16, "torchtree.core.abstractparameter.AbstractParameter.dtype"]], "fire_parameter_changed() (torchtree.core.abstractparameter.abstractparameter method)": [[16, "torchtree.core.abstractparameter.AbstractParameter.fire_parameter_changed"]], "parameters() (torchtree.core.abstractparameter.abstractparameter method)": [[16, "torchtree.core.abstractparameter.AbstractParameter.parameters"]], "requires_grad (torchtree.core.abstractparameter.abstractparameter property)": [[16, "torchtree.core.abstractparameter.AbstractParameter.requires_grad"]], "shape (torchtree.core.abstractparameter.abstractparameter property)": [[16, "torchtree.core.abstractparameter.AbstractParameter.shape"]], "tensor (torchtree.core.abstractparameter.abstractparameter property)": [[16, "torchtree.core.abstractparameter.AbstractParameter.tensor"]], "to() (torchtree.core.abstractparameter.device method)": [[16, "torchtree.core.abstractparameter.Device.to"]], "torchtree.core.abstractparameter": [[16, "module-torchtree.core.abstractparameter"]], "classproperty (class in torchtree.core.classproperty_decorator)": [[17, "torchtree.core.classproperty_decorator.classproperty"]], "torchtree.core.classproperty_decorator": [[17, "module-torchtree.core.classproperty_decorator"]], "container (class in torchtree.core.container)": [[18, "torchtree.core.container.Container"]], "callables() (torchtree.core.container.container method)": [[18, "torchtree.core.container.Container.callables"]], "from_json() (torchtree.core.container.container class method)": [[18, "torchtree.core.container.Container.from_json"]], "handle_model_changed() (torchtree.core.container.container method)": [[18, "torchtree.core.container.Container.handle_model_changed"]], "handle_parameter_changed() (torchtree.core.container.container method)": [[18, "torchtree.core.container.Container.handle_parameter_changed"]], "params() (torchtree.core.container.container method)": [[18, "torchtree.core.container.Container.params"]], "torchtree.core.container": [[18, "module-torchtree.core.container"]], "identifiable (class in torchtree.core.identifiable)": [[19, "torchtree.core.identifiable.Identifiable"]], "id (torchtree.core.identifiable.identifiable property)": [[19, "torchtree.core.identifiable.Identifiable.id"]], "torchtree.core.identifiable": [[19, "module-torchtree.core.identifiable"]], "torchtree.core": [[20, "module-torchtree.core"]], "csv (class in torchtree.core.logger)": [[21, "torchtree.core.logger.CSV"]], "containerlogger (class in torchtree.core.logger)": [[21, "torchtree.core.logger.ContainerLogger"]], "dumper (class in torchtree.core.logger)": [[21, "torchtree.core.logger.Dumper"]], "logger (class in torchtree.core.logger)": [[21, "torchtree.core.logger.Logger"]], "loggerinterface (class in torchtree.core.logger)": [[21, "torchtree.core.logger.LoggerInterface"]], "treelogger (class in torchtree.core.logger)": [[21, "torchtree.core.logger.TreeLogger"]], "close() (torchtree.core.logger.containerlogger method)": [[21, "torchtree.core.logger.ContainerLogger.close"]], "close() (torchtree.core.logger.logger method)": [[21, "torchtree.core.logger.Logger.close"]], "close() (torchtree.core.logger.loggerinterface method)": [[21, "torchtree.core.logger.LoggerInterface.close"]], "close() (torchtree.core.logger.treelogger method)": [[21, "torchtree.core.logger.TreeLogger.close"]], "from_json() (torchtree.core.logger.csv class method)": [[21, "torchtree.core.logger.CSV.from_json"]], "from_json() (torchtree.core.logger.containerlogger class method)": [[21, "torchtree.core.logger.ContainerLogger.from_json"]], "from_json() (torchtree.core.logger.dumper class method)": [[21, "torchtree.core.logger.Dumper.from_json"]], "from_json() (torchtree.core.logger.logger class method)": [[21, "torchtree.core.logger.Logger.from_json"]], "from_json() (torchtree.core.logger.treelogger class method)": [[21, "torchtree.core.logger.TreeLogger.from_json"]], "initialize() (torchtree.core.logger.containerlogger method)": [[21, "torchtree.core.logger.ContainerLogger.initialize"]], "initialize() (torchtree.core.logger.logger method)": [[21, "torchtree.core.logger.Logger.initialize"]], "initialize() (torchtree.core.logger.loggerinterface method)": [[21, "torchtree.core.logger.LoggerInterface.initialize"]], "initialize() (torchtree.core.logger.treelogger method)": [[21, "torchtree.core.logger.TreeLogger.initialize"]], "log() (torchtree.core.logger.containerlogger method)": [[21, "torchtree.core.logger.ContainerLogger.log"]], "log() (torchtree.core.logger.logger method)": [[21, "torchtree.core.logger.Logger.log"]], "log() (torchtree.core.logger.loggerinterface method)": [[21, "torchtree.core.logger.LoggerInterface.log"]], "log() (torchtree.core.logger.treelogger method)": [[21, "torchtree.core.logger.TreeLogger.log"]], "run() (torchtree.core.logger.csv method)": [[21, "torchtree.core.logger.CSV.run"]], "run() (torchtree.core.logger.dumper method)": [[21, "torchtree.core.logger.Dumper.run"]], "run() (torchtree.core.logger.loggerinterface method)": [[21, "torchtree.core.logger.LoggerInterface.run"]], "torchtree.core.logger": [[21, "module-torchtree.core.logger"]], "callablemodel (class in torchtree.core.model)": [[22, "torchtree.core.model.CallableModel"]], "model (class in torchtree.core.model)": [[22, "torchtree.core.model.Model"]], "add_model_listener() (torchtree.core.model.model method)": [[22, "torchtree.core.model.Model.add_model_listener"]], "add_parameter_listener() (torchtree.core.model.model method)": [[22, "torchtree.core.model.Model.add_parameter_listener"]], "cpu() (torchtree.core.model.model method)": [[22, "torchtree.core.model.Model.cpu"]], "cuda() (torchtree.core.model.model method)": [[22, "torchtree.core.model.Model.cuda"]], "fire_model_changed() (torchtree.core.model.model method)": [[22, "torchtree.core.model.Model.fire_model_changed"]], "handle_model_changed() (torchtree.core.model.callablemodel method)": [[22, "torchtree.core.model.CallableModel.handle_model_changed"]], "handle_parameter_changed() (torchtree.core.model.callablemodel method)": [[22, "torchtree.core.model.CallableModel.handle_parameter_changed"]], "models() (torchtree.core.model.model method)": [[22, "torchtree.core.model.Model.models"]], "remove_model_listener() (torchtree.core.model.model method)": [[22, "torchtree.core.model.Model.remove_model_listener"]], "remove_parameter_listener() (torchtree.core.model.model method)": [[22, "torchtree.core.model.Model.remove_parameter_listener"]], "sample_shape (torchtree.core.model.model property)": [[22, "torchtree.core.model.Model.sample_shape"]], "tag (torchtree.core.model.model property)": [[22, "torchtree.core.model.Model.tag"]], "to() (torchtree.core.model.model method)": [[22, "torchtree.core.model.Model.to"]], "torchtree.core.model": [[22, "module-torchtree.core.model"]], "catparameter (class in torchtree.core.parameter)": [[23, "torchtree.core.parameter.CatParameter"]], "moduleparameter (class in torchtree.core.parameter)": [[23, "torchtree.core.parameter.ModuleParameter"]], "parameter (class in torchtree.core.parameter)": [[23, "torchtree.core.parameter.Parameter"]], "parameter.to() (in module torchtree.core.parameter)": [[23, "id0"], [23, "id5"], [23, "id6"]], "transformedparameter (class in torchtree.core.parameter)": [[23, "torchtree.core.parameter.TransformedParameter"]], "viewparameter (class in torchtree.core.parameter)": [[23, "torchtree.core.parameter.ViewParameter"]], "add_parameter_listener() (torchtree.core.parameter.catparameter method)": [[23, "torchtree.core.parameter.CatParameter.add_parameter_listener"]], "add_parameter_listener() (torchtree.core.parameter.moduleparameter method)": [[23, "torchtree.core.parameter.ModuleParameter.add_parameter_listener"]], "add_parameter_listener() (torchtree.core.parameter.parameter method)": [[23, "torchtree.core.parameter.Parameter.add_parameter_listener"]], "add_parameter_listener() (torchtree.core.parameter.transformedparameter method)": [[23, "torchtree.core.parameter.TransformedParameter.add_parameter_listener"]], "add_parameter_listener() (torchtree.core.parameter.viewparameter method)": [[23, "torchtree.core.parameter.ViewParameter.add_parameter_listener"]], "assign() (torchtree.core.parameter.viewparameter method)": [[23, "torchtree.core.parameter.ViewParameter.assign"]], "clone() (torchtree.core.parameter.parameter method)": [[23, "torchtree.core.parameter.Parameter.clone"]], "clone() (torchtree.core.parameter.viewparameter method)": [[23, "torchtree.core.parameter.ViewParameter.clone"]], "copy_() (torchtree.core.parameter.parameter method)": [[23, "torchtree.core.parameter.Parameter.copy_"]], "cpu() (torchtree.core.parameter.catparameter method)": [[23, "torchtree.core.parameter.CatParameter.cpu"]], "cpu() (torchtree.core.parameter.moduleparameter method)": [[23, "torchtree.core.parameter.ModuleParameter.cpu"]], "cpu() (torchtree.core.parameter.parameter method)": [[23, "torchtree.core.parameter.Parameter.cpu"]], "cpu() (torchtree.core.parameter.transformedparameter method)": [[23, "torchtree.core.parameter.TransformedParameter.cpu"]], "cpu() (torchtree.core.parameter.viewparameter method)": [[23, "torchtree.core.parameter.ViewParameter.cpu"]], "cuda() (torchtree.core.parameter.catparameter method)": [[23, "torchtree.core.parameter.CatParameter.cuda"]], "cuda() (torchtree.core.parameter.moduleparameter method)": [[23, "torchtree.core.parameter.ModuleParameter.cuda"]], "cuda() (torchtree.core.parameter.parameter method)": [[23, "torchtree.core.parameter.Parameter.cuda"]], "cuda() (torchtree.core.parameter.transformedparameter method)": [[23, "torchtree.core.parameter.TransformedParameter.cuda"]], "cuda() (torchtree.core.parameter.viewparameter method)": [[23, "torchtree.core.parameter.ViewParameter.cuda"]], "detach() (torchtree.core.parameter.parameter method)": [[23, "torchtree.core.parameter.Parameter.detach"]], "device (torchtree.core.parameter.catparameter property)": [[23, "torchtree.core.parameter.CatParameter.device"]], "dtype (torchtree.core.parameter.viewparameter property)": [[23, "torchtree.core.parameter.ViewParameter.dtype"]], "fire_parameter_changed() (torchtree.core.parameter.catparameter method)": [[23, "torchtree.core.parameter.CatParameter.fire_parameter_changed"]], "fire_parameter_changed() (torchtree.core.parameter.moduleparameter method)": [[23, "torchtree.core.parameter.ModuleParameter.fire_parameter_changed"]], "fire_parameter_changed() (torchtree.core.parameter.parameter method)": [[23, "torchtree.core.parameter.Parameter.fire_parameter_changed"]], "fire_parameter_changed() (torchtree.core.parameter.transformedparameter method)": [[23, "torchtree.core.parameter.TransformedParameter.fire_parameter_changed"]], "fire_parameter_changed() (torchtree.core.parameter.viewparameter method)": [[23, "torchtree.core.parameter.ViewParameter.fire_parameter_changed"]], "from_json() (torchtree.core.parameter.catparameter class method)": [[23, "torchtree.core.parameter.CatParameter.from_json"]], "from_json() (torchtree.core.parameter.moduleparameter class method)": [[23, "torchtree.core.parameter.ModuleParameter.from_json"]], "from_json() (torchtree.core.parameter.parameter class method)": [[23, "torchtree.core.parameter.Parameter.from_json"]], "from_json() (torchtree.core.parameter.transformedparameter class method)": [[23, "torchtree.core.parameter.TransformedParameter.from_json"]], "from_json() (torchtree.core.parameter.viewparameter class method)": [[23, "torchtree.core.parameter.ViewParameter.from_json"]], "grad (torchtree.core.parameter.parameter property)": [[23, "torchtree.core.parameter.Parameter.grad"]], "grad_fn (torchtree.core.parameter.parameter property)": [[23, "torchtree.core.parameter.Parameter.grad_fn"]], "handle_model_changed() (torchtree.core.parameter.catparameter method)": [[23, "torchtree.core.parameter.CatParameter.handle_model_changed"]], "handle_model_changed() (torchtree.core.parameter.moduleparameter method)": [[23, "torchtree.core.parameter.ModuleParameter.handle_model_changed"]], "handle_model_changed() (torchtree.core.parameter.transformedparameter method)": [[23, "torchtree.core.parameter.TransformedParameter.handle_model_changed"]], "handle_parameter_changed() (torchtree.core.parameter.catparameter method)": [[23, "torchtree.core.parameter.CatParameter.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.core.parameter.moduleparameter method)": [[23, "torchtree.core.parameter.ModuleParameter.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.core.parameter.transformedparameter method)": [[23, "torchtree.core.parameter.TransformedParameter.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.core.parameter.viewparameter method)": [[23, "torchtree.core.parameter.ViewParameter.handle_parameter_changed"]], "json_factory() (torchtree.core.parameter.parameter static method)": [[23, "torchtree.core.parameter.Parameter.json_factory"]], "json_factory() (torchtree.core.parameter.viewparameter static method)": [[23, "torchtree.core.parameter.ViewParameter.json_factory"]], "parameters() (torchtree.core.parameter.moduleparameter method)": [[23, "torchtree.core.parameter.ModuleParameter.parameters"]], "parameters() (torchtree.core.parameter.transformedparameter method)": [[23, "torchtree.core.parameter.TransformedParameter.parameters"]], "requires_grad (torchtree.core.parameter.catparameter property)": [[23, "torchtree.core.parameter.CatParameter.requires_grad"]], "requires_grad (torchtree.core.parameter.moduleparameter property)": [[23, "torchtree.core.parameter.ModuleParameter.requires_grad"]], "requires_grad (torchtree.core.parameter.parameter property)": [[23, "torchtree.core.parameter.Parameter.requires_grad"]], "requires_grad (torchtree.core.parameter.transformedparameter property)": [[23, "torchtree.core.parameter.TransformedParameter.requires_grad"]], "requires_grad (torchtree.core.parameter.viewparameter property)": [[23, "torchtree.core.parameter.ViewParameter.requires_grad"]], "sample_shape (torchtree.core.parameter.moduleparameter property)": [[23, "torchtree.core.parameter.ModuleParameter.sample_shape"]], "sample_shape (torchtree.core.parameter.transformedparameter property)": [[23, "torchtree.core.parameter.TransformedParameter.sample_shape"]], "shape (torchtree.core.parameter.moduleparameter property)": [[23, "torchtree.core.parameter.ModuleParameter.shape"]], "shape (torchtree.core.parameter.transformedparameter property)": [[23, "torchtree.core.parameter.TransformedParameter.shape"]], "shape (torchtree.core.parameter.viewparameter property)": [[23, "torchtree.core.parameter.ViewParameter.shape"]], "size() (torchtree.core.parameter.parameter method)": [[23, "torchtree.core.parameter.Parameter.size"]], "tensor (torchtree.core.parameter.catparameter property)": [[23, "torchtree.core.parameter.CatParameter.tensor"]], "tensor (torchtree.core.parameter.moduleparameter property)": [[23, "torchtree.core.parameter.ModuleParameter.tensor"]], "tensor (torchtree.core.parameter.parameter property)": [[23, "torchtree.core.parameter.Parameter.tensor"]], "tensor (torchtree.core.parameter.transformedparameter property)": [[23, "torchtree.core.parameter.TransformedParameter.tensor"]], "tensor (torchtree.core.parameter.viewparameter property)": [[23, "torchtree.core.parameter.ViewParameter.tensor"]], "to() (torchtree.core.parameter.catparameter method)": [[23, "torchtree.core.parameter.CatParameter.to"]], "to() (torchtree.core.parameter.moduleparameter method)": [[23, "torchtree.core.parameter.ModuleParameter.to"]], "to() (torchtree.core.parameter.parameter method)": [[23, "torchtree.core.parameter.Parameter.to"]], "to() (torchtree.core.parameter.transformedparameter method)": [[23, "torchtree.core.parameter.TransformedParameter.to"]], "to() (torchtree.core.parameter.viewparameter method)": [[23, "torchtree.core.parameter.ViewParameter.to"]], "torchtree.core.parameter": [[23, "module-torchtree.core.parameter"]], "update() (torchtree.core.parameter.catparameter method)": [[23, "torchtree.core.parameter.CatParameter.update"]], "parameterencoder (class in torchtree.core.parameter_encoder)": [[24, "torchtree.core.parameter_encoder.ParameterEncoder"]], "default() (torchtree.core.parameter_encoder.parameterencoder method)": [[24, "torchtree.core.parameter_encoder.ParameterEncoder.default"]], "torchtree.core.parameter_encoder": [[24, "module-torchtree.core.parameter_encoder"]], "pack_tensor() (in module torchtree.core.parameter_utils)": [[25, "torchtree.core.parameter_utils.pack_tensor"]], "save_parameters() (in module torchtree.core.parameter_utils)": [[25, "torchtree.core.parameter_utils.save_parameters"]], "torchtree.core.parameter_utils": [[25, "module-torchtree.core.parameter_utils"]], "modellistener (class in torchtree.core.parametric)": [[26, "torchtree.core.parametric.ModelListener"]], "parameterlistener (class in torchtree.core.parametric)": [[26, "torchtree.core.parametric.ParameterListener"]], "parametric (class in torchtree.core.parametric)": [[26, "torchtree.core.parametric.Parametric"]], "handle_model_changed() (torchtree.core.parametric.modellistener method)": [[26, "torchtree.core.parametric.ModelListener.handle_model_changed"]], "handle_parameter_changed() (torchtree.core.parametric.parameterlistener method)": [[26, "torchtree.core.parametric.ParameterListener.handle_parameter_changed"]], "parameters() (torchtree.core.parametric.parametric method)": [[26, "torchtree.core.parametric.Parametric.parameters"]], "register_model() (torchtree.core.parametric.parametric method)": [[26, "torchtree.core.parametric.Parametric.register_model"]], "register_parameter() (torchtree.core.parametric.parametric method)": [[26, "torchtree.core.parametric.Parametric.register_parameter"]], "torchtree.core.parametric": [[26, "module-torchtree.core.parametric"]], "runnable (class in torchtree.core.runnable)": [[27, "torchtree.core.runnable.Runnable"]], "run() (torchtree.core.runnable.runnable method)": [[27, "torchtree.core.runnable.Runnable.run"]], "torchtree.core.runnable": [[27, "module-torchtree.core.runnable"]], "jsonserializable (class in torchtree.core.serializable)": [[28, "torchtree.core.serializable.JSONSerializable"]], "from_json() (torchtree.core.serializable.jsonserializable class method)": [[28, "torchtree.core.serializable.JSONSerializable.from_json"]], "from_json_safe() (torchtree.core.serializable.jsonserializable class method)": [[28, "torchtree.core.serializable.JSONSerializable.from_json_safe"]], "torchtree.core.serializable": [[28, "module-torchtree.core.serializable"]], "alternativeattributeerror": [[29, "torchtree.core.utils.AlternativeAttributeError"]], "jsonparseerror": [[29, "torchtree.core.utils.JSONParseError"]], "registered_classes (in module torchtree.core.utils)": [[29, "torchtree.core.utils.REGISTERED_CLASSES"]], "signalhandler (class in torchtree.core.utils)": [[29, "torchtree.core.utils.SignalHandler"]], "tensordecoder (class in torchtree.core.utils)": [[29, "torchtree.core.utils.TensorDecoder"]], "tensorencoder (class in torchtree.core.utils)": [[29, "torchtree.core.utils.TensorEncoder"]], "as_tensor() (in module torchtree.core.utils)": [[29, "torchtree.core.utils.as_tensor"]], "default() (torchtree.core.utils.tensorencoder method)": [[29, "torchtree.core.utils.TensorEncoder.default"]], "exit() (torchtree.core.utils.signalhandler method)": [[29, "torchtree.core.utils.SignalHandler.exit"]], "expand_plates() (in module torchtree.core.utils)": [[29, "torchtree.core.utils.expand_plates"]], "get_class() (in module torchtree.core.utils)": [[29, "torchtree.core.utils.get_class"]], "object_hook() (torchtree.core.utils.tensordecoder method)": [[29, "torchtree.core.utils.TensorDecoder.object_hook"]], "package_contents() (in module torchtree.core.utils)": [[29, "torchtree.core.utils.package_contents"]], "print_graph() (in module torchtree.core.utils)": [[29, "torchtree.core.utils.print_graph"]], "process_object() (in module torchtree.core.utils)": [[29, "torchtree.core.utils.process_object"]], "process_object_with_key() (in module torchtree.core.utils)": [[29, "torchtree.core.utils.process_object_with_key"]], "process_objects() (in module torchtree.core.utils)": [[29, "torchtree.core.utils.process_objects"]], "register_class() (in module torchtree.core.utils)": [[29, "torchtree.core.utils.register_class"]], "remove_comments() (in module torchtree.core.utils)": [[29, "torchtree.core.utils.remove_comments"]], "replace_star_with_str() (in module torchtree.core.utils)": [[29, "torchtree.core.utils.replace_star_with_str"]], "replace_wildcard_with_str() (in module torchtree.core.utils)": [[29, "torchtree.core.utils.replace_wildcard_with_str"]], "string_to_list_index() (in module torchtree.core.utils)": [[29, "torchtree.core.utils.string_to_list_index"]], "tensor_rand() (in module torchtree.core.utils)": [[29, "torchtree.core.utils.tensor_rand"]], "torchtree.core.utils": [[29, "module-torchtree.core.utils"]], "update_parameters() (in module torchtree.core.utils)": [[29, "torchtree.core.utils.update_parameters"]], "validate() (in module torchtree.core.utils)": [[29, "torchtree.core.utils.validate"]], "wrapper() (torchtree.core.utils.alternativeattributeerror class method)": [[29, "torchtree.core.utils.AlternativeAttributeError.wrapper"]], "bayesianbridge (class in torchtree.distributions.bayesian_bridge)": [[30, "torchtree.distributions.bayesian_bridge.BayesianBridge"]], "from_json() (torchtree.distributions.bayesian_bridge.bayesianbridge class method)": [[30, "torchtree.distributions.bayesian_bridge.BayesianBridge.from_json"]], "handle_model_changed() (torchtree.distributions.bayesian_bridge.bayesianbridge method)": [[30, "torchtree.distributions.bayesian_bridge.BayesianBridge.handle_model_changed"]], "json_factory() (torchtree.distributions.bayesian_bridge.bayesianbridge static method)": [[30, "torchtree.distributions.bayesian_bridge.BayesianBridge.json_factory"]], "process_object_number() (in module torchtree.distributions.bayesian_bridge)": [[30, "torchtree.distributions.bayesian_bridge.process_object_number"]], "torchtree.distributions.bayesian_bridge": [[30, "module-torchtree.distributions.bayesian_bridge"]], "ctmcscale (class in torchtree.distributions.ctmc_scale)": [[31, "torchtree.distributions.ctmc_scale.CTMCScale"]], "cpu() (torchtree.distributions.ctmc_scale.ctmcscale method)": [[31, "torchtree.distributions.ctmc_scale.CTMCScale.cpu"]], "cuda() (torchtree.distributions.ctmc_scale.ctmcscale method)": [[31, "torchtree.distributions.ctmc_scale.CTMCScale.cuda"]], "from_json() (torchtree.distributions.ctmc_scale.ctmcscale class method)": [[31, "torchtree.distributions.ctmc_scale.CTMCScale.from_json"]], "json_factory() (torchtree.distributions.ctmc_scale.ctmcscale static method)": [[31, "torchtree.distributions.ctmc_scale.CTMCScale.json_factory"]], "log_gamma_one_half (torchtree.distributions.ctmc_scale.ctmcscale attribute)": [[31, "torchtree.distributions.ctmc_scale.CTMCScale.log_gamma_one_half"]], "shape (torchtree.distributions.ctmc_scale.ctmcscale attribute)": [[31, "torchtree.distributions.ctmc_scale.CTMCScale.shape"]], "to() (torchtree.distributions.ctmc_scale.ctmcscale method)": [[31, "torchtree.distributions.ctmc_scale.CTMCScale.to"]], "torchtree.distributions.ctmc_scale": [[31, "module-torchtree.distributions.ctmc_scale"]], "deterministicnormal (class in torchtree.distributions.deterministic_normal)": [[32, "torchtree.distributions.deterministic_normal.DeterministicNormal"]], "batch_shape (torchtree.distributions.deterministic_normal.deterministicnormal property)": [[32, "torchtree.distributions.deterministic_normal.DeterministicNormal.batch_shape"]], "entropy() (torchtree.distributions.deterministic_normal.deterministicnormal method)": [[32, "torchtree.distributions.deterministic_normal.DeterministicNormal.entropy"]], "event_shape (torchtree.distributions.deterministic_normal.deterministicnormal property)": [[32, "torchtree.distributions.deterministic_normal.DeterministicNormal.event_shape"]], "from_json() (torchtree.distributions.deterministic_normal.deterministicnormal class method)": [[32, "torchtree.distributions.deterministic_normal.DeterministicNormal.from_json"]], "handle_model_changed() (torchtree.distributions.deterministic_normal.deterministicnormal method)": [[32, "torchtree.distributions.deterministic_normal.DeterministicNormal.handle_model_changed"]], "json_factory() (torchtree.distributions.deterministic_normal.deterministicnormal static method)": [[32, "torchtree.distributions.deterministic_normal.DeterministicNormal.json_factory"]], "log_prob() (torchtree.distributions.deterministic_normal.deterministicnormal method)": [[32, "torchtree.distributions.deterministic_normal.DeterministicNormal.log_prob"]], "rsample() (torchtree.distributions.deterministic_normal.deterministicnormal method)": [[32, "torchtree.distributions.deterministic_normal.DeterministicNormal.rsample"]], "sample() (torchtree.distributions.deterministic_normal.deterministicnormal method)": [[32, "torchtree.distributions.deterministic_normal.DeterministicNormal.sample"]], "torchtree.distributions.deterministic_normal": [[32, "module-torchtree.distributions.deterministic_normal"]], "distribution (class in torchtree.distributions.distributions)": [[33, "torchtree.distributions.distributions.Distribution"]], "distributionmodel (class in torchtree.distributions.distributions)": [[33, "torchtree.distributions.distributions.DistributionModel"]], "batch_shape (torchtree.distributions.distributions.distribution property)": [[33, "torchtree.distributions.distributions.Distribution.batch_shape"]], "distribution (torchtree.distributions.distributions.distribution property)": [[33, "torchtree.distributions.distributions.Distribution.distribution"]], "entropy() (torchtree.distributions.distributions.distribution method)": [[33, "torchtree.distributions.distributions.Distribution.entropy"]], "entropy() (torchtree.distributions.distributions.distributionmodel method)": [[33, "torchtree.distributions.distributions.DistributionModel.entropy"]], "event_shape (torchtree.distributions.distributions.distribution property)": [[33, "torchtree.distributions.distributions.Distribution.event_shape"]], "from_json() (torchtree.distributions.distributions.distribution class method)": [[33, "torchtree.distributions.distributions.Distribution.from_json"]], "json_factory() (torchtree.distributions.distributions.distribution static method)": [[33, "torchtree.distributions.distributions.Distribution.json_factory"]], "log_prob() (torchtree.distributions.distributions.distribution method)": [[33, "torchtree.distributions.distributions.Distribution.log_prob"]], "log_prob() (torchtree.distributions.distributions.distributionmodel method)": [[33, "torchtree.distributions.distributions.DistributionModel.log_prob"]], "rsample() (torchtree.distributions.distributions.distribution method)": [[33, "torchtree.distributions.distributions.Distribution.rsample"]], "rsample() (torchtree.distributions.distributions.distributionmodel method)": [[33, "torchtree.distributions.distributions.DistributionModel.rsample"]], "sample() (torchtree.distributions.distributions.distribution method)": [[33, "torchtree.distributions.distributions.Distribution.sample"]], "sample() (torchtree.distributions.distributions.distributionmodel method)": [[33, "torchtree.distributions.distributions.DistributionModel.sample"]], "torchtree.distributions.distributions": [[33, "module-torchtree.distributions.distributions"]], "gmrf (class in torchtree.distributions.gmrf)": [[34, "torchtree.distributions.gmrf.GMRF"]], "gmrfcovariate (class in torchtree.distributions.gmrf)": [[34, "torchtree.distributions.gmrf.GMRFCovariate"]], "from_json() (torchtree.distributions.gmrf.gmrf class method)": [[34, "torchtree.distributions.gmrf.GMRF.from_json"]], "from_json() (torchtree.distributions.gmrf.gmrfcovariate class method)": [[34, "torchtree.distributions.gmrf.GMRFCovariate.from_json"]], "precision_matrix() (torchtree.distributions.gmrf.gmrf method)": [[34, "torchtree.distributions.gmrf.GMRF.precision_matrix"]], "torchtree.distributions.gmrf": [[34, "module-torchtree.distributions.gmrf"]], "gmrfgammaintegrated (class in torchtree.distributions.gmrf_integrated)": [[35, "torchtree.distributions.gmrf_integrated.GMRFGammaIntegrated"]], "from_json() (torchtree.distributions.gmrf_integrated.gmrfgammaintegrated class method)": [[35, "torchtree.distributions.gmrf_integrated.GMRFGammaIntegrated.from_json"]], "torchtree.distributions.gmrf_integrated": [[35, "module-torchtree.distributions.gmrf_integrated"]], "torchtree.distributions": [[36, "module-torchtree.distributions"]], "inversegamma (class in torchtree.distributions.inverse_gamma)": [[37, "torchtree.distributions.inverse_gamma.InverseGamma"]], "arg_constraints (torchtree.distributions.inverse_gamma.inversegamma attribute)": [[37, "torchtree.distributions.inverse_gamma.InverseGamma.arg_constraints"]], "concentration (torchtree.distributions.inverse_gamma.inversegamma property)": [[37, "torchtree.distributions.inverse_gamma.InverseGamma.concentration"]], "expand() (torchtree.distributions.inverse_gamma.inversegamma method)": [[37, "torchtree.distributions.inverse_gamma.InverseGamma.expand"]], "has_rsample (torchtree.distributions.inverse_gamma.inversegamma attribute)": [[37, "torchtree.distributions.inverse_gamma.InverseGamma.has_rsample"]], "rate (torchtree.distributions.inverse_gamma.inversegamma property)": [[37, "torchtree.distributions.inverse_gamma.InverseGamma.rate"]], "support (torchtree.distributions.inverse_gamma.inversegamma attribute)": [[37, "torchtree.distributions.inverse_gamma.InverseGamma.support"]], "torchtree.distributions.inverse_gamma": [[37, "module-torchtree.distributions.inverse_gamma"]], "jointdistributionmodel (class in torchtree.distributions.joint_distribution)": [[38, "torchtree.distributions.joint_distribution.JointDistributionModel"]], "entropy() (torchtree.distributions.joint_distribution.jointdistributionmodel method)": [[38, "torchtree.distributions.joint_distribution.JointDistributionModel.entropy"]], "from_json() (torchtree.distributions.joint_distribution.jointdistributionmodel class method)": [[38, "torchtree.distributions.joint_distribution.JointDistributionModel.from_json"]], "handle_parameter_changed() (torchtree.distributions.joint_distribution.jointdistributionmodel method)": [[38, "torchtree.distributions.joint_distribution.JointDistributionModel.handle_parameter_changed"]], "log_prob() (torchtree.distributions.joint_distribution.jointdistributionmodel method)": [[38, "torchtree.distributions.joint_distribution.JointDistributionModel.log_prob"]], "rsample() (torchtree.distributions.joint_distribution.jointdistributionmodel method)": [[38, "torchtree.distributions.joint_distribution.JointDistributionModel.rsample"]], "sample() (torchtree.distributions.joint_distribution.jointdistributionmodel method)": [[38, "torchtree.distributions.joint_distribution.JointDistributionModel.sample"]], "torchtree.distributions.joint_distribution": [[38, "module-torchtree.distributions.joint_distribution"]], "lognormal (class in torchtree.distributions.log_normal)": [[39, "torchtree.distributions.log_normal.LogNormal"]], "torchtree.distributions.log_normal": [[39, "module-torchtree.distributions.log_normal"]], "multivariatenormal (class in torchtree.distributions.multivariate_normal)": [[40, "torchtree.distributions.multivariate_normal.MultivariateNormal"]], "batch_shape (torchtree.distributions.multivariate_normal.multivariatenormal property)": [[40, "torchtree.distributions.multivariate_normal.MultivariateNormal.batch_shape"]], "entropy() (torchtree.distributions.multivariate_normal.multivariatenormal method)": [[40, "torchtree.distributions.multivariate_normal.MultivariateNormal.entropy"]], "event_shape (torchtree.distributions.multivariate_normal.multivariatenormal property)": [[40, "torchtree.distributions.multivariate_normal.MultivariateNormal.event_shape"]], "from_json() (torchtree.distributions.multivariate_normal.multivariatenormal class method)": [[40, "torchtree.distributions.multivariate_normal.MultivariateNormal.from_json"]], "log_prob() (torchtree.distributions.multivariate_normal.multivariatenormal method)": [[40, "torchtree.distributions.multivariate_normal.MultivariateNormal.log_prob"]], "rsample() (torchtree.distributions.multivariate_normal.multivariatenormal method)": [[40, "torchtree.distributions.multivariate_normal.MultivariateNormal.rsample"]], "sample() (torchtree.distributions.multivariate_normal.multivariatenormal method)": [[40, "torchtree.distributions.multivariate_normal.MultivariateNormal.sample"]], "torchtree.distributions.multivariate_normal": [[40, "module-torchtree.distributions.multivariate_normal"]], "normal (class in torchtree.distributions.normal)": [[41, "torchtree.distributions.normal.Normal"]], "torchtree.distributions.normal": [[41, "module-torchtree.distributions.normal"]], "oneonx (class in torchtree.distributions.one_on_x)": [[42, "torchtree.distributions.one_on_x.OneOnX"]], "arg_constraints (torchtree.distributions.one_on_x.oneonx attribute)": [[42, "torchtree.distributions.one_on_x.OneOnX.arg_constraints"]], "log_prob() (torchtree.distributions.one_on_x.oneonx method)": [[42, "torchtree.distributions.one_on_x.OneOnX.log_prob"]], "support (torchtree.distributions.one_on_x.oneonx attribute)": [[42, "torchtree.distributions.one_on_x.OneOnX.support"]], "torchtree.distributions.one_on_x": [[42, "module-torchtree.distributions.one_on_x"]], "scalemixturenormal (class in torchtree.distributions.scale_mixture)": [[43, "torchtree.distributions.scale_mixture.ScaleMixtureNormal"]], "from_json() (torchtree.distributions.scale_mixture.scalemixturenormal class method)": [[43, "torchtree.distributions.scale_mixture.ScaleMixtureNormal.from_json"]], "handle_model_changed() (torchtree.distributions.scale_mixture.scalemixturenormal method)": [[43, "torchtree.distributions.scale_mixture.ScaleMixtureNormal.handle_model_changed"]], "json_factory() (torchtree.distributions.scale_mixture.scalemixturenormal static method)": [[43, "torchtree.distributions.scale_mixture.ScaleMixtureNormal.json_factory"]], "torchtree.distributions.scale_mixture": [[43, "module-torchtree.distributions.scale_mixture"]], "convexcombinationtransform (class in torchtree.distributions.transforms)": [[44, "torchtree.distributions.transforms.ConvexCombinationTransform"]], "cumsumexptransform (class in torchtree.distributions.transforms)": [[44, "torchtree.distributions.transforms.CumSumExpTransform"]], "cumsumsoftplustransform (class in torchtree.distributions.transforms)": [[44, "torchtree.distributions.transforms.CumSumSoftPlusTransform"]], "cumsumtransform (class in torchtree.distributions.transforms)": [[44, "torchtree.distributions.transforms.CumSumTransform"]], "lineartransform (class in torchtree.distributions.transforms)": [[44, "torchtree.distributions.transforms.LinearTransform"]], "logtransform (class in torchtree.distributions.transforms)": [[44, "torchtree.distributions.transforms.LogTransform"]], "softplustransform (class in torchtree.distributions.transforms)": [[44, "torchtree.distributions.transforms.SoftPlusTransform"]], "trilexpdiagonaltransform (class in torchtree.distributions.transforms)": [[44, "torchtree.distributions.transforms.TrilExpDiagonalTransform"]], "bijective (torchtree.distributions.transforms.cumsumexptransform attribute)": [[44, "torchtree.distributions.transforms.CumSumExpTransform.bijective"]], "bijective (torchtree.distributions.transforms.cumsumsoftplustransform attribute)": [[44, "torchtree.distributions.transforms.CumSumSoftPlusTransform.bijective"]], "bijective (torchtree.distributions.transforms.cumsumtransform attribute)": [[44, "torchtree.distributions.transforms.CumSumTransform.bijective"]], "bijective (torchtree.distributions.transforms.logtransform attribute)": [[44, "torchtree.distributions.transforms.LogTransform.bijective"]], "bijective (torchtree.distributions.transforms.softplustransform attribute)": [[44, "torchtree.distributions.transforms.SoftPlusTransform.bijective"]], "bijective (torchtree.distributions.transforms.trilexpdiagonaltransform attribute)": [[44, "torchtree.distributions.transforms.TrilExpDiagonalTransform.bijective"]], "codomain (torchtree.distributions.transforms.convexcombinationtransform attribute)": [[44, "torchtree.distributions.transforms.ConvexCombinationTransform.codomain"]], "codomain (torchtree.distributions.transforms.cumsumexptransform attribute)": [[44, "torchtree.distributions.transforms.CumSumExpTransform.codomain"]], "codomain (torchtree.distributions.transforms.cumsumsoftplustransform attribute)": [[44, "torchtree.distributions.transforms.CumSumSoftPlusTransform.codomain"]], "codomain (torchtree.distributions.transforms.cumsumtransform attribute)": [[44, "torchtree.distributions.transforms.CumSumTransform.codomain"]], "codomain (torchtree.distributions.transforms.lineartransform attribute)": [[44, "torchtree.distributions.transforms.LinearTransform.codomain"]], "codomain (torchtree.distributions.transforms.logtransform attribute)": [[44, "torchtree.distributions.transforms.LogTransform.codomain"]], "codomain (torchtree.distributions.transforms.softplustransform attribute)": [[44, "torchtree.distributions.transforms.SoftPlusTransform.codomain"]], "domain (torchtree.distributions.transforms.convexcombinationtransform attribute)": [[44, "torchtree.distributions.transforms.ConvexCombinationTransform.domain"]], "domain (torchtree.distributions.transforms.cumsumexptransform attribute)": [[44, "torchtree.distributions.transforms.CumSumExpTransform.domain"]], "domain (torchtree.distributions.transforms.cumsumsoftplustransform attribute)": [[44, "torchtree.distributions.transforms.CumSumSoftPlusTransform.domain"]], "domain (torchtree.distributions.transforms.cumsumtransform attribute)": [[44, "torchtree.distributions.transforms.CumSumTransform.domain"]], "domain (torchtree.distributions.transforms.lineartransform attribute)": [[44, "torchtree.distributions.transforms.LinearTransform.domain"]], "domain (torchtree.distributions.transforms.logtransform attribute)": [[44, "torchtree.distributions.transforms.LogTransform.domain"]], "domain (torchtree.distributions.transforms.softplustransform attribute)": [[44, "torchtree.distributions.transforms.SoftPlusTransform.domain"]], "log_abs_det_jacobian() (torchtree.distributions.transforms.convexcombinationtransform method)": [[44, "torchtree.distributions.transforms.ConvexCombinationTransform.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torchtree.distributions.transforms.cumsumexptransform method)": [[44, "torchtree.distributions.transforms.CumSumExpTransform.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torchtree.distributions.transforms.cumsumsoftplustransform method)": [[44, "torchtree.distributions.transforms.CumSumSoftPlusTransform.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torchtree.distributions.transforms.cumsumtransform method)": [[44, "torchtree.distributions.transforms.CumSumTransform.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torchtree.distributions.transforms.logtransform method)": [[44, "torchtree.distributions.transforms.LogTransform.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torchtree.distributions.transforms.softplustransform method)": [[44, "torchtree.distributions.transforms.SoftPlusTransform.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torchtree.distributions.transforms.trilexpdiagonaltransform method)": [[44, "torchtree.distributions.transforms.TrilExpDiagonalTransform.log_abs_det_jacobian"]], "sign (torchtree.distributions.transforms.cumsumexptransform attribute)": [[44, "torchtree.distributions.transforms.CumSumExpTransform.sign"]], "sign (torchtree.distributions.transforms.cumsumsoftplustransform attribute)": [[44, "torchtree.distributions.transforms.CumSumSoftPlusTransform.sign"]], "sign (torchtree.distributions.transforms.cumsumtransform attribute)": [[44, "torchtree.distributions.transforms.CumSumTransform.sign"]], "sign (torchtree.distributions.transforms.logtransform attribute)": [[44, "torchtree.distributions.transforms.LogTransform.sign"]], "sign (torchtree.distributions.transforms.softplustransform attribute)": [[44, "torchtree.distributions.transforms.SoftPlusTransform.sign"]], "sign (torchtree.distributions.transforms.trilexpdiagonaltransform attribute)": [[44, "torchtree.distributions.transforms.TrilExpDiagonalTransform.sign"]], "torchtree.distributions.transforms": [[44, "module-torchtree.distributions.transforms"]], "compoundgammadirichletprior (class in torchtree.distributions.tree_prior)": [[45, "torchtree.distributions.tree_prior.CompoundGammaDirichletPrior"]], "from_json() (torchtree.distributions.tree_prior.compoundgammadirichletprior class method)": [[45, "torchtree.distributions.tree_prior.CompoundGammaDirichletPrior.from_json"]], "handle_parameter_changed() (torchtree.distributions.tree_prior.compoundgammadirichletprior method)": [[45, "torchtree.distributions.tree_prior.CompoundGammaDirichletPrior.handle_parameter_changed"]], "torchtree.distributions.tree_prior": [[45, "module-torchtree.distributions.tree_prior"]], "alignment (class in torchtree.evolution.alignment)": [[46, "torchtree.evolution.alignment.Alignment"]], "sequence (in module torchtree.evolution.alignment)": [[46, "torchtree.evolution.alignment.Sequence"]], "calculate_f3x4() (in module torchtree.evolution.alignment)": [[46, "torchtree.evolution.alignment.calculate_F3x4"]], "calculate_f3x4_from_nucleotide() (in module torchtree.evolution.alignment)": [[46, "torchtree.evolution.alignment.calculate_F3x4_from_nucleotide"]], "calculate_frequencies() (in module torchtree.evolution.alignment)": [[46, "torchtree.evolution.alignment.calculate_frequencies"]], "calculate_frequencies_per_codon_position() (in module torchtree.evolution.alignment)": [[46, "torchtree.evolution.alignment.calculate_frequencies_per_codon_position"]], "calculate_kappa() (in module torchtree.evolution.alignment)": [[46, "torchtree.evolution.alignment.calculate_kappa"]], "calculate_substitutions() (in module torchtree.evolution.alignment)": [[46, "torchtree.evolution.alignment.calculate_substitutions"]], "calculate_ts_tv() (in module torchtree.evolution.alignment)": [[46, "torchtree.evolution.alignment.calculate_ts_tv"]], "data_type (torchtree.evolution.alignment.alignment property)": [[46, "torchtree.evolution.alignment.Alignment.data_type"]], "from_json() (torchtree.evolution.alignment.alignment class method)": [[46, "torchtree.evolution.alignment.Alignment.from_json"]], "get() (torchtree.evolution.alignment.alignment class method)": [[46, "torchtree.evolution.alignment.Alignment.get"]], "read_fasta_sequences() (in module torchtree.evolution.alignment)": [[46, "torchtree.evolution.alignment.read_fasta_sequences"]], "sequence_size (torchtree.evolution.alignment.alignment property)": [[46, "torchtree.evolution.alignment.Alignment.sequence_size"]], "taxa (torchtree.evolution.alignment.alignment property)": [[46, "torchtree.evolution.alignment.Alignment.taxa"]], "torchtree.evolution.alignment": [[46, "module-torchtree.evolution.alignment"]], "attributepattern (class in torchtree.evolution.attribute_pattern)": [[47, "torchtree.evolution.attribute_pattern.AttributePattern"]], "compute_tips_partials() (torchtree.evolution.attribute_pattern.attributepattern method)": [[47, "torchtree.evolution.attribute_pattern.AttributePattern.compute_tips_partials"]], "compute_tips_states() (torchtree.evolution.attribute_pattern.attributepattern method)": [[47, "torchtree.evolution.attribute_pattern.AttributePattern.compute_tips_states"]], "cpu() (torchtree.evolution.attribute_pattern.attributepattern method)": [[47, "torchtree.evolution.attribute_pattern.AttributePattern.cpu"]], "cuda() (torchtree.evolution.attribute_pattern.attributepattern method)": [[47, "torchtree.evolution.attribute_pattern.AttributePattern.cuda"]], "from_json() (torchtree.evolution.attribute_pattern.attributepattern class method)": [[47, "torchtree.evolution.attribute_pattern.AttributePattern.from_json"]], "handle_model_changed() (torchtree.evolution.attribute_pattern.attributepattern method)": [[47, "torchtree.evolution.attribute_pattern.AttributePattern.handle_model_changed"]], "handle_parameter_changed() (torchtree.evolution.attribute_pattern.attributepattern method)": [[47, "torchtree.evolution.attribute_pattern.AttributePattern.handle_parameter_changed"]], "torchtree.evolution.attribute_pattern": [[47, "module-torchtree.evolution.attribute_pattern"]], "bdskmodel (class in torchtree.evolution.bdsk)": [[48, "torchtree.evolution.bdsk.BDSKModel"]], "piecewiseconstantbirthdeath (class in torchtree.evolution.bdsk)": [[48, "torchtree.evolution.bdsk.PiecewiseConstantBirthDeath"]], "arg_constraints (torchtree.evolution.bdsk.piecewiseconstantbirthdeath attribute)": [[48, "torchtree.evolution.bdsk.PiecewiseConstantBirthDeath.arg_constraints"]], "epidemiology_to_birth_death() (in module torchtree.evolution.bdsk)": [[48, "torchtree.evolution.bdsk.epidemiology_to_birth_death"]], "from_json() (torchtree.evolution.bdsk.bdskmodel class method)": [[48, "torchtree.evolution.bdsk.BDSKModel.from_json"]], "log_p() (torchtree.evolution.bdsk.piecewiseconstantbirthdeath method)": [[48, "torchtree.evolution.bdsk.PiecewiseConstantBirthDeath.log_p"]], "log_prob() (torchtree.evolution.bdsk.piecewiseconstantbirthdeath method)": [[48, "torchtree.evolution.bdsk.PiecewiseConstantBirthDeath.log_prob"]], "log_q() (torchtree.evolution.bdsk.piecewiseconstantbirthdeath method)": [[48, "torchtree.evolution.bdsk.PiecewiseConstantBirthDeath.log_q"]], "p0() (torchtree.evolution.bdsk.piecewiseconstantbirthdeath method)": [[48, "torchtree.evolution.bdsk.PiecewiseConstantBirthDeath.p0"]], "support (torchtree.evolution.bdsk.piecewiseconstantbirthdeath attribute)": [[48, "torchtree.evolution.bdsk.PiecewiseConstantBirthDeath.support"]], "torchtree.evolution.bdsk": [[48, "module-torchtree.evolution.bdsk"]], "birthdeath (class in torchtree.evolution.birth_death)": [[49, "torchtree.evolution.birth_death.BirthDeath"]], "birthdeathmodel (class in torchtree.evolution.birth_death)": [[49, "torchtree.evolution.birth_death.BirthDeathModel"]], "arg_constraints (torchtree.evolution.birth_death.birthdeath attribute)": [[49, "torchtree.evolution.birth_death.BirthDeath.arg_constraints"]], "from_json() (torchtree.evolution.birth_death.birthdeathmodel class method)": [[49, "torchtree.evolution.birth_death.BirthDeathModel.from_json"]], "handle_model_changed() (torchtree.evolution.birth_death.birthdeathmodel method)": [[49, "torchtree.evolution.birth_death.BirthDeathModel.handle_model_changed"]], "log_p() (torchtree.evolution.birth_death.birthdeath method)": [[49, "torchtree.evolution.birth_death.BirthDeath.log_p"]], "log_prob() (torchtree.evolution.birth_death.birthdeath method)": [[49, "torchtree.evolution.birth_death.BirthDeath.log_prob"]], "log_q() (torchtree.evolution.birth_death.birthdeath method)": [[49, "torchtree.evolution.birth_death.BirthDeath.log_q"]], "torchtree.evolution.birth_death": [[49, "module-torchtree.evolution.birth_death"]], "abstractclockmodel (class in torchtree.evolution.branch_model)": [[50, "torchtree.evolution.branch_model.AbstractClockModel"]], "branchmodel (class in torchtree.evolution.branch_model)": [[50, "torchtree.evolution.branch_model.BranchModel"]], "simpleclockmodel (class in torchtree.evolution.branch_model)": [[50, "torchtree.evolution.branch_model.SimpleClockModel"]], "strictclockmodel (class in torchtree.evolution.branch_model)": [[50, "torchtree.evolution.branch_model.StrictClockModel"]], "from_json() (torchtree.evolution.branch_model.simpleclockmodel class method)": [[50, "torchtree.evolution.branch_model.SimpleClockModel.from_json"]], "from_json() (torchtree.evolution.branch_model.strictclockmodel class method)": [[50, "torchtree.evolution.branch_model.StrictClockModel.from_json"]], "handle_model_changed() (torchtree.evolution.branch_model.abstractclockmodel method)": [[50, "torchtree.evolution.branch_model.AbstractClockModel.handle_model_changed"]], "handle_parameter_changed() (torchtree.evolution.branch_model.abstractclockmodel method)": [[50, "torchtree.evolution.branch_model.AbstractClockModel.handle_parameter_changed"]], "json_factory() (torchtree.evolution.branch_model.simpleclockmodel static method)": [[50, "torchtree.evolution.branch_model.SimpleClockModel.json_factory"]], "rates (torchtree.evolution.branch_model.branchmodel property)": [[50, "torchtree.evolution.branch_model.BranchModel.rates"]], "rates (torchtree.evolution.branch_model.simpleclockmodel property)": [[50, "torchtree.evolution.branch_model.SimpleClockModel.rates"]], "rates (torchtree.evolution.branch_model.strictclockmodel property)": [[50, "torchtree.evolution.branch_model.StrictClockModel.rates"]], "torchtree.evolution.branch_model": [[50, "module-torchtree.evolution.branch_model"]], "abstractcoalescentdistribution (class in torchtree.evolution.coalescent)": [[51, "torchtree.evolution.coalescent.AbstractCoalescentDistribution"]], "abstractcoalescentmodel (class in torchtree.evolution.coalescent)": [[51, "torchtree.evolution.coalescent.AbstractCoalescentModel"]], "constantcoalescent (class in torchtree.evolution.coalescent)": [[51, "torchtree.evolution.coalescent.ConstantCoalescent"]], "constantcoalescentintegrated (class in torchtree.evolution.coalescent)": [[51, "torchtree.evolution.coalescent.ConstantCoalescentIntegrated"]], "constantcoalescentintegratedmodel (class in torchtree.evolution.coalescent)": [[51, "torchtree.evolution.coalescent.ConstantCoalescentIntegratedModel"]], "constantcoalescentmodel (class in torchtree.evolution.coalescent)": [[51, "torchtree.evolution.coalescent.ConstantCoalescentModel"]], "exponentialcoalescent (class in torchtree.evolution.coalescent)": [[51, "torchtree.evolution.coalescent.ExponentialCoalescent"]], "exponentialcoalescentmodel (class in torchtree.evolution.coalescent)": [[51, "torchtree.evolution.coalescent.ExponentialCoalescentModel"]], "faketreemodel (class in torchtree.evolution.coalescent)": [[51, "torchtree.evolution.coalescent.FakeTreeModel"]], "piecewiseconstantcoalescent (class in torchtree.evolution.coalescent)": [[51, "torchtree.evolution.coalescent.PiecewiseConstantCoalescent"]], "piecewiseconstantcoalescentgrid (class in torchtree.evolution.coalescent)": [[51, "torchtree.evolution.coalescent.PiecewiseConstantCoalescentGrid"]], "piecewiseconstantcoalescentgridmodel (class in torchtree.evolution.coalescent)": [[51, "torchtree.evolution.coalescent.PiecewiseConstantCoalescentGridModel"]], "piecewiseconstantcoalescentmodel (class in torchtree.evolution.coalescent)": [[51, "torchtree.evolution.coalescent.PiecewiseConstantCoalescentModel"]], "piecewiseexponentialcoalescentgrid (class in torchtree.evolution.coalescent)": [[51, "torchtree.evolution.coalescent.PiecewiseExponentialCoalescentGrid"]], "piecewiseexponentialcoalescentgridmodel (class in torchtree.evolution.coalescent)": [[51, "torchtree.evolution.coalescent.PiecewiseExponentialCoalescentGridModel"]], "piecewiselinearcoalescentgrid (class in torchtree.evolution.coalescent)": [[51, "torchtree.evolution.coalescent.PiecewiseLinearCoalescentGrid"]], "piecewiselinearcoalescentgridmodel (class in torchtree.evolution.coalescent)": [[51, "torchtree.evolution.coalescent.PiecewiseLinearCoalescentGridModel"]], "softpiecewiseconstantcoalescentgrid (class in torchtree.evolution.coalescent)": [[51, "torchtree.evolution.coalescent.SoftPiecewiseConstantCoalescentGrid"]], "arg_constraints (torchtree.evolution.coalescent.abstractcoalescentdistribution attribute)": [[51, "torchtree.evolution.coalescent.AbstractCoalescentDistribution.arg_constraints"]], "arg_constraints (torchtree.evolution.coalescent.constantcoalescentintegrated attribute)": [[51, "torchtree.evolution.coalescent.ConstantCoalescentIntegrated.arg_constraints"]], "arg_constraints (torchtree.evolution.coalescent.exponentialcoalescent attribute)": [[51, "torchtree.evolution.coalescent.ExponentialCoalescent.arg_constraints"]], "arg_constraints (torchtree.evolution.coalescent.piecewiseexponentialcoalescentgrid attribute)": [[51, "torchtree.evolution.coalescent.PiecewiseExponentialCoalescentGrid.arg_constraints"]], "arg_constraints (torchtree.evolution.coalescent.piecewiselinearcoalescentgrid attribute)": [[51, "torchtree.evolution.coalescent.PiecewiseLinearCoalescentGrid.arg_constraints"]], "distribution() (torchtree.evolution.coalescent.abstractcoalescentmodel method)": [[51, "torchtree.evolution.coalescent.AbstractCoalescentModel.distribution"]], "distribution() (torchtree.evolution.coalescent.constantcoalescentintegratedmodel method)": [[51, "torchtree.evolution.coalescent.ConstantCoalescentIntegratedModel.distribution"]], "distribution() (torchtree.evolution.coalescent.constantcoalescentmodel method)": [[51, "torchtree.evolution.coalescent.ConstantCoalescentModel.distribution"]], "distribution() (torchtree.evolution.coalescent.exponentialcoalescentmodel method)": [[51, "torchtree.evolution.coalescent.ExponentialCoalescentModel.distribution"]], "distribution() (torchtree.evolution.coalescent.piecewiseconstantcoalescentgridmodel method)": [[51, "torchtree.evolution.coalescent.PiecewiseConstantCoalescentGridModel.distribution"]], "distribution() (torchtree.evolution.coalescent.piecewiseconstantcoalescentmodel method)": [[51, "torchtree.evolution.coalescent.PiecewiseConstantCoalescentModel.distribution"]], "distribution() (torchtree.evolution.coalescent.piecewiseexponentialcoalescentgridmodel method)": [[51, "torchtree.evolution.coalescent.PiecewiseExponentialCoalescentGridModel.distribution"]], "distribution() (torchtree.evolution.coalescent.piecewiselinearcoalescentgridmodel method)": [[51, "torchtree.evolution.coalescent.PiecewiseLinearCoalescentGridModel.distribution"]], "from_json() (torchtree.evolution.coalescent.constantcoalescentintegratedmodel class method)": [[51, "torchtree.evolution.coalescent.ConstantCoalescentIntegratedModel.from_json"]], "from_json() (torchtree.evolution.coalescent.constantcoalescentmodel class method)": [[51, "torchtree.evolution.coalescent.ConstantCoalescentModel.from_json"]], "from_json() (torchtree.evolution.coalescent.exponentialcoalescentmodel class method)": [[51, "torchtree.evolution.coalescent.ExponentialCoalescentModel.from_json"]], "from_json() (torchtree.evolution.coalescent.piecewiseconstantcoalescentgridmodel class method)": [[51, "torchtree.evolution.coalescent.PiecewiseConstantCoalescentGridModel.from_json"]], "from_json() (torchtree.evolution.coalescent.piecewiseconstantcoalescentmodel class method)": [[51, "torchtree.evolution.coalescent.PiecewiseConstantCoalescentModel.from_json"]], "from_json() (torchtree.evolution.coalescent.piecewiseexponentialcoalescentgridmodel class method)": [[51, "torchtree.evolution.coalescent.PiecewiseExponentialCoalescentGridModel.from_json"]], "from_json() (torchtree.evolution.coalescent.piecewiselinearcoalescentgridmodel class method)": [[51, "torchtree.evolution.coalescent.PiecewiseLinearCoalescentGridModel.from_json"]], "has_rsample (torchtree.evolution.coalescent.abstractcoalescentdistribution attribute)": [[51, "torchtree.evolution.coalescent.AbstractCoalescentDistribution.has_rsample"]], "has_rsample (torchtree.evolution.coalescent.constantcoalescent attribute)": [[51, "torchtree.evolution.coalescent.ConstantCoalescent.has_rsample"]], "has_rsample (torchtree.evolution.coalescent.constantcoalescentintegrated attribute)": [[51, "torchtree.evolution.coalescent.ConstantCoalescentIntegrated.has_rsample"]], "has_rsample (torchtree.evolution.coalescent.exponentialcoalescent attribute)": [[51, "torchtree.evolution.coalescent.ExponentialCoalescent.has_rsample"]], "has_rsample (torchtree.evolution.coalescent.piecewiseexponentialcoalescentgrid attribute)": [[51, "torchtree.evolution.coalescent.PiecewiseExponentialCoalescentGrid.has_rsample"]], "has_rsample (torchtree.evolution.coalescent.piecewiselinearcoalescentgrid attribute)": [[51, "torchtree.evolution.coalescent.PiecewiseLinearCoalescentGrid.has_rsample"]], "log_prob() (torchtree.evolution.coalescent.constantcoalescent method)": [[51, "torchtree.evolution.coalescent.ConstantCoalescent.log_prob"]], "log_prob() (torchtree.evolution.coalescent.constantcoalescentintegrated method)": [[51, "torchtree.evolution.coalescent.ConstantCoalescentIntegrated.log_prob"]], "log_prob() (torchtree.evolution.coalescent.exponentialcoalescent method)": [[51, "torchtree.evolution.coalescent.ExponentialCoalescent.log_prob"]], "log_prob() (torchtree.evolution.coalescent.piecewiseconstantcoalescent method)": [[51, "torchtree.evolution.coalescent.PiecewiseConstantCoalescent.log_prob"]], "log_prob() (torchtree.evolution.coalescent.piecewiseconstantcoalescentgrid method)": [[51, "torchtree.evolution.coalescent.PiecewiseConstantCoalescentGrid.log_prob"]], "log_prob() (torchtree.evolution.coalescent.piecewiseexponentialcoalescentgrid method)": [[51, "torchtree.evolution.coalescent.PiecewiseExponentialCoalescentGrid.log_prob"]], "log_prob() (torchtree.evolution.coalescent.piecewiselinearcoalescentgrid method)": [[51, "torchtree.evolution.coalescent.PiecewiseLinearCoalescentGrid.log_prob"]], "log_prob() (torchtree.evolution.coalescent.softpiecewiseconstantcoalescentgrid method)": [[51, "torchtree.evolution.coalescent.SoftPiecewiseConstantCoalescentGrid.log_prob"]], "maximum_likelihood() (torchtree.evolution.coalescent.abstractcoalescentdistribution class method)": [[51, "torchtree.evolution.coalescent.AbstractCoalescentDistribution.maximum_likelihood"]], "maximum_likelihood() (torchtree.evolution.coalescent.constantcoalescent class method)": [[51, "torchtree.evolution.coalescent.ConstantCoalescent.maximum_likelihood"]], "maximum_likelihood() (torchtree.evolution.coalescent.piecewiseconstantcoalescent class method)": [[51, "torchtree.evolution.coalescent.PiecewiseConstantCoalescent.maximum_likelihood"]], "node_heights (torchtree.evolution.coalescent.faketreemodel property)": [[51, "torchtree.evolution.coalescent.FakeTreeModel.node_heights"]], "process_data_coalesent() (in module torchtree.evolution.coalescent)": [[51, "torchtree.evolution.coalescent.process_data_coalesent"]], "rsample() (torchtree.evolution.coalescent.constantcoalescent method)": [[51, "torchtree.evolution.coalescent.ConstantCoalescent.rsample"]], "sample_shape (torchtree.evolution.coalescent.faketreemodel property)": [[51, "torchtree.evolution.coalescent.FakeTreeModel.sample_shape"]], "support (torchtree.evolution.coalescent.abstractcoalescentdistribution attribute)": [[51, "torchtree.evolution.coalescent.AbstractCoalescentDistribution.support"]], "support (torchtree.evolution.coalescent.constantcoalescentintegrated attribute)": [[51, "torchtree.evolution.coalescent.ConstantCoalescentIntegrated.support"]], "support (torchtree.evolution.coalescent.exponentialcoalescent attribute)": [[51, "torchtree.evolution.coalescent.ExponentialCoalescent.support"]], "support (torchtree.evolution.coalescent.piecewiseexponentialcoalescentgrid attribute)": [[51, "torchtree.evolution.coalescent.PiecewiseExponentialCoalescentGrid.support"]], "support (torchtree.evolution.coalescent.piecewiselinearcoalescentgrid attribute)": [[51, "torchtree.evolution.coalescent.PiecewiseLinearCoalescentGrid.support"]], "torchtree.evolution.coalescent": [[51, "module-torchtree.evolution.coalescent"]], "amino_acids (torchtree.evolution.datatype.aminoaciddatatype attribute)": [[52, "torchtree.evolution.datatype.AminoAcidDataType.AMINO_ACIDS"]], "amino_acids_ambiguity_states (torchtree.evolution.datatype.aminoaciddatatype attribute)": [[52, "id0"], [52, "torchtree.evolution.datatype.AminoAcidDataType.AMINO_ACIDS_AMBIGUITY_STATES"]], "amino_acids_states (torchtree.evolution.datatype.aminoaciddatatype attribute)": [[52, "torchtree.evolution.datatype.AminoAcidDataType.AMINO_ACIDS_STATES"]], "abstractdatatype (class in torchtree.evolution.datatype)": [[52, "torchtree.evolution.datatype.AbstractDataType"]], "aminoaciddatatype (class in torchtree.evolution.datatype)": [[52, "torchtree.evolution.datatype.AminoAcidDataType"]], "codon_triplets (torchtree.evolution.datatype.codondatatype attribute)": [[52, "torchtree.evolution.datatype.CodonDataType.CODON_TRIPLETS"]], "codondatatype (class in torchtree.evolution.datatype)": [[52, "torchtree.evolution.datatype.CodonDataType"]], "datatype (class in torchtree.evolution.datatype)": [[52, "torchtree.evolution.datatype.DataType"]], "genetic_code_names (torchtree.evolution.datatype.codondatatype attribute)": [[52, "torchtree.evolution.datatype.CodonDataType.GENETIC_CODE_NAMES"]], "genetic_code_tables (torchtree.evolution.datatype.codondatatype attribute)": [[52, "torchtree.evolution.datatype.CodonDataType.GENETIC_CODE_TABLES"]], "generaldatatype (class in torchtree.evolution.datatype)": [[52, "torchtree.evolution.datatype.GeneralDataType"]], "nucleotides (torchtree.evolution.datatype.nucleotidedatatype attribute)": [[52, "torchtree.evolution.datatype.NucleotideDataType.NUCLEOTIDES"]], "nucleotide_ambiguity_states (torchtree.evolution.datatype.nucleotidedatatype attribute)": [[52, "torchtree.evolution.datatype.NucleotideDataType.NUCLEOTIDE_AMBIGUITY_STATES"]], "nucleotide_states (torchtree.evolution.datatype.nucleotidedatatype attribute)": [[52, "torchtree.evolution.datatype.NucleotideDataType.NUCLEOTIDE_STATES"]], "number_of_codons (torchtree.evolution.datatype.codondatatype attribute)": [[52, "torchtree.evolution.datatype.CodonDataType.NUMBER_OF_CODONS"]], "nucleotidedatatype (class in torchtree.evolution.datatype)": [[52, "torchtree.evolution.datatype.NucleotideDataType"]], "encoding() (torchtree.evolution.datatype.aminoaciddatatype method)": [[52, "torchtree.evolution.datatype.AminoAcidDataType.encoding"]], "encoding() (torchtree.evolution.datatype.codondatatype method)": [[52, "torchtree.evolution.datatype.CodonDataType.encoding"]], "encoding() (torchtree.evolution.datatype.datatype method)": [[52, "torchtree.evolution.datatype.DataType.encoding"]], "encoding() (torchtree.evolution.datatype.generaldatatype method)": [[52, "torchtree.evolution.datatype.GeneralDataType.encoding"]], "encoding() (torchtree.evolution.datatype.nucleotidedatatype method)": [[52, "torchtree.evolution.datatype.NucleotideDataType.encoding"]], "from_json() (torchtree.evolution.datatype.aminoaciddatatype class method)": [[52, "torchtree.evolution.datatype.AminoAcidDataType.from_json"]], "from_json() (torchtree.evolution.datatype.codondatatype class method)": [[52, "torchtree.evolution.datatype.CodonDataType.from_json"]], "from_json() (torchtree.evolution.datatype.generaldatatype class method)": [[52, "torchtree.evolution.datatype.GeneralDataType.from_json"]], "from_json() (torchtree.evolution.datatype.nucleotidedatatype class method)": [[52, "torchtree.evolution.datatype.NucleotideDataType.from_json"]], "partial() (torchtree.evolution.datatype.aminoaciddatatype method)": [[52, "torchtree.evolution.datatype.AminoAcidDataType.partial"]], "partial() (torchtree.evolution.datatype.codondatatype method)": [[52, "torchtree.evolution.datatype.CodonDataType.partial"]], "partial() (torchtree.evolution.datatype.datatype method)": [[52, "torchtree.evolution.datatype.DataType.partial"]], "partial() (torchtree.evolution.datatype.generaldatatype method)": [[52, "torchtree.evolution.datatype.GeneralDataType.partial"]], "partial() (torchtree.evolution.datatype.nucleotidedatatype method)": [[52, "torchtree.evolution.datatype.NucleotideDataType.partial"]], "size (torchtree.evolution.datatype.abstractdatatype property)": [[52, "torchtree.evolution.datatype.AbstractDataType.size"]], "size (torchtree.evolution.datatype.datatype property)": [[52, "torchtree.evolution.datatype.DataType.size"]], "state_count (torchtree.evolution.datatype.abstractdatatype property)": [[52, "torchtree.evolution.datatype.AbstractDataType.state_count"]], "state_count (torchtree.evolution.datatype.datatype property)": [[52, "torchtree.evolution.datatype.DataType.state_count"]], "states (torchtree.evolution.datatype.abstractdatatype property)": [[52, "torchtree.evolution.datatype.AbstractDataType.states"]], "states (torchtree.evolution.datatype.datatype property)": [[52, "torchtree.evolution.datatype.DataType.states"]], "torchtree.evolution.datatype": [[52, "module-torchtree.evolution.datatype"]], "torchtree.evolution": [[53, "module-torchtree.evolution"]], "node (class in torchtree.evolution.io)": [[54, "torchtree.evolution.io.Node"]], "convert_samples_to_nexus() (in module torchtree.evolution.io)": [[54, "torchtree.evolution.io.convert_samples_to_nexus"]], "extract_taxa() (in module torchtree.evolution.io)": [[54, "torchtree.evolution.io.extract_taxa"]], "parse_taxa() (in module torchtree.evolution.io)": [[54, "torchtree.evolution.io.parse_taxa"]], "parse_translate() (in module torchtree.evolution.io)": [[54, "torchtree.evolution.io.parse_translate"]], "parse_trees() (in module torchtree.evolution.io)": [[54, "torchtree.evolution.io.parse_trees"]], "random_tree_from_heights() (in module torchtree.evolution.io)": [[54, "torchtree.evolution.io.random_tree_from_heights"]], "read_tree() (in module torchtree.evolution.io)": [[54, "torchtree.evolution.io.read_tree"]], "read_tree_and_alignment() (in module torchtree.evolution.io)": [[54, "torchtree.evolution.io.read_tree_and_alignment"]], "split_newick() (in module torchtree.evolution.io)": [[54, "torchtree.evolution.io.split_newick"]], "to_nexus() (in module torchtree.evolution.io)": [[54, "torchtree.evolution.io.to_nexus"]], "torchtree.evolution.io": [[54, "module-torchtree.evolution.io"]], "poissontreelikelihood (class in torchtree.evolution.poisson_tree_likelihood)": [[55, "torchtree.evolution.poisson_tree_likelihood.PoissonTreeLikelihood"]], "from_json() (torchtree.evolution.poisson_tree_likelihood.poissontreelikelihood class method)": [[55, "torchtree.evolution.poisson_tree_likelihood.PoissonTreeLikelihood.from_json"]], "handle_parameter_changed() (torchtree.evolution.poisson_tree_likelihood.poissontreelikelihood method)": [[55, "torchtree.evolution.poisson_tree_likelihood.PoissonTreeLikelihood.handle_parameter_changed"]], "torchtree.evolution.poisson_tree_likelihood": [[55, "module-torchtree.evolution.poisson_tree_likelihood"]], "logdifferenceratetransform (class in torchtree.evolution.rate_transform)": [[56, "torchtree.evolution.rate_transform.LogDifferenceRateTransform"]], "rescaledratetransform (class in torchtree.evolution.rate_transform)": [[56, "torchtree.evolution.rate_transform.RescaledRateTransform"]], "bijective (torchtree.evolution.rate_transform.logdifferenceratetransform attribute)": [[56, "torchtree.evolution.rate_transform.LogDifferenceRateTransform.bijective"]], "bijective (torchtree.evolution.rate_transform.rescaledratetransform attribute)": [[56, "torchtree.evolution.rate_transform.RescaledRateTransform.bijective"]], "log_abs_det_jacobian() (torchtree.evolution.rate_transform.logdifferenceratetransform method)": [[56, "torchtree.evolution.rate_transform.LogDifferenceRateTransform.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torchtree.evolution.rate_transform.rescaledratetransform method)": [[56, "torchtree.evolution.rate_transform.RescaledRateTransform.log_abs_det_jacobian"]], "sign (torchtree.evolution.rate_transform.logdifferenceratetransform attribute)": [[56, "torchtree.evolution.rate_transform.LogDifferenceRateTransform.sign"]], "sign (torchtree.evolution.rate_transform.rescaledratetransform attribute)": [[56, "torchtree.evolution.rate_transform.RescaledRateTransform.sign"]], "torchtree.evolution.rate_transform": [[56, "module-torchtree.evolution.rate_transform"]], "rootparameter (class in torchtree.evolution.root_transform)": [[57, "torchtree.evolution.root_transform.RootParameter"]], "add_parameter_listener() (torchtree.evolution.root_transform.rootparameter method)": [[57, "torchtree.evolution.root_transform.RootParameter.add_parameter_listener"]], "fire_parameter_changed() (torchtree.evolution.root_transform.rootparameter method)": [[57, "torchtree.evolution.root_transform.RootParameter.fire_parameter_changed"]], "from_json() (torchtree.evolution.root_transform.rootparameter class method)": [[57, "torchtree.evolution.root_transform.RootParameter.from_json"]], "handle_model_changed() (torchtree.evolution.root_transform.rootparameter method)": [[57, "torchtree.evolution.root_transform.RootParameter.handle_model_changed"]], "handle_parameter_changed() (torchtree.evolution.root_transform.rootparameter method)": [[57, "torchtree.evolution.root_transform.RootParameter.handle_parameter_changed"]], "parameters() (torchtree.evolution.root_transform.rootparameter method)": [[57, "torchtree.evolution.root_transform.RootParameter.parameters"]], "tensor (torchtree.evolution.root_transform.rootparameter property)": [[57, "torchtree.evolution.root_transform.RootParameter.tensor"]], "torchtree.evolution.root_transform": [[57, "module-torchtree.evolution.root_transform"]], "transform() (torchtree.evolution.root_transform.rootparameter method)": [[57, "torchtree.evolution.root_transform.RootParameter.transform"]], "constantsitemodel (class in torchtree.evolution.site_model)": [[58, "torchtree.evolution.site_model.ConstantSiteModel"]], "invariantsitemodel (class in torchtree.evolution.site_model)": [[58, "torchtree.evolution.site_model.InvariantSiteModel"]], "sitemodel (class in torchtree.evolution.site_model)": [[58, "torchtree.evolution.site_model.SiteModel"]], "univariatediscretizedsitemodel (class in torchtree.evolution.site_model)": [[58, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel"]], "weibullsitemodel (class in torchtree.evolution.site_model)": [[58, "torchtree.evolution.site_model.WeibullSiteModel"]], "cpu() (torchtree.evolution.site_model.constantsitemodel method)": [[58, "torchtree.evolution.site_model.ConstantSiteModel.cpu"]], "cpu() (torchtree.evolution.site_model.invariantsitemodel method)": [[58, "torchtree.evolution.site_model.InvariantSiteModel.cpu"]], "cpu() (torchtree.evolution.site_model.univariatediscretizedsitemodel method)": [[58, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel.cpu"]], "cuda() (torchtree.evolution.site_model.constantsitemodel method)": [[58, "torchtree.evolution.site_model.ConstantSiteModel.cuda"]], "cuda() (torchtree.evolution.site_model.invariantsitemodel method)": [[58, "torchtree.evolution.site_model.InvariantSiteModel.cuda"]], "cuda() (torchtree.evolution.site_model.univariatediscretizedsitemodel method)": [[58, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel.cuda"]], "from_json() (torchtree.evolution.site_model.constantsitemodel class method)": [[58, "torchtree.evolution.site_model.ConstantSiteModel.from_json"]], "from_json() (torchtree.evolution.site_model.invariantsitemodel class method)": [[58, "torchtree.evolution.site_model.InvariantSiteModel.from_json"]], "from_json() (torchtree.evolution.site_model.weibullsitemodel class method)": [[58, "torchtree.evolution.site_model.WeibullSiteModel.from_json"]], "handle_model_changed() (torchtree.evolution.site_model.sitemodel method)": [[58, "torchtree.evolution.site_model.SiteModel.handle_model_changed"]], "handle_parameter_changed() (torchtree.evolution.site_model.sitemodel method)": [[58, "torchtree.evolution.site_model.SiteModel.handle_parameter_changed"]], "invariant (torchtree.evolution.site_model.invariantsitemodel property)": [[58, "torchtree.evolution.site_model.InvariantSiteModel.invariant"]], "invariant (torchtree.evolution.site_model.univariatediscretizedsitemodel property)": [[58, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel.invariant"]], "inverse_cdf() (torchtree.evolution.site_model.univariatediscretizedsitemodel method)": [[58, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel.inverse_cdf"]], "inverse_cdf() (torchtree.evolution.site_model.weibullsitemodel method)": [[58, "torchtree.evolution.site_model.WeibullSiteModel.inverse_cdf"]], "probabilities() (torchtree.evolution.site_model.constantsitemodel method)": [[58, "torchtree.evolution.site_model.ConstantSiteModel.probabilities"]], "probabilities() (torchtree.evolution.site_model.invariantsitemodel method)": [[58, "torchtree.evolution.site_model.InvariantSiteModel.probabilities"]], "probabilities() (torchtree.evolution.site_model.sitemodel method)": [[58, "torchtree.evolution.site_model.SiteModel.probabilities"]], "probabilities() (torchtree.evolution.site_model.univariatediscretizedsitemodel method)": [[58, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel.probabilities"]], "rates() (torchtree.evolution.site_model.constantsitemodel method)": [[58, "torchtree.evolution.site_model.ConstantSiteModel.rates"]], "rates() (torchtree.evolution.site_model.invariantsitemodel method)": [[58, "torchtree.evolution.site_model.InvariantSiteModel.rates"]], "rates() (torchtree.evolution.site_model.sitemodel method)": [[58, "torchtree.evolution.site_model.SiteModel.rates"]], "rates() (torchtree.evolution.site_model.univariatediscretizedsitemodel method)": [[58, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel.rates"]], "shape (torchtree.evolution.site_model.weibullsitemodel property)": [[58, "torchtree.evolution.site_model.WeibullSiteModel.shape"]], "to() (torchtree.evolution.site_model.constantsitemodel method)": [[58, "torchtree.evolution.site_model.ConstantSiteModel.to"]], "to() (torchtree.evolution.site_model.invariantsitemodel method)": [[58, "torchtree.evolution.site_model.InvariantSiteModel.to"]], "to() (torchtree.evolution.site_model.univariatediscretizedsitemodel method)": [[58, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel.to"]], "torchtree.evolution.site_model": [[58, "module-torchtree.evolution.site_model"]], "update_rates() (torchtree.evolution.site_model.univariatediscretizedsitemodel method)": [[58, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel.update_rates"]], "update_rates_probs() (torchtree.evolution.site_model.invariantsitemodel method)": [[58, "torchtree.evolution.site_model.InvariantSiteModel.update_rates_probs"]], "sitepattern (class in torchtree.evolution.site_pattern)": [[59, "torchtree.evolution.site_pattern.SitePattern"]], "compress() (in module torchtree.evolution.site_pattern)": [[59, "torchtree.evolution.site_pattern.compress"]], "compress_alignment() (in module torchtree.evolution.site_pattern)": [[59, "torchtree.evolution.site_pattern.compress_alignment"]], "compress_alignment_states() (in module torchtree.evolution.site_pattern)": [[59, "torchtree.evolution.site_pattern.compress_alignment_states"]], "compute_tips_partials() (torchtree.evolution.site_pattern.sitepattern method)": [[59, "torchtree.evolution.site_pattern.SitePattern.compute_tips_partials"]], "compute_tips_states() (torchtree.evolution.site_pattern.sitepattern method)": [[59, "torchtree.evolution.site_pattern.SitePattern.compute_tips_states"]], "cpu() (torchtree.evolution.site_pattern.sitepattern method)": [[59, "torchtree.evolution.site_pattern.SitePattern.cpu"]], "cuda() (torchtree.evolution.site_pattern.sitepattern method)": [[59, "torchtree.evolution.site_pattern.SitePattern.cuda"]], "from_json() (torchtree.evolution.site_pattern.sitepattern class method)": [[59, "torchtree.evolution.site_pattern.SitePattern.from_json"]], "handle_model_changed() (torchtree.evolution.site_pattern.sitepattern method)": [[59, "torchtree.evolution.site_pattern.SitePattern.handle_model_changed"]], "handle_parameter_changed() (torchtree.evolution.site_pattern.sitepattern method)": [[59, "torchtree.evolution.site_pattern.SitePattern.handle_parameter_changed"]], "torchtree.evolution.site_pattern": [[59, "module-torchtree.evolution.site_pattern"]], "abstractsubstitutionmodel (class in torchtree.evolution.substitution_model.abstract)": [[60, "torchtree.evolution.substitution_model.abstract.AbstractSubstitutionModel"]], "nonsymmetricsubstitutionmodel (class in torchtree.evolution.substitution_model.abstract)": [[60, "torchtree.evolution.substitution_model.abstract.NonSymmetricSubstitutionModel"]], "substitutionmodel (class in torchtree.evolution.substitution_model.abstract)": [[60, "torchtree.evolution.substitution_model.abstract.SubstitutionModel"]], "symmetricsubstitutionmodel (class in torchtree.evolution.substitution_model.abstract)": [[60, "torchtree.evolution.substitution_model.abstract.SymmetricSubstitutionModel"]], "eigen() (torchtree.evolution.substitution_model.abstract.nonsymmetricsubstitutionmodel method)": [[60, "torchtree.evolution.substitution_model.abstract.NonSymmetricSubstitutionModel.eigen"]], "eigen() (torchtree.evolution.substitution_model.abstract.symmetricsubstitutionmodel method)": [[60, "torchtree.evolution.substitution_model.abstract.SymmetricSubstitutionModel.eigen"]], "frequencies (torchtree.evolution.substitution_model.abstract.abstractsubstitutionmodel property)": [[60, "torchtree.evolution.substitution_model.abstract.AbstractSubstitutionModel.frequencies"]], "frequencies (torchtree.evolution.substitution_model.abstract.substitutionmodel property)": [[60, "torchtree.evolution.substitution_model.abstract.SubstitutionModel.frequencies"]], "norm() (torchtree.evolution.substitution_model.abstract.abstractsubstitutionmodel method)": [[60, "torchtree.evolution.substitution_model.abstract.AbstractSubstitutionModel.norm"]], "p_t() (torchtree.evolution.substitution_model.abstract.nonsymmetricsubstitutionmodel method)": [[60, "torchtree.evolution.substitution_model.abstract.NonSymmetricSubstitutionModel.p_t"]], "p_t() (torchtree.evolution.substitution_model.abstract.substitutionmodel method)": [[60, "torchtree.evolution.substitution_model.abstract.SubstitutionModel.p_t"]], "p_t() (torchtree.evolution.substitution_model.abstract.symmetricsubstitutionmodel method)": [[60, "torchtree.evolution.substitution_model.abstract.SymmetricSubstitutionModel.p_t"]], "q() (torchtree.evolution.substitution_model.abstract.substitutionmodel method)": [[60, "torchtree.evolution.substitution_model.abstract.SubstitutionModel.q"]], "rates (torchtree.evolution.substitution_model.abstract.substitutionmodel property)": [[60, "torchtree.evolution.substitution_model.abstract.SubstitutionModel.rates"]], "torchtree.evolution.substitution_model.abstract": [[60, "module-torchtree.evolution.substitution_model.abstract"]], "lg (class in torchtree.evolution.substitution_model.amino_acid)": [[61, "torchtree.evolution.substitution_model.amino_acid.LG"]], "wag (class in torchtree.evolution.substitution_model.amino_acid)": [[61, "torchtree.evolution.substitution_model.amino_acid.WAG"]], "from_json() (torchtree.evolution.substitution_model.amino_acid.lg class method)": [[61, "torchtree.evolution.substitution_model.amino_acid.LG.from_json"]], "from_json() (torchtree.evolution.substitution_model.amino_acid.wag class method)": [[61, "torchtree.evolution.substitution_model.amino_acid.WAG.from_json"]], "rates (torchtree.evolution.substitution_model.amino_acid.lg property)": [[61, "torchtree.evolution.substitution_model.amino_acid.LG.rates"]], "rates (torchtree.evolution.substitution_model.amino_acid.wag property)": [[61, "torchtree.evolution.substitution_model.amino_acid.WAG.rates"]], "torchtree.evolution.substitution_model.amino_acid": [[61, "module-torchtree.evolution.substitution_model.amino_acid"]], "mg94 (class in torchtree.evolution.substitution_model.codon)": [[62, "torchtree.evolution.substitution_model.codon.MG94"]], "from_json() (torchtree.evolution.substitution_model.codon.mg94 class method)": [[62, "torchtree.evolution.substitution_model.codon.MG94.from_json"]], "handle_model_changed() (torchtree.evolution.substitution_model.codon.mg94 method)": [[62, "torchtree.evolution.substitution_model.codon.MG94.handle_model_changed"]], "handle_parameter_changed() (torchtree.evolution.substitution_model.codon.mg94 method)": [[62, "torchtree.evolution.substitution_model.codon.MG94.handle_parameter_changed"]], "q() (torchtree.evolution.substitution_model.codon.mg94 method)": [[62, "torchtree.evolution.substitution_model.codon.MG94.q"]], "rates (torchtree.evolution.substitution_model.codon.mg94 property)": [[62, "torchtree.evolution.substitution_model.codon.MG94.rates"]], "torchtree.evolution.substitution_model.codon": [[62, "module-torchtree.evolution.substitution_model.codon"]], "empiricalsubstitutionmodel (class in torchtree.evolution.substitution_model.general)": [[63, "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel"]], "generaljc69 (class in torchtree.evolution.substitution_model.general)": [[63, "torchtree.evolution.substitution_model.general.GeneralJC69"]], "generalnonsymmetricsubstitutionmodel (class in torchtree.evolution.substitution_model.general)": [[63, "torchtree.evolution.substitution_model.general.GeneralNonSymmetricSubstitutionModel"]], "generalsymmetricsubstitutionmodel (class in torchtree.evolution.substitution_model.general)": [[63, "torchtree.evolution.substitution_model.general.GeneralSymmetricSubstitutionModel"]], "cpu() (torchtree.evolution.substitution_model.general.generaljc69 method)": [[63, "torchtree.evolution.substitution_model.general.GeneralJC69.cpu"]], "create_rate_matrix() (torchtree.evolution.substitution_model.general.empiricalsubstitutionmodel static method)": [[63, "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel.create_rate_matrix"]], "cuda() (torchtree.evolution.substitution_model.general.generaljc69 method)": [[63, "torchtree.evolution.substitution_model.general.GeneralJC69.cuda"]], "eigen() (torchtree.evolution.substitution_model.general.empiricalsubstitutionmodel method)": [[63, "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel.eigen"]], "frequencies (torchtree.evolution.substitution_model.general.empiricalsubstitutionmodel property)": [[63, "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel.frequencies"]], "frequencies (torchtree.evolution.substitution_model.general.generaljc69 property)": [[63, "torchtree.evolution.substitution_model.general.GeneralJC69.frequencies"]], "from_json() (torchtree.evolution.substitution_model.general.empiricalsubstitutionmodel class method)": [[63, "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel.from_json"]], "from_json() (torchtree.evolution.substitution_model.general.generaljc69 class method)": [[63, "torchtree.evolution.substitution_model.general.GeneralJC69.from_json"]], "from_json() (torchtree.evolution.substitution_model.general.generalnonsymmetricsubstitutionmodel class method)": [[63, "torchtree.evolution.substitution_model.general.GeneralNonSymmetricSubstitutionModel.from_json"]], "from_json() (torchtree.evolution.substitution_model.general.generalsymmetricsubstitutionmodel class method)": [[63, "torchtree.evolution.substitution_model.general.GeneralSymmetricSubstitutionModel.from_json"]], "handle_model_changed() (torchtree.evolution.substitution_model.general.empiricalsubstitutionmodel method)": [[63, "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel.handle_model_changed"]], "handle_model_changed() (torchtree.evolution.substitution_model.general.generaljc69 method)": [[63, "torchtree.evolution.substitution_model.general.GeneralJC69.handle_model_changed"]], "handle_model_changed() (torchtree.evolution.substitution_model.general.generalnonsymmetricsubstitutionmodel method)": [[63, "torchtree.evolution.substitution_model.general.GeneralNonSymmetricSubstitutionModel.handle_model_changed"]], "handle_model_changed() (torchtree.evolution.substitution_model.general.generalsymmetricsubstitutionmodel method)": [[63, "torchtree.evolution.substitution_model.general.GeneralSymmetricSubstitutionModel.handle_model_changed"]], "handle_parameter_changed() (torchtree.evolution.substitution_model.general.empiricalsubstitutionmodel method)": [[63, "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.evolution.substitution_model.general.generaljc69 method)": [[63, "torchtree.evolution.substitution_model.general.GeneralJC69.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.evolution.substitution_model.general.generalnonsymmetricsubstitutionmodel method)": [[63, "torchtree.evolution.substitution_model.general.GeneralNonSymmetricSubstitutionModel.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.evolution.substitution_model.general.generalsymmetricsubstitutionmodel method)": [[63, "torchtree.evolution.substitution_model.general.GeneralSymmetricSubstitutionModel.handle_parameter_changed"]], "p_t() (torchtree.evolution.substitution_model.general.empiricalsubstitutionmodel method)": [[63, "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel.p_t"]], "p_t() (torchtree.evolution.substitution_model.general.generaljc69 method)": [[63, "torchtree.evolution.substitution_model.general.GeneralJC69.p_t"]], "q() (torchtree.evolution.substitution_model.general.empiricalsubstitutionmodel method)": [[63, "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel.q"]], "q() (torchtree.evolution.substitution_model.general.generaljc69 method)": [[63, "torchtree.evolution.substitution_model.general.GeneralJC69.q"]], "q() (torchtree.evolution.substitution_model.general.generalnonsymmetricsubstitutionmodel method)": [[63, "torchtree.evolution.substitution_model.general.GeneralNonSymmetricSubstitutionModel.q"]], "q() (torchtree.evolution.substitution_model.general.generalsymmetricsubstitutionmodel method)": [[63, "torchtree.evolution.substitution_model.general.GeneralSymmetricSubstitutionModel.q"]], "rates (torchtree.evolution.substitution_model.general.generaljc69 property)": [[63, "torchtree.evolution.substitution_model.general.GeneralJC69.rates"]], "rates (torchtree.evolution.substitution_model.general.generalnonsymmetricsubstitutionmodel property)": [[63, "torchtree.evolution.substitution_model.general.GeneralNonSymmetricSubstitutionModel.rates"]], "rates (torchtree.evolution.substitution_model.general.generalsymmetricsubstitutionmodel property)": [[63, "torchtree.evolution.substitution_model.general.GeneralSymmetricSubstitutionModel.rates"]], "torchtree.evolution.substitution_model.general": [[63, "module-torchtree.evolution.substitution_model.general"]], "torchtree.evolution.substitution_model": [[64, "module-torchtree.evolution.substitution_model"]], "gtr (class in torchtree.evolution.substitution_model.nucleotide)": [[65, "torchtree.evolution.substitution_model.nucleotide.GTR"]], "hky (class in torchtree.evolution.substitution_model.nucleotide)": [[65, "torchtree.evolution.substitution_model.nucleotide.HKY"]], "jc69 (class in torchtree.evolution.substitution_model.nucleotide)": [[65, "torchtree.evolution.substitution_model.nucleotide.JC69"]], "cpu() (torchtree.evolution.substitution_model.nucleotide.jc69 method)": [[65, "torchtree.evolution.substitution_model.nucleotide.JC69.cpu"]], "cuda() (torchtree.evolution.substitution_model.nucleotide.jc69 method)": [[65, "torchtree.evolution.substitution_model.nucleotide.JC69.cuda"]], "frequencies (torchtree.evolution.substitution_model.nucleotide.jc69 property)": [[65, "torchtree.evolution.substitution_model.nucleotide.JC69.frequencies"]], "from_json() (torchtree.evolution.substitution_model.nucleotide.gtr class method)": [[65, "torchtree.evolution.substitution_model.nucleotide.GTR.from_json"]], "from_json() (torchtree.evolution.substitution_model.nucleotide.hky class method)": [[65, "torchtree.evolution.substitution_model.nucleotide.HKY.from_json"]], "from_json() (torchtree.evolution.substitution_model.nucleotide.jc69 class method)": [[65, "torchtree.evolution.substitution_model.nucleotide.JC69.from_json"]], "handle_model_changed() (torchtree.evolution.substitution_model.nucleotide.gtr method)": [[65, "torchtree.evolution.substitution_model.nucleotide.GTR.handle_model_changed"]], "handle_model_changed() (torchtree.evolution.substitution_model.nucleotide.hky method)": [[65, "torchtree.evolution.substitution_model.nucleotide.HKY.handle_model_changed"]], "handle_model_changed() (torchtree.evolution.substitution_model.nucleotide.jc69 method)": [[65, "torchtree.evolution.substitution_model.nucleotide.JC69.handle_model_changed"]], "handle_parameter_changed() (torchtree.evolution.substitution_model.nucleotide.gtr method)": [[65, "torchtree.evolution.substitution_model.nucleotide.GTR.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.evolution.substitution_model.nucleotide.hky method)": [[65, "torchtree.evolution.substitution_model.nucleotide.HKY.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.evolution.substitution_model.nucleotide.jc69 method)": [[65, "torchtree.evolution.substitution_model.nucleotide.JC69.handle_parameter_changed"]], "kappa (torchtree.evolution.substitution_model.nucleotide.hky property)": [[65, "torchtree.evolution.substitution_model.nucleotide.HKY.kappa"]], "p_t() (torchtree.evolution.substitution_model.nucleotide.jc69 method)": [[65, "torchtree.evolution.substitution_model.nucleotide.JC69.p_t"]], "p_t_analytical() (torchtree.evolution.substitution_model.nucleotide.hky method)": [[65, "torchtree.evolution.substitution_model.nucleotide.HKY.p_t_analytical"]], "q() (torchtree.evolution.substitution_model.nucleotide.gtr method)": [[65, "torchtree.evolution.substitution_model.nucleotide.GTR.q"]], "q() (torchtree.evolution.substitution_model.nucleotide.hky method)": [[65, "torchtree.evolution.substitution_model.nucleotide.HKY.q"]], "q() (torchtree.evolution.substitution_model.nucleotide.jc69 method)": [[65, "torchtree.evolution.substitution_model.nucleotide.JC69.q"]], "rates (torchtree.evolution.substitution_model.nucleotide.gtr property)": [[65, "torchtree.evolution.substitution_model.nucleotide.GTR.rates"]], "rates (torchtree.evolution.substitution_model.nucleotide.hky property)": [[65, "torchtree.evolution.substitution_model.nucleotide.HKY.rates"]], "rates (torchtree.evolution.substitution_model.nucleotide.jc69 property)": [[65, "torchtree.evolution.substitution_model.nucleotide.JC69.rates"]], "torchtree.evolution.substitution_model.nucleotide": [[65, "module-torchtree.evolution.substitution_model.nucleotide"]], "taxa (class in torchtree.evolution.taxa)": [[66, "torchtree.evolution.taxa.Taxa"]], "taxon (class in torchtree.evolution.taxa)": [[66, "torchtree.evolution.taxa.Taxon"]], "from_json() (torchtree.evolution.taxa.taxa class method)": [[66, "torchtree.evolution.taxa.Taxa.from_json"]], "from_json() (torchtree.evolution.taxa.taxon class method)": [[66, "torchtree.evolution.taxa.Taxon.from_json"]], "torchtree.evolution.taxa": [[66, "module-torchtree.evolution.taxa"]], "differencenodeheighttransform (class in torchtree.evolution.tree_height_transform)": [[67, "torchtree.evolution.tree_height_transform.DifferenceNodeHeightTransform"]], "generalnodeheighttransform (class in torchtree.evolution.tree_height_transform)": [[67, "torchtree.evolution.tree_height_transform.GeneralNodeHeightTransform"]], "bijective (torchtree.evolution.tree_height_transform.differencenodeheighttransform attribute)": [[67, "torchtree.evolution.tree_height_transform.DifferenceNodeHeightTransform.bijective"]], "bijective (torchtree.evolution.tree_height_transform.generalnodeheighttransform attribute)": [[67, "torchtree.evolution.tree_height_transform.GeneralNodeHeightTransform.bijective"]], "log_abs_det_jacobian() (torchtree.evolution.tree_height_transform.differencenodeheighttransform method)": [[67, "torchtree.evolution.tree_height_transform.DifferenceNodeHeightTransform.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torchtree.evolution.tree_height_transform.generalnodeheighttransform method)": [[67, "torchtree.evolution.tree_height_transform.GeneralNodeHeightTransform.log_abs_det_jacobian"]], "sign (torchtree.evolution.tree_height_transform.differencenodeheighttransform attribute)": [[67, "torchtree.evolution.tree_height_transform.DifferenceNodeHeightTransform.sign"]], "sign (torchtree.evolution.tree_height_transform.generalnodeheighttransform attribute)": [[67, "torchtree.evolution.tree_height_transform.GeneralNodeHeightTransform.sign"]], "sort_indices() (torchtree.evolution.tree_height_transform.generalnodeheighttransform method)": [[67, "torchtree.evolution.tree_height_transform.GeneralNodeHeightTransform.sort_indices"]], "torchtree.evolution.tree_height_transform": [[67, "module-torchtree.evolution.tree_height_transform"]], "update_bounds() (torchtree.evolution.tree_height_transform.generalnodeheighttransform method)": [[67, "torchtree.evolution.tree_height_transform.GeneralNodeHeightTransform.update_bounds"]], "treelikelihoodmodel (class in torchtree.evolution.tree_likelihood)": [[68, "torchtree.evolution.tree_likelihood.TreeLikelihoodModel"]], "calculate_treelikelihood() (in module torchtree.evolution.tree_likelihood)": [[68, "torchtree.evolution.tree_likelihood.calculate_treelikelihood"]], "calculate_treelikelihood_discrete() (in module torchtree.evolution.tree_likelihood)": [[68, "torchtree.evolution.tree_likelihood.calculate_treelikelihood_discrete"]], "calculate_treelikelihood_discrete_rescaled() (in module torchtree.evolution.tree_likelihood)": [[68, "torchtree.evolution.tree_likelihood.calculate_treelikelihood_discrete_rescaled"]], "calculate_treelikelihood_discrete_safe() (in module torchtree.evolution.tree_likelihood)": [[68, "torchtree.evolution.tree_likelihood.calculate_treelikelihood_discrete_safe"]], "calculate_treelikelihood_tip_states_discrete() (in module torchtree.evolution.tree_likelihood)": [[68, "torchtree.evolution.tree_likelihood.calculate_treelikelihood_tip_states_discrete"]], "calculate_treelikelihood_tip_states_discrete_rescaled() (in module torchtree.evolution.tree_likelihood)": [[68, "torchtree.evolution.tree_likelihood.calculate_treelikelihood_tip_states_discrete_rescaled"]], "calculate_with_tip_partials() (torchtree.evolution.tree_likelihood.treelikelihoodmodel method)": [[68, "torchtree.evolution.tree_likelihood.TreeLikelihoodModel.calculate_with_tip_partials"]], "calculate_with_tip_states() (torchtree.evolution.tree_likelihood.treelikelihoodmodel method)": [[68, "torchtree.evolution.tree_likelihood.TreeLikelihoodModel.calculate_with_tip_states"]], "from_json() (torchtree.evolution.tree_likelihood.treelikelihoodmodel class method)": [[68, "torchtree.evolution.tree_likelihood.TreeLikelihoodModel.from_json"]], "handle_parameter_changed() (torchtree.evolution.tree_likelihood.treelikelihoodmodel method)": [[68, "torchtree.evolution.tree_likelihood.TreeLikelihoodModel.handle_parameter_changed"]], "torchtree.evolution.tree_likelihood": [[68, "module-torchtree.evolution.tree_likelihood"]], "abstracttreemodel (class in torchtree.evolution.tree_model)": [[69, "torchtree.evolution.tree_model.AbstractTreeModel"]], "reparameterizedtimetreemodel (class in torchtree.evolution.tree_model)": [[69, "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel"]], "timetreemodel (class in torchtree.evolution.tree_model)": [[69, "torchtree.evolution.tree_model.TimeTreeModel"]], "treemodel (class in torchtree.evolution.tree_model)": [[69, "torchtree.evolution.tree_model.TreeModel"]], "unrootedtreemodel (class in torchtree.evolution.tree_model)": [[69, "torchtree.evolution.tree_model.UnRootedTreeModel"]], "as_newick() (torchtree.evolution.tree_model.abstracttreemodel method)": [[69, "torchtree.evolution.tree_model.AbstractTreeModel.as_newick"]], "branch_lengths() (torchtree.evolution.tree_model.timetreemodel method)": [[69, "torchtree.evolution.tree_model.TimeTreeModel.branch_lengths"]], "branch_lengths() (torchtree.evolution.tree_model.treemodel method)": [[69, "torchtree.evolution.tree_model.TreeModel.branch_lengths"]], "branch_lengths() (torchtree.evolution.tree_model.unrootedtreemodel method)": [[69, "torchtree.evolution.tree_model.UnRootedTreeModel.branch_lengths"]], "cpu() (torchtree.evolution.tree_model.reparameterizedtimetreemodel method)": [[69, "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel.cpu"]], "cpu() (torchtree.evolution.tree_model.timetreemodel method)": [[69, "torchtree.evolution.tree_model.TimeTreeModel.cpu"]], "cuda() (torchtree.evolution.tree_model.reparameterizedtimetreemodel method)": [[69, "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel.cuda"]], "cuda() (torchtree.evolution.tree_model.timetreemodel method)": [[69, "torchtree.evolution.tree_model.TimeTreeModel.cuda"]], "from_json() (torchtree.evolution.tree_model.reparameterizedtimetreemodel class method)": [[69, "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel.from_json"]], "from_json() (torchtree.evolution.tree_model.timetreemodel class method)": [[69, "torchtree.evolution.tree_model.TimeTreeModel.from_json"]], "from_json() (torchtree.evolution.tree_model.unrootedtreemodel class method)": [[69, "torchtree.evolution.tree_model.UnRootedTreeModel.from_json"]], "handle_model_changed() (torchtree.evolution.tree_model.abstracttreemodel method)": [[69, "torchtree.evolution.tree_model.AbstractTreeModel.handle_model_changed"]], "handle_model_changed() (torchtree.evolution.tree_model.reparameterizedtimetreemodel method)": [[69, "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel.handle_model_changed"]], "handle_parameter_changed() (torchtree.evolution.tree_model.reparameterizedtimetreemodel method)": [[69, "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.evolution.tree_model.timetreemodel method)": [[69, "torchtree.evolution.tree_model.TimeTreeModel.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.evolution.tree_model.unrootedtreemodel method)": [[69, "torchtree.evolution.tree_model.UnRootedTreeModel.handle_parameter_changed"]], "heights_from_branch_lengths() (in module torchtree.evolution.tree_model)": [[69, "torchtree.evolution.tree_model.heights_from_branch_lengths"]], "heights_to_branch_lengths() (in module torchtree.evolution.tree_model)": [[69, "torchtree.evolution.tree_model.heights_to_branch_lengths"]], "initialize_dates_from_taxa() (in module torchtree.evolution.tree_model)": [[69, "torchtree.evolution.tree_model.initialize_dates_from_taxa"]], "json_factory() (torchtree.evolution.tree_model.reparameterizedtimetreemodel static method)": [[69, "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel.json_factory"]], "json_factory() (torchtree.evolution.tree_model.timetreemodel static method)": [[69, "torchtree.evolution.tree_model.TimeTreeModel.json_factory"]], "json_factory() (torchtree.evolution.tree_model.unrootedtreemodel static method)": [[69, "torchtree.evolution.tree_model.UnRootedTreeModel.json_factory"]], "node_heights (torchtree.evolution.tree_model.reparameterizedtimetreemodel property)": [[69, "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel.node_heights"]], "node_heights (torchtree.evolution.tree_model.timetreemodel property)": [[69, "torchtree.evolution.tree_model.TimeTreeModel.node_heights"]], "parse_tree() (in module torchtree.evolution.tree_model)": [[69, "torchtree.evolution.tree_model.parse_tree"]], "postorder (torchtree.evolution.tree_model.abstracttreemodel property)": [[69, "torchtree.evolution.tree_model.AbstractTreeModel.postorder"]], "postorder (torchtree.evolution.tree_model.treemodel property)": [[69, "torchtree.evolution.tree_model.TreeModel.postorder"]], "setup_dates() (in module torchtree.evolution.tree_model)": [[69, "torchtree.evolution.tree_model.setup_dates"]], "setup_indexes() (in module torchtree.evolution.tree_model)": [[69, "torchtree.evolution.tree_model.setup_indexes"]], "taxa (torchtree.evolution.tree_model.abstracttreemodel property)": [[69, "torchtree.evolution.tree_model.AbstractTreeModel.taxa"]], "taxa (torchtree.evolution.tree_model.treemodel property)": [[69, "torchtree.evolution.tree_model.TreeModel.taxa"]], "torchtree.evolution.tree_model": [[69, "module-torchtree.evolution.tree_model"]], "update_leaf_heights() (torchtree.evolution.tree_model.timetreemodel method)": [[69, "torchtree.evolution.tree_model.TimeTreeModel.update_leaf_heights"]], "update_node_heights() (torchtree.evolution.tree_model.reparameterizedtimetreemodel method)": [[69, "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel.update_node_heights"]], "update_traversals() (torchtree.evolution.tree_model.abstracttreemodel method)": [[69, "torchtree.evolution.tree_model.AbstractTreeModel.update_traversals"]], "update_traversals() (torchtree.evolution.tree_model.timetreemodel method)": [[69, "torchtree.evolution.tree_model.TimeTreeModel.update_traversals"]], "write_newick() (torchtree.evolution.tree_model.abstracttreemodel method)": [[69, "torchtree.evolution.tree_model.AbstractTreeModel.write_newick"]], "write_newick() (torchtree.evolution.tree_model.treemodel method)": [[69, "torchtree.evolution.tree_model.TreeModel.write_newick"]], "flexibletimetreemodel (class in torchtree.evolution.tree_model_flexible)": [[70, "torchtree.evolution.tree_model_flexible.FlexibleTimeTreeModel"]], "from_json() (torchtree.evolution.tree_model_flexible.flexibletimetreemodel class method)": [[70, "torchtree.evolution.tree_model_flexible.FlexibleTimeTreeModel.from_json"]], "json_factory() (torchtree.evolution.tree_model_flexible.flexibletimetreemodel static method)": [[70, "torchtree.evolution.tree_model_flexible.FlexibleTimeTreeModel.json_factory"]], "torchtree.evolution.tree_model_flexible": [[70, "module-torchtree.evolution.tree_model_flexible"]], "linear_regression() (in module torchtree.evolution.tree_regression)": [[71, "torchtree.evolution.tree_regression.linear_regression"]], "torchtree.evolution.tree_regression": [[71, "module-torchtree.evolution.tree_regression"]], "torchtree": [[72, "module-torchtree"]], "adaptivestepsize (class in torchtree.inference.hmc.adaptation)": [[73, "torchtree.inference.hmc.adaptation.AdaptiveStepSize"]], "adaptor (class in torchtree.inference.hmc.adaptation)": [[73, "torchtree.inference.hmc.adaptation.Adaptor"]], "dualaveragingstepsize (class in torchtree.inference.hmc.adaptation)": [[73, "torchtree.inference.hmc.adaptation.DualAveragingStepSize"]], "massmatrixadaptor (class in torchtree.inference.hmc.adaptation)": [[73, "torchtree.inference.hmc.adaptation.MassMatrixAdaptor"]], "warmupadaptation (class in torchtree.inference.hmc.adaptation)": [[73, "torchtree.inference.hmc.adaptation.WarmupAdaptation"]], "find_reasonable_step_size() (in module torchtree.inference.hmc.adaptation)": [[73, "torchtree.inference.hmc.adaptation.find_reasonable_step_size"]], "from_json() (torchtree.inference.hmc.adaptation.adaptivestepsize class method)": [[73, "torchtree.inference.hmc.adaptation.AdaptiveStepSize.from_json"]], "from_json() (torchtree.inference.hmc.adaptation.dualaveragingstepsize class method)": [[73, "torchtree.inference.hmc.adaptation.DualAveragingStepSize.from_json"]], "from_json() (torchtree.inference.hmc.adaptation.massmatrixadaptor class method)": [[73, "torchtree.inference.hmc.adaptation.MassMatrixAdaptor.from_json"]], "inverse_mass_matrix (torchtree.inference.hmc.adaptation.warmupadaptation property)": [[73, "torchtree.inference.hmc.adaptation.WarmupAdaptation.inverse_mass_matrix"]], "learn() (torchtree.inference.hmc.adaptation.adaptivestepsize method)": [[73, "torchtree.inference.hmc.adaptation.AdaptiveStepSize.learn"]], "learn() (torchtree.inference.hmc.adaptation.adaptor method)": [[73, "torchtree.inference.hmc.adaptation.Adaptor.learn"]], "learn() (torchtree.inference.hmc.adaptation.dualaveragingstepsize method)": [[73, "torchtree.inference.hmc.adaptation.DualAveragingStepSize.learn"]], "learn() (torchtree.inference.hmc.adaptation.massmatrixadaptor method)": [[73, "torchtree.inference.hmc.adaptation.MassMatrixAdaptor.learn"]], "load_state_dict() (torchtree.inference.hmc.adaptation.adaptivestepsize method)": [[73, "torchtree.inference.hmc.adaptation.AdaptiveStepSize.load_state_dict"]], "load_state_dict() (torchtree.inference.hmc.adaptation.adaptor method)": [[73, "torchtree.inference.hmc.adaptation.Adaptor.load_state_dict"]], "load_state_dict() (torchtree.inference.hmc.adaptation.dualaveragingstepsize method)": [[73, "torchtree.inference.hmc.adaptation.DualAveragingStepSize.load_state_dict"]], "load_state_dict() (torchtree.inference.hmc.adaptation.massmatrixadaptor method)": [[73, "torchtree.inference.hmc.adaptation.MassMatrixAdaptor.load_state_dict"]], "mass_matrix (torchtree.inference.hmc.adaptation.massmatrixadaptor property)": [[73, "torchtree.inference.hmc.adaptation.MassMatrixAdaptor.mass_matrix"]], "mass_matrix (torchtree.inference.hmc.adaptation.warmupadaptation property)": [[73, "torchtree.inference.hmc.adaptation.WarmupAdaptation.mass_matrix"]], "restart() (torchtree.inference.hmc.adaptation.adaptivestepsize method)": [[73, "torchtree.inference.hmc.adaptation.AdaptiveStepSize.restart"]], "restart() (torchtree.inference.hmc.adaptation.adaptor method)": [[73, "torchtree.inference.hmc.adaptation.Adaptor.restart"]], "restart() (torchtree.inference.hmc.adaptation.dualaveragingstepsize method)": [[73, "torchtree.inference.hmc.adaptation.DualAveragingStepSize.restart"]], "restart() (torchtree.inference.hmc.adaptation.massmatrixadaptor method)": [[73, "torchtree.inference.hmc.adaptation.MassMatrixAdaptor.restart"]], "sqrt_mass_matrix (torchtree.inference.hmc.adaptation.warmupadaptation property)": [[73, "torchtree.inference.hmc.adaptation.WarmupAdaptation.sqrt_mass_matrix"]], "state_dict() (torchtree.inference.hmc.adaptation.adaptor method)": [[73, "torchtree.inference.hmc.adaptation.Adaptor.state_dict"]], "step_size (torchtree.inference.hmc.adaptation.warmupadaptation property)": [[73, "torchtree.inference.hmc.adaptation.WarmupAdaptation.step_size"]], "torchtree.inference.hmc.adaptation": [[73, "module-torchtree.inference.hmc.adaptation"]], "hamiltonian (class in torchtree.inference.hmc.hamiltonian)": [[74, "torchtree.inference.hmc.hamiltonian.Hamiltonian"]], "from_json() (torchtree.inference.hmc.hamiltonian.hamiltonian class method)": [[74, "torchtree.inference.hmc.hamiltonian.Hamiltonian.from_json"]], "handle_parameter_changed() (torchtree.inference.hmc.hamiltonian.hamiltonian method)": [[74, "torchtree.inference.hmc.hamiltonian.Hamiltonian.handle_parameter_changed"]], "kinetic_energy() (torchtree.inference.hmc.hamiltonian.hamiltonian method)": [[74, "torchtree.inference.hmc.hamiltonian.Hamiltonian.kinetic_energy"]], "potential_energy() (torchtree.inference.hmc.hamiltonian.hamiltonian method)": [[74, "torchtree.inference.hmc.hamiltonian.Hamiltonian.potential_energy"]], "sample_momentum() (torchtree.inference.hmc.hamiltonian.hamiltonian method)": [[74, "torchtree.inference.hmc.hamiltonian.Hamiltonian.sample_momentum"]], "torchtree.inference.hmc.hamiltonian": [[74, "module-torchtree.inference.hmc.hamiltonian"]], "hmc (class in torchtree.inference.hmc.hmc)": [[75, "torchtree.inference.hmc.hmc.HMC"]], "find_reasonable_step_size() (torchtree.inference.hmc.hmc.hmc method)": [[75, "torchtree.inference.hmc.hmc.HMC.find_reasonable_step_size"]], "from_json() (torchtree.inference.hmc.hmc.hmc class method)": [[75, "torchtree.inference.hmc.hmc.HMC.from_json"]], "hamiltonian() (torchtree.inference.hmc.hmc.hmc method)": [[75, "torchtree.inference.hmc.hmc.HMC.hamiltonian"]], "run() (torchtree.inference.hmc.hmc.hmc method)": [[75, "torchtree.inference.hmc.hmc.HMC.run"]], "sample_momentum() (torchtree.inference.hmc.hmc.hmc method)": [[75, "torchtree.inference.hmc.hmc.HMC.sample_momentum"]], "torchtree.inference.hmc.hmc": [[75, "module-torchtree.inference.hmc.hmc"]], "torchtree.inference.hmc": [[76, "module-torchtree.inference.hmc"]], "integrator (class in torchtree.inference.hmc.integrator)": [[77, "torchtree.inference.hmc.integrator.Integrator"]], "leapfrogintegrator (class in torchtree.inference.hmc.integrator)": [[77, "torchtree.inference.hmc.integrator.LeapfrogIntegrator"]], "from_json() (torchtree.inference.hmc.integrator.leapfrogintegrator class method)": [[77, "torchtree.inference.hmc.integrator.LeapfrogIntegrator.from_json"]], "load_state_dict() (torchtree.inference.hmc.integrator.integrator method)": [[77, "torchtree.inference.hmc.integrator.Integrator.load_state_dict"]], "load_state_dict() (torchtree.inference.hmc.integrator.leapfrogintegrator method)": [[77, "torchtree.inference.hmc.integrator.LeapfrogIntegrator.load_state_dict"]], "set_tensor() (in module torchtree.inference.hmc.integrator)": [[77, "torchtree.inference.hmc.integrator.set_tensor"]], "state_dict() (torchtree.inference.hmc.integrator.integrator method)": [[77, "torchtree.inference.hmc.integrator.Integrator.state_dict"]], "torchtree.inference.hmc.integrator": [[77, "module-torchtree.inference.hmc.integrator"]], "hmcoperator (class in torchtree.inference.hmc.operator)": [[78, "torchtree.inference.hmc.operator.HMCOperator"]], "adaptable_parameter() (torchtree.inference.hmc.operator.hmcoperator method)": [[78, "torchtree.inference.hmc.operator.HMCOperator.adaptable_parameter"]], "from_json() (torchtree.inference.hmc.operator.hmcoperator class method)": [[78, "torchtree.inference.hmc.operator.HMCOperator.from_json"]], "handle_parameter_changed() (torchtree.inference.hmc.operator.hmcoperator method)": [[78, "torchtree.inference.hmc.operator.HMCOperator.handle_parameter_changed"]], "mass_matrix (torchtree.inference.hmc.operator.hmcoperator property)": [[78, "torchtree.inference.hmc.operator.HMCOperator.mass_matrix"]], "set_adaptable_parameter() (torchtree.inference.hmc.operator.hmcoperator method)": [[78, "torchtree.inference.hmc.operator.HMCOperator.set_adaptable_parameter"]], "torchtree.inference.hmc.operator": [[78, "module-torchtree.inference.hmc.operator"]], "tune() (torchtree.inference.hmc.operator.hmcoperator method)": [[78, "torchtree.inference.hmc.operator.HMCOperator.tune"]], "tuning_parameter (torchtree.inference.hmc.operator.hmcoperator property)": [[78, "torchtree.inference.hmc.operator.HMCOperator.tuning_parameter"]], "update_mass_matrices() (torchtree.inference.hmc.operator.hmcoperator method)": [[78, "torchtree.inference.hmc.operator.HMCOperator.update_mass_matrices"]], "stanwindowedadaptation (class in torchtree.inference.hmc.stan_adaptation)": [[79, "torchtree.inference.hmc.stan_adaptation.StanWindowedAdaptation"]], "from_json() (torchtree.inference.hmc.stan_adaptation.stanwindowedadaptation class method)": [[79, "torchtree.inference.hmc.stan_adaptation.StanWindowedAdaptation.from_json"]], "learn() (torchtree.inference.hmc.stan_adaptation.stanwindowedadaptation method)": [[79, "torchtree.inference.hmc.stan_adaptation.StanWindowedAdaptation.learn"]], "restart() (torchtree.inference.hmc.stan_adaptation.stanwindowedadaptation method)": [[79, "torchtree.inference.hmc.stan_adaptation.StanWindowedAdaptation.restart"]], "torchtree.inference.hmc.stan_adaptation": [[79, "module-torchtree.inference.hmc.stan_adaptation"]], "torchtree.inference": [[80, "module-torchtree.inference"]], "gmrfpiecewisecoalescentblockupdatingoperator (class in torchtree.inference.mcmc.gmrf_block_updating)": [[81, "torchtree.inference.mcmc.gmrf_block_updating.GMRFPiecewiseCoalescentBlockUpdatingOperator"]], "adaptable_parameter() (torchtree.inference.mcmc.gmrf_block_updating.gmrfpiecewisecoalescentblockupdatingoperator method)": [[81, "torchtree.inference.mcmc.gmrf_block_updating.GMRFPiecewiseCoalescentBlockUpdatingOperator.adaptable_parameter"]], "from_json() (torchtree.inference.mcmc.gmrf_block_updating.gmrfpiecewisecoalescentblockupdatingoperator class method)": [[81, "torchtree.inference.mcmc.gmrf_block_updating.GMRFPiecewiseCoalescentBlockUpdatingOperator.from_json"]], "gradient() (torchtree.inference.mcmc.gmrf_block_updating.gmrfpiecewisecoalescentblockupdatingoperator method)": [[81, "torchtree.inference.mcmc.gmrf_block_updating.GMRFPiecewiseCoalescentBlockUpdatingOperator.gradient"]], "jacobian() (torchtree.inference.mcmc.gmrf_block_updating.gmrfpiecewisecoalescentblockupdatingoperator method)": [[81, "torchtree.inference.mcmc.gmrf_block_updating.GMRFPiecewiseCoalescentBlockUpdatingOperator.jacobian"]], "newton_raphson() (torchtree.inference.mcmc.gmrf_block_updating.gmrfpiecewisecoalescentblockupdatingoperator method)": [[81, "torchtree.inference.mcmc.gmrf_block_updating.GMRFPiecewiseCoalescentBlockUpdatingOperator.newton_raphson"]], "propose_precision() (torchtree.inference.mcmc.gmrf_block_updating.gmrfpiecewisecoalescentblockupdatingoperator method)": [[81, "torchtree.inference.mcmc.gmrf_block_updating.GMRFPiecewiseCoalescentBlockUpdatingOperator.propose_precision"]], "set_adaptable_parameter() (torchtree.inference.mcmc.gmrf_block_updating.gmrfpiecewisecoalescentblockupdatingoperator method)": [[81, "torchtree.inference.mcmc.gmrf_block_updating.GMRFPiecewiseCoalescentBlockUpdatingOperator.set_adaptable_parameter"]], "torchtree.inference.mcmc.gmrf_block_updating": [[81, "module-torchtree.inference.mcmc.gmrf_block_updating"]], "tuning_parameter (torchtree.inference.mcmc.gmrf_block_updating.gmrfpiecewisecoalescentblockupdatingoperator property)": [[81, "torchtree.inference.mcmc.gmrf_block_updating.GMRFPiecewiseCoalescentBlockUpdatingOperator.tuning_parameter"]], "torchtree.inference.mcmc": [[82, "module-torchtree.inference.mcmc"]], "mcmc (class in torchtree.inference.mcmc.mcmc)": [[83, "torchtree.inference.mcmc.mcmc.MCMC"]], "from_json() (torchtree.inference.mcmc.mcmc.mcmc class method)": [[83, "torchtree.inference.mcmc.mcmc.MCMC.from_json"]], "load_state_dict() (torchtree.inference.mcmc.mcmc.mcmc method)": [[83, "torchtree.inference.mcmc.mcmc.MCMC.load_state_dict"]], "run() (torchtree.inference.mcmc.mcmc.mcmc method)": [[83, "torchtree.inference.mcmc.mcmc.MCMC.run"]], "save_full_state() (torchtree.inference.mcmc.mcmc.mcmc method)": [[83, "torchtree.inference.mcmc.mcmc.MCMC.save_full_state"]], "state_dict() (torchtree.inference.mcmc.mcmc.mcmc method)": [[83, "torchtree.inference.mcmc.mcmc.MCMC.state_dict"]], "torchtree.inference.mcmc.mcmc": [[83, "module-torchtree.inference.mcmc.mcmc"]], "dirichletoperator (class in torchtree.inference.mcmc.operator)": [[84, "torchtree.inference.mcmc.operator.DirichletOperator"]], "mcmcoperator (class in torchtree.inference.mcmc.operator)": [[84, "torchtree.inference.mcmc.operator.MCMCOperator"]], "scaleroperator (class in torchtree.inference.mcmc.operator)": [[84, "torchtree.inference.mcmc.operator.ScalerOperator"]], "slidingwindowoperator (class in torchtree.inference.mcmc.operator)": [[84, "torchtree.inference.mcmc.operator.SlidingWindowOperator"]], "accept() (torchtree.inference.mcmc.operator.mcmcoperator method)": [[84, "torchtree.inference.mcmc.operator.MCMCOperator.accept"]], "adaptable_parameter (torchtree.inference.mcmc.operator.mcmcoperator property)": [[84, "torchtree.inference.mcmc.operator.MCMCOperator.adaptable_parameter"]], "adaptable_parameter() (torchtree.inference.mcmc.operator.dirichletoperator method)": [[84, "torchtree.inference.mcmc.operator.DirichletOperator.adaptable_parameter"]], "adaptable_parameter() (torchtree.inference.mcmc.operator.scaleroperator method)": [[84, "torchtree.inference.mcmc.operator.ScalerOperator.adaptable_parameter"]], "adaptable_parameter() (torchtree.inference.mcmc.operator.slidingwindowoperator method)": [[84, "torchtree.inference.mcmc.operator.SlidingWindowOperator.adaptable_parameter"]], "from_json() (torchtree.inference.mcmc.operator.dirichletoperator class method)": [[84, "torchtree.inference.mcmc.operator.DirichletOperator.from_json"]], "from_json() (torchtree.inference.mcmc.operator.scaleroperator class method)": [[84, "torchtree.inference.mcmc.operator.ScalerOperator.from_json"]], "from_json() (torchtree.inference.mcmc.operator.slidingwindowoperator class method)": [[84, "torchtree.inference.mcmc.operator.SlidingWindowOperator.from_json"]], "load_state_dict() (torchtree.inference.mcmc.operator.mcmcoperator method)": [[84, "torchtree.inference.mcmc.operator.MCMCOperator.load_state_dict"]], "reject() (torchtree.inference.mcmc.operator.mcmcoperator method)": [[84, "torchtree.inference.mcmc.operator.MCMCOperator.reject"]], "set_adaptable_parameter() (torchtree.inference.mcmc.operator.dirichletoperator method)": [[84, "torchtree.inference.mcmc.operator.DirichletOperator.set_adaptable_parameter"]], "set_adaptable_parameter() (torchtree.inference.mcmc.operator.mcmcoperator method)": [[84, "torchtree.inference.mcmc.operator.MCMCOperator.set_adaptable_parameter"]], "set_adaptable_parameter() (torchtree.inference.mcmc.operator.scaleroperator method)": [[84, "torchtree.inference.mcmc.operator.ScalerOperator.set_adaptable_parameter"]], "set_adaptable_parameter() (torchtree.inference.mcmc.operator.slidingwindowoperator method)": [[84, "torchtree.inference.mcmc.operator.SlidingWindowOperator.set_adaptable_parameter"]], "smoothed_acceptance_rate() (torchtree.inference.mcmc.operator.mcmcoperator method)": [[84, "torchtree.inference.mcmc.operator.MCMCOperator.smoothed_acceptance_rate"]], "state_dict() (torchtree.inference.mcmc.operator.mcmcoperator method)": [[84, "torchtree.inference.mcmc.operator.MCMCOperator.state_dict"]], "step() (torchtree.inference.mcmc.operator.mcmcoperator method)": [[84, "torchtree.inference.mcmc.operator.MCMCOperator.step"]], "torchtree.inference.mcmc.operator": [[84, "module-torchtree.inference.mcmc.operator"]], "tune() (torchtree.inference.mcmc.operator.mcmcoperator method)": [[84, "torchtree.inference.mcmc.operator.MCMCOperator.tune"]], "tuning_parameter (torchtree.inference.mcmc.operator.dirichletoperator property)": [[84, "torchtree.inference.mcmc.operator.DirichletOperator.tuning_parameter"]], "tuning_parameter (torchtree.inference.mcmc.operator.mcmcoperator property)": [[84, "torchtree.inference.mcmc.operator.MCMCOperator.tuning_parameter"]], "tuning_parameter (torchtree.inference.mcmc.operator.scaleroperator property)": [[84, "torchtree.inference.mcmc.operator.ScalerOperator.tuning_parameter"]], "tuning_parameter (torchtree.inference.mcmc.operator.slidingwindowoperator property)": [[84, "torchtree.inference.mcmc.operator.SlidingWindowOperator.tuning_parameter"]], "sampler (class in torchtree.inference.sampler)": [[85, "torchtree.inference.sampler.Sampler"]], "from_json() (torchtree.inference.sampler.sampler class method)": [[85, "torchtree.inference.sampler.Sampler.from_json"]], "run() (torchtree.inference.sampler.sampler method)": [[85, "torchtree.inference.sampler.Sampler.run"]], "torchtree.inference.sampler": [[85, "module-torchtree.inference.sampler"]], "extract_tensors_and_parameters() (in module torchtree.inference.utils)": [[86, "torchtree.inference.utils.extract_tensors_and_parameters"]], "torchtree.inference.utils": [[86, "module-torchtree.inference.utils"]], "energyfunctionmodel (class in torchtree.nf.energy_functions)": [[87, "torchtree.nf.energy_functions.EnergyFunctionModel"]], "from_json() (torchtree.nf.energy_functions.energyfunctionmodel class method)": [[87, "torchtree.nf.energy_functions.EnergyFunctionModel.from_json"]], "handle_model_changed() (torchtree.nf.energy_functions.energyfunctionmodel method)": [[87, "torchtree.nf.energy_functions.EnergyFunctionModel.handle_model_changed"]], "torchtree.nf.energy_functions": [[87, "module-torchtree.nf.energy_functions"]], "w1() (in module torchtree.nf.energy_functions)": [[87, "torchtree.nf.energy_functions.w1"]], "w2() (in module torchtree.nf.energy_functions)": [[87, "torchtree.nf.energy_functions.w2"]], "w3() (in module torchtree.nf.energy_functions)": [[87, "torchtree.nf.energy_functions.w3"]], "normalizingflow (class in torchtree.nf.flow)": [[88, "torchtree.nf.flow.NormalizingFlow"]], "apply_flow() (torchtree.nf.flow.normalizingflow method)": [[88, "torchtree.nf.flow.NormalizingFlow.apply_flow"]], "cpu() (torchtree.nf.flow.normalizingflow method)": [[88, "torchtree.nf.flow.NormalizingFlow.cpu"]], "cuda() (torchtree.nf.flow.normalizingflow method)": [[88, "torchtree.nf.flow.NormalizingFlow.cuda"]], "entropy() (torchtree.nf.flow.normalizingflow method)": [[88, "torchtree.nf.flow.NormalizingFlow.entropy"]], "forward() (torchtree.nf.flow.normalizingflow method)": [[88, "torchtree.nf.flow.NormalizingFlow.forward"]], "from_json() (torchtree.nf.flow.normalizingflow class method)": [[88, "torchtree.nf.flow.NormalizingFlow.from_json"]], "log_prob() (torchtree.nf.flow.normalizingflow method)": [[88, "torchtree.nf.flow.NormalizingFlow.log_prob"]], "parameters() (torchtree.nf.flow.normalizingflow method)": [[88, "torchtree.nf.flow.NormalizingFlow.parameters"]], "rsample() (torchtree.nf.flow.normalizingflow method)": [[88, "torchtree.nf.flow.NormalizingFlow.rsample"]], "sample() (torchtree.nf.flow.normalizingflow method)": [[88, "torchtree.nf.flow.NormalizingFlow.sample"]], "to() (torchtree.nf.flow.normalizingflow method)": [[88, "torchtree.nf.flow.NormalizingFlow.to"]], "torchtree.nf.flow": [[88, "module-torchtree.nf.flow"]], "torchtree.nf": [[89, "module-torchtree.nf"]], "planartransform (class in torchtree.nf.planar)": [[90, "torchtree.nf.planar.PlanarTransform"]], "forward() (torchtree.nf.planar.planartransform method)": [[90, "torchtree.nf.planar.PlanarTransform.forward"]], "log_abs_det_jacobian() (torchtree.nf.planar.planartransform method)": [[90, "torchtree.nf.planar.PlanarTransform.log_abs_det_jacobian"]], "torchtree.nf.planar": [[90, "module-torchtree.nf.planar"]], "u_hat() (torchtree.nf.planar.planartransform method)": [[90, "torchtree.nf.planar.PlanarTransform.u_hat"]], "batchnorm (class in torchtree.nf.realnvp)": [[91, "torchtree.nf.realnvp.BatchNorm"]], "flowsequential (class in torchtree.nf.realnvp)": [[91, "torchtree.nf.realnvp.FlowSequential"]], "linearmaskedcoupling (class in torchtree.nf.realnvp)": [[91, "torchtree.nf.realnvp.LinearMaskedCoupling"]], "realnvp (class in torchtree.nf.realnvp)": [[91, "torchtree.nf.realnvp.RealNVP"]], "apply_flow() (torchtree.nf.realnvp.realnvp method)": [[91, "torchtree.nf.realnvp.RealNVP.apply_flow"]], "batch_shape (torchtree.nf.realnvp.realnvp property)": [[91, "torchtree.nf.realnvp.RealNVP.batch_shape"]], "entropy() (torchtree.nf.realnvp.realnvp method)": [[91, "torchtree.nf.realnvp.RealNVP.entropy"]], "forward() (torchtree.nf.realnvp.batchnorm method)": [[91, "torchtree.nf.realnvp.BatchNorm.forward"]], "forward() (torchtree.nf.realnvp.flowsequential method)": [[91, "torchtree.nf.realnvp.FlowSequential.forward"]], "forward() (torchtree.nf.realnvp.linearmaskedcoupling method)": [[91, "torchtree.nf.realnvp.LinearMaskedCoupling.forward"]], "forward() (torchtree.nf.realnvp.realnvp method)": [[91, "torchtree.nf.realnvp.RealNVP.forward"]], "from_json() (torchtree.nf.realnvp.realnvp class method)": [[91, "torchtree.nf.realnvp.RealNVP.from_json"]], "inverse() (torchtree.nf.realnvp.batchnorm method)": [[91, "torchtree.nf.realnvp.BatchNorm.inverse"]], "inverse() (torchtree.nf.realnvp.flowsequential method)": [[91, "torchtree.nf.realnvp.FlowSequential.inverse"]], "inverse() (torchtree.nf.realnvp.linearmaskedcoupling method)": [[91, "torchtree.nf.realnvp.LinearMaskedCoupling.inverse"]], "inverse() (torchtree.nf.realnvp.realnvp method)": [[91, "torchtree.nf.realnvp.RealNVP.inverse"]], "log_prob() (torchtree.nf.realnvp.realnvp method)": [[91, "torchtree.nf.realnvp.RealNVP.log_prob"]], "parameters() (torchtree.nf.realnvp.realnvp method)": [[91, "torchtree.nf.realnvp.RealNVP.parameters"]], "rsample() (torchtree.nf.realnvp.realnvp method)": [[91, "torchtree.nf.realnvp.RealNVP.rsample"]], "sample() (torchtree.nf.realnvp.realnvp method)": [[91, "torchtree.nf.realnvp.RealNVP.sample"]], "torchtree.nf.realnvp": [[91, "module-torchtree.nf.realnvp"]], "torchtree.nn": [[92, "module-torchtree.nn"]], "module (class in torchtree.nn.module)": [[93, "torchtree.nn.module.Module"]], "cpu() (torchtree.nn.module.module method)": [[93, "torchtree.nn.module.Module.cpu"]], "cuda() (torchtree.nn.module.module method)": [[93, "torchtree.nn.module.Module.cuda"]], "from_json() (torchtree.nn.module.module class method)": [[93, "torchtree.nn.module.Module.from_json"]], "module (torchtree.nn.module.module property)": [[93, "torchtree.nn.module.Module.module"]], "to() (torchtree.nn.module.module method)": [[93, "torchtree.nn.module.Module.to"]], "torchtree.nn.module": [[93, "module-torchtree.nn.module"]], "dualaveraging (class in torchtree.ops.dual_averaging)": [[94, "torchtree.ops.dual_averaging.DualAveraging"]], "restart() (torchtree.ops.dual_averaging.dualaveraging method)": [[94, "torchtree.ops.dual_averaging.DualAveraging.restart"]], "step() (torchtree.ops.dual_averaging.dualaveraging method)": [[94, "torchtree.ops.dual_averaging.DualAveraging.step"]], "torchtree.ops.dual_averaging": [[94, "module-torchtree.ops.dual_averaging"]], "torchtree.ops": [[95, "module-torchtree.ops"]], "smooth_max() (in module torchtree.ops.smooth)": [[96, "torchtree.ops.smooth.smooth_max"]], "soft_searchsorted() (in module torchtree.ops.smooth)": [[96, "torchtree.ops.smooth.soft_searchsorted"]], "soft_sort() (in module torchtree.ops.smooth)": [[96, "torchtree.ops.smooth.soft_sort"]], "torchtree.ops.smooth": [[96, "module-torchtree.ops.smooth"]], "welfordvariance (class in torchtree.ops.welford)": [[97, "torchtree.ops.welford.WelfordVariance"]], "add_sample() (torchtree.ops.welford.welfordvariance method)": [[97, "torchtree.ops.welford.WelfordVariance.add_sample"]], "mean() (torchtree.ops.welford.welfordvariance method)": [[97, "torchtree.ops.welford.WelfordVariance.mean"]], "remove_sample() (torchtree.ops.welford.welfordvariance method)": [[97, "torchtree.ops.welford.WelfordVariance.remove_sample"]], "reset() (torchtree.ops.welford.welfordvariance method)": [[97, "torchtree.ops.welford.WelfordVariance.reset"]], "torchtree.ops.welford": [[97, "module-torchtree.ops.welford"]], "variance() (torchtree.ops.welford.welfordvariance method)": [[97, "torchtree.ops.welford.WelfordVariance.variance"]], "baseconvergence (class in torchtree.optim.convergence)": [[98, "torchtree.optim.convergence.BaseConvergence"]], "stanvariationalconvergence (class in torchtree.optim.convergence)": [[98, "torchtree.optim.convergence.StanVariationalConvergence"]], "variationalconvergence (class in torchtree.optim.convergence)": [[98, "torchtree.optim.convergence.VariationalConvergence"]], "check() (torchtree.optim.convergence.baseconvergence method)": [[98, "torchtree.optim.convergence.BaseConvergence.check"]], "check() (torchtree.optim.convergence.stanvariationalconvergence method)": [[98, "torchtree.optim.convergence.StanVariationalConvergence.check"]], "check() (torchtree.optim.convergence.variationalconvergence method)": [[98, "torchtree.optim.convergence.VariationalConvergence.check"]], "from_json() (torchtree.optim.convergence.stanvariationalconvergence class method)": [[98, "torchtree.optim.convergence.StanVariationalConvergence.from_json"]], "from_json() (torchtree.optim.convergence.variationalconvergence class method)": [[98, "torchtree.optim.convergence.VariationalConvergence.from_json"]], "rel_difference() (torchtree.optim.convergence.stanvariationalconvergence static method)": [[98, "torchtree.optim.convergence.StanVariationalConvergence.rel_difference"]], "torchtree.optim.convergence": [[98, "module-torchtree.optim.convergence"]], "torchtree.optim": [[99, "module-torchtree.optim"]], "scheduler (class in torchtree.optim.lr_scheduler)": [[100, "torchtree.optim.lr_scheduler.Scheduler"]], "from_json() (torchtree.optim.lr_scheduler.scheduler class method)": [[100, "torchtree.optim.lr_scheduler.Scheduler.from_json"]], "step() (torchtree.optim.lr_scheduler.scheduler method)": [[100, "torchtree.optim.lr_scheduler.Scheduler.step"]], "torchtree.optim.lr_scheduler": [[100, "module-torchtree.optim.lr_scheduler"]], "optimizer (class in torchtree.optim.optimizer)": [[101, "torchtree.optim.optimizer.Optimizer"]], "from_json() (torchtree.optim.optimizer.optimizer class method)": [[101, "torchtree.optim.optimizer.Optimizer.from_json"]], "load_state_dict() (torchtree.optim.optimizer.optimizer method)": [[101, "torchtree.optim.optimizer.Optimizer.load_state_dict"]], "run() (torchtree.optim.optimizer.optimizer method)": [[101, "torchtree.optim.optimizer.Optimizer.run"]], "save_full_state() (torchtree.optim.optimizer.optimizer method)": [[101, "torchtree.optim.optimizer.Optimizer.save_full_state"]], "state_dict() (torchtree.optim.optimizer.optimizer method)": [[101, "torchtree.optim.optimizer.Optimizer.state_dict"]], "torchtree.optim.optimizer": [[101, "module-torchtree.optim.optimizer"]], "main() (in module torchtree.torchtree)": [[102, "torchtree.torchtree.main"]], "torchtree.torchtree": [[102, "module-torchtree.torchtree"]], "id (in module torchtree.typing)": [[103, "torchtree.typing.ID"]], "listparameter (in module torchtree.typing)": [[103, "torchtree.typing.ListParameter"]], "listtensor (in module torchtree.typing)": [[103, "torchtree.typing.ListTensor"]], "ordereddicttype (in module torchtree.typing)": [[103, "torchtree.typing.OrderedDictType"]], "torchtree.typing": [[103, "module-torchtree.typing"]], "cubo (class in torchtree.variational.chi)": [[104, "torchtree.variational.chi.CUBO"]], "from_json() (torchtree.variational.chi.cubo class method)": [[104, "torchtree.variational.chi.CUBO.from_json"]], "handle_parameter_changed() (torchtree.variational.chi.cubo method)": [[104, "torchtree.variational.chi.CUBO.handle_parameter_changed"]], "torchtree.variational.chi": [[104, "module-torchtree.variational.chi"]], "torchtree.variational": [[105, "module-torchtree.variational"]], "elbo (class in torchtree.variational.kl)": [[106, "torchtree.variational.kl.ELBO"]], "klpq (class in torchtree.variational.kl)": [[106, "torchtree.variational.kl.KLpq"]], "klpqimportance (class in torchtree.variational.kl)": [[106, "torchtree.variational.kl.KLpqImportance"]], "selbo (class in torchtree.variational.kl)": [[106, "torchtree.variational.kl.SELBO"]], "from_json() (torchtree.variational.kl.elbo class method)": [[106, "torchtree.variational.kl.ELBO.from_json"]], "from_json() (torchtree.variational.kl.klpq class method)": [[106, "torchtree.variational.kl.KLpq.from_json"]], "from_json() (torchtree.variational.kl.klpqimportance class method)": [[106, "torchtree.variational.kl.KLpqImportance.from_json"]], "from_json() (torchtree.variational.kl.selbo class method)": [[106, "torchtree.variational.kl.SELBO.from_json"]], "handle_parameter_changed() (torchtree.variational.kl.elbo method)": [[106, "torchtree.variational.kl.ELBO.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.variational.kl.klpq method)": [[106, "torchtree.variational.kl.KLpq.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.variational.kl.klpqimportance method)": [[106, "torchtree.variational.kl.KLpqImportance.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.variational.kl.selbo method)": [[106, "torchtree.variational.kl.SELBO.handle_parameter_changed"]], "torchtree.variational.kl": [[106, "module-torchtree.variational.kl"]], "vr (class in torchtree.variational.renyi)": [[107, "torchtree.variational.renyi.VR"]], "from_json() (torchtree.variational.renyi.vr class method)": [[107, "torchtree.variational.renyi.VR.from_json"]], "handle_parameter_changed() (torchtree.variational.renyi.vr method)": [[107, "torchtree.variational.renyi.VR.handle_parameter_changed"]], "torchtree.variational.renyi": [[107, "module-torchtree.variational.renyi"]]}})