Search.setIndex({"docnames": ["autoapi/torchtree/_version/index", "autoapi/torchtree/cli/advi/index", "autoapi/torchtree/cli/cli/index", "autoapi/torchtree/cli/evolution/index", "autoapi/torchtree/cli/hmc/index", "autoapi/torchtree/cli/index", "autoapi/torchtree/cli/jacobians/index", "autoapi/torchtree/cli/map/index", "autoapi/torchtree/cli/plugin/index", "autoapi/torchtree/cli/plugin_manager/index", "autoapi/torchtree/cli/priors/index", "autoapi/torchtree/cli/utils/index", "autoapi/torchtree/core/abstractparameter/index", "autoapi/torchtree/core/classproperty_decorator/index", "autoapi/torchtree/core/container/index", "autoapi/torchtree/core/identifiable/index", "autoapi/torchtree/core/index", "autoapi/torchtree/core/logger/index", "autoapi/torchtree/core/model/index", "autoapi/torchtree/core/parameter/index", "autoapi/torchtree/core/parameter_encoder/index", "autoapi/torchtree/core/parameter_utils/index", "autoapi/torchtree/core/parametric/index", "autoapi/torchtree/core/runnable/index", "autoapi/torchtree/core/serializable/index", "autoapi/torchtree/core/utils/index", "autoapi/torchtree/distributions/bayesian_bridge/index", "autoapi/torchtree/distributions/ctmc_scale/index", "autoapi/torchtree/distributions/deterministic_normal/index", "autoapi/torchtree/distributions/distributions/index", "autoapi/torchtree/distributions/gmrf/index", "autoapi/torchtree/distributions/gmrf_integrated/index", "autoapi/torchtree/distributions/index", "autoapi/torchtree/distributions/inverse_gamma/index", "autoapi/torchtree/distributions/joint_distribution/index", "autoapi/torchtree/distributions/log_normal/index", "autoapi/torchtree/distributions/multivariate_normal/index", "autoapi/torchtree/distributions/normal/index", "autoapi/torchtree/distributions/one_on_x/index", "autoapi/torchtree/distributions/scale_mixture/index", "autoapi/torchtree/distributions/transforms/index", "autoapi/torchtree/distributions/tree_prior/index", "autoapi/torchtree/evolution/alignment/index", "autoapi/torchtree/evolution/attribute_pattern/index", "autoapi/torchtree/evolution/bdsk/index", "autoapi/torchtree/evolution/birth_death/index", "autoapi/torchtree/evolution/branch_model/index", "autoapi/torchtree/evolution/coalescent/index", "autoapi/torchtree/evolution/datatype/index", "autoapi/torchtree/evolution/index", "autoapi/torchtree/evolution/io/index", "autoapi/torchtree/evolution/poisson_tree_likelihood/index", "autoapi/torchtree/evolution/rate_transform/index", "autoapi/torchtree/evolution/root_transform/index", "autoapi/torchtree/evolution/site_model/index", "autoapi/torchtree/evolution/site_pattern/index", "autoapi/torchtree/evolution/substitution_model/abstract/index", "autoapi/torchtree/evolution/substitution_model/amino_acid/index", "autoapi/torchtree/evolution/substitution_model/codon/index", "autoapi/torchtree/evolution/substitution_model/general/index", "autoapi/torchtree/evolution/substitution_model/index", "autoapi/torchtree/evolution/substitution_model/nucleotide/index", "autoapi/torchtree/evolution/taxa/index", "autoapi/torchtree/evolution/tree_height_transform/index", "autoapi/torchtree/evolution/tree_likelihood/index", "autoapi/torchtree/evolution/tree_model/index", "autoapi/torchtree/evolution/tree_model_flexible/index", "autoapi/torchtree/index", "autoapi/torchtree/inference/hmc/adaptation/index", "autoapi/torchtree/inference/hmc/adaptors/index", "autoapi/torchtree/inference/hmc/hamiltonian/index", "autoapi/torchtree/inference/hmc/hmc/index", "autoapi/torchtree/inference/hmc/index", "autoapi/torchtree/inference/hmc/integrator/index", "autoapi/torchtree/inference/hmc/operator/index", "autoapi/torchtree/inference/hmc/stan_adaptation/index", "autoapi/torchtree/inference/index", "autoapi/torchtree/inference/mcmc/index", "autoapi/torchtree/inference/mcmc/mcmc/index", "autoapi/torchtree/inference/mcmc/operator/index", "autoapi/torchtree/inference/sampler/index", "autoapi/torchtree/inference/utils/index", "autoapi/torchtree/math/index", "autoapi/torchtree/nf/energy_functions/index", "autoapi/torchtree/nf/flow/index", "autoapi/torchtree/nf/index", "autoapi/torchtree/nf/planar/index", "autoapi/torchtree/nf/realnvp/index", "autoapi/torchtree/nn/index", "autoapi/torchtree/nn/module/index", "autoapi/torchtree/ops/dual_averaging/index", "autoapi/torchtree/ops/index", "autoapi/torchtree/ops/welford/index", "autoapi/torchtree/optim/convergence/index", "autoapi/torchtree/optim/index", "autoapi/torchtree/optim/lr_scheduler/index", "autoapi/torchtree/optim/optimizer/index", "autoapi/torchtree/torchtree/index", "autoapi/torchtree/treeregression/index", "autoapi/torchtree/typing/index", "autoapi/torchtree/variational/chi/index", "autoapi/torchtree/variational/index", "autoapi/torchtree/variational/kl/index", "autoapi/torchtree/variational/renyi/index", "index", "modules/torchtree.cli", "modules/torchtree.cli.advi", "modules/torchtree.cli.cli", "modules/torchtree.cli.evolution", "modules/torchtree.cli.hmc", "modules/torchtree.cli.jacobians", "modules/torchtree.cli.map", "modules/torchtree.cli.plugin", "modules/torchtree.cli.plugin_manager", "modules/torchtree.cli.priors", "modules/torchtree.cli.utils", "modules/torchtree.core", "modules/torchtree.core.abstractparameter", "modules/torchtree.core.classproperty_decorator", "modules/torchtree.core.container", "modules/torchtree.core.identifiable", "modules/torchtree.core.logger", "modules/torchtree.core.model", "modules/torchtree.core.parameter", "modules/torchtree.core.parameter_encoder", "modules/torchtree.core.parameter_utils", "modules/torchtree.core.parametric", "modules/torchtree.core.runnable", "modules/torchtree.core.serializable", "modules/torchtree.core.utils", "modules/torchtree.distributions", "modules/torchtree.distributions.bayesian_bridge", "modules/torchtree.distributions.ctmc_scale", "modules/torchtree.distributions.deterministic_normal", "modules/torchtree.distributions.distributions", "modules/torchtree.distributions.gmrf", "modules/torchtree.distributions.gmrf_integrated", "modules/torchtree.distributions.inverse_gamma", "modules/torchtree.distributions.joint_distribution", "modules/torchtree.distributions.log_normal", "modules/torchtree.distributions.multivariate_normal", "modules/torchtree.distributions.normal", "modules/torchtree.distributions.one_on_x", "modules/torchtree.distributions.scale_mixture", "modules/torchtree.distributions.transforms", "modules/torchtree.distributions.tree_prior", "modules/torchtree.evolution", "modules/torchtree.evolution.alignment", "modules/torchtree.evolution.attribute_pattern", "modules/torchtree.evolution.bdsk", "modules/torchtree.evolution.birth_death", "modules/torchtree.evolution.branch_model", "modules/torchtree.evolution.coalescent", "modules/torchtree.evolution.datatype", "modules/torchtree.evolution.io", "modules/torchtree.evolution.poisson_tree_likelihood", "modules/torchtree.evolution.rate_transform", "modules/torchtree.evolution.root_transform", "modules/torchtree.evolution.site_model", "modules/torchtree.evolution.site_pattern", "modules/torchtree.evolution.substitution_model", "modules/torchtree.evolution.substitution_model.abstract", "modules/torchtree.evolution.substitution_model.amino_acid", "modules/torchtree.evolution.substitution_model.codon", "modules/torchtree.evolution.substitution_model.general", "modules/torchtree.evolution.substitution_model.nucleotide", "modules/torchtree.evolution.taxa", "modules/torchtree.evolution.tree_height_transform", "modules/torchtree.evolution.tree_likelihood", "modules/torchtree.evolution.tree_model", "modules/torchtree.evolution.tree_model_flexible", "modules/torchtree.inference", "modules/torchtree.inference.hmc", "modules/torchtree.inference.hmc.adaptation", "modules/torchtree.inference.hmc.adaptors", "modules/torchtree.inference.hmc.hamiltonian", "modules/torchtree.inference.hmc.hmc", "modules/torchtree.inference.hmc.integrator", "modules/torchtree.inference.hmc.operator", "modules/torchtree.inference.hmc.stan_adaptation", "modules/torchtree.inference.mcmc", "modules/torchtree.inference.mcmc.mcmc", "modules/torchtree.inference.mcmc.operator", "modules/torchtree.inference.sampler", "modules/torchtree.inference.utils", "modules/torchtree.nf", "modules/torchtree.nf.energy_functions", "modules/torchtree.nf.flow", "modules/torchtree.nf.planar", "modules/torchtree.nf.realnvp", "modules/torchtree.nn", "modules/torchtree.nn.module", "modules/torchtree.ops", "modules/torchtree.ops.dual_averaging", "modules/torchtree.ops.welford", "modules/torchtree.optim", "modules/torchtree.optim.convergence", "modules/torchtree.optim.lr_scheduler", "modules/torchtree.optim.optimizer", "modules/torchtree.variational", "modules/torchtree.variational.chi", "modules/torchtree.variational.kl", "modules/torchtree.variational.renyi"], "filenames": ["autoapi/torchtree/_version/index.rst", "autoapi/torchtree/cli/advi/index.rst", "autoapi/torchtree/cli/cli/index.rst", "autoapi/torchtree/cli/evolution/index.rst", "autoapi/torchtree/cli/hmc/index.rst", "autoapi/torchtree/cli/index.rst", "autoapi/torchtree/cli/jacobians/index.rst", "autoapi/torchtree/cli/map/index.rst", "autoapi/torchtree/cli/plugin/index.rst", "autoapi/torchtree/cli/plugin_manager/index.rst", "autoapi/torchtree/cli/priors/index.rst", "autoapi/torchtree/cli/utils/index.rst", "autoapi/torchtree/core/abstractparameter/index.rst", "autoapi/torchtree/core/classproperty_decorator/index.rst", "autoapi/torchtree/core/container/index.rst", "autoapi/torchtree/core/identifiable/index.rst", "autoapi/torchtree/core/index.rst", "autoapi/torchtree/core/logger/index.rst", "autoapi/torchtree/core/model/index.rst", "autoapi/torchtree/core/parameter/index.rst", "autoapi/torchtree/core/parameter_encoder/index.rst", "autoapi/torchtree/core/parameter_utils/index.rst", "autoapi/torchtree/core/parametric/index.rst", "autoapi/torchtree/core/runnable/index.rst", "autoapi/torchtree/core/serializable/index.rst", "autoapi/torchtree/core/utils/index.rst", "autoapi/torchtree/distributions/bayesian_bridge/index.rst", "autoapi/torchtree/distributions/ctmc_scale/index.rst", "autoapi/torchtree/distributions/deterministic_normal/index.rst", "autoapi/torchtree/distributions/distributions/index.rst", "autoapi/torchtree/distributions/gmrf/index.rst", "autoapi/torchtree/distributions/gmrf_integrated/index.rst", "autoapi/torchtree/distributions/index.rst", "autoapi/torchtree/distributions/inverse_gamma/index.rst", "autoapi/torchtree/distributions/joint_distribution/index.rst", "autoapi/torchtree/distributions/log_normal/index.rst", "autoapi/torchtree/distributions/multivariate_normal/index.rst", "autoapi/torchtree/distributions/normal/index.rst", "autoapi/torchtree/distributions/one_on_x/index.rst", "autoapi/torchtree/distributions/scale_mixture/index.rst", "autoapi/torchtree/distributions/transforms/index.rst", "autoapi/torchtree/distributions/tree_prior/index.rst", "autoapi/torchtree/evolution/alignment/index.rst", "autoapi/torchtree/evolution/attribute_pattern/index.rst", "autoapi/torchtree/evolution/bdsk/index.rst", "autoapi/torchtree/evolution/birth_death/index.rst", "autoapi/torchtree/evolution/branch_model/index.rst", "autoapi/torchtree/evolution/coalescent/index.rst", "autoapi/torchtree/evolution/datatype/index.rst", "autoapi/torchtree/evolution/index.rst", "autoapi/torchtree/evolution/io/index.rst", "autoapi/torchtree/evolution/poisson_tree_likelihood/index.rst", "autoapi/torchtree/evolution/rate_transform/index.rst", "autoapi/torchtree/evolution/root_transform/index.rst", "autoapi/torchtree/evolution/site_model/index.rst", "autoapi/torchtree/evolution/site_pattern/index.rst", "autoapi/torchtree/evolution/substitution_model/abstract/index.rst", "autoapi/torchtree/evolution/substitution_model/amino_acid/index.rst", "autoapi/torchtree/evolution/substitution_model/codon/index.rst", "autoapi/torchtree/evolution/substitution_model/general/index.rst", "autoapi/torchtree/evolution/substitution_model/index.rst", "autoapi/torchtree/evolution/substitution_model/nucleotide/index.rst", "autoapi/torchtree/evolution/taxa/index.rst", "autoapi/torchtree/evolution/tree_height_transform/index.rst", "autoapi/torchtree/evolution/tree_likelihood/index.rst", "autoapi/torchtree/evolution/tree_model/index.rst", "autoapi/torchtree/evolution/tree_model_flexible/index.rst", "autoapi/torchtree/index.rst", "autoapi/torchtree/inference/hmc/adaptation/index.rst", "autoapi/torchtree/inference/hmc/adaptors/index.rst", "autoapi/torchtree/inference/hmc/hamiltonian/index.rst", "autoapi/torchtree/inference/hmc/hmc/index.rst", "autoapi/torchtree/inference/hmc/index.rst", "autoapi/torchtree/inference/hmc/integrator/index.rst", "autoapi/torchtree/inference/hmc/operator/index.rst", "autoapi/torchtree/inference/hmc/stan_adaptation/index.rst", "autoapi/torchtree/inference/index.rst", "autoapi/torchtree/inference/mcmc/index.rst", "autoapi/torchtree/inference/mcmc/mcmc/index.rst", "autoapi/torchtree/inference/mcmc/operator/index.rst", "autoapi/torchtree/inference/sampler/index.rst", "autoapi/torchtree/inference/utils/index.rst", "autoapi/torchtree/math/index.rst", "autoapi/torchtree/nf/energy_functions/index.rst", "autoapi/torchtree/nf/flow/index.rst", "autoapi/torchtree/nf/index.rst", "autoapi/torchtree/nf/planar/index.rst", "autoapi/torchtree/nf/realnvp/index.rst", "autoapi/torchtree/nn/index.rst", "autoapi/torchtree/nn/module/index.rst", "autoapi/torchtree/ops/dual_averaging/index.rst", "autoapi/torchtree/ops/index.rst", "autoapi/torchtree/ops/welford/index.rst", "autoapi/torchtree/optim/convergence/index.rst", "autoapi/torchtree/optim/index.rst", "autoapi/torchtree/optim/lr_scheduler/index.rst", "autoapi/torchtree/optim/optimizer/index.rst", "autoapi/torchtree/torchtree/index.rst", "autoapi/torchtree/treeregression/index.rst", "autoapi/torchtree/typing/index.rst", "autoapi/torchtree/variational/chi/index.rst", "autoapi/torchtree/variational/index.rst", "autoapi/torchtree/variational/kl/index.rst", "autoapi/torchtree/variational/renyi/index.rst", "index.rst", "modules/torchtree.cli.rst", "modules/torchtree.cli.advi.rst", "modules/torchtree.cli.cli.rst", "modules/torchtree.cli.evolution.rst", "modules/torchtree.cli.hmc.rst", "modules/torchtree.cli.jacobians.rst", "modules/torchtree.cli.map.rst", "modules/torchtree.cli.plugin.rst", "modules/torchtree.cli.plugin_manager.rst", "modules/torchtree.cli.priors.rst", "modules/torchtree.cli.utils.rst", "modules/torchtree.core.rst", "modules/torchtree.core.abstractparameter.rst", "modules/torchtree.core.classproperty_decorator.rst", "modules/torchtree.core.container.rst", "modules/torchtree.core.identifiable.rst", "modules/torchtree.core.logger.rst", "modules/torchtree.core.model.rst", "modules/torchtree.core.parameter.rst", "modules/torchtree.core.parameter_encoder.rst", "modules/torchtree.core.parameter_utils.rst", "modules/torchtree.core.parametric.rst", "modules/torchtree.core.runnable.rst", "modules/torchtree.core.serializable.rst", "modules/torchtree.core.utils.rst", "modules/torchtree.distributions.rst", "modules/torchtree.distributions.bayesian_bridge.rst", "modules/torchtree.distributions.ctmc_scale.rst", "modules/torchtree.distributions.deterministic_normal.rst", "modules/torchtree.distributions.distributions.rst", "modules/torchtree.distributions.gmrf.rst", "modules/torchtree.distributions.gmrf_integrated.rst", "modules/torchtree.distributions.inverse_gamma.rst", "modules/torchtree.distributions.joint_distribution.rst", "modules/torchtree.distributions.log_normal.rst", "modules/torchtree.distributions.multivariate_normal.rst", "modules/torchtree.distributions.normal.rst", "modules/torchtree.distributions.one_on_x.rst", "modules/torchtree.distributions.scale_mixture.rst", "modules/torchtree.distributions.transforms.rst", "modules/torchtree.distributions.tree_prior.rst", "modules/torchtree.evolution.rst", "modules/torchtree.evolution.alignment.rst", "modules/torchtree.evolution.attribute_pattern.rst", "modules/torchtree.evolution.bdsk.rst", "modules/torchtree.evolution.birth_death.rst", "modules/torchtree.evolution.branch_model.rst", "modules/torchtree.evolution.coalescent.rst", "modules/torchtree.evolution.datatype.rst", "modules/torchtree.evolution.io.rst", "modules/torchtree.evolution.poisson_tree_likelihood.rst", "modules/torchtree.evolution.rate_transform.rst", "modules/torchtree.evolution.root_transform.rst", "modules/torchtree.evolution.site_model.rst", "modules/torchtree.evolution.site_pattern.rst", "modules/torchtree.evolution.substitution_model.rst", "modules/torchtree.evolution.substitution_model.abstract.rst", "modules/torchtree.evolution.substitution_model.amino_acid.rst", "modules/torchtree.evolution.substitution_model.codon.rst", "modules/torchtree.evolution.substitution_model.general.rst", "modules/torchtree.evolution.substitution_model.nucleotide.rst", "modules/torchtree.evolution.taxa.rst", "modules/torchtree.evolution.tree_height_transform.rst", "modules/torchtree.evolution.tree_likelihood.rst", "modules/torchtree.evolution.tree_model.rst", "modules/torchtree.evolution.tree_model_flexible.rst", "modules/torchtree.inference.rst", "modules/torchtree.inference.hmc.rst", "modules/torchtree.inference.hmc.adaptation.rst", "modules/torchtree.inference.hmc.adaptors.rst", "modules/torchtree.inference.hmc.hamiltonian.rst", "modules/torchtree.inference.hmc.hmc.rst", "modules/torchtree.inference.hmc.integrator.rst", "modules/torchtree.inference.hmc.operator.rst", "modules/torchtree.inference.hmc.stan_adaptation.rst", "modules/torchtree.inference.mcmc.rst", "modules/torchtree.inference.mcmc.mcmc.rst", "modules/torchtree.inference.mcmc.operator.rst", "modules/torchtree.inference.sampler.rst", "modules/torchtree.inference.utils.rst", "modules/torchtree.nf.rst", "modules/torchtree.nf.energy_functions.rst", "modules/torchtree.nf.flow.rst", "modules/torchtree.nf.planar.rst", "modules/torchtree.nf.realnvp.rst", "modules/torchtree.nn.rst", "modules/torchtree.nn.module.rst", "modules/torchtree.ops.rst", "modules/torchtree.ops.dual_averaging.rst", "modules/torchtree.ops.welford.rst", "modules/torchtree.optim.rst", "modules/torchtree.optim.convergence.rst", "modules/torchtree.optim.lr_scheduler.rst", "modules/torchtree.optim.optimizer.rst", "modules/torchtree.variational.rst", "modules/torchtree.variational.chi.rst", "modules/torchtree.variational.kl.rst", "modules/torchtree.variational.renyi.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree._version</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.advi</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.cli</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.evolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.hmc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.jacobians</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.plugin</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.plugin_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.priors</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.abstractparameter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.classproperty_decorator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.container</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.identifiable</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.parameter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.parameter_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.parameter_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.parametric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.runnable</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.serializable</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.bayesian_bridge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.ctmc_scale</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.deterministic_normal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.distributions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.gmrf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.gmrf_integrated</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.inverse_gamma</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.joint_distribution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.log_normal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.multivariate_normal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.normal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.one_on_x</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.scale_mixture</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.tree_prior</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.alignment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.attribute_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.bdsk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.birth_death</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.branch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.coalescent</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.datatype</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.io</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.poisson_tree_likelihood</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.rate_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.root_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.site_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.site_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.substitution_model.abstract</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.substitution_model.amino_acid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.substitution_model.codon</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.substitution_model.general</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.substitution_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.substitution_model.nucleotide</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.taxa</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.tree_height_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.tree_likelihood</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.tree_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.tree_model_flexible</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.hmc.adaptation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.hmc.adaptors</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.hmc.hamiltonian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.hmc.hmc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.hmc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.hmc.integrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.hmc.operator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.hmc.stan_adaptation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.mcmc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.mcmc.mcmc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.mcmc.operator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.nf.energy_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.nf.flow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.nf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.nf.planar</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.nf.realnvp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.nn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.nn.module</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.ops.dual_averaging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.ops.welford</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.optim.convergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.optim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.optim.lr_scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.optim.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.torchtree</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.treeregression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.typing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.variational.chi</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.variational</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.variational.kl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.variational.renyi</span></code>", "Welcome to torchtree\u2019s documentation!", "torchtree.cli", "torchtree.cli.advi", "torchtree.cli.cli", "torchtree.cli.evolution", "torchtree.cli.hmc", "torchtree.cli.jacobians", "torchtree.cli.map", "torchtree.cli.plugin", "torchtree.cli.plugin_manager", "torchtree.cli.priors", "torchtree.cli.utils", "torchtree.core", "torchtree.core.abstractparameter", "torchtree.core.classproperty_decorator", "torchtree.core.container", "torchtree.core.identifiable", "torchtree.core.logger", "torchtree.core.model", "torchtree.core.parameter", "torchtree.core.parameter_encoder", "torchtree.core.parameter_utils", "torchtree.core.parametric", "torchtree.core.runnable", "torchtree.core.serializable", "torchtree.core.utils", "torchtree.distributions", "torchtree.distributions.bayesian_bridge", "torchtree.distributions.ctmc_scale", "torchtree.distributions.deterministic_normal", "torchtree.distributions.distributions", "torchtree.distributions.gmrf", "torchtree.distributions.gmrf_integrated", "torchtree.distributions.inverse_gamma", "torchtree.distributions.joint_distribution", "torchtree.distributions.log_normal", "torchtree.distributions.multivariate_normal", "torchtree.distributions.normal", "torchtree.distributions.one_on_x", "torchtree.distributions.scale_mixture", "torchtree.distributions.transforms", "torchtree.distributions.tree_prior", "torchtree.evolution", "torchtree.evolution.alignment", "torchtree.evolution.attribute_pattern", "torchtree.evolution.bdsk", "torchtree.evolution.birth_death", "torchtree.evolution.branch_model", "torchtree.evolution.coalescent", "torchtree.evolution.datatype", "torchtree.evolution.io", "torchtree.evolution.poisson_tree_likelihood", "torchtree.evolution.rate_transform", "torchtree.evolution.root_transform", "torchtree.evolution.site_model", "torchtree.evolution.site_pattern", "torchtree.evolution.substitution_model", "torchtree.evolution.substitution_model.abstract", "torchtree.evolution.substitution_model.amino_acid", "torchtree.evolution.substitution_model.codon", "torchtree.evolution.substitution_model.general", "torchtree.evolution.substitution_model.nucleotide", "torchtree.evolution.taxa", "torchtree.evolution.tree_height_transform", "torchtree.evolution.tree_likelihood", "torchtree.evolution.tree_model", "torchtree.evolution.tree_model_flexible", "torchtree.inference", "torchtree.inference.hmc", "torchtree.inference.hmc.adaptation", "torchtree.inference.hmc.adaptors", "torchtree.inference.hmc.hamiltonian", "torchtree.inference.hmc.hmc", "torchtree.inference.hmc.integrator", "torchtree.inference.hmc.operator", "torchtree.inference.hmc.stan_adaptation", "torchtree.inference.mcmc", "torchtree.inference.mcmc.mcmc", "torchtree.inference.mcmc.operator", "torchtree.inference.sampler", "torchtree.inference.utils", "torchtree.nf", "torchtree.nf.energy_functions", "torchtree.nf.flow", "torchtree.nf.planar", "torchtree.nf.realnvp", "torchtree.nn", "torchtree.nn.module", "torchtree.ops", "torchtree.ops.dual_averaging", "torchtree.ops.welford", "torchtree.optim", "torchtree.optim.convergence", "torchtree.optim.lr_scheduler", "torchtree.optim.optimizer", "torchtree.variational", "torchtree.variational.chi", "torchtree.variational.kl", "torchtree.variational.renyi"], "terms": {"version": 0, "inform": [0, 39], "number": [0, 3, 20, 25, 26, 44, 53, 64, 75, 80, 93, 96, 100, 102, 103], "major": 0, "minor": 0, "patch": 0, "label": 0, "logger": [1, 3, 16, 67, 80], "create_variational_pars": 1, "subpras": [1, 4, 7], "create_tril": 1, "scale": [1, 26, 27, 28, 33, 35, 36, 37, 39, 52, 54, 86, 143], "torch": [1, 12, 18, 19, 21, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 40, 43, 44, 45, 46, 47, 50, 52, 53, 54, 55, 56, 58, 59, 61, 64, 65, 68, 70, 73, 74, 75, 79, 82, 84, 86, 87, 88, 89, 92, 93, 95, 96, 100, 102, 103, 144, 190], "tensor": [1, 12, 19, 21, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 50, 52, 53, 54, 55, 56, 58, 59, 61, 64, 65, 68, 70, 73, 74, 75, 79, 81, 82, 84, 86, 87, 92, 100], "creat": [1, 5, 8, 12, 15, 17, 19, 21, 22, 23, 24, 25, 26, 31, 33, 35, 37, 39, 48, 53, 62, 65, 66, 68, 71, 73, 74, 78, 79, 80, 84, 89, 105], "1": [1, 25, 26, 27, 31, 33, 37, 39, 40, 44, 48, 50, 63, 64, 82, 86, 100, 102, 103], "diment": 1, "contain": [1, 5, 6, 16, 17, 18, 26, 31, 32, 39, 43, 46, 49, 53, 54, 55, 56, 57, 58, 59, 61, 65, 66, 67, 76, 80, 81, 82, 84, 85, 87, 89, 91, 94, 101, 105, 116, 130, 146, 171, 185, 192, 195, 199], "flatten": 1, "tridiagon": 1, "matrix": [1, 36, 40, 75, 82], "A": [1, 18, 19, 40, 43, 44, 45, 46, 54, 55, 56, 57, 58, 59, 61, 65, 66, 82, 95, 96], "covari": [1, 30, 36], "i": [1, 3, 13, 18, 19, 26, 29, 30, 31, 33, 38, 39, 40, 43, 44, 45, 46, 47, 52, 53, 54, 55, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 70, 83, 86, 93, 102], "us": [1, 3, 8, 12, 13, 15, 18, 19, 22, 23, 24, 25, 28, 29, 30, 31, 36, 40, 47, 48, 51, 53, 55, 62, 63, 64, 65, 68, 70, 71, 73, 74, 78, 79, 83, 86, 93, 102], "2": [1, 25, 26, 31, 37, 39, 40, 50, 64, 82, 102], "varianc": [1, 92], "ar": [1, 18, 19, 26, 28, 29, 30, 44, 47, 64, 65, 70, 83, 86], "set": [1, 13], "zero": [1, 44], "choleski": 1, "decomposit": 1, "diagon": [1, 40], "element": 1, "replac": [1, 25], "log": [1, 17, 33, 35, 38, 40, 44, 45, 47, 52, 63, 64, 80], "paramet": [1, 3, 4, 6, 7, 11, 12, 14, 16, 17, 18, 21, 22, 25, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 53, 54, 55, 56, 57, 58, 59, 61, 64, 65, 66, 67, 68, 71, 73, 74, 75, 79, 80, 81, 82, 84, 86, 87, 89, 93, 95, 96, 100, 102, 103], "standard": [1, 8, 12, 15, 19, 22, 23, 24, 28, 35, 37, 48, 62, 68, 71, 73, 74, 78, 79, 102], "deviat": [1, 35, 37], "return": [1, 6, 11, 13, 17, 18, 19, 20, 22, 25, 29, 30, 33, 38, 44, 45, 47, 50, 53, 55, 61, 64, 65, 66, 70, 80, 81, 82, 83, 84, 87, 89, 93], "create_fullrank_from_meanfield": 1, "param": [1, 14, 71, 81], "path": [1, 21, 50], "create_fullrank": 1, "var_id": 1, "json_object": [1, 11, 25], "arg": [1, 3, 4, 7, 8, 12, 17, 18, 19, 27, 29, 33, 38, 44, 45, 47, 84, 87, 89, 93, 95], "create_flexible_vari": 1, "create_realnp_distribut": 1, "str": [1, 3, 6, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 31, 39, 42, 43, 46, 48, 50, 51, 53, 55, 65, 66, 71, 78, 80, 81, 83, 84, 87, 89, 93, 95, 96, 100, 102, 103], "x": [1, 13, 19, 26, 27, 28, 29, 31, 33, 34, 36, 39, 40, 52, 63, 83, 84, 86, 87, 92], "create_realnvp": 1, "gather_paramet": 1, "dict": [1, 3, 6, 11, 17, 20, 25, 26, 27, 28, 29, 31, 39, 48, 53, 55, 65, 66, 71, 78, 80, 81, 84, 93, 95, 96], "group_map": 1, "apply_sigmoid_transform": 1, "valu": [1, 3, 13, 18, 25, 29, 30, 31, 38, 44, 45, 47, 54, 64, 70, 74, 79, 82, 83, 93], "none": [1, 3, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 41, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 58, 59, 61, 63, 64, 65, 68, 70, 71, 73, 74, 75, 78, 79, 80, 83, 84, 87, 89, 90, 92, 93, 95, 96, 100, 102, 103], "apply_affine_transform": 1, "loc": [1, 28, 33, 36, 37, 39], "apply_exp_transform": 1, "apply_simplex_transform": 1, "create_normal_distribut": 1, "x_unr": 1, "create_gamma_distribut": 1, "concentr": [1, 33, 41], "rate": [1, 26, 27, 31, 33, 41, 44, 45, 46, 52, 53, 54, 59, 61, 64], "create_weibull_distribut": 1, "create_meanfield": 1, "distribut": [1, 3, 19, 25, 47, 67, 80, 84, 87, 100, 102, 103], "tupl": [1, 11, 19, 20, 25, 48, 55, 81, 84], "list": [1, 3, 6, 11, 12, 14, 17, 19, 20, 21, 22, 25, 28, 29, 34, 42, 50, 53, 55, 64, 65, 66, 74, 78, 79, 80, 81, 84, 87, 96, 102], "apply_transforms_for_fullrank": 1, "create_variational_model": 1, "id_": [1, 3, 4, 7, 10, 12, 14, 15, 18, 19, 26, 27, 28, 29, 30, 31, 34, 36, 39, 41, 42, 43, 44, 45, 46, 47, 48, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 70, 73, 74, 79, 83, 84, 87, 89, 100, 102, 103], "joint": [1, 4, 7, 28, 29, 34, 36, 70, 71, 74, 78, 79, 100, 102, 103], "create_advi": 1, "variat": [1, 28, 40, 67], "create_logg": [1, 4, 7], "create_sampl": 1, "build_advi": 1, "main": [2, 97], "create_evolution_pars": 3, "parser": 3, "add_birth_death": 3, "add_coalesc": 3, "zero_or_path": 3, "str_or_float": 3, "choic": 3, "argpars": 3, "when": [3, 33, 39, 63, 64], "argument": [3, 19, 29], "can": [3, 17, 18, 19, 26, 33, 43, 46, 53, 54, 55, 56, 57, 58, 59, 61, 63, 65, 66, 80, 84, 89], "either": 3, "string": [3, 20, 25, 26, 31, 39, 48, 50], "from": [3, 14, 18, 19, 26, 28, 29, 30, 31, 39, 40, 47, 50, 53, 63, 64, 65, 68, 70, 75, 80, 81, 83, 87, 90, 93, 102, 144, 189], "prespecifi": 3, "option": [3, 17, 26, 29, 31, 39, 80, 96], "distribution_typ": 3, "specifi": [3, 26, 31], "run_tree_regress": 3, "taxa": [3, 42, 43, 49, 50, 65, 66, 67], "create_tree_model": 3, "create_poisson_tree_likelihood": 3, "create_tree_likelihood_singl": 3, "tree_model": [3, 17, 27, 30, 31, 41, 44, 45, 46, 47, 49, 51, 52, 63, 64, 67], "branch_model": [3, 49, 51, 64, 67], "substitution_model": [3, 49, 64, 67], "site_model": [3, 49, 64, 67], "site_pattern": [3, 49, 64, 67], "create_tree_likelihood_gener": 3, "trait": 3, "data_typ": [3, 42, 43, 55, 58, 59], "create_tree_likelihood": 3, "align": [3, 49, 50, 55, 67], "create_site_model": 3, "w": [3, 86], "create_site_model_srd06_mu": 3, "is_float": 3, "create_branch_model": 3, "tree_id": [3, 7, 10], "taxa_count": 3, "rate_init": 3, "build_align": 3, "file_nam": [3, 21, 50, 93], "create_substitution_model": 3, "model": [3, 6, 14, 16, 17, 19, 22, 26, 27, 28, 29, 30, 31, 39, 41, 43, 44, 45, 46, 47, 49, 51, 53, 54, 55, 56, 57, 58, 59, 61, 64, 65, 66, 67, 70, 71, 74, 78, 79, 80, 83, 93, 96, 100, 102, 103, 146], "create_site_pattern": 3, "indic": [3, 19, 55, 82], "create_data_typ": 3, "create_general_data_typ": 3, "create_align": 3, "create_taxa": 3, "create_birth_death": 3, "birth_death_id": 3, "create_constant_birth_death": 3, "create_bdsk": 3, "create_coales": 3, "create_substitution_model_prior": 3, "substmodel_id": 3, "create_ucln_prior": 3, "branch_model_id": [3, 10], "parse_distribut": 3, "desc": [3, 83], "create_clock_prior": 3, "create_evolution_prior": 3, "create_time_tree_prior": 3, "create_bd_prior": 3, "create_constant_bd_prior": 3, "create_bdsk_prior": 3, "create_poisson_evolution_joint": 3, "create_evolution_joint": 3, "get_engin": 3, "import": [3, 102], "cash": 3, "engin": 3, "create_hmc_pars": 4, "create_stan_windowed_adapt": 4, "parameters_unr": 4, "create_hmc_oper": 4, "create_hmc": 4, "build_hmc": 4, "The": [5, 16, 26, 31, 32, 40, 49, 63, 64, 76, 86, 102, 105, 116, 130, 146, 171], "modul": [5, 16, 67, 76, 88, 91, 94, 101, 104, 105, 116, 130, 146, 160, 171, 172, 180, 185, 190, 192, 195, 199], "json": [5, 17, 20, 21, 25, 26, 31, 39, 53, 65, 66, 80, 84, 89, 105], "configur": [5, 105], "file": [5, 17, 21, 50, 105], "through": [5, 105], "command": [5, 105], "line": [5, 105], "interfac": [5, 17, 105], "advi": [5, 67], "evolut": [5, 17, 27, 30, 31, 41, 67], "hmc": [5, 67, 76], "jacobian": [5, 40, 52, 63, 67], "map": [5, 40, 42, 59, 67], "plugin": [5, 9, 67], "plugin_manag": [5, 67], "prior": [5, 26, 27, 39, 41, 67, 131, 145], "util": [5, 16, 67, 76, 91, 192], "create_jacobian": 6, "dict_def": 6, "ani": [6, 17, 18, 25, 26, 31, 33, 39, 43, 46, 53, 54, 55, 56, 57, 58, 59, 61, 65, 66, 71, 78, 80, 81, 84, 93, 95, 96], "thi": [6, 14, 18, 19, 20, 25, 28, 29, 30, 33, 43, 46, 47, 50, 53, 54, 55, 56, 57, 58, 59, 61, 64, 65, 66, 67, 70, 83, 85, 88, 91, 94, 101, 185, 190, 192, 195, 199], "look": [6, 33], "type": [6, 14, 17, 20, 25, 26, 27, 29, 30, 31, 34, 36, 39, 41, 42, 44, 45, 46, 47, 48, 51, 53, 54, 55, 56, 57, 58, 59, 61, 64, 65, 66, 67, 68, 70, 71, 74, 79, 80, 81, 82, 83, 84, 89, 96, 100, 102, 103], "transformedparamet": [6, 19], "id": [6, 11, 14, 15, 19, 26, 27, 28, 29, 30, 31, 34, 36, 39, 41, 42, 44, 45, 46, 47, 48, 51, 53, 54, 56, 57, 58, 59, 61, 64, 65, 66, 70, 74, 79, 83, 84, 87, 89, 99, 100, 102, 103], "dictionari": [6, 17, 26, 31, 39, 53, 65, 66, 80, 81, 84, 89], "specif": 6, "transform": [6, 19, 28, 32, 33, 53, 63, 65, 66, 67, 84, 86, 130], "create_map_pars": 7, "create_optim": 7, "create_tree_logg": 7, "build_optim": 7, "helper": [8, 12, 15, 19, 22, 23, 24, 48, 62, 68, 71, 73, 74, 78, 79], "provid": [8, 12, 15, 19, 22, 23, 24, 33, 39, 48, 62, 68, 71, 73, 74, 78, 79], "wai": [8, 12, 15, 19, 22, 23, 24, 48, 62, 68, 71, 73, 74, 78, 79], "an": [8, 12, 13, 14, 15, 19, 22, 23, 24, 25, 33, 41, 44, 48, 62, 64, 68, 71, 73, 74, 78, 79], "abc": [8, 12, 15, 18, 19, 22, 23, 24, 29, 30, 47, 48, 62, 64, 68, 70, 71, 73, 74, 78, 79, 83], "inherit": [8, 12, 14, 15, 18, 19, 22, 23, 24, 29, 30, 40, 47, 48, 62, 64, 68, 70, 71, 73, 74, 78, 79, 81, 83, 144], "abstract": [8, 12, 14, 17, 18, 22, 23, 24, 29, 38, 40, 43, 46, 47, 48, 49, 52, 54, 55, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 79, 93], "load_argu": [8, 9], "subpars": [8, 9], "process_tree_likelihood": 8, "data": [8, 14, 17, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 34, 36, 39, 41, 42, 43, 44, 45, 46, 47, 48, 51, 53, 54, 55, 57, 58, 59, 61, 62, 64, 65, 66, 68, 70, 71, 73, 74, 75, 78, 80, 83, 84, 87, 89, 93, 95, 96, 100, 102, 103], "process_coalesc": 8, "process_al": 8, "pluginmanag": 9, "load_plugin": 9, "disable_plugin": 9, "create_one_on_x_prior": 10, "theta": [10, 47], "create_clock_horseshoe_prior": 10, "convert_date_to_r": 11, "dai": 11, "month": 11, "year": 11, "read_dates_from_csv": 11, "input_fil": 11, "date_format": 11, "make_unconstrain": 11, "constrain": [11, 40], "correspond": [11, 65, 66, 81], "devic": [12, 18, 19, 25, 27, 43, 54, 55, 59, 61, 65, 83, 84, 89], "properti": [12, 13, 15, 18, 19, 25, 28, 29, 33, 36, 42, 46, 47, 48, 53, 54, 56, 59, 61, 65, 68, 74, 79, 87, 89], "kwarg": [12, 17, 18, 19, 27, 29, 65, 66, 68, 71, 74, 78, 79, 84, 89, 93, 95, 96], "cuda": [12, 18, 19, 27, 43, 54, 55, 59, 61, 65, 84, 89], "int": [12, 17, 18, 19, 20, 25, 27, 31, 42, 43, 48, 54, 55, 59, 61, 65, 68, 71, 73, 74, 75, 78, 79, 80, 84, 87, 89, 93, 96], "cpu": [12, 18, 19, 27, 43, 54, 55, 59, 61, 65, 84, 89], "shape": [12, 18, 19, 25, 27, 28, 31, 33, 41, 47, 54, 64, 86, 102], "size": [12, 18, 19, 28, 29, 33, 34, 36, 44, 47, 48, 68, 75, 84, 87, 93, 100, 102, 103], "dtype": [12, 19, 25, 47, 83, 84], "requires_grad": [12, 19, 25], "bool": [12, 19, 21, 30, 31, 44, 45, 59, 68, 74, 75, 79, 93, 102], "dim": [12, 19, 82], "add_parameter_listen": [12, 18, 19, 53], "listen": [12, 14, 18, 19, 53], "fire_parameter_chang": [12, 19, 53], "index": [12, 14, 18, 19, 22, 26, 28, 34, 39, 41, 43, 45, 46, 51, 53, 54, 55, 58, 59, 61, 64, 65, 70, 74, 83, 100, 102, 103, 104], "event": [12, 14, 18, 19, 22, 33, 34, 41, 43, 44, 46, 51, 53, 54, 55, 58, 59, 61, 64, 65, 70, 74, 100, 102, 103], "classproperti": 13, "attribut": [13, 26, 31, 39, 43, 62, 65, 66], "fget": 13, "function": [13, 38, 45, 63, 93, 96, 102, 106, 107, 108, 109, 110, 111, 114, 115, 125, 129, 131, 147, 149, 152, 154, 159, 168, 169, 173, 177, 184, 186], "get": [13, 42, 50], "fset": 13, "fdel": 13, "del": 13, "ing": 13, "doc": [13, 75], "docstr": 13, "typic": 13, "defin": 13, "manag": 13, "c": [13, 41, 50, 63], "object": [13, 14, 17, 19, 20, 25, 26, 27, 28, 31, 39, 41, 42, 51, 53, 80, 81, 84, 87, 89, 95, 96, 100, 101, 102, 103, 199], "def": [13, 20, 25], "getx": 13, "self": [13, 19, 20, 25, 102], "_x": 13, "setx": 13, "delx": 13, "m": [13, 102], "decor": 13, "make": 13, "new": [13, 33], "modifi": [13, 87], "exist": [13, 33], "ones": 13, "easi": 13, "am": 13, "setter": 13, "delet": 13, "abstractparamet": [14, 16, 17, 18, 19, 22, 26, 27, 28, 29, 30, 31, 36, 39, 40, 41, 44, 45, 46, 47, 51, 52, 54, 56, 58, 59, 61, 65, 66, 67, 68, 74, 83, 84, 87, 89, 102], "multipl": [14, 18, 29, 30, 47, 64, 70, 83], "so": 14, "referenc": [14, 17, 53, 80, 84, 89], "should": [14, 20, 25, 31], "updat": [14, 19], "modellisten": [14, 18, 22], "callabl": [14, 18, 29, 30, 47, 64, 70, 83], "handle_model_chang": [14, 18, 19, 22, 26, 28, 39, 43, 45, 46, 53, 54, 55, 58, 59, 61, 65, 83], "obj": [14, 17, 18, 19, 20, 22, 25, 26, 28, 39, 43, 45, 46, 53, 54, 55, 58, 59, 61, 65, 83], "handle_parameter_chang": [14, 18, 19, 22, 34, 41, 43, 46, 51, 53, 54, 55, 58, 59, 61, 64, 65, 70, 74, 100, 102, 103], "variabl": [14, 18, 19, 22, 26, 28, 29, 34, 36, 39, 41, 43, 46, 51, 53, 54, 55, 58, 59, 61, 64, 65, 70, 74, 100, 102, 103], "classmethod": [14, 17, 19, 24, 25, 26, 27, 28, 29, 30, 31, 34, 36, 39, 41, 42, 43, 44, 45, 46, 47, 48, 51, 53, 54, 55, 57, 58, 59, 61, 62, 64, 65, 66, 68, 70, 71, 73, 74, 75, 78, 80, 83, 84, 87, 89, 93, 95, 96, 100, 102, 103], "from_json": [14, 17, 19, 24, 26, 27, 28, 29, 30, 31, 34, 36, 39, 41, 42, 43, 44, 45, 46, 47, 48, 51, 53, 54, 55, 57, 58, 59, 61, 62, 64, 65, 66, 68, 70, 71, 73, 74, 75, 78, 80, 83, 84, 87, 89, 93, 95, 96, 100, 102, 103], "dic": [14, 17, 19, 24, 25, 26, 27, 28, 29, 30, 31, 34, 36, 39, 41, 42, 43, 44, 45, 46, 47, 48, 51, 53, 54, 55, 57, 58, 59, 61, 62, 64, 65, 66, 68, 70, 71, 73, 74, 75, 78, 80, 81, 83, 84, 87, 89, 93, 95, 96, 100, 102, 103], "packag": [16, 49, 76, 85, 91, 105, 116, 130, 146, 171, 185, 190, 192, 195, 199], "framework": [16, 67, 116], "classproperty_decor": [16, 67], "identifi": [16, 26, 31, 39, 41, 67, 100, 103], "parameter_encod": [16, 67], "parameter_util": [16, 67], "parametr": [16, 18, 43, 46, 54, 55, 56, 57, 58, 59, 61, 65, 66, 67, 81, 122], "runnabl": [16, 67], "serializ": [16, 20, 25, 67], "loggerinterfac": [17, 80], "thing": [17, 80], "like": [17, 20, 25], "tree": [17, 27, 31, 41, 46, 50, 51, 53, 63, 64, 65, 66, 98, 145], "initi": [17, 25, 75], "close": 17, "run": [17, 23, 71, 78, 80, 96, 97], "callablemodel": [17, 18, 29, 30, 34, 47, 64, 70, 71, 74, 78, 79, 83, 93, 96, 100, 102, 103], "everi": [17, 81, 93], "frequenc": [17, 56, 58, 59, 61, 64], "represent": [17, 26, 31, 39, 53, 80, 84, 89], "addit": [17, 53, 80, 84, 89], "treelogg": 17, "treemodel": [17, 27, 46, 52, 64, 65], "csv": 17, "writ": 17, "dumper": 17, "save": [17, 21], "write": 17, "monitor": [18, 43, 46, 54, 55, 56, 57, 58, 59, 61, 65, 66], "chang": [18, 43, 46, 54, 55, 56, 57, 58, 59, 61, 63, 65, 66], "build": [18, 33, 43, 46, 54, 55, 56, 57, 58, 59, 61, 65, 66], "block": [18, 43, 46, 50, 54, 55, 56, 57, 58, 59, 61, 65, 66], "more": [18, 33, 43, 46, 54, 55, 56, 57, 58, 59, 61, 65, 66], "complex": [18, 43, 46, 54, 55, 56, 57, 58, 59, 61, 65, 66], "tag": [18, 65], "sample_shap": [18, 19, 28, 29, 34, 36, 47, 84, 87], "sampl": [18, 26, 28, 29, 34, 36, 44, 45, 47, 50, 53, 68, 74, 75, 79, 80, 84, 87, 92, 93, 100, 102, 103], "add_model_listen": 18, "remove_model_listen": 18, "parameterlisten": [18, 22], "remove_parameter_listen": 18, "fire_model_chang": 18, "collect": [18, 29, 30, 47, 64, 70, 83], "cach": [18, 29, 30, 47, 64, 70, 83], "case": [18, 29, 30, 47, 64, 70, 83], "we": [18, 29, 30, 47, 64, 70, 83], "need": [18, 29, 30, 33, 47, 64, 70, 83], "time": [18, 26, 27, 29, 30, 31, 44, 45, 47, 64, 70, 83], "without": [18, 29, 30, 47, 64, 70, 83], "recomput": [18, 29, 30, 47, 64, 70, 83], "grad_fn": 19, "grad": 19, "detach": 19, "copy_": 19, "clone": 19, "": [19, 33, 44, 64, 82, 92, 93, 102, 103], "perform": 19, "convers": 19, "infer": [19, 40, 41, 67, 100, 103], "call": [19, 20, 25, 33, 63], "static": [19, 26, 27, 28, 29, 39, 46, 59, 65, 66, 93], "json_factori": [19, 26, 27, 28, 29, 39, 46, 65, 66], "instanc": [19, 22, 33, 53, 84, 87], "apply_transform": 19, "viewparamet": 19, "slice": [19, 25, 55], "assign": 19, "catparamet": 19, "ellipsi": [19, 48], "0": [19, 25, 26, 31, 33, 39, 40, 48, 50, 52, 63, 65, 68, 82, 87, 90, 92, 93, 102], "concaten": 19, "dimens": [19, 33, 82, 102], "moduleparamet": 19, "parameterencod": 20, "skipkei": [20, 25], "fals": [20, 25, 43, 44, 47, 55, 64, 65, 82, 87, 102], "ensure_ascii": [20, 25], "true": [20, 21, 25, 26, 30, 31, 33, 39, 40, 44, 45, 47, 48, 50, 52, 55, 63, 65, 68, 82], "check_circular": [20, 25], "allow_nan": [20, 25], "sort_kei": [20, 25], "indent": [20, 25], "separ": [20, 25], "default": [20, 25, 31, 65, 93], "extens": [20, 25, 33], "http": [20, 25, 75, 87, 189], "org": [20, 25, 75], "encod": [20, 25, 48], "python": [20, 25], "structur": [20, 25], "support": [20, 25, 33, 38, 44, 47], "follow": [20, 25, 88, 190], "arrai": [20, 25], "float": [20, 25, 26, 31, 35, 37, 39, 47, 48, 53, 63, 64, 65, 66, 68, 73, 74, 79, 82, 93, 103], "null": [20, 25], "To": [20, 25], "extend": [20, 25, 103], "recogn": [20, 25], "other": [20, 25, 39], "subclass": [20, 25, 33], "implement": [20, 25, 27, 33, 85, 86, 185], "method": [20, 25, 33, 65, 66, 92], "anoth": [20, 25], "o": [20, 25, 102], "possibl": [20, 25], "otherwis": [20, 25], "superclass": [20, 25], "rais": [20, 25], "typeerror": [20, 25], "base": [20, 25, 33, 38, 47, 75, 84, 87, 93], "For": [20, 25, 33, 65], "exampl": [20, 25, 26, 31, 33, 39, 40, 50, 65, 82], "arbitrari": [20, 25], "iter": [20, 25, 71, 75, 78, 93, 96], "you": [20, 25], "could": [20, 25], "try": [20, 25, 50], "except": [20, 25, 129], "pass": [20, 25], "els": [20, 25], "let": [20, 25, 33], "jsonencod": [20, 25], "save_paramet": 21, "safe": 21, "output": [21, 40, 50, 52, 63, 93], "temporari": 21, "pack_tensor": 21, "pack": 21, "register_paramet": 22, "name": [22, 25, 50], "register_model": 22, "jsonserializ": 24, "from_json_saf": 24, "registered_class": 25, "tensorencod": 25, "as_tensor": 25, "dct": 25, "float64": 25, "tensor_rand": 25, "given": [25, 40, 52, 63], "continu": [25, 27, 82], "normal": [25, 28, 32, 36, 39, 40, 59, 67, 84, 85, 87, 102, 143, 185], "log_norm": [25, 32, 67], "uniform": [25, 33], "discret": 25, "random": [25, 26, 28, 29, 31, 36, 39], "bernoulli": 25, "e": [25, 31, 44, 45, 64, 103], "g": 25, "sequenc": [25, 33, 42, 55, 82], "_": 25, "manual_se": 25, "t1": 25, "4": [25, 61, 102], "0820": 25, "4131": 25, "t2": 25, "t3": 25, "get_class": 25, "full_nam": 25, "jsonparseerror": 25, "common": 25, "all": [25, 40, 93], "non": [25, 44], "exit": 25, "process_object": 25, "force_list": 25, "kei": [25, 26, 31, 39, 65, 66, 89], "signalhandl": 25, "signum": 25, "frame": 25, "valid": 25, "rule": 25, "remove_com": 25, "replace_wildcard_with_str": 25, "wildcard": 25, "replace_star_with_str": 25, "expand_pl": 25, "parent": 25, "idx": 25, "update_paramet": 25, "recurs": 25, "present": [25, 44], "print_graph": 25, "level": 25, "print": [25, 93], "comput": [25, 40, 52, 63, 93, 102], "graph": 25, "alternativeattributeerror": 25, "custom": 25, "debug": 25, "conflict": 25, "between": [25, 44, 45, 93], "__getattr__": 25, "stackoverflow": 25, "com": [25, 87, 189], "question": 25, "36575068": 25, "attributeerror": 25, "undesir": 25, "interact": 25, "getattr": 25, "wrapper": [25, 29, 89, 95, 96], "f": [25, 33, 86], "wrap": 25, "rerais": 25, "altern": 25, "string_to_list_index": 25, "index_str": 25, "package_cont": 25, "package_nam": 25, "register_class": 25, "_cl": 25, "bayesian": [26, 27, 41, 131], "bridg": [26, 131], "bayesianbridg": 26, "core": [26, 27, 28, 29, 30, 31, 36, 39, 40, 41, 44, 45, 46, 47, 51, 52, 53, 54, 56, 58, 59, 61, 65, 66, 67, 68, 70, 71, 74, 78, 79, 80, 81, 83, 84, 87, 89, 93, 96, 100, 102, 103], "alpha": [26, 31, 41, 58, 103], "local_scal": [26, 39], "slab": [26, 39], "polson2014": 26, "nishimura2019": 26, "global": [26, 39], "expon": 26, "local": [26, 39], "width": [26, 39, 75], "polson": 26, "scott": 26, "2014": 26, "nishimura": 26, "suchard": [26, 27], "2019": 26, "shrinkag": [26, 39], "shrunken": 26, "shoulder": 26, "gibb": 26, "posterior": 26, "guarante": 26, "converg": [26, 67, 94], "mandatori": [26, 31, 39], "uniqu": [26, 31, 39, 100, 103], "3": [26, 31, 40, 82, 102], "bridge_d": 26, "isinst": [26, 31, 39], "onli": 26, "one": [26, 44, 45], "them": 26, "must": [26, 31], "process_object_numb": 26, "ctmcscale": 27, "ctmc": 27, "substitutin": 27, "ferreira": 27, "analysi": 27, "elaps": 27, "markov": [27, 31], "chain": 27, "2008": 27, "log_gamma_one_half": 27, "deterministicnorm": 28, "determinist": 28, "drawn": 28, "dure": [28, 75], "creation": 28, "evalu": [28, 29, 36, 38, 44, 45, 47, 93], "locat": [28, 39], "event_shap": [28, 29, 33, 36], "batch_shap": [28, 29, 33, 36, 87], "rsampl": [28, 29, 34, 36, 47, 84, 87], "log_prob": [28, 29, 34, 36, 38, 44, 45, 47, 84, 87], "entropi": [28, 29, 34, 36, 84, 87, 102], "distributionmodel": [29, 34, 80, 100, 102, 103], "dist": 29, "ordereddict": [29, 87, 89], "instanci": [29, 81], "field": [30, 31], "precis": [30, 31, 36, 37], "timetreemodel": [30, 31, 44, 45, 47, 51, 63, 65], "weight": [30, 31, 40, 55, 64, 74, 79, 86, 102], "rescal": [30, 31, 64], "gmrfcovari": 30, "beta": [30, 31, 58], "integr": [31, 67, 68, 71, 72, 74, 76, 102, 136], "gmrf": [31, 32, 67, 136], "gamma": [31, 39, 41, 68, 90, 136], "gmrfgammaintegr": 31, "product": 31, "respect": 31, "parameter": [31, 35, 37, 40, 63], "tau": [31, 82], "awar": 31, "root": [31, 44, 53, 67], "height": [31, 50, 53, 63, 65, 66], "p": [31, 33, 52, 100, 102, 103], "mid": 31, "d": [31, 82], "frac": [31, 40, 44, 52], "prod_": 31, "n": [31, 64, 82, 100, 102], "sqrt": 31, "pi": 31, "x_": [31, 63], "x_i": [31, 40, 63], "left": 31, "right": 31, "sum_": [31, 40], "idea": 31, "cheng": 31, "zhang": 31, "gmrf_dic": 31, "If": 31, "skygrid": 31, "ignor": 31, "parameteriz": [32, 130], "probabl": [32, 38, 44, 45, 47, 54, 61, 64, 130], "bayesian_bridg": [32, 67], "ctmc_scale": [32, 67], "deterministic_norm": [32, 67], "gmrf_integr": [32, 67], "inverse_gamma": [32, 67], "joint_distribut": [32, 67], "multivariate_norm": [32, 67], "one_on_x": [32, 67], "scale_mixtur": [32, 67], "tree_prior": [32, 67], "inversegamma": 33, "validate_arg": [33, 35, 37, 38, 44, 45, 47], "which": [33, 44, 45], "appli": 33, "composit": 33, "basedistribut": 33, "y": [33, 40, 48, 52, 63, 86, 87], "transformeddistribut": 33, "det": [33, 40, 52, 63], "dx": [33, 40, 52, 63], "dy": [33, 40, 52, 63], "note": 33, "maximum": [33, 93], "its": 33, "sinc": [33, 64], "introduc": 33, "correl": 33, "among": 33, "usag": 33, "would": 33, "logist": 33, "b": [33, 40, 44, 45, 50, 52, 61, 64, 86], "logit": 33, "base_distribut": 33, "sigmoidtransform": 33, "inv": [33, 40], "affinetransform": 33, "pleas": 33, "gumbel": 33, "halfcauchi": 33, "halfnorm": 33, "lognorm": [33, 35], "pareto": 33, "weibul": 33, "relaxedbernoulli": 33, "relaxedonehotcategor": 33, "arg_constraint": [33, 38, 44, 45, 47], "has_rsampl": [33, 47], "expand": 33, "_instanc": 33, "popul": [33, 44], "deriv": 33, "batch": [33, 47, 64], "As": 33, "doe": [33, 93], "alloc": 33, "memori": 33, "addition": 33, "repeat": 33, "check": [33, 93], "broadcast": 33, "__init__": 33, "py": 33, "first": [33, 64], "desir": 33, "overrid": 33, "batch_siz": [33, 86], "jointdistributionmodel": 34, "independ": 34, "mean": [35, 36, 37, 39, 41, 92], "scale_r": 35, "multivariatenorm": 36, "covariance_matrix": 36, "precision_matrix": 36, "scale_tril": [36, 40], "multivari": [36, 40], "tril": 36, "often": 37, "refer": [37, 65, 66, 75], "mu": [37, 44, 45, 52, 54, 68, 90], "sigma": 37, "oneonx": 38, "densiti": [38, 44, 45, 47, 87, 189], "mass": [38, 44, 45, 47, 75], "mixtur": [39, 143], "scalemixturenorm": 39, "regular": [39, 68], "scalar": [39, 82], "piironen2017": 39, "piironen": 39, "vehtari": 39, "2017": 39, "sparsiti": 39, "horsesho": 39, "global_scal": 39, "mixture_d": 39, "invert": [40, 144], "trilexpdiagonaltransform": 40, "cache_s": [40, 52, 63], "1d": 40, "triangular": 40, "exponenti": 40, "lower": [40, 102], "posit": 40, "7183": 40, "0000": 40, "20": 40, "0855": 40, "biject": [40, 52, 63], "sign": [40, 52, 63], "log_abs_det_jacobian": [40, 52, 63, 86], "input": [40, 52, 63, 82, 86], "cumsumtransform": 40, "via": [40, 100], "y_i": [40, 52, 63], "j": [40, 63, 102], "x_j": 40, "6": 40, "domain": 40, "codomain": 40, "cumsumexptransform": 40, "exp": 40, "softplustransform": 40, "cumsumsoftplustransform": 40, "convexcombinationtransform": 40, "unconstrain": 40, "space": 40, "k": [40, 61, 63, 64, 82, 102], "alpha_i": [40, 102], "order": [40, 63, 100, 103], "satisfi": 40, "where": [40, 63, 86, 102], "geq": 40, "sum": [40, 52], "logtransform": 40, "lineartransform": 40, "ax": 40, "phylogenet": [41, 145], "compoundgammadirichletprior": 41, "unrootedtreemodel": [41, 65], "compound": 41, "dirichlet": 41, "unroot": 41, "rannala2011": 41, "ratio": [41, 63, 65], "intern": [41, 64, 65, 66], "extern": 41, "branch": [41, 44, 61, 64, 65], "length": [41, 51, 61, 65], "rannala": 41, "zhu": 41, "ziheng": 41, "yang": 41, "tail": 41, "paradox": 41, "partial": [41, 48, 55, 64], "influenti": 41, "2011": 41, "datatyp": [42, 43, 49, 58, 59, 67], "sequence_s": 42, "filenam": 42, "read_fasta_sequ": 42, "calculate_frequ": 42, "calculate_frequencies_per_codon_posit": 42, "calculate_f3x4_from_nucleotid": 42, "nuc_freq": 42, "calculate_f3x4": 42, "calculate_substitut": 42, "calculate_ts_tv": 42, "calculate_kappa": 42, "freq": [42, 64], "attributepattern": 43, "compute_tips_st": [43, 55], "compute_tips_parti": [43, 55], "use_ambigu": [43, 48, 55, 64], "epidemiology_to_birth_death": 44, "r": [44, 52, 63], "delta": [44, 68], "convert": 44, "epidemiologi": 44, "birth": [44, 45], "death": [44, 45], "effect": 44, "reproduct": 44, "total": 44, "becom": 44, "infecti": 44, "individu": 44, "being": 44, "remov": 44, "lambda": [44, 45], "psi": [44, 45], "bdskmodel": 44, "rho": [44, 45], "origin": [44, 45], "origin_is_root_edg": 44, "relative_tim": 44, "surviv": [44, 45], "removal_prob": 44, "skylin": 44, "plot": 44, "transmiss": 44, "process": [44, 45], "start": [44, 45, 65, 93], "t_0": [44, 45], "abov": [44, 64], "shift": [44, 53, 65], "rel": [44, 93], "condit": [44, 45], "observ": [44, 45], "least": [44, 45], "noninfecti": 44, "immedi": 44, "after": [44, 64], "piecewiseconstantbirthdeath": 44, "lambda_": [44, 45], "piecewis": 44, "constant": [44, 45], "effort": [44, 45], "log_q": [44, 45], "t": [44, 45, 64, 86], "t_i": [44, 45], "lineag": [44, 45], "aliv": [44, 45], "give": [44, 45], "rise": [44, 45], "clade": [44, 45], "p0": 44, "log_p": [44, 45], "ha": [44, 45], "descend": [44, 45], "t_m": [44, 45], "node_height": [44, 45, 47, 65], "birthdeathmodel": 45, "birthdeath": 45, "branchmodel": [46, 51, 64], "abstractclockmodel": 46, "strictclockmodel": 46, "simpleclockmodel": 46, "abstractcoalescentmodel": 47, "constantcoalescentmodel": 47, "abstractcoalescentdistribut": 47, "maximum_likelihood": 47, "constantcoalesc": 47, "gener": [47, 49, 60, 67], "reparameter": 47, "exponentialcoalescentmodel": 47, "growth": 47, "exponentialcoalesc": 47, "piecewiseconstantcoalesc": 47, "piecewiseconstantcoalescentmodel": 47, "piecewiseconstantcoalescentgrid": 47, "grid": 47, "softpiecewiseconstantcoalescentgrid": 47, "temperatur": [47, 82], "piecewiseconstantcoalescentgridmodel": 47, "faketreemodel": 47, "process_data_coales": 47, "piecewiseexponentialcoalescentgrid": 47, "state": [48, 64], "state_count": [48, 59], "abstractdatatyp": 48, "nucleotidedatatyp": 48, "nucleotid": [48, 49, 60, 67], "acgtukmrswybdhvn": 48, "nucleotide_st": 48, "17": 48, "nucleotide_ambiguity_st": 48, "aminoaciddatatyp": 48, "amino_acid": [48, 49, 60, 67], "acdefghiklmnpqrstvwybzx": 48, "amino_acids_st": 48, "25": 48, "amino_acids_ambiguity_st": 48, "codondatatyp": [48, 58], "genetic_cod": 48, "genetic_code_t": 48, "knknttttrsrsiimiqhqhpppprrrrllllededaaaaggggvvvv": 48, "yssss": 48, "cwclflf": 48, "genetic_code_nam": 48, "univers": 48, "vertebr": 48, "mitochondri": 48, "yeast": 48, "mold": 48, "protozoan": 48, "mycoplasma": 48, "number_of_codon": 48, "61": 48, "60": 48, "62": 48, "63": 48, "64": 48, "codon_triplet": 48, "aaa": 48, "aac": 48, "aag": 48, "aat": 48, "aca": 48, "acc": 48, "acg": 48, "act": 48, "aga": 48, "agc": 48, "agg": 48, "agt": 48, "ata": 48, "codon": [48, 49, 60, 67], "generaldatatyp": 48, "code": [48, 68, 75, 87, 90, 93, 189], "ambigu": 48, "evolutionari": [49, 146], "attribute_pattern": [49, 67], "bdsk": [49, 67], "birth_death": [49, 67], "coalesc": [49, 67], "io": [49, 67], "poisson_tree_likelihood": [49, 67], "rate_transform": [49, 67], "root_transform": [49, 67], "tree_height_transform": [49, 67], "tree_likelihood": [49, 67], "tree_model_flex": [49, 67], "read_tre": 50, "date": [50, 65], "heterochorn": 50, "read_tree_and_align": 50, "to_nexu": 50, "node": [50, 52, 63, 64, 65, 66], "fp": 50, "convert_samples_to_nexu": 50, "random_tree_from_height": 50, "parse_transl": 50, "parse_tre": [50, 65], "count": 50, "parse_taxa": 50, "split_newick": 50, "newick": [50, 65, 66], "split": 50, "format": [50, 65, 66], "around": 50, "extract_taxa": 50, "extract": 50, "taxon": [50, 62, 65], "nexu": 50, "poissontreelikelihood": 51, "clock_model": [51, 64], "edge_length": 51, "likelihood": [51, 64], "poisson": 51, "clock": 51, "edg": 51, "logdifferenceratetransform": 52, "differ": [52, 63, 93], "adjac": 52, "r_i": 52, "r_": 52, "rescaledratetransform": 52, "substitut": [52, 53], "tild": 52, "_i": 52, "rootparamet": 53, "distanc": 53, "calcul": [53, 61, 64, 65, 93, 102], "amount": 53, "serial": 53, "sitemodel": [54, 64], "constantsitemodel": 54, "invariantsitemodel": 54, "invari": 54, "update_rates_prob": 54, "univariatediscretizedsitemodel": 54, "categori": [54, 64], "inverse_cdf": 54, "quantil": 54, "update_r": 54, "weibullsitemodel": 54, "lognormalsitemodel": 54, "sitepattern": [55, 64], "compress": 55, "compress_align": 55, "compress_alignment_st": 55, "substitutionmodel": [56, 64], "p_t": [56, 59, 61], "branch_length": [56, 59, 61, 65], "q": [56, 58, 59, 61, 100, 102, 103], "abstractsubstitutionmodel": 56, "norm": 56, "symmetricsubstitutionmodel": 56, "eigen": [56, 59], "nonsymmetricsubstitutionmodel": 56, "lg": 57, "wag": 57, "mg94": 58, "kappa": [58, 61, 68, 90], "generaljc69": 59, "generalsymmetricsubstitutionmodel": 59, "generalnonsymmetricsubstitutionmodel": 59, "empiricalsubstitutionmodel": 59, "create_rate_matrix": 59, "jc69": 61, "transit": 61, "matric": [61, 64], "hky": 61, "p_t_analyt": 61, "gtr": 61, "generalnodeheighttransform": 63, "sort_indic": 63, "update_bound": 63, "topologi": 63, "differencenodeheighttransform": 63, "max": 63, "x_c": 63, "jth": 63, "child": 63, "mathbb": 63, "approxim": [63, 102], "logsumexp": 63, "propag": 63, "gradient": [63, 102], "calculate_treelikelihood": 64, "post_index": 64, "mat": 64, "simpl": 64, "leav": 64, "postord": [64, 65], "calculate_treelikelihood_discret": 64, "prop": 64, "tip": 64, "2t": 64, "site": 64, "peel": 64, "proport": 64, "calculate_treelikelihood_tip_states_discret": 64, "calculate_treelikelihood_discrete_saf": 64, "threshold": 64, "underflow": 64, "detect": 64, "inf": 64, "recalcul": 64, "calculate_treelikelihood_discrete_resc": 64, "calculate_treelikelihood_tip_states_discrete_resc": 64, "treelikelihoodmodel": 64, "subst_model": 64, "use_tip_st": 64, "calculate_with_tip_parti": 64, "prob": 64, "calculate_with_tip_st": 64, "heights_to_branch_length": 65, "bound": [65, 100, 102, 103], "setup_index": 65, "indices_postord": 65, "setup_d": 65, "heterochron": 65, "initialize_dates_from_taxa": 65, "heights_from_branch_length": 65, "ep": [65, 87], "1e": [65, 87], "06": 65, "write_newick": 65, "steam": 65, "abstracttreemodel": 65, "update_travers": 65, "as_newick": 65, "stream": 65, "factori": [65, 66], "branch_lengths_id": 65, "taxa_id": 65, "keep_branch_length": 65, "compat": [65, 66], "internal_height": [65, 66], "update_leaf_height": 65, "distal": 65, "side": 65, "internal_heights_id": [65, 66], "reparameterizedtimetreemodel": 65, "ratios_root_height": 65, "update_node_height": 65, "root_height": 65, "flexibletimetreemodel": 66, "cli": 67, "adapt": [67, 72, 74, 75, 76, 90, 93, 102], "adaptor": [67, 68, 72, 74, 75, 76], "hamiltonian": [67, 68, 71, 72, 76], "oper": [67, 72, 76, 77, 78, 82], "stan_adapt": [67, 72, 76], "mcmc": [67, 76], "sampler": [67, 76], "nf": 67, "energy_funct": [67, 85], "flow": [67, 85, 86, 87, 185, 189], "planar": [67, 85], "realnvp": [67, 85], "nn": [67, 84, 86, 87], "op": 67, "dual_averag": [67, 91], "welford": [67, 91], "optim": 67, "lr_schedul": [67, 94], "chi": [67, 101], "kl": [67, 101], "renyi": [67, 101], "math": [67, 91, 192], "treeregress": 67, "learn": [68, 75], "acceptance_prob": [68, 74, 75, 79], "accept": [68, 74, 75, 79], "restart": [68, 75, 90], "adaptivesteps": 68, "leapfrogintegr": [68, 73], "target_acceptance_prob": [68, 74, 79], "dualaveragingsteps": [68, 75], "5": [68, 90], "8": 68, "05": [68, 87, 90], "75": [68, 90], "t0": [68, 90], "10": [68, 82, 90], "step": [68, 73, 75, 79, 90, 95], "dual": [68, 90], "averag": [68, 90], "nesterov": [68, 90], "stan": [68, 75, 90, 93], "dev": [68, 90, 93], "massmatrixadaptor": 68, "listparamet": [68, 71, 74, 81, 96, 99], "mass_matrix": [68, 70, 74], "find_reasonable_step_s": [68, 71], "inverse_mass_matrix": [68, 70], "warmupadapt": 68, "step_siz": [68, 73], "sqrt_mass_matrix": 68, "sample_momentum": [70, 71], "potential_energi": 70, "kinetic_energi": 70, "momentum": [70, 71, 87], "set_tensor": 73, "hmcoper": 74, "adaptable_paramet": [74, 79], "update_mass_matric": 74, "set_adaptable_paramet": [74, 79], "tune": [74, 79], "stanwindowedadapt": 75, "step_size_adaptor": 75, "mass_matrix_adaptor": 75, "num_warmup": 75, "init_buff": 75, "term_buff": 75, "base_window": 75, "warmup": 75, "period": 75, "see": 75, "onlin": [75, 92], "manual": 75, "further": 75, "detail": 75, "mc": 75, "algorithm": [75, 93], "html": 75, "fast": 75, "interv": 75, "final": 75, "window": 75, "slow": 75, "statist": [76, 90, 102, 171], "mcmcoper": [78, 79], "reject": 79, "draw": 80, "extract_tensors_and_paramet": 81, "listtensor": [81, 99], "pars": 81, "soft_sort": 82, "relax": 82, "argsort": 82, "permut": 82, "prillo": 82, "eisenschlo": 82, "softsort": 82, "2020": 82, "soft_max": 82, "keepdim": 82, "soft_searchsort": 82, "sorted_sequ": 82, "serachsort": 82, "monoton": 82, "increas": 82, "innermost": 82, "search": [82, 104], "select": 82, "100": 82, "11": 82, "0001": 82, "5000": 82, "30": 82, "soft_select": 82, "searchsort": 82, "argmax": 82, "w1": 83, "z": [83, 86], "w2": 83, "w3": 83, "energyfunctionmodel": 83, "normalizingflow": 84, "forward": [84, 86, 87], "apply_flow": [84, 87], "planartransform": 86, "u": [86, 87], "tanh": 86, "dot": 86, "learnabl": 86, "input_s": [86, 87], "factor": 86, "bia": 86, "u_hat": 86, "mask": [87, 189], "autoregress": [87, 189], "estim": [87, 92, 100, 102, 103, 189], "arxiv": [87, 189], "1705": [87, 189], "07057v4": [87, 189], "port": [87, 189], "github": [87, 189], "kamenbliznashki": [87, 189], "normalizing_flow": [87, 189], "linearmaskedcoupl": 87, "hidden_s": 87, "n_hidden": 87, "cond_label_s": 87, "coupl": 87, "layer": 87, "per": 87, "maf": 87, "paper": 87, "invers": 87, "batchnorm": 87, "9": 87, "cond_i": 87, "flowsequenti": 87, "n_block": 87, "batch_norm": 87, "loos": [88, 190], "design": [88, 190], "ordereddicttyp": [89, 99], "dualaverag": 90, "welfordvari": 92, "co": 92, "add_sampl": 92, "reset": 92, "baseconverg": 93, "diagnost": 93, "variationalconverg": 93, "loss": [93, 96], "elbo": [93, 102], "sy": 93, "stdout": 93, "stanvariationalconverg": 93, "max_iter": 93, "tol_rel_obj": 93, "01": 93, "sgd": 93, "toler": 93, "rel_differ": 93, "prev": 93, "curr": 93, "two": 93, "doubl": 93, "previou": 93, "current": 93, "absolut": 93, "schedul": 95, "_lrschedul": 95, "regress": 98, "cubo": 100, "repres": [100, 102, 103], "upper": 100, "form": [100, 103], "diverg": [100, 102, 103], "adji": 100, "bousso": 100, "dieng": 100, "dustin": 100, "tran": 100, "rajesh": 100, "ranganath": 100, "john": 100, "paislei": 100, "david": 100, "blei": 100, "minim": [100, 102], "score": 102, "evid": 102, "maxim": 102, "equival": 102, "exclus": 102, "kullback": 102, "leibler": 102, "most": 102, "dimension": 102, "multi": 102, "klqp": 102, "instead": 102, "mont": 102, "carlo": 102, "pathwis": 102, "klpq": 102, "inclus": 102, "oh": 102, "berger": 102, "1992": 102, "journal": 102, "simul": 102, "41": 102, "143": 102, "168": 102, "klpqimport": 102, "selbo": 102, "compon": 102, "stratifi": 102, "sum_i": 102, "q_i": 102, "vr": 103, "tradit": 103, "r\u00e9nyi": 103, "yingzhen": 103, "li": 103, "richard": 103, "turner": 103, "page": 104, "class": [112, 113, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 173, 175, 176, 177, 178, 179, 181, 182, 183, 186, 187, 188, 189, 191, 193, 194, 196, 197, 198, 200, 201, 202]}, "objects": {"": [[67, 0, 0, "-", "torchtree"]], "torchtree": [[0, 0, 0, "-", "_version"], [105, 0, 0, "-", "cli"], [116, 0, 0, "-", "core"], [130, 0, 0, "-", "distributions"], [146, 0, 0, "-", "evolution"], [171, 0, 0, "-", "inference"], [82, 0, 0, "-", "math"], [185, 0, 0, "-", "nf"], [190, 0, 0, "-", "nn"], [192, 0, 0, "-", "ops"], [195, 0, 0, "-", "optim"], [97, 0, 0, "-", "torchtree"], [98, 0, 0, "-", "treeregression"], [99, 0, 0, "-", "typing"], [199, 0, 0, "-", "variational"]], "torchtree.cli": [[5, 1, 1, "", "PLUGIN_MANAGER"], [106, 0, 0, "-", "advi"], [107, 0, 0, "-", "cli"], [108, 0, 0, "-", "evolution"], [109, 0, 0, "-", "hmc"], [110, 0, 0, "-", "jacobians"], [111, 0, 0, "-", "map"], [112, 0, 0, "-", "plugin"], [113, 0, 0, "-", "plugin_manager"], [114, 0, 0, "-", "priors"], [115, 0, 0, "-", "utils"]], "torchtree.cli.advi": [[1, 2, 1, "", "apply_affine_transform"], [1, 2, 1, "", "apply_exp_transform"], [1, 2, 1, "", "apply_sigmoid_transformed"], [1, 2, 1, "", "apply_simplex_transform"], [1, 2, 1, "", "apply_transforms_for_fullrank"], [1, 2, 1, "", "build_advi"], [1, 2, 1, "", "create_advi"], [1, 2, 1, "", "create_flexible_variational"], [1, 2, 1, "", "create_fullrank"], [1, 2, 1, "", "create_fullrank_from_meanfield"], [1, 2, 1, "", "create_gamma_distribution"], [1, 2, 1, "", "create_logger"], [1, 2, 1, "", "create_meanfield"], [1, 2, 1, "", "create_normal_distribution"], [1, 2, 1, "", "create_realnp_distribution"], [1, 2, 1, "", "create_realnvp"], [1, 2, 1, "", "create_sampler"], [1, 2, 1, "", "create_tril"], [1, 2, 1, "", "create_variational_model"], [1, 2, 1, "", "create_variational_parser"], [1, 2, 1, "", "create_weibull_distribution"], [1, 2, 1, "", "gather_parameters"], [1, 1, 1, "", "logger"]], "torchtree.cli.cli": [[2, 2, 1, "", "main"]], "torchtree.cli.evolution": [[3, 2, 1, "", "add_birth_death"], [3, 2, 1, "", "add_coalescent"], [3, 2, 1, "", "build_alignment"], [3, 2, 1, "", "create_alignment"], [3, 2, 1, "", "create_bd_prior"], [3, 2, 1, "", "create_bdsk"], [3, 2, 1, "", "create_bdsk_prior"], [3, 2, 1, "", "create_birth_death"], [3, 2, 1, "", "create_branch_model"], [3, 2, 1, "", "create_clock_prior"], [3, 2, 1, "", "create_coalesent"], [3, 2, 1, "", "create_constant_bd_prior"], [3, 2, 1, "", "create_constant_birth_death"], [3, 2, 1, "", "create_data_type"], [3, 2, 1, "", "create_evolution_joint"], [3, 2, 1, "", "create_evolution_parser"], [3, 2, 1, "", "create_evolution_priors"], [3, 2, 1, "", "create_general_data_type"], [3, 2, 1, "", "create_poisson_evolution_joint"], [3, 2, 1, "", "create_poisson_tree_likelihood"], [3, 2, 1, "", "create_site_model"], [3, 2, 1, "", "create_site_model_srd06_mus"], [3, 2, 1, "", "create_site_pattern"], [3, 2, 1, "", "create_substitution_model"], [3, 2, 1, "", "create_substitution_model_priors"], [3, 2, 1, "", "create_taxa"], [3, 2, 1, "", "create_time_tree_prior"], [3, 2, 1, "", "create_tree_likelihood"], [3, 2, 1, "", "create_tree_likelihood_general"], [3, 2, 1, "", "create_tree_likelihood_single"], [3, 2, 1, "", "create_tree_model"], [3, 2, 1, "", "create_ucln_prior"], [3, 2, 1, "", "distribution_type"], [3, 2, 1, "", "get_engine"], [3, 2, 1, "", "is_float"], [3, 1, 1, "", "logger"], [3, 2, 1, "", "parse_distribution"], [3, 2, 1, "", "run_tree_regression"], [3, 2, 1, "", "str_or_float"], [3, 2, 1, "", "zero_or_path"]], "torchtree.cli.hmc": [[4, 2, 1, "", "build_hmc"], [4, 2, 1, "", "create_hmc"], [4, 2, 1, "", "create_hmc_operator"], [4, 2, 1, "", "create_hmc_parser"], [4, 2, 1, "", "create_loggers"], [4, 2, 1, "", "create_stan_windowed_adaptation"]], "torchtree.cli.jacobians": [[6, 2, 1, "", "create_jacobians"]], "torchtree.cli.map": [[7, 2, 1, "", "build_optimizer"], [7, 2, 1, "", "create_logger"], [7, 2, 1, "", "create_map_parser"], [7, 2, 1, "", "create_optimizer"], [7, 2, 1, "", "create_tree_logger"]], "torchtree.cli.plugin": [[8, 3, 1, "", "Plugin"]], "torchtree.cli.plugin.Plugin": [[8, 4, 1, "", "load_arguments"], [8, 4, 1, "", "process_all"], [8, 4, 1, "", "process_coalescent"], [8, 4, 1, "", "process_tree_likelihood"]], "torchtree.cli.plugin_manager": [[9, 3, 1, "", "PluginManager"]], "torchtree.cli.plugin_manager.PluginManager": [[9, 4, 1, "", "disable_plugins"], [9, 4, 1, "", "load_arguments"], [9, 4, 1, "", "load_plugins"], [9, 4, 1, "", "plugins"]], "torchtree.cli.priors": [[10, 2, 1, "", "create_clock_horseshoe_prior"], [10, 2, 1, "", "create_one_on_x_prior"]], "torchtree.cli.utils": [[11, 2, 1, "", "convert_date_to_real"], [11, 2, 1, "", "make_unconstrained"], [11, 2, 1, "", "read_dates_from_csv"]], "torchtree.core": [[117, 0, 0, "-", "abstractparameter"], [118, 0, 0, "-", "classproperty_decorator"], [119, 0, 0, "-", "container"], [120, 0, 0, "-", "identifiable"], [121, 0, 0, "-", "logger"], [122, 0, 0, "-", "model"], [123, 0, 0, "-", "parameter"], [124, 0, 0, "-", "parameter_encoder"], [125, 0, 0, "-", "parameter_utils"], [126, 0, 0, "-", "parametric"], [127, 0, 0, "-", "runnable"], [128, 0, 0, "-", "serializable"], [129, 0, 0, "-", "utils"]], "torchtree.core.abstractparameter": [[12, 3, 1, "", "AbstractParameter"], [12, 3, 1, "", "Device"]], "torchtree.core.abstractparameter.AbstractParameter": [[12, 4, 1, "", "add_parameter_listener"], [12, 5, 1, "", "device"], [12, 4, 1, "", "dim"], [12, 5, 1, "", "dtype"], [12, 4, 1, "", "fire_parameter_changed"], [12, 4, 1, "", "parameters"], [12, 5, 1, "", "requires_grad"], [12, 5, 1, "", "shape"], [12, 5, 1, "", "tensor"]], "torchtree.core.abstractparameter.Device": [[12, 4, 1, "", "cpu"], [12, 4, 1, "", "cuda"], [12, 5, 1, "", "device"], [12, 4, 1, "", "to"]], "torchtree.core.classproperty_decorator": [[13, 3, 1, "", "classproperty"]], "torchtree.core.container": [[14, 3, 1, "", "Container"]], "torchtree.core.container.Container": [[14, 4, 1, "", "callables"], [14, 4, 1, "", "from_json"], [14, 4, 1, "", "handle_model_changed"], [14, 4, 1, "", "handle_parameter_changed"], [14, 4, 1, "", "params"]], "torchtree.core.identifiable": [[15, 3, 1, "", "Identifiable"]], "torchtree.core.identifiable.Identifiable": [[15, 5, 1, "", "id"]], "torchtree.core.logger": [[17, 3, 1, "", "CSV"], [17, 3, 1, "", "Dumper"], [17, 3, 1, "", "Logger"], [17, 3, 1, "", "LoggerInterface"], [17, 3, 1, "", "TreeLogger"]], "torchtree.core.logger.CSV": [[17, 4, 1, "", "from_json"], [17, 4, 1, "", "run"]], "torchtree.core.logger.Dumper": [[17, 4, 1, "", "from_json"], [17, 4, 1, "", "run"]], "torchtree.core.logger.Logger": [[17, 4, 1, "", "close"], [17, 4, 1, "", "from_json"], [17, 4, 1, "", "initialize"], [17, 4, 1, "", "log"]], "torchtree.core.logger.LoggerInterface": [[17, 4, 1, "", "close"], [17, 4, 1, "", "initialize"], [17, 4, 1, "", "log"], [17, 4, 1, "", "run"]], "torchtree.core.logger.TreeLogger": [[17, 4, 1, "", "close"], [17, 4, 1, "", "from_json"], [17, 4, 1, "", "initialize"], [17, 4, 1, "", "log"]], "torchtree.core.model": [[18, 3, 1, "", "CallableModel"], [18, 3, 1, "", "Model"]], "torchtree.core.model.CallableModel": [[18, 4, 1, "", "handle_model_changed"], [18, 4, 1, "", "handle_parameter_changed"]], "torchtree.core.model.Model": [[18, 4, 1, "", "add_model_listener"], [18, 4, 1, "", "add_parameter_listener"], [18, 4, 1, "", "cpu"], [18, 4, 1, "", "cuda"], [18, 4, 1, "", "fire_model_changed"], [18, 4, 1, "", "models"], [18, 4, 1, "", "remove_model_listener"], [18, 4, 1, "", "remove_parameter_listener"], [18, 5, 1, "", "sample_shape"], [18, 5, 1, "", "tag"], [18, 4, 1, "", "to"]], "torchtree.core.parameter": [[19, 3, 1, "", "CatParameter"], [19, 3, 1, "", "ModuleParameter"], [19, 3, 1, "", "Parameter"], [19, 3, 1, "", "TransformedParameter"], [19, 3, 1, "", "ViewParameter"]], "torchtree.core.parameter.CatParameter": [[19, 4, 1, "", "add_parameter_listener"], [19, 4, 1, "", "cpu"], [19, 4, 1, "", "cuda"], [19, 5, 1, "", "device"], [19, 4, 1, "", "fire_parameter_changed"], [19, 4, 1, "", "from_json"], [19, 4, 1, "", "handle_model_changed"], [19, 4, 1, "", "handle_parameter_changed"], [19, 5, 1, "", "requires_grad"], [19, 5, 1, "", "tensor"], [19, 4, 1, "", "to"], [19, 4, 1, "", "update"]], "torchtree.core.parameter.ModuleParameter": [[19, 4, 1, "", "add_parameter_listener"], [19, 4, 1, "", "cpu"], [19, 4, 1, "", "cuda"], [19, 4, 1, "", "fire_parameter_changed"], [19, 4, 1, "", "from_json"], [19, 4, 1, "", "handle_model_changed"], [19, 4, 1, "", "handle_parameter_changed"], [19, 4, 1, "", "parameters"], [19, 5, 1, "", "requires_grad"], [19, 5, 1, "", "sample_shape"], [19, 5, 1, "", "shape"], [19, 5, 1, "", "tensor"], [19, 4, 1, "", "to"]], "torchtree.core.parameter.Parameter": [[19, 4, 1, "", "add_parameter_listener"], [19, 4, 1, "", "clone"], [19, 4, 1, "", "copy_"], [19, 4, 1, "", "cpu"], [19, 4, 1, "", "cuda"], [19, 4, 1, "", "detach"], [19, 4, 1, "", "fire_parameter_changed"], [19, 4, 1, "", "from_json"], [19, 5, 1, "", "grad"], [19, 5, 1, "", "grad_fn"], [19, 4, 1, "", "json_factory"], [19, 5, 1, "", "requires_grad"], [19, 4, 1, "", "size"], [19, 5, 1, "", "tensor"], [19, 2, 1, "id6", "to"]], "torchtree.core.parameter.TransformedParameter": [[19, 4, 1, "", "add_parameter_listener"], [19, 4, 1, "", "apply_transform"], [19, 4, 1, "", "cpu"], [19, 4, 1, "", "cuda"], [19, 4, 1, "", "fire_parameter_changed"], [19, 4, 1, "", "from_json"], [19, 4, 1, "", "handle_model_changed"], [19, 4, 1, "", "handle_parameter_changed"], [19, 4, 1, "", "parameters"], [19, 5, 1, "", "requires_grad"], [19, 5, 1, "", "sample_shape"], [19, 5, 1, "", "shape"], [19, 5, 1, "", "tensor"], [19, 4, 1, "", "to"]], "torchtree.core.parameter.ViewParameter": [[19, 4, 1, "", "add_parameter_listener"], [19, 4, 1, "", "assign"], [19, 4, 1, "", "clone"], [19, 4, 1, "", "cpu"], [19, 4, 1, "", "cuda"], [19, 5, 1, "", "dtype"], [19, 4, 1, "", "fire_parameter_changed"], [19, 4, 1, "", "from_json"], [19, 4, 1, "", "handle_parameter_changed"], [19, 4, 1, "", "json_factory"], [19, 5, 1, "", "requires_grad"], [19, 5, 1, "", "shape"], [19, 5, 1, "", "tensor"], [19, 4, 1, "", "to"]], "torchtree.core.parameter_encoder": [[20, 3, 1, "", "ParameterEncoder"]], "torchtree.core.parameter_encoder.ParameterEncoder": [[20, 4, 1, "", "default"]], "torchtree.core.parameter_utils": [[21, 2, 1, "", "pack_tensor"], [21, 2, 1, "", "save_parameters"]], "torchtree.core.parametric": [[22, 3, 1, "", "ModelListener"], [22, 3, 1, "", "ParameterListener"], [22, 3, 1, "", "Parametric"]], "torchtree.core.parametric.ModelListener": [[22, 4, 1, "", "handle_model_changed"]], "torchtree.core.parametric.ParameterListener": [[22, 4, 1, "", "handle_parameter_changed"]], "torchtree.core.parametric.Parametric": [[22, 4, 1, "", "parameters"], [22, 4, 1, "", "register_model"], [22, 4, 1, "", "register_parameter"]], "torchtree.core.runnable": [[23, 3, 1, "", "Runnable"]], "torchtree.core.runnable.Runnable": [[23, 4, 1, "", "run"]], "torchtree.core.serializable": [[24, 3, 1, "", "JSONSerializable"]], "torchtree.core.serializable.JSONSerializable": [[24, 4, 1, "", "from_json"], [24, 4, 1, "", "from_json_safe"]], "torchtree.core.utils": [[25, 6, 1, "", "AlternativeAttributeError"], [25, 6, 1, "", "JSONParseError"], [25, 1, 1, "", "REGISTERED_CLASSES"], [25, 3, 1, "", "SignalHandler"], [25, 3, 1, "", "TensorEncoder"], [25, 2, 1, "", "as_tensor"], [25, 2, 1, "", "expand_plates"], [25, 2, 1, "", "get_class"], [25, 2, 1, "", "package_contents"], [25, 2, 1, "", "print_graph"], [25, 2, 1, "", "process_object"], [25, 2, 1, "", "process_objects"], [25, 2, 1, "", "register_class"], [25, 2, 1, "", "remove_comments"], [25, 2, 1, "", "replace_star_with_str"], [25, 2, 1, "", "replace_wildcard_with_str"], [25, 2, 1, "", "string_to_list_index"], [25, 2, 1, "", "tensor_rand"], [25, 2, 1, "", "update_parameters"], [25, 2, 1, "", "validate"]], "torchtree.core.utils.AlternativeAttributeError": [[25, 4, 1, "", "wrapper"]], "torchtree.core.utils.SignalHandler": [[25, 4, 1, "", "exit"]], "torchtree.core.utils.TensorEncoder": [[25, 4, 1, "", "default"]], "torchtree.distributions": [[131, 0, 0, "-", "bayesian_bridge"], [132, 0, 0, "-", "ctmc_scale"], [133, 0, 0, "-", "deterministic_normal"], [134, 0, 0, "-", "distributions"], [135, 0, 0, "-", "gmrf"], [136, 0, 0, "-", "gmrf_integrated"], [137, 0, 0, "-", "inverse_gamma"], [138, 0, 0, "-", "joint_distribution"], [139, 0, 0, "-", "log_normal"], [140, 0, 0, "-", "multivariate_normal"], [141, 0, 0, "-", "normal"], [142, 0, 0, "-", "one_on_x"], [143, 0, 0, "-", "scale_mixture"], [144, 0, 0, "-", "transforms"], [145, 0, 0, "-", "tree_prior"]], "torchtree.distributions.bayesian_bridge": [[26, 3, 1, "", "BayesianBridge"], [26, 2, 1, "", "process_object_number"]], "torchtree.distributions.bayesian_bridge.BayesianBridge": [[26, 4, 1, "", "from_json"], [26, 4, 1, "", "handle_model_changed"], [26, 4, 1, "", "json_factory"]], "torchtree.distributions.ctmc_scale": [[27, 3, 1, "", "CTMCScale"]], "torchtree.distributions.ctmc_scale.CTMCScale": [[27, 4, 1, "", "cpu"], [27, 4, 1, "", "cuda"], [27, 4, 1, "", "from_json"], [27, 4, 1, "", "json_factory"], [27, 7, 1, "", "log_gamma_one_half"], [27, 7, 1, "", "shape"], [27, 4, 1, "", "to"]], "torchtree.distributions.deterministic_normal": [[28, 3, 1, "", "DeterministicNormal"]], "torchtree.distributions.deterministic_normal.DeterministicNormal": [[28, 5, 1, "", "batch_shape"], [28, 4, 1, "", "entropy"], [28, 5, 1, "", "event_shape"], [28, 4, 1, "", "from_json"], [28, 4, 1, "", "handle_model_changed"], [28, 4, 1, "", "json_factory"], [28, 4, 1, "", "log_prob"], [28, 4, 1, "", "rsample"], [28, 4, 1, "", "sample"]], "torchtree.distributions.distributions": [[29, 3, 1, "", "Distribution"], [29, 3, 1, "", "DistributionModel"]], "torchtree.distributions.distributions.Distribution": [[29, 5, 1, "", "batch_shape"], [29, 4, 1, "", "entropy"], [29, 5, 1, "", "event_shape"], [29, 4, 1, "", "from_json"], [29, 4, 1, "", "json_factory"], [29, 4, 1, "", "log_prob"], [29, 4, 1, "", "rsample"], [29, 4, 1, "", "sample"]], "torchtree.distributions.distributions.DistributionModel": [[29, 4, 1, "", "entropy"], [29, 4, 1, "", "log_prob"], [29, 4, 1, "", "rsample"], [29, 4, 1, "", "sample"]], "torchtree.distributions.gmrf": [[30, 3, 1, "", "GMRF"], [30, 3, 1, "", "GMRFCovariate"]], "torchtree.distributions.gmrf.GMRF": [[30, 4, 1, "", "from_json"]], "torchtree.distributions.gmrf.GMRFCovariate": [[30, 4, 1, "", "from_json"]], "torchtree.distributions.gmrf_integrated": [[31, 3, 1, "", "GMRFGammaIntegrated"]], "torchtree.distributions.gmrf_integrated.GMRFGammaIntegrated": [[31, 4, 1, "", "from_json"]], "torchtree.distributions.inverse_gamma": [[33, 3, 1, "", "InverseGamma"]], "torchtree.distributions.inverse_gamma.InverseGamma": [[33, 7, 1, "", "arg_constraints"], [33, 5, 1, "", "concentration"], [33, 4, 1, "", "expand"], [33, 7, 1, "", "has_rsample"], [33, 5, 1, "", "rate"], [33, 7, 1, "", "support"]], "torchtree.distributions.joint_distribution": [[34, 3, 1, "", "JointDistributionModel"]], "torchtree.distributions.joint_distribution.JointDistributionModel": [[34, 4, 1, "", "entropy"], [34, 4, 1, "", "from_json"], [34, 4, 1, "", "handle_parameter_changed"], [34, 4, 1, "", "log_prob"], [34, 4, 1, "", "rsample"], [34, 4, 1, "", "sample"]], "torchtree.distributions.log_normal": [[35, 3, 1, "", "LogNormal"]], "torchtree.distributions.multivariate_normal": [[36, 3, 1, "", "MultivariateNormal"]], "torchtree.distributions.multivariate_normal.MultivariateNormal": [[36, 5, 1, "", "batch_shape"], [36, 4, 1, "", "entropy"], [36, 5, 1, "", "event_shape"], [36, 4, 1, "", "from_json"], [36, 4, 1, "", "log_prob"], [36, 4, 1, "", "rsample"], [36, 4, 1, "", "sample"]], "torchtree.distributions.normal": [[37, 3, 1, "", "Normal"]], "torchtree.distributions.one_on_x": [[38, 3, 1, "", "OneOnX"]], "torchtree.distributions.one_on_x.OneOnX": [[38, 7, 1, "", "arg_constraints"], [38, 4, 1, "", "log_prob"], [38, 7, 1, "", "support"]], "torchtree.distributions.scale_mixture": [[39, 3, 1, "", "ScaleMixtureNormal"]], "torchtree.distributions.scale_mixture.ScaleMixtureNormal": [[39, 4, 1, "", "from_json"], [39, 4, 1, "", "handle_model_changed"], [39, 4, 1, "", "json_factory"]], "torchtree.distributions.transforms": [[40, 3, 1, "", "ConvexCombinationTransform"], [40, 3, 1, "", "CumSumExpTransform"], [40, 3, 1, "", "CumSumSoftPlusTransform"], [40, 3, 1, "", "CumSumTransform"], [40, 3, 1, "", "LinearTransform"], [40, 3, 1, "", "LogTransform"], [40, 3, 1, "", "SoftPlusTransform"], [40, 3, 1, "", "TrilExpDiagonalTransform"]], "torchtree.distributions.transforms.ConvexCombinationTransform": [[40, 7, 1, "", "codomain"], [40, 7, 1, "", "domain"], [40, 4, 1, "", "log_abs_det_jacobian"]], "torchtree.distributions.transforms.CumSumExpTransform": [[40, 7, 1, "", "bijective"], [40, 7, 1, "", "codomain"], [40, 7, 1, "", "domain"], [40, 4, 1, "", "log_abs_det_jacobian"], [40, 7, 1, "", "sign"]], "torchtree.distributions.transforms.CumSumSoftPlusTransform": [[40, 7, 1, "", "bijective"], [40, 7, 1, "", "codomain"], [40, 7, 1, "", "domain"], [40, 4, 1, "", "log_abs_det_jacobian"], [40, 7, 1, "", "sign"]], "torchtree.distributions.transforms.CumSumTransform": [[40, 7, 1, "", "bijective"], [40, 7, 1, "", "codomain"], [40, 7, 1, "", "domain"], [40, 4, 1, "", "log_abs_det_jacobian"], [40, 7, 1, "", "sign"]], "torchtree.distributions.transforms.LinearTransform": [[40, 7, 1, "", "bijective"], [40, 7, 1, "", "codomain"], [40, 7, 1, "", "domain"], [40, 4, 1, "", "log_abs_det_jacobian"], [40, 7, 1, "", "sign"]], "torchtree.distributions.transforms.LogTransform": [[40, 7, 1, "", "bijective"], [40, 7, 1, "", "codomain"], [40, 7, 1, "", "domain"], [40, 4, 1, "", "log_abs_det_jacobian"], [40, 7, 1, "", "sign"]], "torchtree.distributions.transforms.SoftPlusTransform": [[40, 7, 1, "", "bijective"], [40, 7, 1, "", "codomain"], [40, 7, 1, "", "domain"], [40, 4, 1, "", "log_abs_det_jacobian"], [40, 7, 1, "", "sign"]], "torchtree.distributions.transforms.TrilExpDiagonalTransform": [[40, 7, 1, "", "bijective"], [40, 4, 1, "", "log_abs_det_jacobian"], [40, 7, 1, "", "sign"]], "torchtree.distributions.tree_prior": [[41, 3, 1, "", "CompoundGammaDirichletPrior"]], "torchtree.distributions.tree_prior.CompoundGammaDirichletPrior": [[41, 4, 1, "", "from_json"], [41, 4, 1, "", "handle_parameter_changed"]], "torchtree.evolution": [[147, 0, 0, "-", "alignment"], [148, 0, 0, "-", "attribute_pattern"], [149, 0, 0, "-", "bdsk"], [150, 0, 0, "-", "birth_death"], [151, 0, 0, "-", "branch_model"], [152, 0, 0, "-", "coalescent"], [153, 0, 0, "-", "datatype"], [154, 0, 0, "-", "io"], [155, 0, 0, "-", "poisson_tree_likelihood"], [156, 0, 0, "-", "rate_transform"], [157, 0, 0, "-", "root_transform"], [158, 0, 0, "-", "site_model"], [159, 0, 0, "-", "site_pattern"], [160, 0, 0, "-", "substitution_model"], [166, 0, 0, "-", "taxa"], [167, 0, 0, "-", "tree_height_transform"], [168, 0, 0, "-", "tree_likelihood"], [169, 0, 0, "-", "tree_model"], [170, 0, 0, "-", "tree_model_flexible"]], "torchtree.evolution.alignment": [[42, 3, 1, "", "Alignment"], [42, 1, 1, "", "Sequence"], [42, 2, 1, "", "calculate_F3x4"], [42, 2, 1, "", "calculate_F3x4_from_nucleotide"], [42, 2, 1, "", "calculate_frequencies"], [42, 2, 1, "", "calculate_frequencies_per_codon_position"], [42, 2, 1, "", "calculate_kappa"], [42, 2, 1, "", "calculate_substitutions"], [42, 2, 1, "", "calculate_ts_tv"], [42, 2, 1, "", "read_fasta_sequences"]], "torchtree.evolution.alignment.Alignment": [[42, 5, 1, "", "data_type"], [42, 4, 1, "", "from_json"], [42, 4, 1, "", "get"], [42, 5, 1, "", "sequence_size"], [42, 5, 1, "", "taxa"]], "torchtree.evolution.attribute_pattern": [[43, 3, 1, "", "AttributePattern"]], "torchtree.evolution.attribute_pattern.AttributePattern": [[43, 4, 1, "", "compute_tips_partials"], [43, 4, 1, "", "compute_tips_states"], [43, 4, 1, "", "cpu"], [43, 4, 1, "", "cuda"], [43, 4, 1, "", "from_json"], [43, 4, 1, "", "handle_model_changed"], [43, 4, 1, "", "handle_parameter_changed"]], "torchtree.evolution.bdsk": [[44, 3, 1, "", "BDSKModel"], [44, 3, 1, "", "PiecewiseConstantBirthDeath"], [44, 2, 1, "", "epidemiology_to_birth_death"]], "torchtree.evolution.bdsk.BDSKModel": [[44, 4, 1, "", "from_json"]], "torchtree.evolution.bdsk.PiecewiseConstantBirthDeath": [[44, 7, 1, "", "arg_constraints"], [44, 4, 1, "", "log_p"], [44, 4, 1, "", "log_prob"], [44, 4, 1, "", "log_q"], [44, 4, 1, "", "p0"], [44, 7, 1, "", "support"]], "torchtree.evolution.birth_death": [[45, 3, 1, "", "BirthDeath"], [45, 3, 1, "", "BirthDeathModel"]], "torchtree.evolution.birth_death.BirthDeath": [[45, 7, 1, "", "arg_constraints"], [45, 4, 1, "", "log_p"], [45, 4, 1, "", "log_prob"], [45, 4, 1, "", "log_q"]], "torchtree.evolution.birth_death.BirthDeathModel": [[45, 4, 1, "", "from_json"], [45, 4, 1, "", "handle_model_changed"]], "torchtree.evolution.branch_model": [[46, 3, 1, "", "AbstractClockModel"], [46, 3, 1, "", "BranchModel"], [46, 3, 1, "", "SimpleClockModel"], [46, 3, 1, "", "StrictClockModel"]], "torchtree.evolution.branch_model.AbstractClockModel": [[46, 4, 1, "", "handle_model_changed"], [46, 4, 1, "", "handle_parameter_changed"]], "torchtree.evolution.branch_model.BranchModel": [[46, 5, 1, "", "rates"]], "torchtree.evolution.branch_model.SimpleClockModel": [[46, 4, 1, "", "from_json"], [46, 4, 1, "", "json_factory"], [46, 5, 1, "", "rates"]], "torchtree.evolution.branch_model.StrictClockModel": [[46, 4, 1, "", "from_json"], [46, 5, 1, "", "rates"]], "torchtree.evolution.coalescent": [[47, 3, 1, "", "AbstractCoalescentDistribution"], [47, 3, 1, "", "AbstractCoalescentModel"], [47, 3, 1, "", "ConstantCoalescent"], [47, 3, 1, "", "ConstantCoalescentModel"], [47, 3, 1, "", "ExponentialCoalescent"], [47, 3, 1, "", "ExponentialCoalescentModel"], [47, 3, 1, "", "FakeTreeModel"], [47, 3, 1, "", "PiecewiseConstantCoalescent"], [47, 3, 1, "", "PiecewiseConstantCoalescentGrid"], [47, 3, 1, "", "PiecewiseConstantCoalescentGridModel"], [47, 3, 1, "", "PiecewiseConstantCoalescentModel"], [47, 3, 1, "", "PiecewiseExponentialCoalescentGrid"], [47, 3, 1, "", "SoftPiecewiseConstantCoalescentGrid"], [47, 2, 1, "", "process_data_coalesent"]], "torchtree.evolution.coalescent.AbstractCoalescentDistribution": [[47, 7, 1, "", "arg_constraints"], [47, 7, 1, "", "has_rsample"], [47, 4, 1, "", "maximum_likelihood"], [47, 7, 1, "", "support"]], "torchtree.evolution.coalescent.ConstantCoalescent": [[47, 7, 1, "", "has_rsample"], [47, 4, 1, "", "log_prob"], [47, 4, 1, "", "maximum_likelihood"], [47, 4, 1, "", "rsample"]], "torchtree.evolution.coalescent.ConstantCoalescentModel": [[47, 4, 1, "", "from_json"]], "torchtree.evolution.coalescent.ExponentialCoalescent": [[47, 7, 1, "", "arg_constraints"], [47, 7, 1, "", "has_rsample"], [47, 4, 1, "", "log_prob"], [47, 7, 1, "", "support"]], "torchtree.evolution.coalescent.ExponentialCoalescentModel": [[47, 4, 1, "", "from_json"]], "torchtree.evolution.coalescent.FakeTreeModel": [[47, 5, 1, "", "node_heights"]], "torchtree.evolution.coalescent.PiecewiseConstantCoalescent": [[47, 4, 1, "", "log_prob"], [47, 4, 1, "", "maximum_likelihood"]], "torchtree.evolution.coalescent.PiecewiseConstantCoalescentGrid": [[47, 4, 1, "", "log_prob"]], "torchtree.evolution.coalescent.PiecewiseConstantCoalescentGridModel": [[47, 4, 1, "", "from_json"]], "torchtree.evolution.coalescent.PiecewiseExponentialCoalescentGrid": [[47, 7, 1, "", "arg_constraints"], [47, 7, 1, "", "has_rsample"], [47, 4, 1, "", "log_prob"], [47, 7, 1, "", "support"]], "torchtree.evolution.coalescent.SoftPiecewiseConstantCoalescentGrid": [[47, 4, 1, "", "log_prob"]], "torchtree.evolution.datatype": [[48, 3, 1, "", "AbstractDataType"], [48, 3, 1, "", "AminoAcidDataType"], [48, 3, 1, "", "CodonDataType"], [48, 3, 1, "", "DataType"], [48, 3, 1, "", "GeneralDataType"], [48, 3, 1, "", "NucleotideDataType"]], "torchtree.evolution.datatype.AbstractDataType": [[48, 5, 1, "", "size"], [48, 5, 1, "", "state_count"], [48, 5, 1, "", "states"]], "torchtree.evolution.datatype.AminoAcidDataType": [[48, 7, 1, "", "AMINO_ACIDS"], [48, 7, 1, "id0", "AMINO_ACIDS_AMBIGUITY_STATES"], [48, 7, 1, "", "AMINO_ACIDS_STATES"], [48, 4, 1, "", "encoding"], [48, 4, 1, "", "from_json"], [48, 4, 1, "", "partial"]], "torchtree.evolution.datatype.CodonDataType": [[48, 7, 1, "", "CODON_TRIPLETS"], [48, 7, 1, "", "GENETIC_CODE_NAMES"], [48, 7, 1, "", "GENETIC_CODE_TABLES"], [48, 7, 1, "", "NUMBER_OF_CODONS"], [48, 4, 1, "", "encoding"], [48, 4, 1, "", "from_json"], [48, 4, 1, "", "partial"]], "torchtree.evolution.datatype.DataType": [[48, 4, 1, "", "encoding"], [48, 4, 1, "", "partial"], [48, 5, 1, "", "size"], [48, 5, 1, "", "state_count"], [48, 5, 1, "", "states"]], "torchtree.evolution.datatype.GeneralDataType": [[48, 4, 1, "", "encoding"], [48, 4, 1, "", "from_json"], [48, 4, 1, "", "partial"]], "torchtree.evolution.datatype.NucleotideDataType": [[48, 7, 1, "", "NUCLEOTIDES"], [48, 7, 1, "", "NUCLEOTIDE_AMBIGUITY_STATES"], [48, 7, 1, "", "NUCLEOTIDE_STATES"], [48, 4, 1, "", "encoding"], [48, 4, 1, "", "from_json"], [48, 4, 1, "", "partial"]], "torchtree.evolution.io": [[50, 3, 1, "", "Node"], [50, 2, 1, "", "convert_samples_to_nexus"], [50, 2, 1, "", "extract_taxa"], [50, 2, 1, "", "parse_taxa"], [50, 2, 1, "", "parse_translate"], [50, 2, 1, "", "parse_trees"], [50, 2, 1, "", "random_tree_from_heights"], [50, 2, 1, "", "read_tree"], [50, 2, 1, "", "read_tree_and_alignment"], [50, 2, 1, "", "split_newick"], [50, 2, 1, "", "to_nexus"]], "torchtree.evolution.poisson_tree_likelihood": [[51, 3, 1, "", "PoissonTreeLikelihood"]], "torchtree.evolution.poisson_tree_likelihood.PoissonTreeLikelihood": [[51, 4, 1, "", "from_json"], [51, 4, 1, "", "handle_parameter_changed"]], "torchtree.evolution.rate_transform": [[52, 3, 1, "", "LogDifferenceRateTransform"], [52, 3, 1, "", "RescaledRateTransform"]], "torchtree.evolution.rate_transform.LogDifferenceRateTransform": [[52, 7, 1, "", "bijective"], [52, 4, 1, "", "log_abs_det_jacobian"], [52, 7, 1, "", "sign"]], "torchtree.evolution.rate_transform.RescaledRateTransform": [[52, 7, 1, "", "bijective"], [52, 4, 1, "", "log_abs_det_jacobian"], [52, 7, 1, "", "sign"]], "torchtree.evolution.root_transform": [[53, 3, 1, "", "RootParameter"]], "torchtree.evolution.root_transform.RootParameter": [[53, 4, 1, "", "add_parameter_listener"], [53, 4, 1, "", "fire_parameter_changed"], [53, 4, 1, "", "from_json"], [53, 4, 1, "", "handle_model_changed"], [53, 4, 1, "", "handle_parameter_changed"], [53, 4, 1, "", "parameters"], [53, 5, 1, "", "tensor"], [53, 4, 1, "", "transform"]], "torchtree.evolution.site_model": [[54, 3, 1, "", "ConstantSiteModel"], [54, 3, 1, "", "InvariantSiteModel"], [54, 3, 1, "", "LogNormalSiteModel"], [54, 3, 1, "", "SiteModel"], [54, 3, 1, "", "UnivariateDiscretizedSiteModel"], [54, 3, 1, "", "WeibullSiteModel"]], "torchtree.evolution.site_model.ConstantSiteModel": [[54, 4, 1, "", "cpu"], [54, 4, 1, "", "cuda"], [54, 4, 1, "", "from_json"], [54, 4, 1, "", "handle_model_changed"], [54, 4, 1, "", "handle_parameter_changed"], [54, 4, 1, "", "probabilities"], [54, 4, 1, "", "rates"]], "torchtree.evolution.site_model.InvariantSiteModel": [[54, 4, 1, "", "from_json"], [54, 4, 1, "", "handle_model_changed"], [54, 4, 1, "", "handle_parameter_changed"], [54, 5, 1, "", "invariant"], [54, 4, 1, "", "probabilities"], [54, 4, 1, "", "rates"], [54, 4, 1, "", "update_rates_probs"]], "torchtree.evolution.site_model.LogNormalSiteModel": [[54, 4, 1, "", "from_json"], [54, 5, 1, "", "scale"], [54, 4, 1, "", "update_rates"]], "torchtree.evolution.site_model.SiteModel": [[54, 4, 1, "", "probabilities"], [54, 4, 1, "", "rates"]], "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel": [[54, 4, 1, "", "cpu"], [54, 4, 1, "", "cuda"], [54, 4, 1, "", "handle_model_changed"], [54, 4, 1, "", "handle_parameter_changed"], [54, 5, 1, "", "invariant"], [54, 4, 1, "", "inverse_cdf"], [54, 4, 1, "", "probabilities"], [54, 4, 1, "", "rates"], [54, 4, 1, "", "update_rates"]], "torchtree.evolution.site_model.WeibullSiteModel": [[54, 4, 1, "", "from_json"], [54, 4, 1, "", "inverse_cdf"], [54, 5, 1, "", "shape"]], "torchtree.evolution.site_pattern": [[55, 3, 1, "", "SitePattern"], [55, 2, 1, "", "compress"], [55, 2, 1, "", "compress_alignment"], [55, 2, 1, "", "compress_alignment_states"]], "torchtree.evolution.site_pattern.SitePattern": [[55, 4, 1, "", "compute_tips_partials"], [55, 4, 1, "", "compute_tips_states"], [55, 4, 1, "", "cpu"], [55, 4, 1, "", "cuda"], [55, 4, 1, "", "from_json"], [55, 4, 1, "", "handle_model_changed"], [55, 4, 1, "", "handle_parameter_changed"]], "torchtree.evolution.substitution_model": [[161, 0, 0, "-", "abstract"], [162, 0, 0, "-", "amino_acid"], [163, 0, 0, "-", "codon"], [164, 0, 0, "-", "general"], [165, 0, 0, "-", "nucleotide"]], "torchtree.evolution.substitution_model.abstract": [[56, 3, 1, "", "AbstractSubstitutionModel"], [56, 3, 1, "", "NonSymmetricSubstitutionModel"], [56, 3, 1, "", "SubstitutionModel"], [56, 3, 1, "", "SymmetricSubstitutionModel"]], "torchtree.evolution.substitution_model.abstract.AbstractSubstitutionModel": [[56, 5, 1, "", "frequencies"], [56, 4, 1, "", "norm"]], "torchtree.evolution.substitution_model.abstract.NonSymmetricSubstitutionModel": [[56, 4, 1, "", "eigen"], [56, 4, 1, "", "p_t"]], "torchtree.evolution.substitution_model.abstract.SubstitutionModel": [[56, 5, 1, "", "frequencies"], [56, 4, 1, "", "p_t"], [56, 4, 1, "", "q"]], "torchtree.evolution.substitution_model.abstract.SymmetricSubstitutionModel": [[56, 4, 1, "", "eigen"], [56, 4, 1, "", "p_t"]], "torchtree.evolution.substitution_model.amino_acid": [[57, 3, 1, "", "LG"], [57, 3, 1, "", "WAG"]], "torchtree.evolution.substitution_model.amino_acid.LG": [[57, 4, 1, "", "from_json"]], "torchtree.evolution.substitution_model.amino_acid.WAG": [[57, 4, 1, "", "from_json"]], "torchtree.evolution.substitution_model.codon": [[58, 3, 1, "", "MG94"]], "torchtree.evolution.substitution_model.codon.MG94": [[58, 4, 1, "", "from_json"], [58, 4, 1, "", "handle_model_changed"], [58, 4, 1, "", "handle_parameter_changed"], [58, 4, 1, "", "q"]], "torchtree.evolution.substitution_model.general": [[59, 3, 1, "", "EmpiricalSubstitutionModel"], [59, 3, 1, "", "GeneralJC69"], [59, 3, 1, "", "GeneralNonSymmetricSubstitutionModel"], [59, 3, 1, "", "GeneralSymmetricSubstitutionModel"]], "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel": [[59, 4, 1, "", "create_rate_matrix"], [59, 4, 1, "", "eigen"], [59, 5, 1, "", "frequencies"], [59, 4, 1, "", "from_json"], [59, 4, 1, "", "handle_model_changed"], [59, 4, 1, "", "handle_parameter_changed"], [59, 4, 1, "", "p_t"], [59, 4, 1, "", "q"]], "torchtree.evolution.substitution_model.general.GeneralJC69": [[59, 4, 1, "", "cpu"], [59, 4, 1, "", "cuda"], [59, 5, 1, "", "frequencies"], [59, 4, 1, "", "from_json"], [59, 4, 1, "", "handle_model_changed"], [59, 4, 1, "", "handle_parameter_changed"], [59, 4, 1, "", "p_t"], [59, 4, 1, "", "q"]], "torchtree.evolution.substitution_model.general.GeneralNonSymmetricSubstitutionModel": [[59, 4, 1, "", "from_json"], [59, 4, 1, "", "handle_model_changed"], [59, 4, 1, "", "handle_parameter_changed"], [59, 4, 1, "", "q"], [59, 5, 1, "", "rates"]], "torchtree.evolution.substitution_model.general.GeneralSymmetricSubstitutionModel": [[59, 4, 1, "", "from_json"], [59, 4, 1, "", "handle_model_changed"], [59, 4, 1, "", "handle_parameter_changed"], [59, 4, 1, "", "q"], [59, 5, 1, "", "rates"]], "torchtree.evolution.substitution_model.nucleotide": [[61, 3, 1, "", "GTR"], [61, 3, 1, "", "HKY"], [61, 3, 1, "", "JC69"]], "torchtree.evolution.substitution_model.nucleotide.GTR": [[61, 4, 1, "", "from_json"], [61, 4, 1, "", "handle_model_changed"], [61, 4, 1, "", "handle_parameter_changed"], [61, 4, 1, "", "q"], [61, 5, 1, "", "rates"]], "torchtree.evolution.substitution_model.nucleotide.HKY": [[61, 4, 1, "", "from_json"], [61, 4, 1, "", "handle_model_changed"], [61, 4, 1, "", "handle_parameter_changed"], [61, 5, 1, "", "kappa"], [61, 4, 1, "", "p_t_analytical"], [61, 4, 1, "", "q"]], "torchtree.evolution.substitution_model.nucleotide.JC69": [[61, 4, 1, "", "cpu"], [61, 4, 1, "", "cuda"], [61, 5, 1, "", "frequencies"], [61, 4, 1, "", "from_json"], [61, 4, 1, "", "handle_model_changed"], [61, 4, 1, "", "handle_parameter_changed"], [61, 4, 1, "", "p_t"], [61, 4, 1, "", "q"]], "torchtree.evolution.taxa": [[62, 3, 1, "", "Taxa"], [62, 3, 1, "", "Taxon"]], "torchtree.evolution.taxa.Taxa": [[62, 4, 1, "", "from_json"]], "torchtree.evolution.taxa.Taxon": [[62, 4, 1, "", "from_json"]], "torchtree.evolution.tree_height_transform": [[63, 3, 1, "", "DifferenceNodeHeightTransform"], [63, 3, 1, "", "GeneralNodeHeightTransform"]], "torchtree.evolution.tree_height_transform.DifferenceNodeHeightTransform": [[63, 7, 1, "", "bijective"], [63, 4, 1, "", "log_abs_det_jacobian"], [63, 7, 1, "", "sign"]], "torchtree.evolution.tree_height_transform.GeneralNodeHeightTransform": [[63, 7, 1, "", "bijective"], [63, 4, 1, "", "log_abs_det_jacobian"], [63, 7, 1, "", "sign"], [63, 4, 1, "", "sort_indices"], [63, 4, 1, "", "update_bounds"]], "torchtree.evolution.tree_likelihood": [[64, 3, 1, "", "TreeLikelihoodModel"], [64, 2, 1, "", "calculate_treelikelihood"], [64, 2, 1, "", "calculate_treelikelihood_discrete"], [64, 2, 1, "", "calculate_treelikelihood_discrete_rescaled"], [64, 2, 1, "", "calculate_treelikelihood_discrete_safe"], [64, 2, 1, "", "calculate_treelikelihood_tip_states_discrete"], [64, 2, 1, "", "calculate_treelikelihood_tip_states_discrete_rescaled"]], "torchtree.evolution.tree_likelihood.TreeLikelihoodModel": [[64, 4, 1, "", "calculate_with_tip_partials"], [64, 4, 1, "", "calculate_with_tip_states"], [64, 4, 1, "", "from_json"], [64, 4, 1, "", "handle_parameter_changed"]], "torchtree.evolution.tree_model": [[65, 3, 1, "", "AbstractTreeModel"], [65, 3, 1, "", "ReparameterizedTimeTreeModel"], [65, 3, 1, "", "TimeTreeModel"], [65, 3, 1, "", "TreeModel"], [65, 3, 1, "", "UnRootedTreeModel"], [65, 2, 1, "", "heights_from_branch_lengths"], [65, 2, 1, "", "heights_to_branch_lengths"], [65, 2, 1, "", "initialize_dates_from_taxa"], [65, 2, 1, "", "parse_tree"], [65, 2, 1, "", "setup_dates"], [65, 2, 1, "", "setup_indexes"]], "torchtree.evolution.tree_model.AbstractTreeModel": [[65, 4, 1, "", "as_newick"], [65, 4, 1, "", "handle_model_changed"], [65, 5, 1, "", "postorder"], [65, 5, 1, "", "taxa"], [65, 4, 1, "", "update_traversals"], [65, 4, 1, "", "write_newick"]], "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel": [[65, 4, 1, "", "cpu"], [65, 4, 1, "", "cuda"], [65, 4, 1, "", "from_json"], [65, 4, 1, "", "handle_model_changed"], [65, 4, 1, "", "handle_parameter_changed"], [65, 4, 1, "", "json_factory"], [65, 5, 1, "", "node_heights"], [65, 4, 1, "", "update_node_heights"]], "torchtree.evolution.tree_model.TimeTreeModel": [[65, 4, 1, "", "branch_lengths"], [65, 4, 1, "", "cpu"], [65, 4, 1, "", "cuda"], [65, 4, 1, "", "from_json"], [65, 4, 1, "", "handle_parameter_changed"], [65, 4, 1, "", "json_factory"], [65, 5, 1, "", "node_heights"], [65, 4, 1, "", "update_leaf_heights"], [65, 4, 1, "", "update_traversals"]], "torchtree.evolution.tree_model.TreeModel": [[65, 4, 1, "", "branch_lengths"], [65, 5, 1, "", "postorder"], [65, 5, 1, "", "taxa"], [65, 4, 1, "", "write_newick"]], "torchtree.evolution.tree_model.UnRootedTreeModel": [[65, 4, 1, "", "branch_lengths"], [65, 4, 1, "", "from_json"], [65, 4, 1, "", "handle_parameter_changed"], [65, 4, 1, "", "json_factory"]], "torchtree.evolution.tree_model_flexible": [[66, 3, 1, "", "FlexibleTimeTreeModel"]], "torchtree.evolution.tree_model_flexible.FlexibleTimeTreeModel": [[66, 4, 1, "", "from_json"], [66, 4, 1, "", "json_factory"]], "torchtree.inference": [[172, 0, 0, "-", "hmc"], [180, 0, 0, "-", "mcmc"], [183, 0, 0, "-", "sampler"], [184, 0, 0, "-", "utils"]], "torchtree.inference.hmc": [[173, 0, 0, "-", "adaptation"], [174, 0, 0, "-", "adaptors"], [175, 0, 0, "-", "hamiltonian"], [176, 0, 0, "-", "hmc"], [177, 0, 0, "-", "integrator"], [178, 0, 0, "-", "operator"], [179, 0, 0, "-", "stan_adaptation"]], "torchtree.inference.hmc.adaptation": [[68, 3, 1, "", "AdaptiveStepSize"], [68, 3, 1, "", "Adaptor"], [68, 3, 1, "", "DualAveragingStepSize"], [68, 3, 1, "", "MassMatrixAdaptor"], [68, 3, 1, "", "WarmupAdaptation"], [68, 2, 1, "", "find_reasonable_step_size"]], "torchtree.inference.hmc.adaptation.AdaptiveStepSize": [[68, 4, 1, "", "from_json"], [68, 4, 1, "", "learn"], [68, 4, 1, "", "restart"]], "torchtree.inference.hmc.adaptation.Adaptor": [[68, 4, 1, "", "learn"], [68, 4, 1, "", "restart"]], "torchtree.inference.hmc.adaptation.DualAveragingStepSize": [[68, 4, 1, "", "from_json"], [68, 4, 1, "", "learn"], [68, 4, 1, "", "restart"]], "torchtree.inference.hmc.adaptation.MassMatrixAdaptor": [[68, 4, 1, "", "from_json"], [68, 4, 1, "", "learn"], [68, 5, 1, "", "mass_matrix"], [68, 4, 1, "", "restart"]], "torchtree.inference.hmc.adaptation.WarmupAdaptation": [[68, 5, 1, "", "inverse_mass_matrix"], [68, 5, 1, "", "mass_matrix"], [68, 5, 1, "", "sqrt_mass_matrix"], [68, 5, 1, "", "step_size"]], "torchtree.inference.hmc.hamiltonian": [[70, 3, 1, "", "Hamiltonian"]], "torchtree.inference.hmc.hamiltonian.Hamiltonian": [[70, 4, 1, "", "from_json"], [70, 4, 1, "", "handle_parameter_changed"], [70, 4, 1, "", "kinetic_energy"], [70, 4, 1, "", "potential_energy"], [70, 4, 1, "", "sample_momentum"]], "torchtree.inference.hmc.hmc": [[71, 3, 1, "", "HMC"]], "torchtree.inference.hmc.hmc.HMC": [[71, 4, 1, "", "find_reasonable_step_size"], [71, 4, 1, "", "from_json"], [71, 4, 1, "", "hamiltonian"], [71, 4, 1, "", "run"], [71, 4, 1, "", "sample_momentum"]], "torchtree.inference.hmc.integrator": [[73, 3, 1, "", "Integrator"], [73, 3, 1, "", "LeapfrogIntegrator"], [73, 2, 1, "", "set_tensor"]], "torchtree.inference.hmc.integrator.LeapfrogIntegrator": [[73, 4, 1, "", "from_json"]], "torchtree.inference.hmc.operator": [[74, 3, 1, "", "HMCOperator"]], "torchtree.inference.hmc.operator.HMCOperator": [[74, 5, 1, "", "adaptable_parameter"], [74, 4, 1, "", "from_json"], [74, 4, 1, "", "handle_parameter_changed"], [74, 5, 1, "", "mass_matrix"], [74, 4, 1, "", "set_adaptable_parameter"], [74, 4, 1, "", "tune"], [74, 4, 1, "", "update_mass_matrices"]], "torchtree.inference.hmc.stan_adaptation": [[75, 3, 1, "", "StanWindowedAdaptation"]], "torchtree.inference.hmc.stan_adaptation.StanWindowedAdaptation": [[75, 4, 1, "", "from_json"], [75, 4, 1, "", "learn"], [75, 4, 1, "", "restart"]], "torchtree.inference.mcmc": [[181, 0, 0, "-", "mcmc"], [182, 0, 0, "-", "operator"]], "torchtree.inference.mcmc.mcmc": [[78, 3, 1, "", "MCMC"]], "torchtree.inference.mcmc.mcmc.MCMC": [[78, 4, 1, "", "from_json"], [78, 4, 1, "", "run"]], "torchtree.inference.mcmc.operator": [[79, 3, 1, "", "MCMCOperator"]], "torchtree.inference.mcmc.operator.MCMCOperator": [[79, 4, 1, "", "accept"], [79, 5, 1, "", "adaptable_parameter"], [79, 4, 1, "", "reject"], [79, 4, 1, "", "set_adaptable_parameter"], [79, 4, 1, "", "step"], [79, 4, 1, "", "tune"]], "torchtree.inference.sampler": [[80, 3, 1, "", "Sampler"]], "torchtree.inference.sampler.Sampler": [[80, 4, 1, "", "from_json"], [80, 4, 1, "", "run"]], "torchtree.inference.utils": [[81, 2, 1, "", "extract_tensors_and_parameters"]], "torchtree.math": [[82, 2, 1, "", "soft_max"], [82, 2, 1, "", "soft_searchsorted"], [82, 2, 1, "", "soft_sort"]], "torchtree.nf": [[186, 0, 0, "-", "energy_functions"], [187, 0, 0, "-", "flow"], [188, 0, 0, "-", "planar"], [189, 0, 0, "-", "realnvp"]], "torchtree.nf.energy_functions": [[83, 3, 1, "", "EnergyFunctionModel"], [83, 2, 1, "", "w1"], [83, 2, 1, "", "w2"], [83, 2, 1, "", "w3"]], "torchtree.nf.energy_functions.EnergyFunctionModel": [[83, 4, 1, "", "from_json"], [83, 4, 1, "", "handle_model_changed"]], "torchtree.nf.flow": [[84, 3, 1, "", "NormalizingFlow"]], "torchtree.nf.flow.NormalizingFlow": [[84, 4, 1, "", "apply_flow"], [84, 4, 1, "", "cpu"], [84, 4, 1, "", "cuda"], [84, 4, 1, "", "entropy"], [84, 4, 1, "", "forward"], [84, 4, 1, "", "from_json"], [84, 4, 1, "", "log_prob"], [84, 4, 1, "", "parameters"], [84, 4, 1, "", "rsample"], [84, 4, 1, "", "sample"], [84, 4, 1, "", "to"]], "torchtree.nf.planar": [[86, 3, 1, "", "PlanarTransform"]], "torchtree.nf.planar.PlanarTransform": [[86, 4, 1, "", "forward"], [86, 4, 1, "", "log_abs_det_jacobian"], [86, 4, 1, "", "u_hat"]], "torchtree.nf.realnvp": [[87, 3, 1, "", "BatchNorm"], [87, 3, 1, "", "FlowSequential"], [87, 3, 1, "", "LinearMaskedCoupling"], [87, 3, 1, "", "RealNVP"]], "torchtree.nf.realnvp.BatchNorm": [[87, 4, 1, "", "forward"], [87, 4, 1, "", "inverse"]], "torchtree.nf.realnvp.FlowSequential": [[87, 4, 1, "", "forward"], [87, 4, 1, "", "inverse"]], "torchtree.nf.realnvp.LinearMaskedCoupling": [[87, 4, 1, "", "forward"], [87, 4, 1, "", "inverse"]], "torchtree.nf.realnvp.RealNVP": [[87, 4, 1, "", "apply_flow"], [87, 5, 1, "", "batch_shape"], [87, 4, 1, "", "entropy"], [87, 4, 1, "", "forward"], [87, 4, 1, "", "from_json"], [87, 4, 1, "", "inverse"], [87, 4, 1, "", "log_prob"], [87, 4, 1, "", "parameters"], [87, 4, 1, "", "rsample"], [87, 4, 1, "", "sample"]], "torchtree.nn": [[191, 0, 0, "-", "module"]], "torchtree.nn.module": [[89, 3, 1, "", "Module"]], "torchtree.nn.module.Module": [[89, 4, 1, "", "cpu"], [89, 4, 1, "", "cuda"], [89, 4, 1, "", "from_json"], [89, 5, 1, "", "module"], [89, 4, 1, "", "to"]], "torchtree.ops": [[193, 0, 0, "-", "dual_averaging"], [194, 0, 0, "-", "welford"]], "torchtree.ops.dual_averaging": [[90, 3, 1, "", "DualAveraging"]], "torchtree.ops.dual_averaging.DualAveraging": [[90, 4, 1, "", "restart"], [90, 4, 1, "", "step"]], "torchtree.ops.welford": [[92, 3, 1, "", "WelfordVariance"]], "torchtree.ops.welford.WelfordVariance": [[92, 4, 1, "", "add_sample"], [92, 4, 1, "", "mean"], [92, 4, 1, "", "reset"], [92, 4, 1, "", "variance"]], "torchtree.optim": [[196, 0, 0, "-", "convergence"], [197, 0, 0, "-", "lr_scheduler"], [198, 0, 0, "-", "optimizer"]], "torchtree.optim.convergence": [[93, 3, 1, "", "BaseConvergence"], [93, 3, 1, "", "StanVariationalConvergence"], [93, 3, 1, "", "VariationalConvergence"]], "torchtree.optim.convergence.BaseConvergence": [[93, 4, 1, "", "check"]], "torchtree.optim.convergence.StanVariationalConvergence": [[93, 4, 1, "", "check"], [93, 4, 1, "", "from_json"], [93, 4, 1, "", "rel_difference"]], "torchtree.optim.convergence.VariationalConvergence": [[93, 4, 1, "", "check"], [93, 4, 1, "", "from_json"]], "torchtree.optim.lr_scheduler": [[95, 3, 1, "", "Scheduler"]], "torchtree.optim.lr_scheduler.Scheduler": [[95, 4, 1, "", "from_json"], [95, 4, 1, "", "step"]], "torchtree.optim.optimizer": [[96, 3, 1, "", "Optimizer"]], "torchtree.optim.optimizer.Optimizer": [[96, 4, 1, "", "from_json"], [96, 4, 1, "", "run"]], "torchtree.torchtree": [[97, 2, 1, "", "main"]], "torchtree.treeregression": [[98, 2, 1, "", "regression"]], "torchtree.typing": [[99, 1, 1, "", "ID"], [99, 1, 1, "", "ListParameter"], [99, 1, 1, "", "ListTensor"], [99, 1, 1, "", "OrderedDictType"]], "torchtree.variational": [[200, 0, 0, "-", "chi"], [201, 0, 0, "-", "kl"], [202, 0, 0, "-", "renyi"]], "torchtree.variational.chi": [[100, 3, 1, "", "CUBO"]], "torchtree.variational.chi.CUBO": [[100, 4, 1, "", "from_json"], [100, 4, 1, "", "handle_parameter_changed"]], "torchtree.variational.kl": [[102, 3, 1, "", "ELBO"], [102, 3, 1, "", "KLpq"], [102, 3, 1, "", "KLpqImportance"], [102, 3, 1, "", "SELBO"]], "torchtree.variational.kl.ELBO": [[102, 4, 1, "", "from_json"], [102, 4, 1, "", "handle_parameter_changed"]], "torchtree.variational.kl.KLpq": [[102, 4, 1, "", "from_json"], [102, 4, 1, "", "handle_parameter_changed"]], "torchtree.variational.kl.KLpqImportance": [[102, 4, 1, "", "from_json"], [102, 4, 1, "", "handle_parameter_changed"]], "torchtree.variational.kl.SELBO": [[102, 4, 1, "", "from_json"], [102, 4, 1, "", "handle_parameter_changed"]], "torchtree.variational.renyi": [[103, 3, 1, "", "VR"]], "torchtree.variational.renyi.VR": [[103, 4, 1, "", "from_json"], [103, 4, 1, "", "handle_parameter_changed"]]}, "objtypes": {"0": "py:module", "1": "py:data", "2": "py:function", "3": "py:class", "4": "py:method", "5": "py:property", "6": "py:exception", "7": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "data", "Python data"], "2": ["py", "function", "Python function"], "3": ["py", "class", "Python class"], "4": ["py", "method", "Python method"], "5": ["py", "property", "Python property"], "6": ["py", "exception", "Python exception"], "7": ["py", "attribute", "Python attribute"]}, "titleterms": {"torchtre": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202], "_version": 0, "cli": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115], "advi": [1, 106], "modul": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 70, 71, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 191], "content": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "function": [1, 2, 3, 4, 6, 7, 10, 11, 21, 25, 26, 42, 44, 47, 50, 55, 64, 65, 68, 73, 81, 82, 83, 97, 98], "attribut": [1, 3, 25, 42], "evolut": [3, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 108, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170], "hmc": [4, 68, 69, 70, 71, 72, 73, 74, 75, 109, 172, 173, 174, 175, 176, 177, 178, 179], "submodul": [5, 16, 32, 49, 60, 67, 72, 76, 77, 85, 88, 91, 94, 101], "packag": [5, 32, 60, 67, 88, 94, 101, 104], "jacobian": [6, 110], "map": [7, 111], "plugin": [8, 112], "class": [8, 9, 12, 13, 14, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 73, 74, 75, 78, 79, 80, 83, 84, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 100, 101, 102, 103], "plugin_manag": [9, 113], "prior": [10, 114], "util": [11, 25, 81, 115, 129, 184], "core": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "abstractparamet": [12, 117], "classproperty_decor": [13, 118], "contain": [14, 119], "identifi": [15, 120], "logger": [17, 121], "model": [18, 122], "paramet": [19, 123], "parameter_encod": [20, 124], "parameter_util": [21, 125], "parametr": [22, 126], "runnabl": [23, 127], "serializ": [24, 128], "distribut": [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145], "bayesian_bridg": [26, 131], "ctmc_scale": [27, 132], "deterministic_norm": [28, 133], "gmrf": [30, 135], "gmrf_integr": [31, 136], "inverse_gamma": [33, 137], "joint_distribut": [34, 138], "log_norm": [35, 139], "multivariate_norm": [36, 140], "normal": [37, 141], "one_on_x": [38, 142], "scale_mixtur": [39, 143], "transform": [40, 144], "tree_prior": [41, 145], "align": [42, 147], "attribute_pattern": [43, 148], "bdsk": [44, 149], "birth_death": [45, 150], "branch_model": [46, 151], "coalesc": [47, 152], "datatyp": [48, 153], "subpackag": [49, 67, 76], "io": [50, 154], "poisson_tree_likelihood": [51, 155], "rate_transform": [52, 156], "root_transform": [53, 157], "site_model": [54, 158], "site_pattern": [55, 159], "substitution_model": [56, 57, 58, 59, 60, 61, 160, 161, 162, 163, 164, 165], "abstract": [56, 161], "amino_acid": [57, 162], "codon": [58, 163], "gener": [59, 164], "nucleotid": [61, 165], "taxa": [62, 166], "tree_height_transform": [63, 167], "tree_likelihood": [64, 168], "tree_model": [65, 169], "tree_model_flex": [66, 170], "infer": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "adapt": [68, 173], "adaptor": [69, 174], "hamiltonian": [70, 175], "integr": [73, 177], "oper": [74, 79, 178, 182], "stan_adapt": [75, 179], "mcmc": [77, 78, 79, 180, 181, 182], "sampler": [80, 183], "math": 82, "nf": [83, 84, 85, 86, 87, 185, 186, 187, 188, 189], "energy_funct": [83, 186], "flow": [84, 187], "planar": [86, 188], "realnvp": [87, 189], "nn": [88, 89, 190, 191], "op": [90, 91, 92, 192, 193, 194], "dual_averag": [90, 193], "welford": [92, 194], "optim": [93, 94, 95, 96, 195, 196, 197, 198], "converg": [93, 196], "lr_schedul": [95, 197], "treeregress": 98, "type": 99, "variat": [100, 101, 102, 103, 199, 200, 201, 202], "chi": [100, 200], "kl": [102, 201], "renyi": [103, 202], "welcom": 104, "": 104, "document": 104, "indic": 104, "tabl": 104}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"torchtree._version": [[0, "module-torchtree._version"]], "torchtree.cli.advi": [[1, "module-torchtree.cli.advi"], [106, "module-torchtree.cli.advi"]], "Module Contents": [[1, "module-contents"], [2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [6, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [68, "module-contents"], [70, "module-contents"], [71, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [86, "module-contents"], [87, "module-contents"], [89, "module-contents"], [90, "module-contents"], [92, "module-contents"], [93, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [102, "module-contents"], [103, "module-contents"]], "Functions": [[1, "functions"], [2, "functions"], [3, "functions"], [4, "functions"], [6, "functions"], [7, "functions"], [10, "functions"], [11, "functions"], [21, "functions"], [25, "functions"], [26, "functions"], [42, "functions"], [44, "functions"], [47, "functions"], [50, "functions"], [55, "functions"], [64, "functions"], [65, "functions"], [68, "functions"], [73, "functions"], [81, "functions"], [82, "functions"], [83, "functions"], [97, "functions"], [98, "functions"]], "Attributes": [[1, "attributes"], [3, "attributes"], [25, "attributes"], [42, "attributes"]], "torchtree.cli.cli": [[2, "module-torchtree.cli.cli"], [107, "module-torchtree.cli.cli"]], "torchtree.cli.evolution": [[3, "module-torchtree.cli.evolution"], [108, "module-torchtree.cli.evolution"]], "torchtree.cli.hmc": [[4, "module-torchtree.cli.hmc"], [109, "module-torchtree.cli.hmc"]], "torchtree.cli": [[5, "module-torchtree.cli"], [105, "module-torchtree.cli"]], "Submodules": [[5, "submodules"], [16, "submodules"], [32, "submodules"], [49, "submodules"], [60, "submodules"], [67, "submodules"], [72, "submodules"], [76, "submodules"], [77, "submodules"], [85, "submodules"], [88, "submodules"], [91, "submodules"], [94, "submodules"], [101, "submodules"]], "Package Contents": [[5, "package-contents"], [32, "package-contents"], [60, "package-contents"], [67, "package-contents"], [88, "package-contents"], [94, "package-contents"], [101, "package-contents"]], "torchtree.cli.jacobians": [[6, "module-torchtree.cli.jacobians"], [110, "module-torchtree.cli.jacobians"]], "torchtree.cli.map": [[7, "module-torchtree.cli.map"], [111, "module-torchtree.cli.map"]], "torchtree.cli.plugin": [[8, "module-torchtree.cli.plugin"], [112, "module-torchtree.cli.plugin"]], "Classes": [[8, "classes"], [9, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [70, "classes"], [71, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [83, "classes"], [84, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [95, "classes"], [96, "classes"], [100, "classes"], [101, "classes"], [102, "classes"], [103, "classes"]], "torchtree.cli.plugin_manager": [[9, "module-torchtree.cli.plugin_manager"], [113, "module-torchtree.cli.plugin_manager"]], "torchtree.cli.priors": [[10, "module-torchtree.cli.priors"], [114, "module-torchtree.cli.priors"]], "torchtree.cli.utils": [[11, "module-torchtree.cli.utils"], [115, "module-torchtree.cli.utils"]], "torchtree.core.abstractparameter": [[12, "module-torchtree.core.abstractparameter"], [117, "module-torchtree.core.abstractparameter"]], "torchtree.core.classproperty_decorator": [[13, "module-torchtree.core.classproperty_decorator"], [118, "module-torchtree.core.classproperty_decorator"]], "torchtree.core.container": [[14, "module-torchtree.core.container"], [119, "module-torchtree.core.container"]], "torchtree.core.identifiable": [[15, "module-torchtree.core.identifiable"], [120, "module-torchtree.core.identifiable"]], "torchtree.core": [[16, "module-torchtree.core"], [116, "module-torchtree.core"]], "torchtree.core.logger": [[17, "module-torchtree.core.logger"], [121, "module-torchtree.core.logger"]], "torchtree.core.model": [[18, "module-torchtree.core.model"], [122, "module-torchtree.core.model"]], "torchtree.core.parameter": [[19, "module-torchtree.core.parameter"], [123, "module-torchtree.core.parameter"]], "torchtree.core.parameter_encoder": [[20, "module-torchtree.core.parameter_encoder"], [124, "module-torchtree.core.parameter_encoder"]], "torchtree.core.parameter_utils": [[21, "module-torchtree.core.parameter_utils"], [125, "module-torchtree.core.parameter_utils"]], "torchtree.core.parametric": [[22, "module-torchtree.core.parametric"], [126, "module-torchtree.core.parametric"]], "torchtree.core.runnable": [[23, "module-torchtree.core.runnable"], [127, "module-torchtree.core.runnable"]], "torchtree.core.serializable": [[24, "module-torchtree.core.serializable"], [128, "module-torchtree.core.serializable"]], "torchtree.core.utils": [[25, "module-torchtree.core.utils"], [129, "module-torchtree.core.utils"]], "torchtree.distributions.bayesian_bridge": [[26, "module-torchtree.distributions.bayesian_bridge"], [131, "module-torchtree.distributions.bayesian_bridge"]], "torchtree.distributions.ctmc_scale": [[27, "module-torchtree.distributions.ctmc_scale"], [132, "module-torchtree.distributions.ctmc_scale"]], "torchtree.distributions.deterministic_normal": [[28, "module-torchtree.distributions.deterministic_normal"], [133, "module-torchtree.distributions.deterministic_normal"]], "torchtree.distributions.distributions": [[29, "module-torchtree.distributions.distributions"], [134, "module-torchtree.distributions.distributions"]], "torchtree.distributions.gmrf": [[30, "module-torchtree.distributions.gmrf"], [135, "module-torchtree.distributions.gmrf"]], "torchtree.distributions.gmrf_integrated": [[31, "module-torchtree.distributions.gmrf_integrated"], [136, "module-torchtree.distributions.gmrf_integrated"]], "torchtree.distributions": [[32, "module-torchtree.distributions"], [130, "module-torchtree.distributions"]], "torchtree.distributions.inverse_gamma": [[33, "module-torchtree.distributions.inverse_gamma"], [137, "module-torchtree.distributions.inverse_gamma"]], "torchtree.distributions.joint_distribution": [[34, "module-torchtree.distributions.joint_distribution"], [138, "module-torchtree.distributions.joint_distribution"]], "torchtree.distributions.log_normal": [[35, "module-torchtree.distributions.log_normal"], [139, "module-torchtree.distributions.log_normal"]], "torchtree.distributions.multivariate_normal": [[36, "module-torchtree.distributions.multivariate_normal"], [140, "module-torchtree.distributions.multivariate_normal"]], "torchtree.distributions.normal": [[37, "module-torchtree.distributions.normal"], [141, "module-torchtree.distributions.normal"]], "torchtree.distributions.one_on_x": [[38, "module-torchtree.distributions.one_on_x"], [142, "module-torchtree.distributions.one_on_x"]], "torchtree.distributions.scale_mixture": [[39, "module-torchtree.distributions.scale_mixture"], [143, "module-torchtree.distributions.scale_mixture"]], "torchtree.distributions.transforms": [[40, "module-torchtree.distributions.transforms"], [144, "module-torchtree.distributions.transforms"]], "torchtree.distributions.tree_prior": [[41, "module-torchtree.distributions.tree_prior"], [145, "module-torchtree.distributions.tree_prior"]], "torchtree.evolution.alignment": [[42, "module-torchtree.evolution.alignment"], [147, "module-torchtree.evolution.alignment"]], "torchtree.evolution.attribute_pattern": [[43, "module-torchtree.evolution.attribute_pattern"], [148, "module-torchtree.evolution.attribute_pattern"]], "torchtree.evolution.bdsk": [[44, "module-torchtree.evolution.bdsk"], [149, "module-torchtree.evolution.bdsk"]], "torchtree.evolution.birth_death": [[45, "module-torchtree.evolution.birth_death"], [150, "module-torchtree.evolution.birth_death"]], "torchtree.evolution.branch_model": [[46, "module-torchtree.evolution.branch_model"], [151, "module-torchtree.evolution.branch_model"]], "torchtree.evolution.coalescent": [[47, "module-torchtree.evolution.coalescent"], [152, "module-torchtree.evolution.coalescent"]], "torchtree.evolution.datatype": [[48, "module-torchtree.evolution.datatype"], [153, "module-torchtree.evolution.datatype"]], "torchtree.evolution": [[49, "module-torchtree.evolution"], [146, "module-torchtree.evolution"]], "Subpackages": [[49, "subpackages"], [67, "subpackages"], [76, "subpackages"]], "torchtree.evolution.io": [[50, "module-torchtree.evolution.io"], [154, "module-torchtree.evolution.io"]], "torchtree.evolution.poisson_tree_likelihood": [[51, "module-torchtree.evolution.poisson_tree_likelihood"], [155, "module-torchtree.evolution.poisson_tree_likelihood"]], "torchtree.evolution.rate_transform": [[52, "module-torchtree.evolution.rate_transform"], [156, "module-torchtree.evolution.rate_transform"]], "torchtree.evolution.root_transform": [[53, "module-torchtree.evolution.root_transform"], [157, "module-torchtree.evolution.root_transform"]], "torchtree.evolution.site_model": [[54, "module-torchtree.evolution.site_model"], [158, "module-torchtree.evolution.site_model"]], "torchtree.evolution.site_pattern": [[55, "module-torchtree.evolution.site_pattern"], [159, "module-torchtree.evolution.site_pattern"]], "torchtree.evolution.substitution_model.abstract": [[56, "module-torchtree.evolution.substitution_model.abstract"], [161, "module-torchtree.evolution.substitution_model.abstract"]], "torchtree.evolution.substitution_model.amino_acid": [[57, "module-torchtree.evolution.substitution_model.amino_acid"], [162, "module-torchtree.evolution.substitution_model.amino_acid"]], "torchtree.evolution.substitution_model.codon": [[58, "module-torchtree.evolution.substitution_model.codon"], [163, "module-torchtree.evolution.substitution_model.codon"]], "torchtree.evolution.substitution_model.general": [[59, "module-torchtree.evolution.substitution_model.general"], [164, "module-torchtree.evolution.substitution_model.general"]], "torchtree.evolution.substitution_model": [[60, "module-torchtree.evolution.substitution_model"], [160, "module-torchtree.evolution.substitution_model"]], "torchtree.evolution.substitution_model.nucleotide": [[61, "module-torchtree.evolution.substitution_model.nucleotide"], [165, "module-torchtree.evolution.substitution_model.nucleotide"]], "torchtree.evolution.taxa": [[62, "module-torchtree.evolution.taxa"], [166, "module-torchtree.evolution.taxa"]], "torchtree.evolution.tree_height_transform": [[63, "module-torchtree.evolution.tree_height_transform"], [167, "module-torchtree.evolution.tree_height_transform"]], "torchtree.evolution.tree_likelihood": [[64, "module-torchtree.evolution.tree_likelihood"], [168, "module-torchtree.evolution.tree_likelihood"]], "torchtree.evolution.tree_model": [[65, "module-torchtree.evolution.tree_model"], [169, "module-torchtree.evolution.tree_model"]], "torchtree.evolution.tree_model_flexible": [[66, "module-torchtree.evolution.tree_model_flexible"], [170, "module-torchtree.evolution.tree_model_flexible"]], "torchtree": [[67, "module-torchtree"]], "torchtree.inference.hmc.adaptation": [[68, "module-torchtree.inference.hmc.adaptation"], [173, "module-torchtree.inference.hmc.adaptation"]], "torchtree.inference.hmc.adaptors": [[69, "module-torchtree.inference.hmc.adaptors"], [174, "module-torchtree.inference.hmc.adaptors"]], "torchtree.inference.hmc.hamiltonian": [[70, "module-torchtree.inference.hmc.hamiltonian"], [175, "module-torchtree.inference.hmc.hamiltonian"]], "torchtree.inference.hmc.hmc": [[71, "module-torchtree.inference.hmc.hmc"], [176, "module-torchtree.inference.hmc.hmc"]], "torchtree.inference.hmc": [[72, "module-torchtree.inference.hmc"], [172, "module-torchtree.inference.hmc"]], "torchtree.inference.hmc.integrator": [[73, "module-torchtree.inference.hmc.integrator"], [177, "module-torchtree.inference.hmc.integrator"]], "torchtree.inference.hmc.operator": [[74, "module-torchtree.inference.hmc.operator"], [178, "module-torchtree.inference.hmc.operator"]], "torchtree.inference.hmc.stan_adaptation": [[75, "module-torchtree.inference.hmc.stan_adaptation"], [179, "module-torchtree.inference.hmc.stan_adaptation"]], "torchtree.inference": [[76, "module-torchtree.inference"], [171, "module-torchtree.inference"]], "torchtree.inference.mcmc": [[77, "module-torchtree.inference.mcmc"], [180, "module-torchtree.inference.mcmc"]], "torchtree.inference.mcmc.mcmc": [[78, "module-torchtree.inference.mcmc.mcmc"], [181, "module-torchtree.inference.mcmc.mcmc"]], "torchtree.inference.mcmc.operator": [[79, "module-torchtree.inference.mcmc.operator"], [182, "module-torchtree.inference.mcmc.operator"]], "torchtree.inference.sampler": [[80, "module-torchtree.inference.sampler"], [183, "module-torchtree.inference.sampler"]], "torchtree.inference.utils": [[81, "module-torchtree.inference.utils"], [184, "module-torchtree.inference.utils"]], "torchtree.math": [[82, "module-torchtree.math"]], "torchtree.nf.energy_functions": [[83, "module-torchtree.nf.energy_functions"], [186, "module-torchtree.nf.energy_functions"]], "torchtree.nf.flow": [[84, "module-torchtree.nf.flow"], [187, "module-torchtree.nf.flow"]], "torchtree.nf": [[85, "module-torchtree.nf"], [185, "module-torchtree.nf"]], "torchtree.nf.planar": [[86, "module-torchtree.nf.planar"], [188, "module-torchtree.nf.planar"]], "torchtree.nf.realnvp": [[87, "module-torchtree.nf.realnvp"], [189, "module-torchtree.nf.realnvp"]], "torchtree.nn": [[88, "module-torchtree.nn"], [190, "module-torchtree.nn"]], "torchtree.nn.module": [[89, "module-torchtree.nn.module"], [191, "module-torchtree.nn.module"]], "torchtree.ops.dual_averaging": [[90, "module-torchtree.ops.dual_averaging"], [193, "module-torchtree.ops.dual_averaging"]], "torchtree.ops": [[91, "module-torchtree.ops"], [192, "module-torchtree.ops"]], "torchtree.ops.welford": [[92, "module-torchtree.ops.welford"], [194, "module-torchtree.ops.welford"]], "torchtree.optim.convergence": [[93, "module-torchtree.optim.convergence"], [196, "module-torchtree.optim.convergence"]], "torchtree.optim": [[94, "module-torchtree.optim"], [195, "module-torchtree.optim"]], "torchtree.optim.lr_scheduler": [[95, "module-torchtree.optim.lr_scheduler"], [197, "module-torchtree.optim.lr_scheduler"]], "torchtree.optim.optimizer": [[96, "module-torchtree.optim.optimizer"], [198, "module-torchtree.optim.optimizer"]], "torchtree.torchtree": [[97, "module-torchtree.torchtree"]], "torchtree.treeregression": [[98, "module-torchtree.treeregression"]], "torchtree.typing": [[99, "module-torchtree.typing"]], "torchtree.variational.chi": [[100, "module-torchtree.variational.chi"], [200, "module-torchtree.variational.chi"]], "torchtree.variational": [[101, "module-torchtree.variational"], [199, "module-torchtree.variational"]], "torchtree.variational.kl": [[102, "module-torchtree.variational.kl"], [201, "module-torchtree.variational.kl"]], "torchtree.variational.renyi": [[103, "module-torchtree.variational.renyi"], [202, "module-torchtree.variational.renyi"]], "Welcome to torchtree\u2019s documentation!": [[104, "welcome-to-torchtree-s-documentation"]], "Packages": [[104, "packages"]], "Indices and tables": [[104, "indices-and-tables"]]}, "indexentries": {"module": [[0, "module-torchtree._version"], [1, "module-torchtree.cli.advi"], [2, "module-torchtree.cli.cli"], [3, "module-torchtree.cli.evolution"], [4, "module-torchtree.cli.hmc"], [5, "module-torchtree.cli"], [6, "module-torchtree.cli.jacobians"], [7, "module-torchtree.cli.map"], [8, "module-torchtree.cli.plugin"], [9, "module-torchtree.cli.plugin_manager"], [10, "module-torchtree.cli.priors"], [11, "module-torchtree.cli.utils"], [12, "module-torchtree.core.abstractparameter"], [13, "module-torchtree.core.classproperty_decorator"], [14, "module-torchtree.core.container"], [15, "module-torchtree.core.identifiable"], [16, "module-torchtree.core"], [17, "module-torchtree.core.logger"], [18, "module-torchtree.core.model"], [19, "module-torchtree.core.parameter"], [20, "module-torchtree.core.parameter_encoder"], [21, "module-torchtree.core.parameter_utils"], [22, "module-torchtree.core.parametric"], [23, "module-torchtree.core.runnable"], [24, "module-torchtree.core.serializable"], [25, "module-torchtree.core.utils"], [26, "module-torchtree.distributions.bayesian_bridge"], [27, "module-torchtree.distributions.ctmc_scale"], [28, "module-torchtree.distributions.deterministic_normal"], [29, "module-torchtree.distributions.distributions"], [30, "module-torchtree.distributions.gmrf"], [31, "module-torchtree.distributions.gmrf_integrated"], [32, "module-torchtree.distributions"], [33, "module-torchtree.distributions.inverse_gamma"], [34, "module-torchtree.distributions.joint_distribution"], [35, "module-torchtree.distributions.log_normal"], [36, "module-torchtree.distributions.multivariate_normal"], [37, "module-torchtree.distributions.normal"], [38, "module-torchtree.distributions.one_on_x"], [39, "module-torchtree.distributions.scale_mixture"], [40, "module-torchtree.distributions.transforms"], [41, "module-torchtree.distributions.tree_prior"], [42, "module-torchtree.evolution.alignment"], [43, "module-torchtree.evolution.attribute_pattern"], [44, "module-torchtree.evolution.bdsk"], [45, "module-torchtree.evolution.birth_death"], [46, "module-torchtree.evolution.branch_model"], [47, "module-torchtree.evolution.coalescent"], [48, "module-torchtree.evolution.datatype"], [49, "module-torchtree.evolution"], [50, "module-torchtree.evolution.io"], [51, "module-torchtree.evolution.poisson_tree_likelihood"], [52, "module-torchtree.evolution.rate_transform"], [53, "module-torchtree.evolution.root_transform"], [54, "module-torchtree.evolution.site_model"], [55, "module-torchtree.evolution.site_pattern"], [56, "module-torchtree.evolution.substitution_model.abstract"], [57, "module-torchtree.evolution.substitution_model.amino_acid"], [58, "module-torchtree.evolution.substitution_model.codon"], [59, "module-torchtree.evolution.substitution_model.general"], [60, "module-torchtree.evolution.substitution_model"], [61, "module-torchtree.evolution.substitution_model.nucleotide"], [62, "module-torchtree.evolution.taxa"], [63, "module-torchtree.evolution.tree_height_transform"], [64, "module-torchtree.evolution.tree_likelihood"], [65, "module-torchtree.evolution.tree_model"], [66, "module-torchtree.evolution.tree_model_flexible"], [67, "module-torchtree"], [68, "module-torchtree.inference.hmc.adaptation"], [69, "module-torchtree.inference.hmc.adaptors"], [70, "module-torchtree.inference.hmc.hamiltonian"], [71, "module-torchtree.inference.hmc.hmc"], [72, "module-torchtree.inference.hmc"], [73, "module-torchtree.inference.hmc.integrator"], [74, "module-torchtree.inference.hmc.operator"], [75, "module-torchtree.inference.hmc.stan_adaptation"], [76, "module-torchtree.inference"], [77, "module-torchtree.inference.mcmc"], [78, "module-torchtree.inference.mcmc.mcmc"], [79, "module-torchtree.inference.mcmc.operator"], [80, "module-torchtree.inference.sampler"], [81, "module-torchtree.inference.utils"], [82, "module-torchtree.math"], [83, "module-torchtree.nf.energy_functions"], [84, "module-torchtree.nf.flow"], [85, "module-torchtree.nf"], [86, "module-torchtree.nf.planar"], [87, "module-torchtree.nf.realnvp"], [88, "module-torchtree.nn"], [89, "module-torchtree.nn.module"], [90, "module-torchtree.ops.dual_averaging"], [91, "module-torchtree.ops"], [92, "module-torchtree.ops.welford"], [93, "module-torchtree.optim.convergence"], [94, "module-torchtree.optim"], [95, "module-torchtree.optim.lr_scheduler"], [96, "module-torchtree.optim.optimizer"], [97, "module-torchtree.torchtree"], [98, "module-torchtree.treeregression"], [99, "module-torchtree.typing"], [100, "module-torchtree.variational.chi"], [101, "module-torchtree.variational"], [102, "module-torchtree.variational.kl"], [103, "module-torchtree.variational.renyi"], [105, "module-torchtree.cli"], [106, "module-torchtree.cli.advi"], [107, "module-torchtree.cli.cli"], [108, "module-torchtree.cli.evolution"], [109, "module-torchtree.cli.hmc"], [110, "module-torchtree.cli.jacobians"], [111, "module-torchtree.cli.map"], [112, "module-torchtree.cli.plugin"], [113, "module-torchtree.cli.plugin_manager"], [114, "module-torchtree.cli.priors"], [115, "module-torchtree.cli.utils"], [116, "module-torchtree.core"], [117, "module-torchtree.core.abstractparameter"], [118, "module-torchtree.core.classproperty_decorator"], [119, "module-torchtree.core.container"], [120, "module-torchtree.core.identifiable"], [121, "module-torchtree.core.logger"], [122, "module-torchtree.core.model"], [123, "module-torchtree.core.parameter"], [124, "module-torchtree.core.parameter_encoder"], [125, "module-torchtree.core.parameter_utils"], [126, "module-torchtree.core.parametric"], [127, "module-torchtree.core.runnable"], [128, "module-torchtree.core.serializable"], [129, "module-torchtree.core.utils"], [130, "module-torchtree.distributions"], [131, "module-torchtree.distributions.bayesian_bridge"], [132, "module-torchtree.distributions.ctmc_scale"], [133, "module-torchtree.distributions.deterministic_normal"], [134, "module-torchtree.distributions.distributions"], [135, "module-torchtree.distributions.gmrf"], [136, "module-torchtree.distributions.gmrf_integrated"], [137, "module-torchtree.distributions.inverse_gamma"], [138, "module-torchtree.distributions.joint_distribution"], [139, "module-torchtree.distributions.log_normal"], [140, "module-torchtree.distributions.multivariate_normal"], [141, "module-torchtree.distributions.normal"], [142, "module-torchtree.distributions.one_on_x"], [143, "module-torchtree.distributions.scale_mixture"], [144, "module-torchtree.distributions.transforms"], [145, "module-torchtree.distributions.tree_prior"], [146, "module-torchtree.evolution"], [147, "module-torchtree.evolution.alignment"], [148, "module-torchtree.evolution.attribute_pattern"], [149, "module-torchtree.evolution.bdsk"], [150, "module-torchtree.evolution.birth_death"], [151, "module-torchtree.evolution.branch_model"], [152, "module-torchtree.evolution.coalescent"], [153, "module-torchtree.evolution.datatype"], [154, "module-torchtree.evolution.io"], [155, "module-torchtree.evolution.poisson_tree_likelihood"], [156, "module-torchtree.evolution.rate_transform"], [157, "module-torchtree.evolution.root_transform"], [158, "module-torchtree.evolution.site_model"], [159, "module-torchtree.evolution.site_pattern"], [160, "module-torchtree.evolution.substitution_model"], [161, "module-torchtree.evolution.substitution_model.abstract"], [162, "module-torchtree.evolution.substitution_model.amino_acid"], [163, "module-torchtree.evolution.substitution_model.codon"], [164, "module-torchtree.evolution.substitution_model.general"], [165, "module-torchtree.evolution.substitution_model.nucleotide"], [166, "module-torchtree.evolution.taxa"], [167, "module-torchtree.evolution.tree_height_transform"], [168, "module-torchtree.evolution.tree_likelihood"], [169, "module-torchtree.evolution.tree_model"], [170, "module-torchtree.evolution.tree_model_flexible"], [171, "module-torchtree.inference"], [172, "module-torchtree.inference.hmc"], [173, "module-torchtree.inference.hmc.adaptation"], [174, "module-torchtree.inference.hmc.adaptors"], [175, "module-torchtree.inference.hmc.hamiltonian"], [176, "module-torchtree.inference.hmc.hmc"], [177, "module-torchtree.inference.hmc.integrator"], [178, "module-torchtree.inference.hmc.operator"], [179, "module-torchtree.inference.hmc.stan_adaptation"], [180, "module-torchtree.inference.mcmc"], [181, "module-torchtree.inference.mcmc.mcmc"], [182, "module-torchtree.inference.mcmc.operator"], [183, "module-torchtree.inference.sampler"], [184, "module-torchtree.inference.utils"], [185, "module-torchtree.nf"], [186, "module-torchtree.nf.energy_functions"], [187, "module-torchtree.nf.flow"], [188, "module-torchtree.nf.planar"], [189, "module-torchtree.nf.realnvp"], [190, "module-torchtree.nn"], [191, "module-torchtree.nn.module"], [192, "module-torchtree.ops"], [193, "module-torchtree.ops.dual_averaging"], [194, "module-torchtree.ops.welford"], [195, "module-torchtree.optim"], [196, "module-torchtree.optim.convergence"], [197, "module-torchtree.optim.lr_scheduler"], [198, "module-torchtree.optim.optimizer"], [199, "module-torchtree.variational"], [200, "module-torchtree.variational.chi"], [201, "module-torchtree.variational.kl"], [202, "module-torchtree.variational.renyi"]], "torchtree._version": [[0, "module-torchtree._version"]], "apply_affine_transform() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.apply_affine_transform"]], "apply_exp_transform() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.apply_exp_transform"]], "apply_sigmoid_transformed() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.apply_sigmoid_transformed"]], "apply_simplex_transform() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.apply_simplex_transform"]], "apply_transforms_for_fullrank() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.apply_transforms_for_fullrank"]], "build_advi() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.build_advi"]], "create_advi() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_advi"]], "create_flexible_variational() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_flexible_variational"]], "create_fullrank() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_fullrank"]], "create_fullrank_from_meanfield() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_fullrank_from_meanfield"]], "create_gamma_distribution() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_gamma_distribution"]], "create_logger() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_logger"]], "create_meanfield() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_meanfield"]], "create_normal_distribution() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_normal_distribution"]], "create_realnp_distribution() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_realnp_distribution"]], "create_realnvp() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_realnvp"]], "create_sampler() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_sampler"]], "create_tril() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_tril"]], "create_variational_model() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_variational_model"]], "create_variational_parser() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_variational_parser"]], "create_weibull_distribution() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_weibull_distribution"]], "gather_parameters() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.gather_parameters"]], "logger (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.logger"]], "torchtree.cli.advi": [[1, "module-torchtree.cli.advi"], [106, "module-torchtree.cli.advi"]], "main() (in module torchtree.cli.cli)": [[2, "torchtree.cli.cli.main"]], "torchtree.cli.cli": [[2, "module-torchtree.cli.cli"], [107, "module-torchtree.cli.cli"]], "add_birth_death() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.add_birth_death"]], "add_coalescent() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.add_coalescent"]], "build_alignment() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.build_alignment"]], "create_alignment() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_alignment"]], "create_bd_prior() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_bd_prior"]], "create_bdsk() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_bdsk"]], "create_bdsk_prior() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_bdsk_prior"]], "create_birth_death() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_birth_death"]], "create_branch_model() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_branch_model"]], "create_clock_prior() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_clock_prior"]], "create_coalesent() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_coalesent"]], "create_constant_bd_prior() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_constant_bd_prior"]], "create_constant_birth_death() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_constant_birth_death"]], "create_data_type() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_data_type"]], "create_evolution_joint() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_evolution_joint"]], "create_evolution_parser() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_evolution_parser"]], "create_evolution_priors() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_evolution_priors"]], "create_general_data_type() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_general_data_type"]], "create_poisson_evolution_joint() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_poisson_evolution_joint"]], "create_poisson_tree_likelihood() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_poisson_tree_likelihood"]], "create_site_model() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_site_model"]], "create_site_model_srd06_mus() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_site_model_srd06_mus"]], "create_site_pattern() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_site_pattern"]], "create_substitution_model() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_substitution_model"]], "create_substitution_model_priors() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_substitution_model_priors"]], "create_taxa() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_taxa"]], "create_time_tree_prior() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_time_tree_prior"]], "create_tree_likelihood() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_tree_likelihood"]], "create_tree_likelihood_general() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_tree_likelihood_general"]], "create_tree_likelihood_single() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_tree_likelihood_single"]], "create_tree_model() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_tree_model"]], "create_ucln_prior() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_ucln_prior"]], "distribution_type() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.distribution_type"]], "get_engine() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.get_engine"]], "is_float() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.is_float"]], "logger (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.logger"]], "parse_distribution() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.parse_distribution"]], "run_tree_regression() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.run_tree_regression"]], "str_or_float() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.str_or_float"]], "torchtree.cli.evolution": [[3, "module-torchtree.cli.evolution"], [108, "module-torchtree.cli.evolution"]], "zero_or_path() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.zero_or_path"]], "build_hmc() (in module torchtree.cli.hmc)": [[4, "torchtree.cli.hmc.build_hmc"]], "create_hmc() (in module torchtree.cli.hmc)": [[4, "torchtree.cli.hmc.create_hmc"]], "create_hmc_operator() (in module torchtree.cli.hmc)": [[4, "torchtree.cli.hmc.create_hmc_operator"]], "create_hmc_parser() (in module torchtree.cli.hmc)": [[4, "torchtree.cli.hmc.create_hmc_parser"]], "create_loggers() (in module torchtree.cli.hmc)": [[4, "torchtree.cli.hmc.create_loggers"]], "create_stan_windowed_adaptation() (in module torchtree.cli.hmc)": [[4, "torchtree.cli.hmc.create_stan_windowed_adaptation"]], "torchtree.cli.hmc": [[4, "module-torchtree.cli.hmc"], [109, "module-torchtree.cli.hmc"]], "plugin_manager (in module torchtree.cli)": [[5, "torchtree.cli.PLUGIN_MANAGER"]], "torchtree.cli": [[5, "module-torchtree.cli"], [105, "module-torchtree.cli"]], "create_jacobians() (in module torchtree.cli.jacobians)": [[6, "torchtree.cli.jacobians.create_jacobians"]], "torchtree.cli.jacobians": [[6, "module-torchtree.cli.jacobians"], [110, "module-torchtree.cli.jacobians"]], "build_optimizer() (in module torchtree.cli.map)": [[7, "torchtree.cli.map.build_optimizer"]], "create_logger() (in module torchtree.cli.map)": [[7, "torchtree.cli.map.create_logger"]], "create_map_parser() (in module torchtree.cli.map)": [[7, "torchtree.cli.map.create_map_parser"]], "create_optimizer() (in module torchtree.cli.map)": [[7, "torchtree.cli.map.create_optimizer"]], "create_tree_logger() (in module torchtree.cli.map)": [[7, "torchtree.cli.map.create_tree_logger"]], "torchtree.cli.map": [[7, "module-torchtree.cli.map"], [111, "module-torchtree.cli.map"]], "plugin (class in torchtree.cli.plugin)": [[8, "torchtree.cli.plugin.Plugin"]], "load_arguments() (torchtree.cli.plugin.plugin method)": [[8, "torchtree.cli.plugin.Plugin.load_arguments"]], "process_all() (torchtree.cli.plugin.plugin method)": [[8, "torchtree.cli.plugin.Plugin.process_all"]], "process_coalescent() (torchtree.cli.plugin.plugin method)": [[8, "torchtree.cli.plugin.Plugin.process_coalescent"]], "process_tree_likelihood() (torchtree.cli.plugin.plugin method)": [[8, "torchtree.cli.plugin.Plugin.process_tree_likelihood"]], "torchtree.cli.plugin": [[8, "module-torchtree.cli.plugin"], [112, "module-torchtree.cli.plugin"]], "pluginmanager (class in torchtree.cli.plugin_manager)": [[9, "torchtree.cli.plugin_manager.PluginManager"]], "disable_plugins() (torchtree.cli.plugin_manager.pluginmanager method)": [[9, "torchtree.cli.plugin_manager.PluginManager.disable_plugins"]], "load_arguments() (torchtree.cli.plugin_manager.pluginmanager method)": [[9, "torchtree.cli.plugin_manager.PluginManager.load_arguments"]], "load_plugins() (torchtree.cli.plugin_manager.pluginmanager method)": [[9, "torchtree.cli.plugin_manager.PluginManager.load_plugins"]], "plugins() (torchtree.cli.plugin_manager.pluginmanager method)": [[9, "torchtree.cli.plugin_manager.PluginManager.plugins"]], "torchtree.cli.plugin_manager": [[9, "module-torchtree.cli.plugin_manager"], [113, "module-torchtree.cli.plugin_manager"]], "create_clock_horseshoe_prior() (in module torchtree.cli.priors)": [[10, "torchtree.cli.priors.create_clock_horseshoe_prior"]], "create_one_on_x_prior() (in module torchtree.cli.priors)": [[10, "torchtree.cli.priors.create_one_on_x_prior"]], "torchtree.cli.priors": [[10, "module-torchtree.cli.priors"], [114, "module-torchtree.cli.priors"]], "convert_date_to_real() (in module torchtree.cli.utils)": [[11, "torchtree.cli.utils.convert_date_to_real"]], "make_unconstrained() (in module torchtree.cli.utils)": [[11, "torchtree.cli.utils.make_unconstrained"]], "read_dates_from_csv() (in module torchtree.cli.utils)": [[11, "torchtree.cli.utils.read_dates_from_csv"]], "torchtree.cli.utils": [[11, "module-torchtree.cli.utils"], [115, "module-torchtree.cli.utils"]], "abstractparameter (class in torchtree.core.abstractparameter)": [[12, "torchtree.core.abstractparameter.AbstractParameter"]], "device (class in torchtree.core.abstractparameter)": [[12, "torchtree.core.abstractparameter.Device"]], "add_parameter_listener() (torchtree.core.abstractparameter.abstractparameter method)": [[12, "torchtree.core.abstractparameter.AbstractParameter.add_parameter_listener"]], "cpu() (torchtree.core.abstractparameter.device method)": [[12, "torchtree.core.abstractparameter.Device.cpu"]], "cuda() (torchtree.core.abstractparameter.device method)": [[12, "torchtree.core.abstractparameter.Device.cuda"]], "device (torchtree.core.abstractparameter.abstractparameter property)": [[12, "torchtree.core.abstractparameter.AbstractParameter.device"]], "device (torchtree.core.abstractparameter.device property)": [[12, "torchtree.core.abstractparameter.Device.device"]], "dim() (torchtree.core.abstractparameter.abstractparameter method)": [[12, "torchtree.core.abstractparameter.AbstractParameter.dim"]], "dtype (torchtree.core.abstractparameter.abstractparameter property)": [[12, "torchtree.core.abstractparameter.AbstractParameter.dtype"]], "fire_parameter_changed() (torchtree.core.abstractparameter.abstractparameter method)": [[12, "torchtree.core.abstractparameter.AbstractParameter.fire_parameter_changed"]], "parameters() (torchtree.core.abstractparameter.abstractparameter method)": [[12, "torchtree.core.abstractparameter.AbstractParameter.parameters"]], "requires_grad (torchtree.core.abstractparameter.abstractparameter property)": [[12, "torchtree.core.abstractparameter.AbstractParameter.requires_grad"]], "shape (torchtree.core.abstractparameter.abstractparameter property)": [[12, "torchtree.core.abstractparameter.AbstractParameter.shape"]], "tensor (torchtree.core.abstractparameter.abstractparameter property)": [[12, "torchtree.core.abstractparameter.AbstractParameter.tensor"]], "to() (torchtree.core.abstractparameter.device method)": [[12, "torchtree.core.abstractparameter.Device.to"]], "torchtree.core.abstractparameter": [[12, "module-torchtree.core.abstractparameter"], [117, "module-torchtree.core.abstractparameter"]], "classproperty (class in torchtree.core.classproperty_decorator)": [[13, "torchtree.core.classproperty_decorator.classproperty"]], "torchtree.core.classproperty_decorator": [[13, "module-torchtree.core.classproperty_decorator"], [118, "module-torchtree.core.classproperty_decorator"]], "container (class in torchtree.core.container)": [[14, "torchtree.core.container.Container"]], "callables() (torchtree.core.container.container method)": [[14, "torchtree.core.container.Container.callables"]], "from_json() (torchtree.core.container.container class method)": [[14, "torchtree.core.container.Container.from_json"]], "handle_model_changed() (torchtree.core.container.container method)": [[14, "torchtree.core.container.Container.handle_model_changed"]], "handle_parameter_changed() (torchtree.core.container.container method)": [[14, "torchtree.core.container.Container.handle_parameter_changed"]], "params() (torchtree.core.container.container method)": [[14, "torchtree.core.container.Container.params"]], "torchtree.core.container": [[14, "module-torchtree.core.container"], [119, "module-torchtree.core.container"]], "identifiable (class in torchtree.core.identifiable)": [[15, "torchtree.core.identifiable.Identifiable"]], "id (torchtree.core.identifiable.identifiable property)": [[15, "torchtree.core.identifiable.Identifiable.id"]], "torchtree.core.identifiable": [[15, "module-torchtree.core.identifiable"], [120, "module-torchtree.core.identifiable"]], "torchtree.core": [[16, "module-torchtree.core"], [116, "module-torchtree.core"]], "csv (class in torchtree.core.logger)": [[17, "torchtree.core.logger.CSV"]], "dumper (class in torchtree.core.logger)": [[17, "torchtree.core.logger.Dumper"]], "logger (class in torchtree.core.logger)": [[17, "torchtree.core.logger.Logger"]], "loggerinterface (class in torchtree.core.logger)": [[17, "torchtree.core.logger.LoggerInterface"]], "treelogger (class in torchtree.core.logger)": [[17, "torchtree.core.logger.TreeLogger"]], "close() (torchtree.core.logger.logger method)": [[17, "torchtree.core.logger.Logger.close"]], "close() (torchtree.core.logger.loggerinterface method)": [[17, "torchtree.core.logger.LoggerInterface.close"]], "close() (torchtree.core.logger.treelogger method)": [[17, "torchtree.core.logger.TreeLogger.close"]], "from_json() (torchtree.core.logger.csv class method)": [[17, "torchtree.core.logger.CSV.from_json"]], "from_json() (torchtree.core.logger.dumper class method)": [[17, "torchtree.core.logger.Dumper.from_json"]], "from_json() (torchtree.core.logger.logger class method)": [[17, "torchtree.core.logger.Logger.from_json"]], "from_json() (torchtree.core.logger.treelogger class method)": [[17, "torchtree.core.logger.TreeLogger.from_json"]], "initialize() (torchtree.core.logger.logger method)": [[17, "torchtree.core.logger.Logger.initialize"]], "initialize() (torchtree.core.logger.loggerinterface method)": [[17, "torchtree.core.logger.LoggerInterface.initialize"]], "initialize() (torchtree.core.logger.treelogger method)": [[17, "torchtree.core.logger.TreeLogger.initialize"]], "log() (torchtree.core.logger.logger method)": [[17, "torchtree.core.logger.Logger.log"]], "log() (torchtree.core.logger.loggerinterface method)": [[17, "torchtree.core.logger.LoggerInterface.log"]], "log() (torchtree.core.logger.treelogger method)": [[17, "torchtree.core.logger.TreeLogger.log"]], "run() (torchtree.core.logger.csv method)": [[17, "torchtree.core.logger.CSV.run"]], "run() (torchtree.core.logger.dumper method)": [[17, "torchtree.core.logger.Dumper.run"]], "run() (torchtree.core.logger.loggerinterface method)": [[17, "torchtree.core.logger.LoggerInterface.run"]], "torchtree.core.logger": [[17, "module-torchtree.core.logger"], [121, "module-torchtree.core.logger"]], "callablemodel (class in torchtree.core.model)": [[18, "torchtree.core.model.CallableModel"]], "model (class in torchtree.core.model)": [[18, "torchtree.core.model.Model"]], "add_model_listener() (torchtree.core.model.model method)": [[18, "torchtree.core.model.Model.add_model_listener"]], "add_parameter_listener() (torchtree.core.model.model method)": [[18, "torchtree.core.model.Model.add_parameter_listener"]], "cpu() (torchtree.core.model.model method)": [[18, "torchtree.core.model.Model.cpu"]], "cuda() (torchtree.core.model.model method)": [[18, "torchtree.core.model.Model.cuda"]], "fire_model_changed() (torchtree.core.model.model method)": [[18, "torchtree.core.model.Model.fire_model_changed"]], "handle_model_changed() (torchtree.core.model.callablemodel method)": [[18, "torchtree.core.model.CallableModel.handle_model_changed"]], "handle_parameter_changed() (torchtree.core.model.callablemodel method)": [[18, "torchtree.core.model.CallableModel.handle_parameter_changed"]], "models() (torchtree.core.model.model method)": [[18, "torchtree.core.model.Model.models"]], "remove_model_listener() (torchtree.core.model.model method)": [[18, "torchtree.core.model.Model.remove_model_listener"]], "remove_parameter_listener() (torchtree.core.model.model method)": [[18, "torchtree.core.model.Model.remove_parameter_listener"]], "sample_shape (torchtree.core.model.model property)": [[18, "torchtree.core.model.Model.sample_shape"]], "tag (torchtree.core.model.model property)": [[18, "torchtree.core.model.Model.tag"]], "to() (torchtree.core.model.model method)": [[18, "torchtree.core.model.Model.to"]], "torchtree.core.model": [[18, "module-torchtree.core.model"], [122, "module-torchtree.core.model"]], "catparameter (class in torchtree.core.parameter)": [[19, "torchtree.core.parameter.CatParameter"]], "moduleparameter (class in torchtree.core.parameter)": [[19, "torchtree.core.parameter.ModuleParameter"]], "parameter (class in torchtree.core.parameter)": [[19, "torchtree.core.parameter.Parameter"]], "parameter.to() (in module torchtree.core.parameter)": [[19, "id0"], [19, "id5"], [19, "id6"]], "transformedparameter (class in torchtree.core.parameter)": [[19, "torchtree.core.parameter.TransformedParameter"]], "viewparameter (class in torchtree.core.parameter)": [[19, "torchtree.core.parameter.ViewParameter"]], "add_parameter_listener() (torchtree.core.parameter.catparameter method)": [[19, "torchtree.core.parameter.CatParameter.add_parameter_listener"]], "add_parameter_listener() (torchtree.core.parameter.moduleparameter method)": [[19, "torchtree.core.parameter.ModuleParameter.add_parameter_listener"]], "add_parameter_listener() (torchtree.core.parameter.parameter method)": [[19, "torchtree.core.parameter.Parameter.add_parameter_listener"]], "add_parameter_listener() (torchtree.core.parameter.transformedparameter method)": [[19, "torchtree.core.parameter.TransformedParameter.add_parameter_listener"]], "add_parameter_listener() (torchtree.core.parameter.viewparameter method)": [[19, "torchtree.core.parameter.ViewParameter.add_parameter_listener"]], "apply_transform() (torchtree.core.parameter.transformedparameter method)": [[19, "torchtree.core.parameter.TransformedParameter.apply_transform"]], "assign() (torchtree.core.parameter.viewparameter method)": [[19, "torchtree.core.parameter.ViewParameter.assign"]], "clone() (torchtree.core.parameter.parameter method)": [[19, "torchtree.core.parameter.Parameter.clone"]], "clone() (torchtree.core.parameter.viewparameter method)": [[19, "torchtree.core.parameter.ViewParameter.clone"]], "copy_() (torchtree.core.parameter.parameter method)": [[19, "torchtree.core.parameter.Parameter.copy_"]], "cpu() (torchtree.core.parameter.catparameter method)": [[19, "torchtree.core.parameter.CatParameter.cpu"]], "cpu() (torchtree.core.parameter.moduleparameter method)": [[19, "torchtree.core.parameter.ModuleParameter.cpu"]], "cpu() (torchtree.core.parameter.parameter method)": [[19, "torchtree.core.parameter.Parameter.cpu"]], "cpu() (torchtree.core.parameter.transformedparameter method)": [[19, "torchtree.core.parameter.TransformedParameter.cpu"]], "cpu() (torchtree.core.parameter.viewparameter method)": [[19, "torchtree.core.parameter.ViewParameter.cpu"]], "cuda() (torchtree.core.parameter.catparameter method)": [[19, "torchtree.core.parameter.CatParameter.cuda"]], "cuda() (torchtree.core.parameter.moduleparameter method)": [[19, "torchtree.core.parameter.ModuleParameter.cuda"]], "cuda() (torchtree.core.parameter.parameter method)": [[19, "torchtree.core.parameter.Parameter.cuda"]], "cuda() (torchtree.core.parameter.transformedparameter method)": [[19, "torchtree.core.parameter.TransformedParameter.cuda"]], "cuda() (torchtree.core.parameter.viewparameter method)": [[19, "torchtree.core.parameter.ViewParameter.cuda"]], "detach() (torchtree.core.parameter.parameter method)": [[19, "torchtree.core.parameter.Parameter.detach"]], "device (torchtree.core.parameter.catparameter property)": [[19, "torchtree.core.parameter.CatParameter.device"]], "dtype (torchtree.core.parameter.viewparameter property)": [[19, "torchtree.core.parameter.ViewParameter.dtype"]], "fire_parameter_changed() (torchtree.core.parameter.catparameter method)": [[19, "torchtree.core.parameter.CatParameter.fire_parameter_changed"]], "fire_parameter_changed() (torchtree.core.parameter.moduleparameter method)": [[19, "torchtree.core.parameter.ModuleParameter.fire_parameter_changed"]], "fire_parameter_changed() (torchtree.core.parameter.parameter method)": [[19, "torchtree.core.parameter.Parameter.fire_parameter_changed"]], "fire_parameter_changed() (torchtree.core.parameter.transformedparameter method)": [[19, "torchtree.core.parameter.TransformedParameter.fire_parameter_changed"]], "fire_parameter_changed() (torchtree.core.parameter.viewparameter method)": [[19, "torchtree.core.parameter.ViewParameter.fire_parameter_changed"]], "from_json() (torchtree.core.parameter.catparameter class method)": [[19, "torchtree.core.parameter.CatParameter.from_json"]], "from_json() (torchtree.core.parameter.moduleparameter class method)": [[19, "torchtree.core.parameter.ModuleParameter.from_json"]], "from_json() (torchtree.core.parameter.parameter class method)": [[19, "torchtree.core.parameter.Parameter.from_json"]], "from_json() (torchtree.core.parameter.transformedparameter class method)": [[19, "torchtree.core.parameter.TransformedParameter.from_json"]], "from_json() (torchtree.core.parameter.viewparameter class method)": [[19, "torchtree.core.parameter.ViewParameter.from_json"]], "grad (torchtree.core.parameter.parameter property)": [[19, "torchtree.core.parameter.Parameter.grad"]], "grad_fn (torchtree.core.parameter.parameter property)": [[19, "torchtree.core.parameter.Parameter.grad_fn"]], "handle_model_changed() (torchtree.core.parameter.catparameter method)": [[19, "torchtree.core.parameter.CatParameter.handle_model_changed"]], "handle_model_changed() (torchtree.core.parameter.moduleparameter method)": [[19, "torchtree.core.parameter.ModuleParameter.handle_model_changed"]], "handle_model_changed() (torchtree.core.parameter.transformedparameter method)": [[19, "torchtree.core.parameter.TransformedParameter.handle_model_changed"]], "handle_parameter_changed() (torchtree.core.parameter.catparameter method)": [[19, "torchtree.core.parameter.CatParameter.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.core.parameter.moduleparameter method)": [[19, "torchtree.core.parameter.ModuleParameter.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.core.parameter.transformedparameter method)": [[19, "torchtree.core.parameter.TransformedParameter.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.core.parameter.viewparameter method)": [[19, "torchtree.core.parameter.ViewParameter.handle_parameter_changed"]], "json_factory() (torchtree.core.parameter.parameter static method)": [[19, "torchtree.core.parameter.Parameter.json_factory"]], "json_factory() (torchtree.core.parameter.viewparameter static method)": [[19, "torchtree.core.parameter.ViewParameter.json_factory"]], "parameters() (torchtree.core.parameter.moduleparameter method)": [[19, "torchtree.core.parameter.ModuleParameter.parameters"]], "parameters() (torchtree.core.parameter.transformedparameter method)": [[19, "torchtree.core.parameter.TransformedParameter.parameters"]], "requires_grad (torchtree.core.parameter.catparameter property)": [[19, "torchtree.core.parameter.CatParameter.requires_grad"]], "requires_grad (torchtree.core.parameter.moduleparameter property)": [[19, "torchtree.core.parameter.ModuleParameter.requires_grad"]], "requires_grad (torchtree.core.parameter.parameter property)": [[19, "torchtree.core.parameter.Parameter.requires_grad"]], "requires_grad (torchtree.core.parameter.transformedparameter property)": [[19, "torchtree.core.parameter.TransformedParameter.requires_grad"]], "requires_grad (torchtree.core.parameter.viewparameter property)": [[19, "torchtree.core.parameter.ViewParameter.requires_grad"]], "sample_shape (torchtree.core.parameter.moduleparameter property)": [[19, "torchtree.core.parameter.ModuleParameter.sample_shape"]], "sample_shape (torchtree.core.parameter.transformedparameter property)": [[19, "torchtree.core.parameter.TransformedParameter.sample_shape"]], "shape (torchtree.core.parameter.moduleparameter property)": [[19, "torchtree.core.parameter.ModuleParameter.shape"]], "shape (torchtree.core.parameter.transformedparameter property)": [[19, "torchtree.core.parameter.TransformedParameter.shape"]], "shape (torchtree.core.parameter.viewparameter property)": [[19, "torchtree.core.parameter.ViewParameter.shape"]], "size() (torchtree.core.parameter.parameter method)": [[19, "torchtree.core.parameter.Parameter.size"]], "tensor (torchtree.core.parameter.catparameter property)": [[19, "torchtree.core.parameter.CatParameter.tensor"]], "tensor (torchtree.core.parameter.moduleparameter property)": [[19, "torchtree.core.parameter.ModuleParameter.tensor"]], "tensor (torchtree.core.parameter.parameter property)": [[19, "torchtree.core.parameter.Parameter.tensor"]], "tensor (torchtree.core.parameter.transformedparameter property)": [[19, "torchtree.core.parameter.TransformedParameter.tensor"]], "tensor (torchtree.core.parameter.viewparameter property)": [[19, "torchtree.core.parameter.ViewParameter.tensor"]], "to() (torchtree.core.parameter.catparameter method)": [[19, "torchtree.core.parameter.CatParameter.to"]], "to() (torchtree.core.parameter.moduleparameter method)": [[19, "torchtree.core.parameter.ModuleParameter.to"]], "to() (torchtree.core.parameter.parameter method)": [[19, "torchtree.core.parameter.Parameter.to"]], "to() (torchtree.core.parameter.transformedparameter method)": [[19, "torchtree.core.parameter.TransformedParameter.to"]], "to() (torchtree.core.parameter.viewparameter method)": [[19, "torchtree.core.parameter.ViewParameter.to"]], "torchtree.core.parameter": [[19, "module-torchtree.core.parameter"], [123, "module-torchtree.core.parameter"]], "update() (torchtree.core.parameter.catparameter method)": [[19, "torchtree.core.parameter.CatParameter.update"]], "parameterencoder (class in torchtree.core.parameter_encoder)": [[20, "torchtree.core.parameter_encoder.ParameterEncoder"]], "default() (torchtree.core.parameter_encoder.parameterencoder method)": [[20, "torchtree.core.parameter_encoder.ParameterEncoder.default"]], "torchtree.core.parameter_encoder": [[20, "module-torchtree.core.parameter_encoder"], [124, "module-torchtree.core.parameter_encoder"]], "pack_tensor() (in module torchtree.core.parameter_utils)": [[21, "torchtree.core.parameter_utils.pack_tensor"]], "save_parameters() (in module torchtree.core.parameter_utils)": [[21, "torchtree.core.parameter_utils.save_parameters"]], "torchtree.core.parameter_utils": [[21, "module-torchtree.core.parameter_utils"], [125, "module-torchtree.core.parameter_utils"]], "modellistener (class in torchtree.core.parametric)": [[22, "torchtree.core.parametric.ModelListener"]], "parameterlistener (class in torchtree.core.parametric)": [[22, "torchtree.core.parametric.ParameterListener"]], "parametric (class in torchtree.core.parametric)": [[22, "torchtree.core.parametric.Parametric"]], "handle_model_changed() (torchtree.core.parametric.modellistener method)": [[22, "torchtree.core.parametric.ModelListener.handle_model_changed"]], "handle_parameter_changed() (torchtree.core.parametric.parameterlistener method)": [[22, "torchtree.core.parametric.ParameterListener.handle_parameter_changed"]], "parameters() (torchtree.core.parametric.parametric method)": [[22, "torchtree.core.parametric.Parametric.parameters"]], "register_model() (torchtree.core.parametric.parametric method)": [[22, "torchtree.core.parametric.Parametric.register_model"]], "register_parameter() (torchtree.core.parametric.parametric method)": [[22, "torchtree.core.parametric.Parametric.register_parameter"]], "torchtree.core.parametric": [[22, "module-torchtree.core.parametric"], [126, "module-torchtree.core.parametric"]], "runnable (class in torchtree.core.runnable)": [[23, "torchtree.core.runnable.Runnable"]], "run() (torchtree.core.runnable.runnable method)": [[23, "torchtree.core.runnable.Runnable.run"]], "torchtree.core.runnable": [[23, "module-torchtree.core.runnable"], [127, "module-torchtree.core.runnable"]], "jsonserializable (class in torchtree.core.serializable)": [[24, "torchtree.core.serializable.JSONSerializable"]], "from_json() (torchtree.core.serializable.jsonserializable class method)": [[24, "torchtree.core.serializable.JSONSerializable.from_json"]], "from_json_safe() (torchtree.core.serializable.jsonserializable class method)": [[24, "torchtree.core.serializable.JSONSerializable.from_json_safe"]], "torchtree.core.serializable": [[24, "module-torchtree.core.serializable"], [128, "module-torchtree.core.serializable"]], "alternativeattributeerror": [[25, "torchtree.core.utils.AlternativeAttributeError"]], "jsonparseerror": [[25, "torchtree.core.utils.JSONParseError"]], "registered_classes (in module torchtree.core.utils)": [[25, "torchtree.core.utils.REGISTERED_CLASSES"]], "signalhandler (class in torchtree.core.utils)": [[25, "torchtree.core.utils.SignalHandler"]], "tensorencoder (class in torchtree.core.utils)": [[25, "torchtree.core.utils.TensorEncoder"]], "as_tensor() (in module torchtree.core.utils)": [[25, "torchtree.core.utils.as_tensor"]], "default() (torchtree.core.utils.tensorencoder method)": [[25, "torchtree.core.utils.TensorEncoder.default"]], "exit() (torchtree.core.utils.signalhandler method)": [[25, "torchtree.core.utils.SignalHandler.exit"]], "expand_plates() (in module torchtree.core.utils)": [[25, "torchtree.core.utils.expand_plates"]], "get_class() (in module torchtree.core.utils)": [[25, "torchtree.core.utils.get_class"]], "package_contents() (in module torchtree.core.utils)": [[25, "torchtree.core.utils.package_contents"]], "print_graph() (in module torchtree.core.utils)": [[25, "torchtree.core.utils.print_graph"]], "process_object() (in module torchtree.core.utils)": [[25, "torchtree.core.utils.process_object"]], "process_objects() (in module torchtree.core.utils)": [[25, "torchtree.core.utils.process_objects"]], "register_class() (in module torchtree.core.utils)": [[25, "torchtree.core.utils.register_class"]], "remove_comments() (in module torchtree.core.utils)": [[25, "torchtree.core.utils.remove_comments"]], "replace_star_with_str() (in module torchtree.core.utils)": [[25, "torchtree.core.utils.replace_star_with_str"]], "replace_wildcard_with_str() (in module torchtree.core.utils)": [[25, "torchtree.core.utils.replace_wildcard_with_str"]], "string_to_list_index() (in module torchtree.core.utils)": [[25, "torchtree.core.utils.string_to_list_index"]], "tensor_rand() (in module torchtree.core.utils)": [[25, "torchtree.core.utils.tensor_rand"]], "torchtree.core.utils": [[25, "module-torchtree.core.utils"], [129, "module-torchtree.core.utils"]], "update_parameters() (in module torchtree.core.utils)": [[25, "torchtree.core.utils.update_parameters"]], "validate() (in module torchtree.core.utils)": [[25, "torchtree.core.utils.validate"]], "wrapper() (torchtree.core.utils.alternativeattributeerror class method)": [[25, "torchtree.core.utils.AlternativeAttributeError.wrapper"]], "bayesianbridge (class in torchtree.distributions.bayesian_bridge)": [[26, "torchtree.distributions.bayesian_bridge.BayesianBridge"]], "from_json() (torchtree.distributions.bayesian_bridge.bayesianbridge class method)": [[26, "torchtree.distributions.bayesian_bridge.BayesianBridge.from_json"]], "handle_model_changed() (torchtree.distributions.bayesian_bridge.bayesianbridge method)": [[26, "torchtree.distributions.bayesian_bridge.BayesianBridge.handle_model_changed"]], "json_factory() (torchtree.distributions.bayesian_bridge.bayesianbridge static method)": [[26, "torchtree.distributions.bayesian_bridge.BayesianBridge.json_factory"]], "process_object_number() (in module torchtree.distributions.bayesian_bridge)": [[26, "torchtree.distributions.bayesian_bridge.process_object_number"]], "torchtree.distributions.bayesian_bridge": [[26, "module-torchtree.distributions.bayesian_bridge"], [131, "module-torchtree.distributions.bayesian_bridge"]], "ctmcscale (class in torchtree.distributions.ctmc_scale)": [[27, "torchtree.distributions.ctmc_scale.CTMCScale"]], "cpu() (torchtree.distributions.ctmc_scale.ctmcscale method)": [[27, "torchtree.distributions.ctmc_scale.CTMCScale.cpu"]], "cuda() (torchtree.distributions.ctmc_scale.ctmcscale method)": [[27, "torchtree.distributions.ctmc_scale.CTMCScale.cuda"]], "from_json() (torchtree.distributions.ctmc_scale.ctmcscale class method)": [[27, "torchtree.distributions.ctmc_scale.CTMCScale.from_json"]], "json_factory() (torchtree.distributions.ctmc_scale.ctmcscale static method)": [[27, "torchtree.distributions.ctmc_scale.CTMCScale.json_factory"]], "log_gamma_one_half (torchtree.distributions.ctmc_scale.ctmcscale attribute)": [[27, "torchtree.distributions.ctmc_scale.CTMCScale.log_gamma_one_half"]], "shape (torchtree.distributions.ctmc_scale.ctmcscale attribute)": [[27, "torchtree.distributions.ctmc_scale.CTMCScale.shape"]], "to() (torchtree.distributions.ctmc_scale.ctmcscale method)": [[27, "torchtree.distributions.ctmc_scale.CTMCScale.to"]], "torchtree.distributions.ctmc_scale": [[27, "module-torchtree.distributions.ctmc_scale"], [132, "module-torchtree.distributions.ctmc_scale"]], "deterministicnormal (class in torchtree.distributions.deterministic_normal)": [[28, "torchtree.distributions.deterministic_normal.DeterministicNormal"]], "batch_shape (torchtree.distributions.deterministic_normal.deterministicnormal property)": [[28, "torchtree.distributions.deterministic_normal.DeterministicNormal.batch_shape"]], "entropy() (torchtree.distributions.deterministic_normal.deterministicnormal method)": [[28, "torchtree.distributions.deterministic_normal.DeterministicNormal.entropy"]], "event_shape (torchtree.distributions.deterministic_normal.deterministicnormal property)": [[28, "torchtree.distributions.deterministic_normal.DeterministicNormal.event_shape"]], "from_json() (torchtree.distributions.deterministic_normal.deterministicnormal class method)": [[28, "torchtree.distributions.deterministic_normal.DeterministicNormal.from_json"]], "handle_model_changed() (torchtree.distributions.deterministic_normal.deterministicnormal method)": [[28, "torchtree.distributions.deterministic_normal.DeterministicNormal.handle_model_changed"]], "json_factory() (torchtree.distributions.deterministic_normal.deterministicnormal static method)": [[28, "torchtree.distributions.deterministic_normal.DeterministicNormal.json_factory"]], "log_prob() (torchtree.distributions.deterministic_normal.deterministicnormal method)": [[28, "torchtree.distributions.deterministic_normal.DeterministicNormal.log_prob"]], "rsample() (torchtree.distributions.deterministic_normal.deterministicnormal method)": [[28, "torchtree.distributions.deterministic_normal.DeterministicNormal.rsample"]], "sample() (torchtree.distributions.deterministic_normal.deterministicnormal method)": [[28, "torchtree.distributions.deterministic_normal.DeterministicNormal.sample"]], "torchtree.distributions.deterministic_normal": [[28, "module-torchtree.distributions.deterministic_normal"], [133, "module-torchtree.distributions.deterministic_normal"]], "distribution (class in torchtree.distributions.distributions)": [[29, "torchtree.distributions.distributions.Distribution"]], "distributionmodel (class in torchtree.distributions.distributions)": [[29, "torchtree.distributions.distributions.DistributionModel"]], "batch_shape (torchtree.distributions.distributions.distribution property)": [[29, "torchtree.distributions.distributions.Distribution.batch_shape"]], "entropy() (torchtree.distributions.distributions.distribution method)": [[29, "torchtree.distributions.distributions.Distribution.entropy"]], "entropy() (torchtree.distributions.distributions.distributionmodel method)": [[29, "torchtree.distributions.distributions.DistributionModel.entropy"]], "event_shape (torchtree.distributions.distributions.distribution property)": [[29, "torchtree.distributions.distributions.Distribution.event_shape"]], "from_json() (torchtree.distributions.distributions.distribution class method)": [[29, "torchtree.distributions.distributions.Distribution.from_json"]], "json_factory() (torchtree.distributions.distributions.distribution static method)": [[29, "torchtree.distributions.distributions.Distribution.json_factory"]], "log_prob() (torchtree.distributions.distributions.distribution method)": [[29, "torchtree.distributions.distributions.Distribution.log_prob"]], "log_prob() (torchtree.distributions.distributions.distributionmodel method)": [[29, "torchtree.distributions.distributions.DistributionModel.log_prob"]], "rsample() (torchtree.distributions.distributions.distribution method)": [[29, "torchtree.distributions.distributions.Distribution.rsample"]], "rsample() (torchtree.distributions.distributions.distributionmodel method)": [[29, "torchtree.distributions.distributions.DistributionModel.rsample"]], "sample() (torchtree.distributions.distributions.distribution method)": [[29, "torchtree.distributions.distributions.Distribution.sample"]], "sample() (torchtree.distributions.distributions.distributionmodel method)": [[29, "torchtree.distributions.distributions.DistributionModel.sample"]], "torchtree.distributions.distributions": [[29, "module-torchtree.distributions.distributions"], [134, "module-torchtree.distributions.distributions"]], "gmrf (class in torchtree.distributions.gmrf)": [[30, "torchtree.distributions.gmrf.GMRF"]], "gmrfcovariate (class in torchtree.distributions.gmrf)": [[30, "torchtree.distributions.gmrf.GMRFCovariate"]], "from_json() (torchtree.distributions.gmrf.gmrf class method)": [[30, "torchtree.distributions.gmrf.GMRF.from_json"]], "from_json() (torchtree.distributions.gmrf.gmrfcovariate class method)": [[30, "torchtree.distributions.gmrf.GMRFCovariate.from_json"]], "torchtree.distributions.gmrf": [[30, "module-torchtree.distributions.gmrf"], [135, "module-torchtree.distributions.gmrf"]], "gmrfgammaintegrated (class in torchtree.distributions.gmrf_integrated)": [[31, "torchtree.distributions.gmrf_integrated.GMRFGammaIntegrated"]], "from_json() (torchtree.distributions.gmrf_integrated.gmrfgammaintegrated class method)": [[31, "torchtree.distributions.gmrf_integrated.GMRFGammaIntegrated.from_json"]], "torchtree.distributions.gmrf_integrated": [[31, "module-torchtree.distributions.gmrf_integrated"], [136, "module-torchtree.distributions.gmrf_integrated"]], "torchtree.distributions": [[32, "module-torchtree.distributions"], [130, "module-torchtree.distributions"]], "inversegamma (class in torchtree.distributions.inverse_gamma)": [[33, "torchtree.distributions.inverse_gamma.InverseGamma"]], "arg_constraints (torchtree.distributions.inverse_gamma.inversegamma attribute)": [[33, "torchtree.distributions.inverse_gamma.InverseGamma.arg_constraints"]], "concentration (torchtree.distributions.inverse_gamma.inversegamma property)": [[33, "torchtree.distributions.inverse_gamma.InverseGamma.concentration"]], "expand() (torchtree.distributions.inverse_gamma.inversegamma method)": [[33, "torchtree.distributions.inverse_gamma.InverseGamma.expand"]], "has_rsample (torchtree.distributions.inverse_gamma.inversegamma attribute)": [[33, "torchtree.distributions.inverse_gamma.InverseGamma.has_rsample"]], "rate (torchtree.distributions.inverse_gamma.inversegamma property)": [[33, "torchtree.distributions.inverse_gamma.InverseGamma.rate"]], "support (torchtree.distributions.inverse_gamma.inversegamma attribute)": [[33, "torchtree.distributions.inverse_gamma.InverseGamma.support"]], "torchtree.distributions.inverse_gamma": [[33, "module-torchtree.distributions.inverse_gamma"], [137, "module-torchtree.distributions.inverse_gamma"]], "jointdistributionmodel (class in torchtree.distributions.joint_distribution)": [[34, "torchtree.distributions.joint_distribution.JointDistributionModel"]], "entropy() (torchtree.distributions.joint_distribution.jointdistributionmodel method)": [[34, "torchtree.distributions.joint_distribution.JointDistributionModel.entropy"]], "from_json() (torchtree.distributions.joint_distribution.jointdistributionmodel class method)": [[34, "torchtree.distributions.joint_distribution.JointDistributionModel.from_json"]], "handle_parameter_changed() (torchtree.distributions.joint_distribution.jointdistributionmodel method)": [[34, "torchtree.distributions.joint_distribution.JointDistributionModel.handle_parameter_changed"]], "log_prob() (torchtree.distributions.joint_distribution.jointdistributionmodel method)": [[34, "torchtree.distributions.joint_distribution.JointDistributionModel.log_prob"]], "rsample() (torchtree.distributions.joint_distribution.jointdistributionmodel method)": [[34, "torchtree.distributions.joint_distribution.JointDistributionModel.rsample"]], "sample() (torchtree.distributions.joint_distribution.jointdistributionmodel method)": [[34, "torchtree.distributions.joint_distribution.JointDistributionModel.sample"]], "torchtree.distributions.joint_distribution": [[34, "module-torchtree.distributions.joint_distribution"], [138, "module-torchtree.distributions.joint_distribution"]], "lognormal (class in torchtree.distributions.log_normal)": [[35, "torchtree.distributions.log_normal.LogNormal"]], "torchtree.distributions.log_normal": [[35, "module-torchtree.distributions.log_normal"], [139, "module-torchtree.distributions.log_normal"]], "multivariatenormal (class in torchtree.distributions.multivariate_normal)": [[36, "torchtree.distributions.multivariate_normal.MultivariateNormal"]], "batch_shape (torchtree.distributions.multivariate_normal.multivariatenormal property)": [[36, "torchtree.distributions.multivariate_normal.MultivariateNormal.batch_shape"]], "entropy() (torchtree.distributions.multivariate_normal.multivariatenormal method)": [[36, "torchtree.distributions.multivariate_normal.MultivariateNormal.entropy"]], "event_shape (torchtree.distributions.multivariate_normal.multivariatenormal property)": [[36, "torchtree.distributions.multivariate_normal.MultivariateNormal.event_shape"]], "from_json() (torchtree.distributions.multivariate_normal.multivariatenormal class method)": [[36, "torchtree.distributions.multivariate_normal.MultivariateNormal.from_json"]], "log_prob() (torchtree.distributions.multivariate_normal.multivariatenormal method)": [[36, "torchtree.distributions.multivariate_normal.MultivariateNormal.log_prob"]], "rsample() (torchtree.distributions.multivariate_normal.multivariatenormal method)": [[36, "torchtree.distributions.multivariate_normal.MultivariateNormal.rsample"]], "sample() (torchtree.distributions.multivariate_normal.multivariatenormal method)": [[36, "torchtree.distributions.multivariate_normal.MultivariateNormal.sample"]], "torchtree.distributions.multivariate_normal": [[36, "module-torchtree.distributions.multivariate_normal"], [140, "module-torchtree.distributions.multivariate_normal"]], "normal (class in torchtree.distributions.normal)": [[37, "torchtree.distributions.normal.Normal"]], "torchtree.distributions.normal": [[37, "module-torchtree.distributions.normal"], [141, "module-torchtree.distributions.normal"]], "oneonx (class in torchtree.distributions.one_on_x)": [[38, "torchtree.distributions.one_on_x.OneOnX"]], "arg_constraints (torchtree.distributions.one_on_x.oneonx attribute)": [[38, "torchtree.distributions.one_on_x.OneOnX.arg_constraints"]], "log_prob() (torchtree.distributions.one_on_x.oneonx method)": [[38, "torchtree.distributions.one_on_x.OneOnX.log_prob"]], "support (torchtree.distributions.one_on_x.oneonx attribute)": [[38, "torchtree.distributions.one_on_x.OneOnX.support"]], "torchtree.distributions.one_on_x": [[38, "module-torchtree.distributions.one_on_x"], [142, "module-torchtree.distributions.one_on_x"]], "scalemixturenormal (class in torchtree.distributions.scale_mixture)": [[39, "torchtree.distributions.scale_mixture.ScaleMixtureNormal"]], "from_json() (torchtree.distributions.scale_mixture.scalemixturenormal class method)": [[39, "torchtree.distributions.scale_mixture.ScaleMixtureNormal.from_json"]], "handle_model_changed() (torchtree.distributions.scale_mixture.scalemixturenormal method)": [[39, "torchtree.distributions.scale_mixture.ScaleMixtureNormal.handle_model_changed"]], "json_factory() (torchtree.distributions.scale_mixture.scalemixturenormal static method)": [[39, "torchtree.distributions.scale_mixture.ScaleMixtureNormal.json_factory"]], "torchtree.distributions.scale_mixture": [[39, "module-torchtree.distributions.scale_mixture"], [143, "module-torchtree.distributions.scale_mixture"]], "convexcombinationtransform (class in torchtree.distributions.transforms)": [[40, "torchtree.distributions.transforms.ConvexCombinationTransform"]], "cumsumexptransform (class in torchtree.distributions.transforms)": [[40, "torchtree.distributions.transforms.CumSumExpTransform"]], "cumsumsoftplustransform (class in torchtree.distributions.transforms)": [[40, "torchtree.distributions.transforms.CumSumSoftPlusTransform"]], "cumsumtransform (class in torchtree.distributions.transforms)": [[40, "torchtree.distributions.transforms.CumSumTransform"]], "lineartransform (class in torchtree.distributions.transforms)": [[40, "torchtree.distributions.transforms.LinearTransform"]], "logtransform (class in torchtree.distributions.transforms)": [[40, "torchtree.distributions.transforms.LogTransform"]], "softplustransform (class in torchtree.distributions.transforms)": [[40, "torchtree.distributions.transforms.SoftPlusTransform"]], "trilexpdiagonaltransform (class in torchtree.distributions.transforms)": [[40, "torchtree.distributions.transforms.TrilExpDiagonalTransform"]], "bijective (torchtree.distributions.transforms.cumsumexptransform attribute)": [[40, "torchtree.distributions.transforms.CumSumExpTransform.bijective"]], "bijective (torchtree.distributions.transforms.cumsumsoftplustransform attribute)": [[40, "torchtree.distributions.transforms.CumSumSoftPlusTransform.bijective"]], "bijective (torchtree.distributions.transforms.cumsumtransform attribute)": [[40, "torchtree.distributions.transforms.CumSumTransform.bijective"]], "bijective (torchtree.distributions.transforms.lineartransform attribute)": [[40, "torchtree.distributions.transforms.LinearTransform.bijective"]], "bijective (torchtree.distributions.transforms.logtransform attribute)": [[40, "torchtree.distributions.transforms.LogTransform.bijective"]], "bijective (torchtree.distributions.transforms.softplustransform attribute)": [[40, "torchtree.distributions.transforms.SoftPlusTransform.bijective"]], "bijective (torchtree.distributions.transforms.trilexpdiagonaltransform attribute)": [[40, "torchtree.distributions.transforms.TrilExpDiagonalTransform.bijective"]], "codomain (torchtree.distributions.transforms.convexcombinationtransform attribute)": [[40, "torchtree.distributions.transforms.ConvexCombinationTransform.codomain"]], "codomain (torchtree.distributions.transforms.cumsumexptransform attribute)": [[40, "torchtree.distributions.transforms.CumSumExpTransform.codomain"]], "codomain (torchtree.distributions.transforms.cumsumsoftplustransform attribute)": [[40, "torchtree.distributions.transforms.CumSumSoftPlusTransform.codomain"]], "codomain (torchtree.distributions.transforms.cumsumtransform attribute)": [[40, "torchtree.distributions.transforms.CumSumTransform.codomain"]], "codomain (torchtree.distributions.transforms.lineartransform attribute)": [[40, "torchtree.distributions.transforms.LinearTransform.codomain"]], "codomain (torchtree.distributions.transforms.logtransform attribute)": [[40, "torchtree.distributions.transforms.LogTransform.codomain"]], "codomain (torchtree.distributions.transforms.softplustransform attribute)": [[40, "torchtree.distributions.transforms.SoftPlusTransform.codomain"]], "domain (torchtree.distributions.transforms.convexcombinationtransform attribute)": [[40, "torchtree.distributions.transforms.ConvexCombinationTransform.domain"]], "domain (torchtree.distributions.transforms.cumsumexptransform attribute)": [[40, "torchtree.distributions.transforms.CumSumExpTransform.domain"]], "domain (torchtree.distributions.transforms.cumsumsoftplustransform attribute)": [[40, "torchtree.distributions.transforms.CumSumSoftPlusTransform.domain"]], "domain (torchtree.distributions.transforms.cumsumtransform attribute)": [[40, "torchtree.distributions.transforms.CumSumTransform.domain"]], "domain (torchtree.distributions.transforms.lineartransform attribute)": [[40, "torchtree.distributions.transforms.LinearTransform.domain"]], "domain (torchtree.distributions.transforms.logtransform attribute)": [[40, "torchtree.distributions.transforms.LogTransform.domain"]], "domain (torchtree.distributions.transforms.softplustransform attribute)": [[40, "torchtree.distributions.transforms.SoftPlusTransform.domain"]], "log_abs_det_jacobian() (torchtree.distributions.transforms.convexcombinationtransform method)": [[40, "torchtree.distributions.transforms.ConvexCombinationTransform.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torchtree.distributions.transforms.cumsumexptransform method)": [[40, "torchtree.distributions.transforms.CumSumExpTransform.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torchtree.distributions.transforms.cumsumsoftplustransform method)": [[40, "torchtree.distributions.transforms.CumSumSoftPlusTransform.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torchtree.distributions.transforms.cumsumtransform method)": [[40, "torchtree.distributions.transforms.CumSumTransform.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torchtree.distributions.transforms.lineartransform method)": [[40, "torchtree.distributions.transforms.LinearTransform.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torchtree.distributions.transforms.logtransform method)": [[40, "torchtree.distributions.transforms.LogTransform.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torchtree.distributions.transforms.softplustransform method)": [[40, "torchtree.distributions.transforms.SoftPlusTransform.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torchtree.distributions.transforms.trilexpdiagonaltransform method)": [[40, "torchtree.distributions.transforms.TrilExpDiagonalTransform.log_abs_det_jacobian"]], "sign (torchtree.distributions.transforms.cumsumexptransform attribute)": [[40, "torchtree.distributions.transforms.CumSumExpTransform.sign"]], "sign (torchtree.distributions.transforms.cumsumsoftplustransform attribute)": [[40, "torchtree.distributions.transforms.CumSumSoftPlusTransform.sign"]], "sign (torchtree.distributions.transforms.cumsumtransform attribute)": [[40, "torchtree.distributions.transforms.CumSumTransform.sign"]], "sign (torchtree.distributions.transforms.lineartransform attribute)": [[40, "torchtree.distributions.transforms.LinearTransform.sign"]], "sign (torchtree.distributions.transforms.logtransform attribute)": [[40, "torchtree.distributions.transforms.LogTransform.sign"]], "sign (torchtree.distributions.transforms.softplustransform attribute)": [[40, "torchtree.distributions.transforms.SoftPlusTransform.sign"]], "sign (torchtree.distributions.transforms.trilexpdiagonaltransform attribute)": [[40, "torchtree.distributions.transforms.TrilExpDiagonalTransform.sign"]], "torchtree.distributions.transforms": [[40, "module-torchtree.distributions.transforms"], [144, "module-torchtree.distributions.transforms"]], "compoundgammadirichletprior (class in torchtree.distributions.tree_prior)": [[41, "torchtree.distributions.tree_prior.CompoundGammaDirichletPrior"]], "from_json() (torchtree.distributions.tree_prior.compoundgammadirichletprior class method)": [[41, "torchtree.distributions.tree_prior.CompoundGammaDirichletPrior.from_json"]], "handle_parameter_changed() (torchtree.distributions.tree_prior.compoundgammadirichletprior method)": [[41, "torchtree.distributions.tree_prior.CompoundGammaDirichletPrior.handle_parameter_changed"]], "torchtree.distributions.tree_prior": [[41, "module-torchtree.distributions.tree_prior"], [145, "module-torchtree.distributions.tree_prior"]], "alignment (class in torchtree.evolution.alignment)": [[42, "torchtree.evolution.alignment.Alignment"]], "sequence (in module torchtree.evolution.alignment)": [[42, "torchtree.evolution.alignment.Sequence"]], "calculate_f3x4() (in module torchtree.evolution.alignment)": [[42, "torchtree.evolution.alignment.calculate_F3x4"]], "calculate_f3x4_from_nucleotide() (in module torchtree.evolution.alignment)": [[42, "torchtree.evolution.alignment.calculate_F3x4_from_nucleotide"]], "calculate_frequencies() (in module torchtree.evolution.alignment)": [[42, "torchtree.evolution.alignment.calculate_frequencies"]], "calculate_frequencies_per_codon_position() (in module torchtree.evolution.alignment)": [[42, "torchtree.evolution.alignment.calculate_frequencies_per_codon_position"]], "calculate_kappa() (in module torchtree.evolution.alignment)": [[42, "torchtree.evolution.alignment.calculate_kappa"]], "calculate_substitutions() (in module torchtree.evolution.alignment)": [[42, "torchtree.evolution.alignment.calculate_substitutions"]], "calculate_ts_tv() (in module torchtree.evolution.alignment)": [[42, "torchtree.evolution.alignment.calculate_ts_tv"]], "data_type (torchtree.evolution.alignment.alignment property)": [[42, "torchtree.evolution.alignment.Alignment.data_type"]], "from_json() (torchtree.evolution.alignment.alignment class method)": [[42, "torchtree.evolution.alignment.Alignment.from_json"]], "get() (torchtree.evolution.alignment.alignment class method)": [[42, "torchtree.evolution.alignment.Alignment.get"]], "read_fasta_sequences() (in module torchtree.evolution.alignment)": [[42, "torchtree.evolution.alignment.read_fasta_sequences"]], "sequence_size (torchtree.evolution.alignment.alignment property)": [[42, "torchtree.evolution.alignment.Alignment.sequence_size"]], "taxa (torchtree.evolution.alignment.alignment property)": [[42, "torchtree.evolution.alignment.Alignment.taxa"]], "torchtree.evolution.alignment": [[42, "module-torchtree.evolution.alignment"], [147, "module-torchtree.evolution.alignment"]], "attributepattern (class in torchtree.evolution.attribute_pattern)": [[43, "torchtree.evolution.attribute_pattern.AttributePattern"]], "compute_tips_partials() (torchtree.evolution.attribute_pattern.attributepattern method)": [[43, "torchtree.evolution.attribute_pattern.AttributePattern.compute_tips_partials"]], "compute_tips_states() (torchtree.evolution.attribute_pattern.attributepattern method)": [[43, "torchtree.evolution.attribute_pattern.AttributePattern.compute_tips_states"]], "cpu() (torchtree.evolution.attribute_pattern.attributepattern method)": [[43, "torchtree.evolution.attribute_pattern.AttributePattern.cpu"]], "cuda() (torchtree.evolution.attribute_pattern.attributepattern method)": [[43, "torchtree.evolution.attribute_pattern.AttributePattern.cuda"]], "from_json() (torchtree.evolution.attribute_pattern.attributepattern class method)": [[43, "torchtree.evolution.attribute_pattern.AttributePattern.from_json"]], "handle_model_changed() (torchtree.evolution.attribute_pattern.attributepattern method)": [[43, "torchtree.evolution.attribute_pattern.AttributePattern.handle_model_changed"]], "handle_parameter_changed() (torchtree.evolution.attribute_pattern.attributepattern method)": [[43, "torchtree.evolution.attribute_pattern.AttributePattern.handle_parameter_changed"]], "torchtree.evolution.attribute_pattern": [[43, "module-torchtree.evolution.attribute_pattern"], [148, "module-torchtree.evolution.attribute_pattern"]], "bdskmodel (class in torchtree.evolution.bdsk)": [[44, "torchtree.evolution.bdsk.BDSKModel"]], "piecewiseconstantbirthdeath (class in torchtree.evolution.bdsk)": [[44, "torchtree.evolution.bdsk.PiecewiseConstantBirthDeath"]], "arg_constraints (torchtree.evolution.bdsk.piecewiseconstantbirthdeath attribute)": [[44, "torchtree.evolution.bdsk.PiecewiseConstantBirthDeath.arg_constraints"]], "epidemiology_to_birth_death() (in module torchtree.evolution.bdsk)": [[44, "torchtree.evolution.bdsk.epidemiology_to_birth_death"]], "from_json() (torchtree.evolution.bdsk.bdskmodel class method)": [[44, "torchtree.evolution.bdsk.BDSKModel.from_json"]], "log_p() (torchtree.evolution.bdsk.piecewiseconstantbirthdeath method)": [[44, "torchtree.evolution.bdsk.PiecewiseConstantBirthDeath.log_p"]], "log_prob() (torchtree.evolution.bdsk.piecewiseconstantbirthdeath method)": [[44, "torchtree.evolution.bdsk.PiecewiseConstantBirthDeath.log_prob"]], "log_q() (torchtree.evolution.bdsk.piecewiseconstantbirthdeath method)": [[44, "torchtree.evolution.bdsk.PiecewiseConstantBirthDeath.log_q"]], "p0() (torchtree.evolution.bdsk.piecewiseconstantbirthdeath method)": [[44, "torchtree.evolution.bdsk.PiecewiseConstantBirthDeath.p0"]], "support (torchtree.evolution.bdsk.piecewiseconstantbirthdeath attribute)": [[44, "torchtree.evolution.bdsk.PiecewiseConstantBirthDeath.support"]], "torchtree.evolution.bdsk": [[44, "module-torchtree.evolution.bdsk"], [149, "module-torchtree.evolution.bdsk"]], "birthdeath (class in torchtree.evolution.birth_death)": [[45, "torchtree.evolution.birth_death.BirthDeath"]], "birthdeathmodel (class in torchtree.evolution.birth_death)": [[45, "torchtree.evolution.birth_death.BirthDeathModel"]], "arg_constraints (torchtree.evolution.birth_death.birthdeath attribute)": [[45, "torchtree.evolution.birth_death.BirthDeath.arg_constraints"]], "from_json() (torchtree.evolution.birth_death.birthdeathmodel class method)": [[45, "torchtree.evolution.birth_death.BirthDeathModel.from_json"]], "handle_model_changed() (torchtree.evolution.birth_death.birthdeathmodel method)": [[45, "torchtree.evolution.birth_death.BirthDeathModel.handle_model_changed"]], "log_p() (torchtree.evolution.birth_death.birthdeath method)": [[45, "torchtree.evolution.birth_death.BirthDeath.log_p"]], "log_prob() (torchtree.evolution.birth_death.birthdeath method)": [[45, "torchtree.evolution.birth_death.BirthDeath.log_prob"]], "log_q() (torchtree.evolution.birth_death.birthdeath method)": [[45, "torchtree.evolution.birth_death.BirthDeath.log_q"]], "torchtree.evolution.birth_death": [[45, "module-torchtree.evolution.birth_death"], [150, "module-torchtree.evolution.birth_death"]], "abstractclockmodel (class in torchtree.evolution.branch_model)": [[46, "torchtree.evolution.branch_model.AbstractClockModel"]], "branchmodel (class in torchtree.evolution.branch_model)": [[46, "torchtree.evolution.branch_model.BranchModel"]], "simpleclockmodel (class in torchtree.evolution.branch_model)": [[46, "torchtree.evolution.branch_model.SimpleClockModel"]], "strictclockmodel (class in torchtree.evolution.branch_model)": [[46, "torchtree.evolution.branch_model.StrictClockModel"]], "from_json() (torchtree.evolution.branch_model.simpleclockmodel class method)": [[46, "torchtree.evolution.branch_model.SimpleClockModel.from_json"]], "from_json() (torchtree.evolution.branch_model.strictclockmodel class method)": [[46, "torchtree.evolution.branch_model.StrictClockModel.from_json"]], "handle_model_changed() (torchtree.evolution.branch_model.abstractclockmodel method)": [[46, "torchtree.evolution.branch_model.AbstractClockModel.handle_model_changed"]], "handle_parameter_changed() (torchtree.evolution.branch_model.abstractclockmodel method)": [[46, "torchtree.evolution.branch_model.AbstractClockModel.handle_parameter_changed"]], "json_factory() (torchtree.evolution.branch_model.simpleclockmodel static method)": [[46, "torchtree.evolution.branch_model.SimpleClockModel.json_factory"]], "rates (torchtree.evolution.branch_model.branchmodel property)": [[46, "torchtree.evolution.branch_model.BranchModel.rates"]], "rates (torchtree.evolution.branch_model.simpleclockmodel property)": [[46, "torchtree.evolution.branch_model.SimpleClockModel.rates"]], "rates (torchtree.evolution.branch_model.strictclockmodel property)": [[46, "torchtree.evolution.branch_model.StrictClockModel.rates"]], "torchtree.evolution.branch_model": [[46, "module-torchtree.evolution.branch_model"], [151, "module-torchtree.evolution.branch_model"]], "abstractcoalescentdistribution (class in torchtree.evolution.coalescent)": [[47, "torchtree.evolution.coalescent.AbstractCoalescentDistribution"]], "abstractcoalescentmodel (class in torchtree.evolution.coalescent)": [[47, "torchtree.evolution.coalescent.AbstractCoalescentModel"]], "constantcoalescent (class in torchtree.evolution.coalescent)": [[47, "torchtree.evolution.coalescent.ConstantCoalescent"]], "constantcoalescentmodel (class in torchtree.evolution.coalescent)": [[47, "torchtree.evolution.coalescent.ConstantCoalescentModel"]], "exponentialcoalescent (class in torchtree.evolution.coalescent)": [[47, "torchtree.evolution.coalescent.ExponentialCoalescent"]], "exponentialcoalescentmodel (class in torchtree.evolution.coalescent)": [[47, "torchtree.evolution.coalescent.ExponentialCoalescentModel"]], "faketreemodel (class in torchtree.evolution.coalescent)": [[47, "torchtree.evolution.coalescent.FakeTreeModel"]], "piecewiseconstantcoalescent (class in torchtree.evolution.coalescent)": [[47, "torchtree.evolution.coalescent.PiecewiseConstantCoalescent"]], "piecewiseconstantcoalescentgrid (class in torchtree.evolution.coalescent)": [[47, "torchtree.evolution.coalescent.PiecewiseConstantCoalescentGrid"]], "piecewiseconstantcoalescentgridmodel (class in torchtree.evolution.coalescent)": [[47, "torchtree.evolution.coalescent.PiecewiseConstantCoalescentGridModel"]], "piecewiseconstantcoalescentmodel (class in torchtree.evolution.coalescent)": [[47, "torchtree.evolution.coalescent.PiecewiseConstantCoalescentModel"]], "piecewiseexponentialcoalescentgrid (class in torchtree.evolution.coalescent)": [[47, "torchtree.evolution.coalescent.PiecewiseExponentialCoalescentGrid"]], "softpiecewiseconstantcoalescentgrid (class in torchtree.evolution.coalescent)": [[47, "torchtree.evolution.coalescent.SoftPiecewiseConstantCoalescentGrid"]], "arg_constraints (torchtree.evolution.coalescent.abstractcoalescentdistribution attribute)": [[47, "torchtree.evolution.coalescent.AbstractCoalescentDistribution.arg_constraints"]], "arg_constraints (torchtree.evolution.coalescent.exponentialcoalescent attribute)": [[47, "torchtree.evolution.coalescent.ExponentialCoalescent.arg_constraints"]], "arg_constraints (torchtree.evolution.coalescent.piecewiseexponentialcoalescentgrid attribute)": [[47, "torchtree.evolution.coalescent.PiecewiseExponentialCoalescentGrid.arg_constraints"]], "from_json() (torchtree.evolution.coalescent.constantcoalescentmodel class method)": [[47, "torchtree.evolution.coalescent.ConstantCoalescentModel.from_json"]], "from_json() (torchtree.evolution.coalescent.exponentialcoalescentmodel class method)": [[47, "torchtree.evolution.coalescent.ExponentialCoalescentModel.from_json"]], "from_json() (torchtree.evolution.coalescent.piecewiseconstantcoalescentgridmodel class method)": [[47, "torchtree.evolution.coalescent.PiecewiseConstantCoalescentGridModel.from_json"]], "has_rsample (torchtree.evolution.coalescent.abstractcoalescentdistribution attribute)": [[47, "torchtree.evolution.coalescent.AbstractCoalescentDistribution.has_rsample"]], "has_rsample (torchtree.evolution.coalescent.constantcoalescent attribute)": [[47, "torchtree.evolution.coalescent.ConstantCoalescent.has_rsample"]], "has_rsample (torchtree.evolution.coalescent.exponentialcoalescent attribute)": [[47, "torchtree.evolution.coalescent.ExponentialCoalescent.has_rsample"]], "has_rsample (torchtree.evolution.coalescent.piecewiseexponentialcoalescentgrid attribute)": [[47, "torchtree.evolution.coalescent.PiecewiseExponentialCoalescentGrid.has_rsample"]], "log_prob() (torchtree.evolution.coalescent.constantcoalescent method)": [[47, "torchtree.evolution.coalescent.ConstantCoalescent.log_prob"]], "log_prob() (torchtree.evolution.coalescent.exponentialcoalescent method)": [[47, "torchtree.evolution.coalescent.ExponentialCoalescent.log_prob"]], "log_prob() (torchtree.evolution.coalescent.piecewiseconstantcoalescent method)": [[47, "torchtree.evolution.coalescent.PiecewiseConstantCoalescent.log_prob"]], "log_prob() (torchtree.evolution.coalescent.piecewiseconstantcoalescentgrid method)": [[47, "torchtree.evolution.coalescent.PiecewiseConstantCoalescentGrid.log_prob"]], "log_prob() (torchtree.evolution.coalescent.piecewiseexponentialcoalescentgrid method)": [[47, "torchtree.evolution.coalescent.PiecewiseExponentialCoalescentGrid.log_prob"]], "log_prob() (torchtree.evolution.coalescent.softpiecewiseconstantcoalescentgrid method)": [[47, "torchtree.evolution.coalescent.SoftPiecewiseConstantCoalescentGrid.log_prob"]], "maximum_likelihood() (torchtree.evolution.coalescent.abstractcoalescentdistribution class method)": [[47, "torchtree.evolution.coalescent.AbstractCoalescentDistribution.maximum_likelihood"]], "maximum_likelihood() (torchtree.evolution.coalescent.constantcoalescent class method)": [[47, "torchtree.evolution.coalescent.ConstantCoalescent.maximum_likelihood"]], "maximum_likelihood() (torchtree.evolution.coalescent.piecewiseconstantcoalescent class method)": [[47, "torchtree.evolution.coalescent.PiecewiseConstantCoalescent.maximum_likelihood"]], "node_heights (torchtree.evolution.coalescent.faketreemodel property)": [[47, "torchtree.evolution.coalescent.FakeTreeModel.node_heights"]], "process_data_coalesent() (in module torchtree.evolution.coalescent)": [[47, "torchtree.evolution.coalescent.process_data_coalesent"]], "rsample() (torchtree.evolution.coalescent.constantcoalescent method)": [[47, "torchtree.evolution.coalescent.ConstantCoalescent.rsample"]], "support (torchtree.evolution.coalescent.abstractcoalescentdistribution attribute)": [[47, "torchtree.evolution.coalescent.AbstractCoalescentDistribution.support"]], "support (torchtree.evolution.coalescent.exponentialcoalescent attribute)": [[47, "torchtree.evolution.coalescent.ExponentialCoalescent.support"]], "support (torchtree.evolution.coalescent.piecewiseexponentialcoalescentgrid attribute)": [[47, "torchtree.evolution.coalescent.PiecewiseExponentialCoalescentGrid.support"]], "torchtree.evolution.coalescent": [[47, "module-torchtree.evolution.coalescent"], [152, "module-torchtree.evolution.coalescent"]], "amino_acids (torchtree.evolution.datatype.aminoaciddatatype attribute)": [[48, "torchtree.evolution.datatype.AminoAcidDataType.AMINO_ACIDS"]], "amino_acids_ambiguity_states (torchtree.evolution.datatype.aminoaciddatatype attribute)": [[48, "id0"], [48, "torchtree.evolution.datatype.AminoAcidDataType.AMINO_ACIDS_AMBIGUITY_STATES"]], "amino_acids_states (torchtree.evolution.datatype.aminoaciddatatype attribute)": [[48, "torchtree.evolution.datatype.AminoAcidDataType.AMINO_ACIDS_STATES"]], "abstractdatatype (class in torchtree.evolution.datatype)": [[48, "torchtree.evolution.datatype.AbstractDataType"]], "aminoaciddatatype (class in torchtree.evolution.datatype)": [[48, "torchtree.evolution.datatype.AminoAcidDataType"]], "codon_triplets (torchtree.evolution.datatype.codondatatype attribute)": [[48, "torchtree.evolution.datatype.CodonDataType.CODON_TRIPLETS"]], "codondatatype (class in torchtree.evolution.datatype)": [[48, "torchtree.evolution.datatype.CodonDataType"]], "datatype (class in torchtree.evolution.datatype)": [[48, "torchtree.evolution.datatype.DataType"]], "genetic_code_names (torchtree.evolution.datatype.codondatatype attribute)": [[48, "torchtree.evolution.datatype.CodonDataType.GENETIC_CODE_NAMES"]], "genetic_code_tables (torchtree.evolution.datatype.codondatatype attribute)": [[48, "torchtree.evolution.datatype.CodonDataType.GENETIC_CODE_TABLES"]], "generaldatatype (class in torchtree.evolution.datatype)": [[48, "torchtree.evolution.datatype.GeneralDataType"]], "nucleotides (torchtree.evolution.datatype.nucleotidedatatype attribute)": [[48, "torchtree.evolution.datatype.NucleotideDataType.NUCLEOTIDES"]], "nucleotide_ambiguity_states (torchtree.evolution.datatype.nucleotidedatatype attribute)": [[48, "torchtree.evolution.datatype.NucleotideDataType.NUCLEOTIDE_AMBIGUITY_STATES"]], "nucleotide_states (torchtree.evolution.datatype.nucleotidedatatype attribute)": [[48, "torchtree.evolution.datatype.NucleotideDataType.NUCLEOTIDE_STATES"]], "number_of_codons (torchtree.evolution.datatype.codondatatype attribute)": [[48, "torchtree.evolution.datatype.CodonDataType.NUMBER_OF_CODONS"]], "nucleotidedatatype (class in torchtree.evolution.datatype)": [[48, "torchtree.evolution.datatype.NucleotideDataType"]], "encoding() (torchtree.evolution.datatype.aminoaciddatatype method)": [[48, "torchtree.evolution.datatype.AminoAcidDataType.encoding"]], "encoding() (torchtree.evolution.datatype.codondatatype method)": [[48, "torchtree.evolution.datatype.CodonDataType.encoding"]], "encoding() (torchtree.evolution.datatype.datatype method)": [[48, "torchtree.evolution.datatype.DataType.encoding"]], "encoding() (torchtree.evolution.datatype.generaldatatype method)": [[48, "torchtree.evolution.datatype.GeneralDataType.encoding"]], "encoding() (torchtree.evolution.datatype.nucleotidedatatype method)": [[48, "torchtree.evolution.datatype.NucleotideDataType.encoding"]], "from_json() (torchtree.evolution.datatype.aminoaciddatatype class method)": [[48, "torchtree.evolution.datatype.AminoAcidDataType.from_json"]], "from_json() (torchtree.evolution.datatype.codondatatype class method)": [[48, "torchtree.evolution.datatype.CodonDataType.from_json"]], "from_json() (torchtree.evolution.datatype.generaldatatype class method)": [[48, "torchtree.evolution.datatype.GeneralDataType.from_json"]], "from_json() (torchtree.evolution.datatype.nucleotidedatatype class method)": [[48, "torchtree.evolution.datatype.NucleotideDataType.from_json"]], "partial() (torchtree.evolution.datatype.aminoaciddatatype method)": [[48, "torchtree.evolution.datatype.AminoAcidDataType.partial"]], "partial() (torchtree.evolution.datatype.codondatatype method)": [[48, "torchtree.evolution.datatype.CodonDataType.partial"]], "partial() (torchtree.evolution.datatype.datatype method)": [[48, "torchtree.evolution.datatype.DataType.partial"]], "partial() (torchtree.evolution.datatype.generaldatatype method)": [[48, "torchtree.evolution.datatype.GeneralDataType.partial"]], "partial() (torchtree.evolution.datatype.nucleotidedatatype method)": [[48, "torchtree.evolution.datatype.NucleotideDataType.partial"]], "size (torchtree.evolution.datatype.abstractdatatype property)": [[48, "torchtree.evolution.datatype.AbstractDataType.size"]], "size (torchtree.evolution.datatype.datatype property)": [[48, "torchtree.evolution.datatype.DataType.size"]], "state_count (torchtree.evolution.datatype.abstractdatatype property)": [[48, "torchtree.evolution.datatype.AbstractDataType.state_count"]], "state_count (torchtree.evolution.datatype.datatype property)": [[48, "torchtree.evolution.datatype.DataType.state_count"]], "states (torchtree.evolution.datatype.abstractdatatype property)": [[48, "torchtree.evolution.datatype.AbstractDataType.states"]], "states (torchtree.evolution.datatype.datatype property)": [[48, "torchtree.evolution.datatype.DataType.states"]], "torchtree.evolution.datatype": [[48, "module-torchtree.evolution.datatype"], [153, "module-torchtree.evolution.datatype"]], "torchtree.evolution": [[49, "module-torchtree.evolution"], [146, "module-torchtree.evolution"]], "node (class in torchtree.evolution.io)": [[50, "torchtree.evolution.io.Node"]], "convert_samples_to_nexus() (in module torchtree.evolution.io)": [[50, "torchtree.evolution.io.convert_samples_to_nexus"]], "extract_taxa() (in module torchtree.evolution.io)": [[50, "torchtree.evolution.io.extract_taxa"]], "parse_taxa() (in module torchtree.evolution.io)": [[50, "torchtree.evolution.io.parse_taxa"]], "parse_translate() (in module torchtree.evolution.io)": [[50, "torchtree.evolution.io.parse_translate"]], "parse_trees() (in module torchtree.evolution.io)": [[50, "torchtree.evolution.io.parse_trees"]], "random_tree_from_heights() (in module torchtree.evolution.io)": [[50, "torchtree.evolution.io.random_tree_from_heights"]], "read_tree() (in module torchtree.evolution.io)": [[50, "torchtree.evolution.io.read_tree"]], "read_tree_and_alignment() (in module torchtree.evolution.io)": [[50, "torchtree.evolution.io.read_tree_and_alignment"]], "split_newick() (in module torchtree.evolution.io)": [[50, "torchtree.evolution.io.split_newick"]], "to_nexus() (in module torchtree.evolution.io)": [[50, "torchtree.evolution.io.to_nexus"]], "torchtree.evolution.io": [[50, "module-torchtree.evolution.io"], [154, "module-torchtree.evolution.io"]], "poissontreelikelihood (class in torchtree.evolution.poisson_tree_likelihood)": [[51, "torchtree.evolution.poisson_tree_likelihood.PoissonTreeLikelihood"]], "from_json() (torchtree.evolution.poisson_tree_likelihood.poissontreelikelihood class method)": [[51, "torchtree.evolution.poisson_tree_likelihood.PoissonTreeLikelihood.from_json"]], "handle_parameter_changed() (torchtree.evolution.poisson_tree_likelihood.poissontreelikelihood method)": [[51, "torchtree.evolution.poisson_tree_likelihood.PoissonTreeLikelihood.handle_parameter_changed"]], "torchtree.evolution.poisson_tree_likelihood": [[51, "module-torchtree.evolution.poisson_tree_likelihood"], [155, "module-torchtree.evolution.poisson_tree_likelihood"]], "logdifferenceratetransform (class in torchtree.evolution.rate_transform)": [[52, "torchtree.evolution.rate_transform.LogDifferenceRateTransform"]], "rescaledratetransform (class in torchtree.evolution.rate_transform)": [[52, "torchtree.evolution.rate_transform.RescaledRateTransform"]], "bijective (torchtree.evolution.rate_transform.logdifferenceratetransform attribute)": [[52, "torchtree.evolution.rate_transform.LogDifferenceRateTransform.bijective"]], "bijective (torchtree.evolution.rate_transform.rescaledratetransform attribute)": [[52, "torchtree.evolution.rate_transform.RescaledRateTransform.bijective"]], "log_abs_det_jacobian() (torchtree.evolution.rate_transform.logdifferenceratetransform method)": [[52, "torchtree.evolution.rate_transform.LogDifferenceRateTransform.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torchtree.evolution.rate_transform.rescaledratetransform method)": [[52, "torchtree.evolution.rate_transform.RescaledRateTransform.log_abs_det_jacobian"]], "sign (torchtree.evolution.rate_transform.logdifferenceratetransform attribute)": [[52, "torchtree.evolution.rate_transform.LogDifferenceRateTransform.sign"]], "sign (torchtree.evolution.rate_transform.rescaledratetransform attribute)": [[52, "torchtree.evolution.rate_transform.RescaledRateTransform.sign"]], "torchtree.evolution.rate_transform": [[52, "module-torchtree.evolution.rate_transform"], [156, "module-torchtree.evolution.rate_transform"]], "rootparameter (class in torchtree.evolution.root_transform)": [[53, "torchtree.evolution.root_transform.RootParameter"]], "add_parameter_listener() (torchtree.evolution.root_transform.rootparameter method)": [[53, "torchtree.evolution.root_transform.RootParameter.add_parameter_listener"]], "fire_parameter_changed() (torchtree.evolution.root_transform.rootparameter method)": [[53, "torchtree.evolution.root_transform.RootParameter.fire_parameter_changed"]], "from_json() (torchtree.evolution.root_transform.rootparameter class method)": [[53, "torchtree.evolution.root_transform.RootParameter.from_json"]], "handle_model_changed() (torchtree.evolution.root_transform.rootparameter method)": [[53, "torchtree.evolution.root_transform.RootParameter.handle_model_changed"]], "handle_parameter_changed() (torchtree.evolution.root_transform.rootparameter method)": [[53, "torchtree.evolution.root_transform.RootParameter.handle_parameter_changed"]], "parameters() (torchtree.evolution.root_transform.rootparameter method)": [[53, "torchtree.evolution.root_transform.RootParameter.parameters"]], "tensor (torchtree.evolution.root_transform.rootparameter property)": [[53, "torchtree.evolution.root_transform.RootParameter.tensor"]], "torchtree.evolution.root_transform": [[53, "module-torchtree.evolution.root_transform"], [157, "module-torchtree.evolution.root_transform"]], "transform() (torchtree.evolution.root_transform.rootparameter method)": [[53, "torchtree.evolution.root_transform.RootParameter.transform"]], "constantsitemodel (class in torchtree.evolution.site_model)": [[54, "torchtree.evolution.site_model.ConstantSiteModel"]], "invariantsitemodel (class in torchtree.evolution.site_model)": [[54, "torchtree.evolution.site_model.InvariantSiteModel"]], "lognormalsitemodel (class in torchtree.evolution.site_model)": [[54, "torchtree.evolution.site_model.LogNormalSiteModel"]], "sitemodel (class in torchtree.evolution.site_model)": [[54, "torchtree.evolution.site_model.SiteModel"]], "univariatediscretizedsitemodel (class in torchtree.evolution.site_model)": [[54, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel"]], "weibullsitemodel (class in torchtree.evolution.site_model)": [[54, "torchtree.evolution.site_model.WeibullSiteModel"]], "cpu() (torchtree.evolution.site_model.constantsitemodel method)": [[54, "torchtree.evolution.site_model.ConstantSiteModel.cpu"]], "cpu() (torchtree.evolution.site_model.univariatediscretizedsitemodel method)": [[54, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel.cpu"]], "cuda() (torchtree.evolution.site_model.constantsitemodel method)": [[54, "torchtree.evolution.site_model.ConstantSiteModel.cuda"]], "cuda() (torchtree.evolution.site_model.univariatediscretizedsitemodel method)": [[54, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel.cuda"]], "from_json() (torchtree.evolution.site_model.constantsitemodel class method)": [[54, "torchtree.evolution.site_model.ConstantSiteModel.from_json"]], "from_json() (torchtree.evolution.site_model.invariantsitemodel class method)": [[54, "torchtree.evolution.site_model.InvariantSiteModel.from_json"]], "from_json() (torchtree.evolution.site_model.lognormalsitemodel class method)": [[54, "torchtree.evolution.site_model.LogNormalSiteModel.from_json"]], "from_json() (torchtree.evolution.site_model.weibullsitemodel class method)": [[54, "torchtree.evolution.site_model.WeibullSiteModel.from_json"]], "handle_model_changed() (torchtree.evolution.site_model.constantsitemodel method)": [[54, "torchtree.evolution.site_model.ConstantSiteModel.handle_model_changed"]], "handle_model_changed() (torchtree.evolution.site_model.invariantsitemodel method)": [[54, "torchtree.evolution.site_model.InvariantSiteModel.handle_model_changed"]], "handle_model_changed() (torchtree.evolution.site_model.univariatediscretizedsitemodel method)": [[54, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel.handle_model_changed"]], "handle_parameter_changed() (torchtree.evolution.site_model.constantsitemodel method)": [[54, "torchtree.evolution.site_model.ConstantSiteModel.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.evolution.site_model.invariantsitemodel method)": [[54, "torchtree.evolution.site_model.InvariantSiteModel.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.evolution.site_model.univariatediscretizedsitemodel method)": [[54, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel.handle_parameter_changed"]], "invariant (torchtree.evolution.site_model.invariantsitemodel property)": [[54, "torchtree.evolution.site_model.InvariantSiteModel.invariant"]], "invariant (torchtree.evolution.site_model.univariatediscretizedsitemodel property)": [[54, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel.invariant"]], "inverse_cdf() (torchtree.evolution.site_model.univariatediscretizedsitemodel method)": [[54, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel.inverse_cdf"]], "inverse_cdf() (torchtree.evolution.site_model.weibullsitemodel method)": [[54, "torchtree.evolution.site_model.WeibullSiteModel.inverse_cdf"]], "probabilities() (torchtree.evolution.site_model.constantsitemodel method)": [[54, "torchtree.evolution.site_model.ConstantSiteModel.probabilities"]], "probabilities() (torchtree.evolution.site_model.invariantsitemodel method)": [[54, "torchtree.evolution.site_model.InvariantSiteModel.probabilities"]], "probabilities() (torchtree.evolution.site_model.sitemodel method)": [[54, "torchtree.evolution.site_model.SiteModel.probabilities"]], "probabilities() (torchtree.evolution.site_model.univariatediscretizedsitemodel method)": [[54, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel.probabilities"]], "rates() (torchtree.evolution.site_model.constantsitemodel method)": [[54, "torchtree.evolution.site_model.ConstantSiteModel.rates"]], "rates() (torchtree.evolution.site_model.invariantsitemodel method)": [[54, "torchtree.evolution.site_model.InvariantSiteModel.rates"]], "rates() (torchtree.evolution.site_model.sitemodel method)": [[54, "torchtree.evolution.site_model.SiteModel.rates"]], "rates() (torchtree.evolution.site_model.univariatediscretizedsitemodel method)": [[54, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel.rates"]], "scale (torchtree.evolution.site_model.lognormalsitemodel property)": [[54, "torchtree.evolution.site_model.LogNormalSiteModel.scale"]], "shape (torchtree.evolution.site_model.weibullsitemodel property)": [[54, "torchtree.evolution.site_model.WeibullSiteModel.shape"]], "torchtree.evolution.site_model": [[54, "module-torchtree.evolution.site_model"], [158, "module-torchtree.evolution.site_model"]], "update_rates() (torchtree.evolution.site_model.lognormalsitemodel method)": [[54, "torchtree.evolution.site_model.LogNormalSiteModel.update_rates"]], "update_rates() (torchtree.evolution.site_model.univariatediscretizedsitemodel method)": [[54, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel.update_rates"]], "update_rates_probs() (torchtree.evolution.site_model.invariantsitemodel method)": [[54, "torchtree.evolution.site_model.InvariantSiteModel.update_rates_probs"]], "sitepattern (class in torchtree.evolution.site_pattern)": [[55, "torchtree.evolution.site_pattern.SitePattern"]], "compress() (in module torchtree.evolution.site_pattern)": [[55, "torchtree.evolution.site_pattern.compress"]], "compress_alignment() (in module torchtree.evolution.site_pattern)": [[55, "torchtree.evolution.site_pattern.compress_alignment"]], "compress_alignment_states() (in module torchtree.evolution.site_pattern)": [[55, "torchtree.evolution.site_pattern.compress_alignment_states"]], "compute_tips_partials() (torchtree.evolution.site_pattern.sitepattern method)": [[55, "torchtree.evolution.site_pattern.SitePattern.compute_tips_partials"]], "compute_tips_states() (torchtree.evolution.site_pattern.sitepattern method)": [[55, "torchtree.evolution.site_pattern.SitePattern.compute_tips_states"]], "cpu() (torchtree.evolution.site_pattern.sitepattern method)": [[55, "torchtree.evolution.site_pattern.SitePattern.cpu"]], "cuda() (torchtree.evolution.site_pattern.sitepattern method)": [[55, "torchtree.evolution.site_pattern.SitePattern.cuda"]], "from_json() (torchtree.evolution.site_pattern.sitepattern class method)": [[55, "torchtree.evolution.site_pattern.SitePattern.from_json"]], "handle_model_changed() (torchtree.evolution.site_pattern.sitepattern method)": [[55, "torchtree.evolution.site_pattern.SitePattern.handle_model_changed"]], "handle_parameter_changed() (torchtree.evolution.site_pattern.sitepattern method)": [[55, "torchtree.evolution.site_pattern.SitePattern.handle_parameter_changed"]], "torchtree.evolution.site_pattern": [[55, "module-torchtree.evolution.site_pattern"], [159, "module-torchtree.evolution.site_pattern"]], "abstractsubstitutionmodel (class in torchtree.evolution.substitution_model.abstract)": [[56, "torchtree.evolution.substitution_model.abstract.AbstractSubstitutionModel"]], "nonsymmetricsubstitutionmodel (class in torchtree.evolution.substitution_model.abstract)": [[56, "torchtree.evolution.substitution_model.abstract.NonSymmetricSubstitutionModel"]], "substitutionmodel (class in torchtree.evolution.substitution_model.abstract)": [[56, "torchtree.evolution.substitution_model.abstract.SubstitutionModel"]], "symmetricsubstitutionmodel (class in torchtree.evolution.substitution_model.abstract)": [[56, "torchtree.evolution.substitution_model.abstract.SymmetricSubstitutionModel"]], "eigen() (torchtree.evolution.substitution_model.abstract.nonsymmetricsubstitutionmodel method)": [[56, "torchtree.evolution.substitution_model.abstract.NonSymmetricSubstitutionModel.eigen"]], "eigen() (torchtree.evolution.substitution_model.abstract.symmetricsubstitutionmodel method)": [[56, "torchtree.evolution.substitution_model.abstract.SymmetricSubstitutionModel.eigen"]], "frequencies (torchtree.evolution.substitution_model.abstract.abstractsubstitutionmodel property)": [[56, "torchtree.evolution.substitution_model.abstract.AbstractSubstitutionModel.frequencies"]], "frequencies (torchtree.evolution.substitution_model.abstract.substitutionmodel property)": [[56, "torchtree.evolution.substitution_model.abstract.SubstitutionModel.frequencies"]], "norm() (torchtree.evolution.substitution_model.abstract.abstractsubstitutionmodel method)": [[56, "torchtree.evolution.substitution_model.abstract.AbstractSubstitutionModel.norm"]], "p_t() (torchtree.evolution.substitution_model.abstract.nonsymmetricsubstitutionmodel method)": [[56, "torchtree.evolution.substitution_model.abstract.NonSymmetricSubstitutionModel.p_t"]], "p_t() (torchtree.evolution.substitution_model.abstract.substitutionmodel method)": [[56, "torchtree.evolution.substitution_model.abstract.SubstitutionModel.p_t"]], "p_t() (torchtree.evolution.substitution_model.abstract.symmetricsubstitutionmodel method)": [[56, "torchtree.evolution.substitution_model.abstract.SymmetricSubstitutionModel.p_t"]], "q() (torchtree.evolution.substitution_model.abstract.substitutionmodel method)": [[56, "torchtree.evolution.substitution_model.abstract.SubstitutionModel.q"]], "torchtree.evolution.substitution_model.abstract": [[56, "module-torchtree.evolution.substitution_model.abstract"], [161, "module-torchtree.evolution.substitution_model.abstract"]], "lg (class in torchtree.evolution.substitution_model.amino_acid)": [[57, "torchtree.evolution.substitution_model.amino_acid.LG"]], "wag (class in torchtree.evolution.substitution_model.amino_acid)": [[57, "torchtree.evolution.substitution_model.amino_acid.WAG"]], "from_json() (torchtree.evolution.substitution_model.amino_acid.lg class method)": [[57, "torchtree.evolution.substitution_model.amino_acid.LG.from_json"]], "from_json() (torchtree.evolution.substitution_model.amino_acid.wag class method)": [[57, "torchtree.evolution.substitution_model.amino_acid.WAG.from_json"]], "torchtree.evolution.substitution_model.amino_acid": [[57, "module-torchtree.evolution.substitution_model.amino_acid"], [162, "module-torchtree.evolution.substitution_model.amino_acid"]], "mg94 (class in torchtree.evolution.substitution_model.codon)": [[58, "torchtree.evolution.substitution_model.codon.MG94"]], "from_json() (torchtree.evolution.substitution_model.codon.mg94 class method)": [[58, "torchtree.evolution.substitution_model.codon.MG94.from_json"]], "handle_model_changed() (torchtree.evolution.substitution_model.codon.mg94 method)": [[58, "torchtree.evolution.substitution_model.codon.MG94.handle_model_changed"]], "handle_parameter_changed() (torchtree.evolution.substitution_model.codon.mg94 method)": [[58, "torchtree.evolution.substitution_model.codon.MG94.handle_parameter_changed"]], "q() (torchtree.evolution.substitution_model.codon.mg94 method)": [[58, "torchtree.evolution.substitution_model.codon.MG94.q"]], "torchtree.evolution.substitution_model.codon": [[58, "module-torchtree.evolution.substitution_model.codon"], [163, "module-torchtree.evolution.substitution_model.codon"]], "empiricalsubstitutionmodel (class in torchtree.evolution.substitution_model.general)": [[59, "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel"]], "generaljc69 (class in torchtree.evolution.substitution_model.general)": [[59, "torchtree.evolution.substitution_model.general.GeneralJC69"]], "generalnonsymmetricsubstitutionmodel (class in torchtree.evolution.substitution_model.general)": [[59, "torchtree.evolution.substitution_model.general.GeneralNonSymmetricSubstitutionModel"]], "generalsymmetricsubstitutionmodel (class in torchtree.evolution.substitution_model.general)": [[59, "torchtree.evolution.substitution_model.general.GeneralSymmetricSubstitutionModel"]], "cpu() (torchtree.evolution.substitution_model.general.generaljc69 method)": [[59, "torchtree.evolution.substitution_model.general.GeneralJC69.cpu"]], "create_rate_matrix() (torchtree.evolution.substitution_model.general.empiricalsubstitutionmodel static method)": [[59, "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel.create_rate_matrix"]], "cuda() (torchtree.evolution.substitution_model.general.generaljc69 method)": [[59, "torchtree.evolution.substitution_model.general.GeneralJC69.cuda"]], "eigen() (torchtree.evolution.substitution_model.general.empiricalsubstitutionmodel method)": [[59, "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel.eigen"]], "frequencies (torchtree.evolution.substitution_model.general.empiricalsubstitutionmodel property)": [[59, "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel.frequencies"]], "frequencies (torchtree.evolution.substitution_model.general.generaljc69 property)": [[59, "torchtree.evolution.substitution_model.general.GeneralJC69.frequencies"]], "from_json() (torchtree.evolution.substitution_model.general.empiricalsubstitutionmodel class method)": [[59, "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel.from_json"]], "from_json() (torchtree.evolution.substitution_model.general.generaljc69 class method)": [[59, "torchtree.evolution.substitution_model.general.GeneralJC69.from_json"]], "from_json() (torchtree.evolution.substitution_model.general.generalnonsymmetricsubstitutionmodel class method)": [[59, "torchtree.evolution.substitution_model.general.GeneralNonSymmetricSubstitutionModel.from_json"]], "from_json() (torchtree.evolution.substitution_model.general.generalsymmetricsubstitutionmodel class method)": [[59, "torchtree.evolution.substitution_model.general.GeneralSymmetricSubstitutionModel.from_json"]], "handle_model_changed() (torchtree.evolution.substitution_model.general.empiricalsubstitutionmodel method)": [[59, "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel.handle_model_changed"]], "handle_model_changed() (torchtree.evolution.substitution_model.general.generaljc69 method)": [[59, "torchtree.evolution.substitution_model.general.GeneralJC69.handle_model_changed"]], "handle_model_changed() (torchtree.evolution.substitution_model.general.generalnonsymmetricsubstitutionmodel method)": [[59, "torchtree.evolution.substitution_model.general.GeneralNonSymmetricSubstitutionModel.handle_model_changed"]], "handle_model_changed() (torchtree.evolution.substitution_model.general.generalsymmetricsubstitutionmodel method)": [[59, "torchtree.evolution.substitution_model.general.GeneralSymmetricSubstitutionModel.handle_model_changed"]], "handle_parameter_changed() (torchtree.evolution.substitution_model.general.empiricalsubstitutionmodel method)": [[59, "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.evolution.substitution_model.general.generaljc69 method)": [[59, "torchtree.evolution.substitution_model.general.GeneralJC69.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.evolution.substitution_model.general.generalnonsymmetricsubstitutionmodel method)": [[59, "torchtree.evolution.substitution_model.general.GeneralNonSymmetricSubstitutionModel.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.evolution.substitution_model.general.generalsymmetricsubstitutionmodel method)": [[59, "torchtree.evolution.substitution_model.general.GeneralSymmetricSubstitutionModel.handle_parameter_changed"]], "p_t() (torchtree.evolution.substitution_model.general.empiricalsubstitutionmodel method)": [[59, "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel.p_t"]], "p_t() (torchtree.evolution.substitution_model.general.generaljc69 method)": [[59, "torchtree.evolution.substitution_model.general.GeneralJC69.p_t"]], "q() (torchtree.evolution.substitution_model.general.empiricalsubstitutionmodel method)": [[59, "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel.q"]], "q() (torchtree.evolution.substitution_model.general.generaljc69 method)": [[59, "torchtree.evolution.substitution_model.general.GeneralJC69.q"]], "q() (torchtree.evolution.substitution_model.general.generalnonsymmetricsubstitutionmodel method)": [[59, "torchtree.evolution.substitution_model.general.GeneralNonSymmetricSubstitutionModel.q"]], "q() (torchtree.evolution.substitution_model.general.generalsymmetricsubstitutionmodel method)": [[59, "torchtree.evolution.substitution_model.general.GeneralSymmetricSubstitutionModel.q"]], "rates (torchtree.evolution.substitution_model.general.generalnonsymmetricsubstitutionmodel property)": [[59, "torchtree.evolution.substitution_model.general.GeneralNonSymmetricSubstitutionModel.rates"]], "rates (torchtree.evolution.substitution_model.general.generalsymmetricsubstitutionmodel property)": [[59, "torchtree.evolution.substitution_model.general.GeneralSymmetricSubstitutionModel.rates"]], "torchtree.evolution.substitution_model.general": [[59, "module-torchtree.evolution.substitution_model.general"], [164, "module-torchtree.evolution.substitution_model.general"]], "torchtree.evolution.substitution_model": [[60, "module-torchtree.evolution.substitution_model"], [160, "module-torchtree.evolution.substitution_model"]], "gtr (class in torchtree.evolution.substitution_model.nucleotide)": [[61, "torchtree.evolution.substitution_model.nucleotide.GTR"]], "hky (class in torchtree.evolution.substitution_model.nucleotide)": [[61, "torchtree.evolution.substitution_model.nucleotide.HKY"]], "jc69 (class in torchtree.evolution.substitution_model.nucleotide)": [[61, "torchtree.evolution.substitution_model.nucleotide.JC69"]], "cpu() (torchtree.evolution.substitution_model.nucleotide.jc69 method)": [[61, "torchtree.evolution.substitution_model.nucleotide.JC69.cpu"]], "cuda() (torchtree.evolution.substitution_model.nucleotide.jc69 method)": [[61, "torchtree.evolution.substitution_model.nucleotide.JC69.cuda"]], "frequencies (torchtree.evolution.substitution_model.nucleotide.jc69 property)": [[61, "torchtree.evolution.substitution_model.nucleotide.JC69.frequencies"]], "from_json() (torchtree.evolution.substitution_model.nucleotide.gtr class method)": [[61, "torchtree.evolution.substitution_model.nucleotide.GTR.from_json"]], "from_json() (torchtree.evolution.substitution_model.nucleotide.hky class method)": [[61, "torchtree.evolution.substitution_model.nucleotide.HKY.from_json"]], "from_json() (torchtree.evolution.substitution_model.nucleotide.jc69 class method)": [[61, "torchtree.evolution.substitution_model.nucleotide.JC69.from_json"]], "handle_model_changed() (torchtree.evolution.substitution_model.nucleotide.gtr method)": [[61, "torchtree.evolution.substitution_model.nucleotide.GTR.handle_model_changed"]], "handle_model_changed() (torchtree.evolution.substitution_model.nucleotide.hky method)": [[61, "torchtree.evolution.substitution_model.nucleotide.HKY.handle_model_changed"]], "handle_model_changed() (torchtree.evolution.substitution_model.nucleotide.jc69 method)": [[61, "torchtree.evolution.substitution_model.nucleotide.JC69.handle_model_changed"]], "handle_parameter_changed() (torchtree.evolution.substitution_model.nucleotide.gtr method)": [[61, "torchtree.evolution.substitution_model.nucleotide.GTR.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.evolution.substitution_model.nucleotide.hky method)": [[61, "torchtree.evolution.substitution_model.nucleotide.HKY.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.evolution.substitution_model.nucleotide.jc69 method)": [[61, "torchtree.evolution.substitution_model.nucleotide.JC69.handle_parameter_changed"]], "kappa (torchtree.evolution.substitution_model.nucleotide.hky property)": [[61, "torchtree.evolution.substitution_model.nucleotide.HKY.kappa"]], "p_t() (torchtree.evolution.substitution_model.nucleotide.jc69 method)": [[61, "torchtree.evolution.substitution_model.nucleotide.JC69.p_t"]], "p_t_analytical() (torchtree.evolution.substitution_model.nucleotide.hky method)": [[61, "torchtree.evolution.substitution_model.nucleotide.HKY.p_t_analytical"]], "q() (torchtree.evolution.substitution_model.nucleotide.gtr method)": [[61, "torchtree.evolution.substitution_model.nucleotide.GTR.q"]], "q() (torchtree.evolution.substitution_model.nucleotide.hky method)": [[61, "torchtree.evolution.substitution_model.nucleotide.HKY.q"]], "q() (torchtree.evolution.substitution_model.nucleotide.jc69 method)": [[61, "torchtree.evolution.substitution_model.nucleotide.JC69.q"]], "rates (torchtree.evolution.substitution_model.nucleotide.gtr property)": [[61, "torchtree.evolution.substitution_model.nucleotide.GTR.rates"]], "torchtree.evolution.substitution_model.nucleotide": [[61, "module-torchtree.evolution.substitution_model.nucleotide"], [165, "module-torchtree.evolution.substitution_model.nucleotide"]], "taxa (class in torchtree.evolution.taxa)": [[62, "torchtree.evolution.taxa.Taxa"]], "taxon (class in torchtree.evolution.taxa)": [[62, "torchtree.evolution.taxa.Taxon"]], "from_json() (torchtree.evolution.taxa.taxa class method)": [[62, "torchtree.evolution.taxa.Taxa.from_json"]], "from_json() (torchtree.evolution.taxa.taxon class method)": [[62, "torchtree.evolution.taxa.Taxon.from_json"]], "torchtree.evolution.taxa": [[62, "module-torchtree.evolution.taxa"], [166, "module-torchtree.evolution.taxa"]], "differencenodeheighttransform (class in torchtree.evolution.tree_height_transform)": [[63, "torchtree.evolution.tree_height_transform.DifferenceNodeHeightTransform"]], "generalnodeheighttransform (class in torchtree.evolution.tree_height_transform)": [[63, "torchtree.evolution.tree_height_transform.GeneralNodeHeightTransform"]], "bijective (torchtree.evolution.tree_height_transform.differencenodeheighttransform attribute)": [[63, "torchtree.evolution.tree_height_transform.DifferenceNodeHeightTransform.bijective"]], "bijective (torchtree.evolution.tree_height_transform.generalnodeheighttransform attribute)": [[63, "torchtree.evolution.tree_height_transform.GeneralNodeHeightTransform.bijective"]], "log_abs_det_jacobian() (torchtree.evolution.tree_height_transform.differencenodeheighttransform method)": [[63, "torchtree.evolution.tree_height_transform.DifferenceNodeHeightTransform.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torchtree.evolution.tree_height_transform.generalnodeheighttransform method)": [[63, "torchtree.evolution.tree_height_transform.GeneralNodeHeightTransform.log_abs_det_jacobian"]], "sign (torchtree.evolution.tree_height_transform.differencenodeheighttransform attribute)": [[63, "torchtree.evolution.tree_height_transform.DifferenceNodeHeightTransform.sign"]], "sign (torchtree.evolution.tree_height_transform.generalnodeheighttransform attribute)": [[63, "torchtree.evolution.tree_height_transform.GeneralNodeHeightTransform.sign"]], "sort_indices() (torchtree.evolution.tree_height_transform.generalnodeheighttransform method)": [[63, "torchtree.evolution.tree_height_transform.GeneralNodeHeightTransform.sort_indices"]], "torchtree.evolution.tree_height_transform": [[63, "module-torchtree.evolution.tree_height_transform"], [167, "module-torchtree.evolution.tree_height_transform"]], "update_bounds() (torchtree.evolution.tree_height_transform.generalnodeheighttransform method)": [[63, "torchtree.evolution.tree_height_transform.GeneralNodeHeightTransform.update_bounds"]], "treelikelihoodmodel (class in torchtree.evolution.tree_likelihood)": [[64, "torchtree.evolution.tree_likelihood.TreeLikelihoodModel"]], "calculate_treelikelihood() (in module torchtree.evolution.tree_likelihood)": [[64, "torchtree.evolution.tree_likelihood.calculate_treelikelihood"]], "calculate_treelikelihood_discrete() (in module torchtree.evolution.tree_likelihood)": [[64, "torchtree.evolution.tree_likelihood.calculate_treelikelihood_discrete"]], "calculate_treelikelihood_discrete_rescaled() (in module torchtree.evolution.tree_likelihood)": [[64, "torchtree.evolution.tree_likelihood.calculate_treelikelihood_discrete_rescaled"]], "calculate_treelikelihood_discrete_safe() (in module torchtree.evolution.tree_likelihood)": [[64, "torchtree.evolution.tree_likelihood.calculate_treelikelihood_discrete_safe"]], "calculate_treelikelihood_tip_states_discrete() (in module torchtree.evolution.tree_likelihood)": [[64, "torchtree.evolution.tree_likelihood.calculate_treelikelihood_tip_states_discrete"]], "calculate_treelikelihood_tip_states_discrete_rescaled() (in module torchtree.evolution.tree_likelihood)": [[64, "torchtree.evolution.tree_likelihood.calculate_treelikelihood_tip_states_discrete_rescaled"]], "calculate_with_tip_partials() (torchtree.evolution.tree_likelihood.treelikelihoodmodel method)": [[64, "torchtree.evolution.tree_likelihood.TreeLikelihoodModel.calculate_with_tip_partials"]], "calculate_with_tip_states() (torchtree.evolution.tree_likelihood.treelikelihoodmodel method)": [[64, "torchtree.evolution.tree_likelihood.TreeLikelihoodModel.calculate_with_tip_states"]], "from_json() (torchtree.evolution.tree_likelihood.treelikelihoodmodel class method)": [[64, "torchtree.evolution.tree_likelihood.TreeLikelihoodModel.from_json"]], "handle_parameter_changed() (torchtree.evolution.tree_likelihood.treelikelihoodmodel method)": [[64, "torchtree.evolution.tree_likelihood.TreeLikelihoodModel.handle_parameter_changed"]], "torchtree.evolution.tree_likelihood": [[64, "module-torchtree.evolution.tree_likelihood"], [168, "module-torchtree.evolution.tree_likelihood"]], "abstracttreemodel (class in torchtree.evolution.tree_model)": [[65, "torchtree.evolution.tree_model.AbstractTreeModel"]], "reparameterizedtimetreemodel (class in torchtree.evolution.tree_model)": [[65, "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel"]], "timetreemodel (class in torchtree.evolution.tree_model)": [[65, "torchtree.evolution.tree_model.TimeTreeModel"]], "treemodel (class in torchtree.evolution.tree_model)": [[65, "torchtree.evolution.tree_model.TreeModel"]], "unrootedtreemodel (class in torchtree.evolution.tree_model)": [[65, "torchtree.evolution.tree_model.UnRootedTreeModel"]], "as_newick() (torchtree.evolution.tree_model.abstracttreemodel method)": [[65, "torchtree.evolution.tree_model.AbstractTreeModel.as_newick"]], "branch_lengths() (torchtree.evolution.tree_model.timetreemodel method)": [[65, "torchtree.evolution.tree_model.TimeTreeModel.branch_lengths"]], "branch_lengths() (torchtree.evolution.tree_model.treemodel method)": [[65, "torchtree.evolution.tree_model.TreeModel.branch_lengths"]], "branch_lengths() (torchtree.evolution.tree_model.unrootedtreemodel method)": [[65, "torchtree.evolution.tree_model.UnRootedTreeModel.branch_lengths"]], "cpu() (torchtree.evolution.tree_model.reparameterizedtimetreemodel method)": [[65, "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel.cpu"]], "cpu() (torchtree.evolution.tree_model.timetreemodel method)": [[65, "torchtree.evolution.tree_model.TimeTreeModel.cpu"]], "cuda() (torchtree.evolution.tree_model.reparameterizedtimetreemodel method)": [[65, "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel.cuda"]], "cuda() (torchtree.evolution.tree_model.timetreemodel method)": [[65, "torchtree.evolution.tree_model.TimeTreeModel.cuda"]], "from_json() (torchtree.evolution.tree_model.reparameterizedtimetreemodel class method)": [[65, "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel.from_json"]], "from_json() (torchtree.evolution.tree_model.timetreemodel class method)": [[65, "torchtree.evolution.tree_model.TimeTreeModel.from_json"]], "from_json() (torchtree.evolution.tree_model.unrootedtreemodel class method)": [[65, "torchtree.evolution.tree_model.UnRootedTreeModel.from_json"]], "handle_model_changed() (torchtree.evolution.tree_model.abstracttreemodel method)": [[65, "torchtree.evolution.tree_model.AbstractTreeModel.handle_model_changed"]], "handle_model_changed() (torchtree.evolution.tree_model.reparameterizedtimetreemodel method)": [[65, "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel.handle_model_changed"]], "handle_parameter_changed() (torchtree.evolution.tree_model.reparameterizedtimetreemodel method)": [[65, "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.evolution.tree_model.timetreemodel method)": [[65, "torchtree.evolution.tree_model.TimeTreeModel.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.evolution.tree_model.unrootedtreemodel method)": [[65, "torchtree.evolution.tree_model.UnRootedTreeModel.handle_parameter_changed"]], "heights_from_branch_lengths() (in module torchtree.evolution.tree_model)": [[65, "torchtree.evolution.tree_model.heights_from_branch_lengths"]], "heights_to_branch_lengths() (in module torchtree.evolution.tree_model)": [[65, "torchtree.evolution.tree_model.heights_to_branch_lengths"]], "initialize_dates_from_taxa() (in module torchtree.evolution.tree_model)": [[65, "torchtree.evolution.tree_model.initialize_dates_from_taxa"]], "json_factory() (torchtree.evolution.tree_model.reparameterizedtimetreemodel static method)": [[65, "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel.json_factory"]], "json_factory() (torchtree.evolution.tree_model.timetreemodel static method)": [[65, "torchtree.evolution.tree_model.TimeTreeModel.json_factory"]], "json_factory() (torchtree.evolution.tree_model.unrootedtreemodel static method)": [[65, "torchtree.evolution.tree_model.UnRootedTreeModel.json_factory"]], "node_heights (torchtree.evolution.tree_model.reparameterizedtimetreemodel property)": [[65, "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel.node_heights"]], "node_heights (torchtree.evolution.tree_model.timetreemodel property)": [[65, "torchtree.evolution.tree_model.TimeTreeModel.node_heights"]], "parse_tree() (in module torchtree.evolution.tree_model)": [[65, "torchtree.evolution.tree_model.parse_tree"]], "postorder (torchtree.evolution.tree_model.abstracttreemodel property)": [[65, "torchtree.evolution.tree_model.AbstractTreeModel.postorder"]], "postorder (torchtree.evolution.tree_model.treemodel property)": [[65, "torchtree.evolution.tree_model.TreeModel.postorder"]], "setup_dates() (in module torchtree.evolution.tree_model)": [[65, "torchtree.evolution.tree_model.setup_dates"]], "setup_indexes() (in module torchtree.evolution.tree_model)": [[65, "torchtree.evolution.tree_model.setup_indexes"]], "taxa (torchtree.evolution.tree_model.abstracttreemodel property)": [[65, "torchtree.evolution.tree_model.AbstractTreeModel.taxa"]], "taxa (torchtree.evolution.tree_model.treemodel property)": [[65, "torchtree.evolution.tree_model.TreeModel.taxa"]], "torchtree.evolution.tree_model": [[65, "module-torchtree.evolution.tree_model"], [169, "module-torchtree.evolution.tree_model"]], "update_leaf_heights() (torchtree.evolution.tree_model.timetreemodel method)": [[65, "torchtree.evolution.tree_model.TimeTreeModel.update_leaf_heights"]], "update_node_heights() (torchtree.evolution.tree_model.reparameterizedtimetreemodel method)": [[65, "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel.update_node_heights"]], "update_traversals() (torchtree.evolution.tree_model.abstracttreemodel method)": [[65, "torchtree.evolution.tree_model.AbstractTreeModel.update_traversals"]], "update_traversals() (torchtree.evolution.tree_model.timetreemodel method)": [[65, "torchtree.evolution.tree_model.TimeTreeModel.update_traversals"]], "write_newick() (torchtree.evolution.tree_model.abstracttreemodel method)": [[65, "torchtree.evolution.tree_model.AbstractTreeModel.write_newick"]], "write_newick() (torchtree.evolution.tree_model.treemodel method)": [[65, "torchtree.evolution.tree_model.TreeModel.write_newick"]], "flexibletimetreemodel (class in torchtree.evolution.tree_model_flexible)": [[66, "torchtree.evolution.tree_model_flexible.FlexibleTimeTreeModel"]], "from_json() (torchtree.evolution.tree_model_flexible.flexibletimetreemodel class method)": [[66, "torchtree.evolution.tree_model_flexible.FlexibleTimeTreeModel.from_json"]], "json_factory() (torchtree.evolution.tree_model_flexible.flexibletimetreemodel static method)": [[66, "torchtree.evolution.tree_model_flexible.FlexibleTimeTreeModel.json_factory"]], "torchtree.evolution.tree_model_flexible": [[66, "module-torchtree.evolution.tree_model_flexible"], [170, "module-torchtree.evolution.tree_model_flexible"]], "torchtree": [[67, "module-torchtree"]], "adaptivestepsize (class in torchtree.inference.hmc.adaptation)": [[68, "torchtree.inference.hmc.adaptation.AdaptiveStepSize"]], "adaptor (class in torchtree.inference.hmc.adaptation)": [[68, "torchtree.inference.hmc.adaptation.Adaptor"]], "dualaveragingstepsize (class in torchtree.inference.hmc.adaptation)": [[68, "torchtree.inference.hmc.adaptation.DualAveragingStepSize"]], "massmatrixadaptor (class in torchtree.inference.hmc.adaptation)": [[68, "torchtree.inference.hmc.adaptation.MassMatrixAdaptor"]], "warmupadaptation (class in torchtree.inference.hmc.adaptation)": [[68, "torchtree.inference.hmc.adaptation.WarmupAdaptation"]], "find_reasonable_step_size() (in module torchtree.inference.hmc.adaptation)": [[68, "torchtree.inference.hmc.adaptation.find_reasonable_step_size"]], "from_json() (torchtree.inference.hmc.adaptation.adaptivestepsize class method)": [[68, "torchtree.inference.hmc.adaptation.AdaptiveStepSize.from_json"]], "from_json() (torchtree.inference.hmc.adaptation.dualaveragingstepsize class method)": [[68, "torchtree.inference.hmc.adaptation.DualAveragingStepSize.from_json"]], "from_json() (torchtree.inference.hmc.adaptation.massmatrixadaptor class method)": [[68, "torchtree.inference.hmc.adaptation.MassMatrixAdaptor.from_json"]], "inverse_mass_matrix (torchtree.inference.hmc.adaptation.warmupadaptation property)": [[68, "torchtree.inference.hmc.adaptation.WarmupAdaptation.inverse_mass_matrix"]], "learn() (torchtree.inference.hmc.adaptation.adaptivestepsize method)": [[68, "torchtree.inference.hmc.adaptation.AdaptiveStepSize.learn"]], "learn() (torchtree.inference.hmc.adaptation.adaptor method)": [[68, "torchtree.inference.hmc.adaptation.Adaptor.learn"]], "learn() (torchtree.inference.hmc.adaptation.dualaveragingstepsize method)": [[68, "torchtree.inference.hmc.adaptation.DualAveragingStepSize.learn"]], "learn() (torchtree.inference.hmc.adaptation.massmatrixadaptor method)": [[68, "torchtree.inference.hmc.adaptation.MassMatrixAdaptor.learn"]], "mass_matrix (torchtree.inference.hmc.adaptation.massmatrixadaptor property)": [[68, "torchtree.inference.hmc.adaptation.MassMatrixAdaptor.mass_matrix"]], "mass_matrix (torchtree.inference.hmc.adaptation.warmupadaptation property)": [[68, "torchtree.inference.hmc.adaptation.WarmupAdaptation.mass_matrix"]], "restart() (torchtree.inference.hmc.adaptation.adaptivestepsize method)": [[68, "torchtree.inference.hmc.adaptation.AdaptiveStepSize.restart"]], "restart() (torchtree.inference.hmc.adaptation.adaptor method)": [[68, "torchtree.inference.hmc.adaptation.Adaptor.restart"]], "restart() (torchtree.inference.hmc.adaptation.dualaveragingstepsize method)": [[68, "torchtree.inference.hmc.adaptation.DualAveragingStepSize.restart"]], "restart() (torchtree.inference.hmc.adaptation.massmatrixadaptor method)": [[68, "torchtree.inference.hmc.adaptation.MassMatrixAdaptor.restart"]], "sqrt_mass_matrix (torchtree.inference.hmc.adaptation.warmupadaptation property)": [[68, "torchtree.inference.hmc.adaptation.WarmupAdaptation.sqrt_mass_matrix"]], "step_size (torchtree.inference.hmc.adaptation.warmupadaptation property)": [[68, "torchtree.inference.hmc.adaptation.WarmupAdaptation.step_size"]], "torchtree.inference.hmc.adaptation": [[68, "module-torchtree.inference.hmc.adaptation"], [173, "module-torchtree.inference.hmc.adaptation"]], "torchtree.inference.hmc.adaptors": [[69, "module-torchtree.inference.hmc.adaptors"], [174, "module-torchtree.inference.hmc.adaptors"]], "hamiltonian (class in torchtree.inference.hmc.hamiltonian)": [[70, "torchtree.inference.hmc.hamiltonian.Hamiltonian"]], "from_json() (torchtree.inference.hmc.hamiltonian.hamiltonian class method)": [[70, "torchtree.inference.hmc.hamiltonian.Hamiltonian.from_json"]], "handle_parameter_changed() (torchtree.inference.hmc.hamiltonian.hamiltonian method)": [[70, "torchtree.inference.hmc.hamiltonian.Hamiltonian.handle_parameter_changed"]], "kinetic_energy() (torchtree.inference.hmc.hamiltonian.hamiltonian method)": [[70, "torchtree.inference.hmc.hamiltonian.Hamiltonian.kinetic_energy"]], "potential_energy() (torchtree.inference.hmc.hamiltonian.hamiltonian method)": [[70, "torchtree.inference.hmc.hamiltonian.Hamiltonian.potential_energy"]], "sample_momentum() (torchtree.inference.hmc.hamiltonian.hamiltonian method)": [[70, "torchtree.inference.hmc.hamiltonian.Hamiltonian.sample_momentum"]], "torchtree.inference.hmc.hamiltonian": [[70, "module-torchtree.inference.hmc.hamiltonian"], [175, "module-torchtree.inference.hmc.hamiltonian"]], "hmc (class in torchtree.inference.hmc.hmc)": [[71, "torchtree.inference.hmc.hmc.HMC"]], "find_reasonable_step_size() (torchtree.inference.hmc.hmc.hmc method)": [[71, "torchtree.inference.hmc.hmc.HMC.find_reasonable_step_size"]], "from_json() (torchtree.inference.hmc.hmc.hmc class method)": [[71, "torchtree.inference.hmc.hmc.HMC.from_json"]], "hamiltonian() (torchtree.inference.hmc.hmc.hmc method)": [[71, "torchtree.inference.hmc.hmc.HMC.hamiltonian"]], "run() (torchtree.inference.hmc.hmc.hmc method)": [[71, "torchtree.inference.hmc.hmc.HMC.run"]], "sample_momentum() (torchtree.inference.hmc.hmc.hmc method)": [[71, "torchtree.inference.hmc.hmc.HMC.sample_momentum"]], "torchtree.inference.hmc.hmc": [[71, "module-torchtree.inference.hmc.hmc"], [176, "module-torchtree.inference.hmc.hmc"]], "torchtree.inference.hmc": [[72, "module-torchtree.inference.hmc"], [172, "module-torchtree.inference.hmc"]], "integrator (class in torchtree.inference.hmc.integrator)": [[73, "torchtree.inference.hmc.integrator.Integrator"]], "leapfrogintegrator (class in torchtree.inference.hmc.integrator)": [[73, "torchtree.inference.hmc.integrator.LeapfrogIntegrator"]], "from_json() (torchtree.inference.hmc.integrator.leapfrogintegrator class method)": [[73, "torchtree.inference.hmc.integrator.LeapfrogIntegrator.from_json"]], "set_tensor() (in module torchtree.inference.hmc.integrator)": [[73, "torchtree.inference.hmc.integrator.set_tensor"]], "torchtree.inference.hmc.integrator": [[73, "module-torchtree.inference.hmc.integrator"], [177, "module-torchtree.inference.hmc.integrator"]], "hmcoperator (class in torchtree.inference.hmc.operator)": [[74, "torchtree.inference.hmc.operator.HMCOperator"]], "adaptable_parameter (torchtree.inference.hmc.operator.hmcoperator property)": [[74, "torchtree.inference.hmc.operator.HMCOperator.adaptable_parameter"]], "from_json() (torchtree.inference.hmc.operator.hmcoperator class method)": [[74, "torchtree.inference.hmc.operator.HMCOperator.from_json"]], "handle_parameter_changed() (torchtree.inference.hmc.operator.hmcoperator method)": [[74, "torchtree.inference.hmc.operator.HMCOperator.handle_parameter_changed"]], "mass_matrix (torchtree.inference.hmc.operator.hmcoperator property)": [[74, "torchtree.inference.hmc.operator.HMCOperator.mass_matrix"]], "set_adaptable_parameter() (torchtree.inference.hmc.operator.hmcoperator method)": [[74, "torchtree.inference.hmc.operator.HMCOperator.set_adaptable_parameter"]], "torchtree.inference.hmc.operator": [[74, "module-torchtree.inference.hmc.operator"], [178, "module-torchtree.inference.hmc.operator"]], "tune() (torchtree.inference.hmc.operator.hmcoperator method)": [[74, "torchtree.inference.hmc.operator.HMCOperator.tune"]], "update_mass_matrices() (torchtree.inference.hmc.operator.hmcoperator method)": [[74, "torchtree.inference.hmc.operator.HMCOperator.update_mass_matrices"]], "stanwindowedadaptation (class in torchtree.inference.hmc.stan_adaptation)": [[75, "torchtree.inference.hmc.stan_adaptation.StanWindowedAdaptation"]], "from_json() (torchtree.inference.hmc.stan_adaptation.stanwindowedadaptation class method)": [[75, "torchtree.inference.hmc.stan_adaptation.StanWindowedAdaptation.from_json"]], "learn() (torchtree.inference.hmc.stan_adaptation.stanwindowedadaptation method)": [[75, "torchtree.inference.hmc.stan_adaptation.StanWindowedAdaptation.learn"]], "restart() (torchtree.inference.hmc.stan_adaptation.stanwindowedadaptation method)": [[75, "torchtree.inference.hmc.stan_adaptation.StanWindowedAdaptation.restart"]], "torchtree.inference.hmc.stan_adaptation": [[75, "module-torchtree.inference.hmc.stan_adaptation"], [179, "module-torchtree.inference.hmc.stan_adaptation"]], "torchtree.inference": [[76, "module-torchtree.inference"], [171, "module-torchtree.inference"]], "torchtree.inference.mcmc": [[77, "module-torchtree.inference.mcmc"], [180, "module-torchtree.inference.mcmc"]], "mcmc (class in torchtree.inference.mcmc.mcmc)": [[78, "torchtree.inference.mcmc.mcmc.MCMC"]], "from_json() (torchtree.inference.mcmc.mcmc.mcmc class method)": [[78, "torchtree.inference.mcmc.mcmc.MCMC.from_json"]], "run() (torchtree.inference.mcmc.mcmc.mcmc method)": [[78, "torchtree.inference.mcmc.mcmc.MCMC.run"]], "torchtree.inference.mcmc.mcmc": [[78, "module-torchtree.inference.mcmc.mcmc"], [181, "module-torchtree.inference.mcmc.mcmc"]], "mcmcoperator (class in torchtree.inference.mcmc.operator)": [[79, "torchtree.inference.mcmc.operator.MCMCOperator"]], "accept() (torchtree.inference.mcmc.operator.mcmcoperator method)": [[79, "torchtree.inference.mcmc.operator.MCMCOperator.accept"]], "adaptable_parameter (torchtree.inference.mcmc.operator.mcmcoperator property)": [[79, "torchtree.inference.mcmc.operator.MCMCOperator.adaptable_parameter"]], "reject() (torchtree.inference.mcmc.operator.mcmcoperator method)": [[79, "torchtree.inference.mcmc.operator.MCMCOperator.reject"]], "set_adaptable_parameter() (torchtree.inference.mcmc.operator.mcmcoperator method)": [[79, "torchtree.inference.mcmc.operator.MCMCOperator.set_adaptable_parameter"]], "step() (torchtree.inference.mcmc.operator.mcmcoperator method)": [[79, "torchtree.inference.mcmc.operator.MCMCOperator.step"]], "torchtree.inference.mcmc.operator": [[79, "module-torchtree.inference.mcmc.operator"], [182, "module-torchtree.inference.mcmc.operator"]], "tune() (torchtree.inference.mcmc.operator.mcmcoperator method)": [[79, "torchtree.inference.mcmc.operator.MCMCOperator.tune"]], "sampler (class in torchtree.inference.sampler)": [[80, "torchtree.inference.sampler.Sampler"]], "from_json() (torchtree.inference.sampler.sampler class method)": [[80, "torchtree.inference.sampler.Sampler.from_json"]], "run() (torchtree.inference.sampler.sampler method)": [[80, "torchtree.inference.sampler.Sampler.run"]], "torchtree.inference.sampler": [[80, "module-torchtree.inference.sampler"], [183, "module-torchtree.inference.sampler"]], "extract_tensors_and_parameters() (in module torchtree.inference.utils)": [[81, "torchtree.inference.utils.extract_tensors_and_parameters"]], "torchtree.inference.utils": [[81, "module-torchtree.inference.utils"], [184, "module-torchtree.inference.utils"]], "soft_max() (in module torchtree.math)": [[82, "torchtree.math.soft_max"]], "soft_searchsorted() (in module torchtree.math)": [[82, "torchtree.math.soft_searchsorted"]], "soft_sort() (in module torchtree.math)": [[82, "torchtree.math.soft_sort"]], "torchtree.math": [[82, "module-torchtree.math"]], "energyfunctionmodel (class in torchtree.nf.energy_functions)": [[83, "torchtree.nf.energy_functions.EnergyFunctionModel"]], "from_json() (torchtree.nf.energy_functions.energyfunctionmodel class method)": [[83, "torchtree.nf.energy_functions.EnergyFunctionModel.from_json"]], "handle_model_changed() (torchtree.nf.energy_functions.energyfunctionmodel method)": [[83, "torchtree.nf.energy_functions.EnergyFunctionModel.handle_model_changed"]], "torchtree.nf.energy_functions": [[83, "module-torchtree.nf.energy_functions"], [186, "module-torchtree.nf.energy_functions"]], "w1() (in module torchtree.nf.energy_functions)": [[83, "torchtree.nf.energy_functions.w1"]], "w2() (in module torchtree.nf.energy_functions)": [[83, "torchtree.nf.energy_functions.w2"]], "w3() (in module torchtree.nf.energy_functions)": [[83, "torchtree.nf.energy_functions.w3"]], "normalizingflow (class in torchtree.nf.flow)": [[84, "torchtree.nf.flow.NormalizingFlow"]], "apply_flow() (torchtree.nf.flow.normalizingflow method)": [[84, "torchtree.nf.flow.NormalizingFlow.apply_flow"]], "cpu() (torchtree.nf.flow.normalizingflow method)": [[84, "torchtree.nf.flow.NormalizingFlow.cpu"]], "cuda() (torchtree.nf.flow.normalizingflow method)": [[84, "torchtree.nf.flow.NormalizingFlow.cuda"]], "entropy() (torchtree.nf.flow.normalizingflow method)": [[84, "torchtree.nf.flow.NormalizingFlow.entropy"]], "forward() (torchtree.nf.flow.normalizingflow method)": [[84, "torchtree.nf.flow.NormalizingFlow.forward"]], "from_json() (torchtree.nf.flow.normalizingflow class method)": [[84, "torchtree.nf.flow.NormalizingFlow.from_json"]], "log_prob() (torchtree.nf.flow.normalizingflow method)": [[84, "torchtree.nf.flow.NormalizingFlow.log_prob"]], "parameters() (torchtree.nf.flow.normalizingflow method)": [[84, "torchtree.nf.flow.NormalizingFlow.parameters"]], "rsample() (torchtree.nf.flow.normalizingflow method)": [[84, "torchtree.nf.flow.NormalizingFlow.rsample"]], "sample() (torchtree.nf.flow.normalizingflow method)": [[84, "torchtree.nf.flow.NormalizingFlow.sample"]], "to() (torchtree.nf.flow.normalizingflow method)": [[84, "torchtree.nf.flow.NormalizingFlow.to"]], "torchtree.nf.flow": [[84, "module-torchtree.nf.flow"], [187, "module-torchtree.nf.flow"]], "torchtree.nf": [[85, "module-torchtree.nf"], [185, "module-torchtree.nf"]], "planartransform (class in torchtree.nf.planar)": [[86, "torchtree.nf.planar.PlanarTransform"]], "forward() (torchtree.nf.planar.planartransform method)": [[86, "torchtree.nf.planar.PlanarTransform.forward"]], "log_abs_det_jacobian() (torchtree.nf.planar.planartransform method)": [[86, "torchtree.nf.planar.PlanarTransform.log_abs_det_jacobian"]], "torchtree.nf.planar": [[86, "module-torchtree.nf.planar"], [188, "module-torchtree.nf.planar"]], "u_hat() (torchtree.nf.planar.planartransform method)": [[86, "torchtree.nf.planar.PlanarTransform.u_hat"]], "batchnorm (class in torchtree.nf.realnvp)": [[87, "torchtree.nf.realnvp.BatchNorm"]], "flowsequential (class in torchtree.nf.realnvp)": [[87, "torchtree.nf.realnvp.FlowSequential"]], "linearmaskedcoupling (class in torchtree.nf.realnvp)": [[87, "torchtree.nf.realnvp.LinearMaskedCoupling"]], "realnvp (class in torchtree.nf.realnvp)": [[87, "torchtree.nf.realnvp.RealNVP"]], "apply_flow() (torchtree.nf.realnvp.realnvp method)": [[87, "torchtree.nf.realnvp.RealNVP.apply_flow"]], "batch_shape (torchtree.nf.realnvp.realnvp property)": [[87, "torchtree.nf.realnvp.RealNVP.batch_shape"]], "entropy() (torchtree.nf.realnvp.realnvp method)": [[87, "torchtree.nf.realnvp.RealNVP.entropy"]], "forward() (torchtree.nf.realnvp.batchnorm method)": [[87, "torchtree.nf.realnvp.BatchNorm.forward"]], "forward() (torchtree.nf.realnvp.flowsequential method)": [[87, "torchtree.nf.realnvp.FlowSequential.forward"]], "forward() (torchtree.nf.realnvp.linearmaskedcoupling method)": [[87, "torchtree.nf.realnvp.LinearMaskedCoupling.forward"]], "forward() (torchtree.nf.realnvp.realnvp method)": [[87, "torchtree.nf.realnvp.RealNVP.forward"]], "from_json() (torchtree.nf.realnvp.realnvp class method)": [[87, "torchtree.nf.realnvp.RealNVP.from_json"]], "inverse() (torchtree.nf.realnvp.batchnorm method)": [[87, "torchtree.nf.realnvp.BatchNorm.inverse"]], "inverse() (torchtree.nf.realnvp.flowsequential method)": [[87, "torchtree.nf.realnvp.FlowSequential.inverse"]], "inverse() (torchtree.nf.realnvp.linearmaskedcoupling method)": [[87, "torchtree.nf.realnvp.LinearMaskedCoupling.inverse"]], "inverse() (torchtree.nf.realnvp.realnvp method)": [[87, "torchtree.nf.realnvp.RealNVP.inverse"]], "log_prob() (torchtree.nf.realnvp.realnvp method)": [[87, "torchtree.nf.realnvp.RealNVP.log_prob"]], "parameters() (torchtree.nf.realnvp.realnvp method)": [[87, "torchtree.nf.realnvp.RealNVP.parameters"]], "rsample() (torchtree.nf.realnvp.realnvp method)": [[87, "torchtree.nf.realnvp.RealNVP.rsample"]], "sample() (torchtree.nf.realnvp.realnvp method)": [[87, "torchtree.nf.realnvp.RealNVP.sample"]], "torchtree.nf.realnvp": [[87, "module-torchtree.nf.realnvp"], [189, "module-torchtree.nf.realnvp"]], "torchtree.nn": [[88, "module-torchtree.nn"], [190, "module-torchtree.nn"]], "module (class in torchtree.nn.module)": [[89, "torchtree.nn.module.Module"]], "cpu() (torchtree.nn.module.module method)": [[89, "torchtree.nn.module.Module.cpu"]], "cuda() (torchtree.nn.module.module method)": [[89, "torchtree.nn.module.Module.cuda"]], "from_json() (torchtree.nn.module.module class method)": [[89, "torchtree.nn.module.Module.from_json"]], "module (torchtree.nn.module.module property)": [[89, "torchtree.nn.module.Module.module"]], "to() (torchtree.nn.module.module method)": [[89, "torchtree.nn.module.Module.to"]], "torchtree.nn.module": [[89, "module-torchtree.nn.module"], [191, "module-torchtree.nn.module"]], "dualaveraging (class in torchtree.ops.dual_averaging)": [[90, "torchtree.ops.dual_averaging.DualAveraging"]], "restart() (torchtree.ops.dual_averaging.dualaveraging method)": [[90, "torchtree.ops.dual_averaging.DualAveraging.restart"]], "step() (torchtree.ops.dual_averaging.dualaveraging method)": [[90, "torchtree.ops.dual_averaging.DualAveraging.step"]], "torchtree.ops.dual_averaging": [[90, "module-torchtree.ops.dual_averaging"], [193, "module-torchtree.ops.dual_averaging"]], "torchtree.ops": [[91, "module-torchtree.ops"], [192, "module-torchtree.ops"]], "welfordvariance (class in torchtree.ops.welford)": [[92, "torchtree.ops.welford.WelfordVariance"]], "add_sample() (torchtree.ops.welford.welfordvariance method)": [[92, "torchtree.ops.welford.WelfordVariance.add_sample"]], "mean() (torchtree.ops.welford.welfordvariance method)": [[92, "torchtree.ops.welford.WelfordVariance.mean"]], "reset() (torchtree.ops.welford.welfordvariance method)": [[92, "torchtree.ops.welford.WelfordVariance.reset"]], "torchtree.ops.welford": [[92, "module-torchtree.ops.welford"], [194, "module-torchtree.ops.welford"]], "variance() (torchtree.ops.welford.welfordvariance method)": [[92, "torchtree.ops.welford.WelfordVariance.variance"]], "baseconvergence (class in torchtree.optim.convergence)": [[93, "torchtree.optim.convergence.BaseConvergence"]], "stanvariationalconvergence (class in torchtree.optim.convergence)": [[93, "torchtree.optim.convergence.StanVariationalConvergence"]], "variationalconvergence (class in torchtree.optim.convergence)": [[93, "torchtree.optim.convergence.VariationalConvergence"]], "check() (torchtree.optim.convergence.baseconvergence method)": [[93, "torchtree.optim.convergence.BaseConvergence.check"]], "check() (torchtree.optim.convergence.stanvariationalconvergence method)": [[93, "torchtree.optim.convergence.StanVariationalConvergence.check"]], "check() (torchtree.optim.convergence.variationalconvergence method)": [[93, "torchtree.optim.convergence.VariationalConvergence.check"]], "from_json() (torchtree.optim.convergence.stanvariationalconvergence class method)": [[93, "torchtree.optim.convergence.StanVariationalConvergence.from_json"]], "from_json() (torchtree.optim.convergence.variationalconvergence class method)": [[93, "torchtree.optim.convergence.VariationalConvergence.from_json"]], "rel_difference() (torchtree.optim.convergence.stanvariationalconvergence static method)": [[93, "torchtree.optim.convergence.StanVariationalConvergence.rel_difference"]], "torchtree.optim.convergence": [[93, "module-torchtree.optim.convergence"], [196, "module-torchtree.optim.convergence"]], "torchtree.optim": [[94, "module-torchtree.optim"], [195, "module-torchtree.optim"]], "scheduler (class in torchtree.optim.lr_scheduler)": [[95, "torchtree.optim.lr_scheduler.Scheduler"]], "from_json() (torchtree.optim.lr_scheduler.scheduler class method)": [[95, "torchtree.optim.lr_scheduler.Scheduler.from_json"]], "step() (torchtree.optim.lr_scheduler.scheduler method)": [[95, "torchtree.optim.lr_scheduler.Scheduler.step"]], "torchtree.optim.lr_scheduler": [[95, "module-torchtree.optim.lr_scheduler"], [197, "module-torchtree.optim.lr_scheduler"]], "optimizer (class in torchtree.optim.optimizer)": [[96, "torchtree.optim.optimizer.Optimizer"]], "from_json() (torchtree.optim.optimizer.optimizer class method)": [[96, "torchtree.optim.optimizer.Optimizer.from_json"]], "run() (torchtree.optim.optimizer.optimizer method)": [[96, "torchtree.optim.optimizer.Optimizer.run"]], "torchtree.optim.optimizer": [[96, "module-torchtree.optim.optimizer"], [198, "module-torchtree.optim.optimizer"]], "main() (in module torchtree.torchtree)": [[97, "torchtree.torchtree.main"]], "torchtree.torchtree": [[97, "module-torchtree.torchtree"]], "regression() (in module torchtree.treeregression)": [[98, "torchtree.treeregression.regression"]], "torchtree.treeregression": [[98, "module-torchtree.treeregression"]], "id (in module torchtree.typing)": [[99, "torchtree.typing.ID"]], "listparameter (in module torchtree.typing)": [[99, "torchtree.typing.ListParameter"]], "listtensor (in module torchtree.typing)": [[99, "torchtree.typing.ListTensor"]], "ordereddicttype (in module torchtree.typing)": [[99, "torchtree.typing.OrderedDictType"]], "torchtree.typing": [[99, "module-torchtree.typing"]], "cubo (class in torchtree.variational.chi)": [[100, "torchtree.variational.chi.CUBO"]], "from_json() (torchtree.variational.chi.cubo class method)": [[100, "torchtree.variational.chi.CUBO.from_json"]], "handle_parameter_changed() (torchtree.variational.chi.cubo method)": [[100, "torchtree.variational.chi.CUBO.handle_parameter_changed"]], "torchtree.variational.chi": [[100, "module-torchtree.variational.chi"], [200, "module-torchtree.variational.chi"]], "torchtree.variational": [[101, "module-torchtree.variational"], [199, "module-torchtree.variational"]], "elbo (class in torchtree.variational.kl)": [[102, "torchtree.variational.kl.ELBO"]], "klpq (class in torchtree.variational.kl)": [[102, "torchtree.variational.kl.KLpq"]], "klpqimportance (class in torchtree.variational.kl)": [[102, "torchtree.variational.kl.KLpqImportance"]], "selbo (class in torchtree.variational.kl)": [[102, "torchtree.variational.kl.SELBO"]], "from_json() (torchtree.variational.kl.elbo class method)": [[102, "torchtree.variational.kl.ELBO.from_json"]], "from_json() (torchtree.variational.kl.klpq class method)": [[102, "torchtree.variational.kl.KLpq.from_json"]], "from_json() (torchtree.variational.kl.klpqimportance class method)": [[102, "torchtree.variational.kl.KLpqImportance.from_json"]], "from_json() (torchtree.variational.kl.selbo class method)": [[102, "torchtree.variational.kl.SELBO.from_json"]], "handle_parameter_changed() (torchtree.variational.kl.elbo method)": [[102, "torchtree.variational.kl.ELBO.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.variational.kl.klpq method)": [[102, "torchtree.variational.kl.KLpq.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.variational.kl.klpqimportance method)": [[102, "torchtree.variational.kl.KLpqImportance.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.variational.kl.selbo method)": [[102, "torchtree.variational.kl.SELBO.handle_parameter_changed"]], "torchtree.variational.kl": [[102, "module-torchtree.variational.kl"], [201, "module-torchtree.variational.kl"]], "vr (class in torchtree.variational.renyi)": [[103, "torchtree.variational.renyi.VR"]], "from_json() (torchtree.variational.renyi.vr class method)": [[103, "torchtree.variational.renyi.VR.from_json"]], "handle_parameter_changed() (torchtree.variational.renyi.vr method)": [[103, "torchtree.variational.renyi.VR.handle_parameter_changed"]], "torchtree.variational.renyi": [[103, "module-torchtree.variational.renyi"], [202, "module-torchtree.variational.renyi"]]}})