Search.setIndex({"docnames": ["autoapi/torchtree/_version/index", "autoapi/torchtree/cli/advi/index", "autoapi/torchtree/cli/cli/index", "autoapi/torchtree/cli/evolution/index", "autoapi/torchtree/cli/hmc/index", "autoapi/torchtree/cli/index", "autoapi/torchtree/cli/jacobians/index", "autoapi/torchtree/cli/loggers/index", "autoapi/torchtree/cli/map/index", "autoapi/torchtree/cli/mcmc/index", "autoapi/torchtree/cli/operators/index", "autoapi/torchtree/cli/plugin/index", "autoapi/torchtree/cli/plugin_manager/index", "autoapi/torchtree/cli/priors/index", "autoapi/torchtree/cli/utils/index", "autoapi/torchtree/core/abstractparameter/index", "autoapi/torchtree/core/classproperty_decorator/index", "autoapi/torchtree/core/container/index", "autoapi/torchtree/core/identifiable/index", "autoapi/torchtree/core/index", "autoapi/torchtree/core/logger/index", "autoapi/torchtree/core/model/index", "autoapi/torchtree/core/parameter/index", "autoapi/torchtree/core/parameter_encoder/index", "autoapi/torchtree/core/parameter_utils/index", "autoapi/torchtree/core/parametric/index", "autoapi/torchtree/core/runnable/index", "autoapi/torchtree/core/serializable/index", "autoapi/torchtree/core/utils/index", "autoapi/torchtree/distributions/bayesian_bridge/index", "autoapi/torchtree/distributions/ctmc_scale/index", "autoapi/torchtree/distributions/deterministic_normal/index", "autoapi/torchtree/distributions/distributions/index", "autoapi/torchtree/distributions/gmrf/index", "autoapi/torchtree/distributions/gmrf_integrated/index", "autoapi/torchtree/distributions/index", "autoapi/torchtree/distributions/inverse_gamma/index", "autoapi/torchtree/distributions/joint_distribution/index", "autoapi/torchtree/distributions/log_normal/index", "autoapi/torchtree/distributions/multivariate_normal/index", "autoapi/torchtree/distributions/normal/index", "autoapi/torchtree/distributions/one_on_x/index", "autoapi/torchtree/distributions/scale_mixture/index", "autoapi/torchtree/distributions/transforms/index", "autoapi/torchtree/distributions/tree_prior/index", "autoapi/torchtree/evolution/alignment/index", "autoapi/torchtree/evolution/attribute_pattern/index", "autoapi/torchtree/evolution/bdsk/index", "autoapi/torchtree/evolution/birth_death/index", "autoapi/torchtree/evolution/branch_model/index", "autoapi/torchtree/evolution/coalescent/index", "autoapi/torchtree/evolution/datatype/index", "autoapi/torchtree/evolution/index", "autoapi/torchtree/evolution/io/index", "autoapi/torchtree/evolution/poisson_tree_likelihood/index", "autoapi/torchtree/evolution/rate_transform/index", "autoapi/torchtree/evolution/root_transform/index", "autoapi/torchtree/evolution/site_model/index", "autoapi/torchtree/evolution/site_pattern/index", "autoapi/torchtree/evolution/substitution_model/abstract/index", "autoapi/torchtree/evolution/substitution_model/amino_acid/index", "autoapi/torchtree/evolution/substitution_model/codon/index", "autoapi/torchtree/evolution/substitution_model/general/index", "autoapi/torchtree/evolution/substitution_model/index", "autoapi/torchtree/evolution/substitution_model/nucleotide/index", "autoapi/torchtree/evolution/taxa/index", "autoapi/torchtree/evolution/tree_height_transform/index", "autoapi/torchtree/evolution/tree_likelihood/index", "autoapi/torchtree/evolution/tree_model/index", "autoapi/torchtree/evolution/tree_model_flexible/index", "autoapi/torchtree/index", "autoapi/torchtree/inference/hmc/adaptation/index", "autoapi/torchtree/inference/hmc/adaptors/index", "autoapi/torchtree/inference/hmc/hamiltonian/index", "autoapi/torchtree/inference/hmc/hmc/index", "autoapi/torchtree/inference/hmc/index", "autoapi/torchtree/inference/hmc/integrator/index", "autoapi/torchtree/inference/hmc/operator/index", "autoapi/torchtree/inference/hmc/stan_adaptation/index", "autoapi/torchtree/inference/index", "autoapi/torchtree/inference/mcmc/index", "autoapi/torchtree/inference/mcmc/mcmc/index", "autoapi/torchtree/inference/mcmc/operator/index", "autoapi/torchtree/inference/sampler/index", "autoapi/torchtree/inference/utils/index", "autoapi/torchtree/math/index", "autoapi/torchtree/nf/energy_functions/index", "autoapi/torchtree/nf/flow/index", "autoapi/torchtree/nf/index", "autoapi/torchtree/nf/planar/index", "autoapi/torchtree/nf/realnvp/index", "autoapi/torchtree/nn/index", "autoapi/torchtree/nn/module/index", "autoapi/torchtree/ops/dual_averaging/index", "autoapi/torchtree/ops/index", "autoapi/torchtree/ops/welford/index", "autoapi/torchtree/optim/convergence/index", "autoapi/torchtree/optim/index", "autoapi/torchtree/optim/lr_scheduler/index", "autoapi/torchtree/optim/optimizer/index", "autoapi/torchtree/torchtree/index", "autoapi/torchtree/treeregression/index", "autoapi/torchtree/typing/index", "autoapi/torchtree/variational/chi/index", "autoapi/torchtree/variational/index", "autoapi/torchtree/variational/kl/index", "autoapi/torchtree/variational/renyi/index", "bibliography/bib", "index", "modules/torchtree", "modules/torchtree.cli", "modules/torchtree.cli.advi", "modules/torchtree.cli.cli", "modules/torchtree.cli.evolution", "modules/torchtree.cli.hmc", "modules/torchtree.cli.jacobians", "modules/torchtree.cli.loggers", "modules/torchtree.cli.map", "modules/torchtree.cli.mcmc", "modules/torchtree.cli.operators", "modules/torchtree.cli.plugin", "modules/torchtree.cli.plugin_manager", "modules/torchtree.cli.priors", "modules/torchtree.cli.utils", "modules/torchtree.core", "modules/torchtree.core.abstractparameter", "modules/torchtree.core.classproperty_decorator", "modules/torchtree.core.container", "modules/torchtree.core.identifiable", "modules/torchtree.core.logger", "modules/torchtree.core.model", "modules/torchtree.core.parameter", "modules/torchtree.core.parameter_encoder", "modules/torchtree.core.parameter_utils", "modules/torchtree.core.parametric", "modules/torchtree.core.runnable", "modules/torchtree.core.serializable", "modules/torchtree.core.utils", "modules/torchtree.distributions", "modules/torchtree.distributions.bayesian_bridge", "modules/torchtree.distributions.ctmc_scale", "modules/torchtree.distributions.deterministic_normal", "modules/torchtree.distributions.distributions", "modules/torchtree.distributions.gmrf", "modules/torchtree.distributions.gmrf_integrated", "modules/torchtree.distributions.inverse_gamma", "modules/torchtree.distributions.joint_distribution", "modules/torchtree.distributions.log_normal", "modules/torchtree.distributions.multivariate_normal", "modules/torchtree.distributions.normal", "modules/torchtree.distributions.one_on_x", "modules/torchtree.distributions.scale_mixture", "modules/torchtree.distributions.transforms", "modules/torchtree.distributions.tree_prior", "modules/torchtree.evolution", "modules/torchtree.evolution.alignment", "modules/torchtree.evolution.attribute_pattern", "modules/torchtree.evolution.bdsk", "modules/torchtree.evolution.birth_death", "modules/torchtree.evolution.branch_model", "modules/torchtree.evolution.coalescent", "modules/torchtree.evolution.datatype", "modules/torchtree.evolution.io", "modules/torchtree.evolution.poisson_tree_likelihood", "modules/torchtree.evolution.rate_transform", "modules/torchtree.evolution.root_transform", "modules/torchtree.evolution.site_model", "modules/torchtree.evolution.site_pattern", "modules/torchtree.evolution.substitution_model", "modules/torchtree.evolution.substitution_model.abstract", "modules/torchtree.evolution.substitution_model.amino_acid", "modules/torchtree.evolution.substitution_model.codon", "modules/torchtree.evolution.substitution_model.general", "modules/torchtree.evolution.substitution_model.nucleotide", "modules/torchtree.evolution.taxa", "modules/torchtree.evolution.tree_height_transform", "modules/torchtree.evolution.tree_likelihood", "modules/torchtree.evolution.tree_model", "modules/torchtree.evolution.tree_model_flexible", "modules/torchtree.inference", "modules/torchtree.inference.hmc", "modules/torchtree.inference.hmc.adaptation", "modules/torchtree.inference.hmc.adaptors", "modules/torchtree.inference.hmc.hamiltonian", "modules/torchtree.inference.hmc.hmc", "modules/torchtree.inference.hmc.integrator", "modules/torchtree.inference.hmc.operator", "modules/torchtree.inference.hmc.stan_adaptation", "modules/torchtree.inference.mcmc", "modules/torchtree.inference.mcmc.mcmc", "modules/torchtree.inference.mcmc.operator", "modules/torchtree.inference.sampler", "modules/torchtree.inference.utils", "modules/torchtree.math", "modules/torchtree.nf", "modules/torchtree.nf.energy_functions", "modules/torchtree.nf.flow", "modules/torchtree.nf.planar", "modules/torchtree.nf.realnvp", "modules/torchtree.nn", "modules/torchtree.nn.module", "modules/torchtree.ops", "modules/torchtree.ops.dual_averaging", "modules/torchtree.ops.welford", "modules/torchtree.optim", "modules/torchtree.optim.convergence", "modules/torchtree.optim.lr_scheduler", "modules/torchtree.optim.optimizer", "modules/torchtree.torchtree", "modules/torchtree.treeregression", "modules/torchtree.typing", "modules/torchtree.variational", "modules/torchtree.variational.chi", "modules/torchtree.variational.kl", "modules/torchtree.variational.renyi"], "filenames": ["autoapi/torchtree/_version/index.rst", "autoapi/torchtree/cli/advi/index.rst", "autoapi/torchtree/cli/cli/index.rst", "autoapi/torchtree/cli/evolution/index.rst", "autoapi/torchtree/cli/hmc/index.rst", "autoapi/torchtree/cli/index.rst", "autoapi/torchtree/cli/jacobians/index.rst", "autoapi/torchtree/cli/loggers/index.rst", "autoapi/torchtree/cli/map/index.rst", "autoapi/torchtree/cli/mcmc/index.rst", "autoapi/torchtree/cli/operators/index.rst", "autoapi/torchtree/cli/plugin/index.rst", "autoapi/torchtree/cli/plugin_manager/index.rst", "autoapi/torchtree/cli/priors/index.rst", "autoapi/torchtree/cli/utils/index.rst", "autoapi/torchtree/core/abstractparameter/index.rst", "autoapi/torchtree/core/classproperty_decorator/index.rst", "autoapi/torchtree/core/container/index.rst", "autoapi/torchtree/core/identifiable/index.rst", "autoapi/torchtree/core/index.rst", "autoapi/torchtree/core/logger/index.rst", "autoapi/torchtree/core/model/index.rst", "autoapi/torchtree/core/parameter/index.rst", "autoapi/torchtree/core/parameter_encoder/index.rst", "autoapi/torchtree/core/parameter_utils/index.rst", "autoapi/torchtree/core/parametric/index.rst", "autoapi/torchtree/core/runnable/index.rst", "autoapi/torchtree/core/serializable/index.rst", "autoapi/torchtree/core/utils/index.rst", "autoapi/torchtree/distributions/bayesian_bridge/index.rst", "autoapi/torchtree/distributions/ctmc_scale/index.rst", "autoapi/torchtree/distributions/deterministic_normal/index.rst", "autoapi/torchtree/distributions/distributions/index.rst", "autoapi/torchtree/distributions/gmrf/index.rst", "autoapi/torchtree/distributions/gmrf_integrated/index.rst", "autoapi/torchtree/distributions/index.rst", "autoapi/torchtree/distributions/inverse_gamma/index.rst", "autoapi/torchtree/distributions/joint_distribution/index.rst", "autoapi/torchtree/distributions/log_normal/index.rst", "autoapi/torchtree/distributions/multivariate_normal/index.rst", "autoapi/torchtree/distributions/normal/index.rst", "autoapi/torchtree/distributions/one_on_x/index.rst", "autoapi/torchtree/distributions/scale_mixture/index.rst", "autoapi/torchtree/distributions/transforms/index.rst", "autoapi/torchtree/distributions/tree_prior/index.rst", "autoapi/torchtree/evolution/alignment/index.rst", "autoapi/torchtree/evolution/attribute_pattern/index.rst", "autoapi/torchtree/evolution/bdsk/index.rst", "autoapi/torchtree/evolution/birth_death/index.rst", "autoapi/torchtree/evolution/branch_model/index.rst", "autoapi/torchtree/evolution/coalescent/index.rst", "autoapi/torchtree/evolution/datatype/index.rst", "autoapi/torchtree/evolution/index.rst", "autoapi/torchtree/evolution/io/index.rst", "autoapi/torchtree/evolution/poisson_tree_likelihood/index.rst", "autoapi/torchtree/evolution/rate_transform/index.rst", "autoapi/torchtree/evolution/root_transform/index.rst", "autoapi/torchtree/evolution/site_model/index.rst", "autoapi/torchtree/evolution/site_pattern/index.rst", "autoapi/torchtree/evolution/substitution_model/abstract/index.rst", "autoapi/torchtree/evolution/substitution_model/amino_acid/index.rst", "autoapi/torchtree/evolution/substitution_model/codon/index.rst", "autoapi/torchtree/evolution/substitution_model/general/index.rst", "autoapi/torchtree/evolution/substitution_model/index.rst", "autoapi/torchtree/evolution/substitution_model/nucleotide/index.rst", "autoapi/torchtree/evolution/taxa/index.rst", "autoapi/torchtree/evolution/tree_height_transform/index.rst", "autoapi/torchtree/evolution/tree_likelihood/index.rst", "autoapi/torchtree/evolution/tree_model/index.rst", "autoapi/torchtree/evolution/tree_model_flexible/index.rst", "autoapi/torchtree/index.rst", "autoapi/torchtree/inference/hmc/adaptation/index.rst", "autoapi/torchtree/inference/hmc/adaptors/index.rst", "autoapi/torchtree/inference/hmc/hamiltonian/index.rst", "autoapi/torchtree/inference/hmc/hmc/index.rst", "autoapi/torchtree/inference/hmc/index.rst", "autoapi/torchtree/inference/hmc/integrator/index.rst", "autoapi/torchtree/inference/hmc/operator/index.rst", "autoapi/torchtree/inference/hmc/stan_adaptation/index.rst", "autoapi/torchtree/inference/index.rst", "autoapi/torchtree/inference/mcmc/index.rst", "autoapi/torchtree/inference/mcmc/mcmc/index.rst", "autoapi/torchtree/inference/mcmc/operator/index.rst", "autoapi/torchtree/inference/sampler/index.rst", "autoapi/torchtree/inference/utils/index.rst", "autoapi/torchtree/math/index.rst", "autoapi/torchtree/nf/energy_functions/index.rst", "autoapi/torchtree/nf/flow/index.rst", "autoapi/torchtree/nf/index.rst", "autoapi/torchtree/nf/planar/index.rst", "autoapi/torchtree/nf/realnvp/index.rst", "autoapi/torchtree/nn/index.rst", "autoapi/torchtree/nn/module/index.rst", "autoapi/torchtree/ops/dual_averaging/index.rst", "autoapi/torchtree/ops/index.rst", "autoapi/torchtree/ops/welford/index.rst", "autoapi/torchtree/optim/convergence/index.rst", "autoapi/torchtree/optim/index.rst", "autoapi/torchtree/optim/lr_scheduler/index.rst", "autoapi/torchtree/optim/optimizer/index.rst", "autoapi/torchtree/torchtree/index.rst", "autoapi/torchtree/treeregression/index.rst", "autoapi/torchtree/typing/index.rst", "autoapi/torchtree/variational/chi/index.rst", "autoapi/torchtree/variational/index.rst", "autoapi/torchtree/variational/kl/index.rst", "autoapi/torchtree/variational/renyi/index.rst", "bibliography/bib.rst", "index.rst", "modules/torchtree.rst", "modules/torchtree.cli.rst", "modules/torchtree.cli.advi.rst", "modules/torchtree.cli.cli.rst", "modules/torchtree.cli.evolution.rst", "modules/torchtree.cli.hmc.rst", "modules/torchtree.cli.jacobians.rst", "modules/torchtree.cli.loggers.rst", "modules/torchtree.cli.map.rst", "modules/torchtree.cli.mcmc.rst", "modules/torchtree.cli.operators.rst", "modules/torchtree.cli.plugin.rst", "modules/torchtree.cli.plugin_manager.rst", "modules/torchtree.cli.priors.rst", "modules/torchtree.cli.utils.rst", "modules/torchtree.core.rst", "modules/torchtree.core.abstractparameter.rst", "modules/torchtree.core.classproperty_decorator.rst", "modules/torchtree.core.container.rst", "modules/torchtree.core.identifiable.rst", "modules/torchtree.core.logger.rst", "modules/torchtree.core.model.rst", "modules/torchtree.core.parameter.rst", "modules/torchtree.core.parameter_encoder.rst", "modules/torchtree.core.parameter_utils.rst", "modules/torchtree.core.parametric.rst", "modules/torchtree.core.runnable.rst", "modules/torchtree.core.serializable.rst", "modules/torchtree.core.utils.rst", "modules/torchtree.distributions.rst", "modules/torchtree.distributions.bayesian_bridge.rst", "modules/torchtree.distributions.ctmc_scale.rst", "modules/torchtree.distributions.deterministic_normal.rst", "modules/torchtree.distributions.distributions.rst", "modules/torchtree.distributions.gmrf.rst", "modules/torchtree.distributions.gmrf_integrated.rst", "modules/torchtree.distributions.inverse_gamma.rst", "modules/torchtree.distributions.joint_distribution.rst", "modules/torchtree.distributions.log_normal.rst", "modules/torchtree.distributions.multivariate_normal.rst", "modules/torchtree.distributions.normal.rst", "modules/torchtree.distributions.one_on_x.rst", "modules/torchtree.distributions.scale_mixture.rst", "modules/torchtree.distributions.transforms.rst", "modules/torchtree.distributions.tree_prior.rst", "modules/torchtree.evolution.rst", "modules/torchtree.evolution.alignment.rst", "modules/torchtree.evolution.attribute_pattern.rst", "modules/torchtree.evolution.bdsk.rst", "modules/torchtree.evolution.birth_death.rst", "modules/torchtree.evolution.branch_model.rst", "modules/torchtree.evolution.coalescent.rst", "modules/torchtree.evolution.datatype.rst", "modules/torchtree.evolution.io.rst", "modules/torchtree.evolution.poisson_tree_likelihood.rst", "modules/torchtree.evolution.rate_transform.rst", "modules/torchtree.evolution.root_transform.rst", "modules/torchtree.evolution.site_model.rst", "modules/torchtree.evolution.site_pattern.rst", "modules/torchtree.evolution.substitution_model.rst", "modules/torchtree.evolution.substitution_model.abstract.rst", "modules/torchtree.evolution.substitution_model.amino_acid.rst", "modules/torchtree.evolution.substitution_model.codon.rst", "modules/torchtree.evolution.substitution_model.general.rst", "modules/torchtree.evolution.substitution_model.nucleotide.rst", "modules/torchtree.evolution.taxa.rst", "modules/torchtree.evolution.tree_height_transform.rst", "modules/torchtree.evolution.tree_likelihood.rst", "modules/torchtree.evolution.tree_model.rst", "modules/torchtree.evolution.tree_model_flexible.rst", "modules/torchtree.inference.rst", "modules/torchtree.inference.hmc.rst", "modules/torchtree.inference.hmc.adaptation.rst", "modules/torchtree.inference.hmc.adaptors.rst", "modules/torchtree.inference.hmc.hamiltonian.rst", "modules/torchtree.inference.hmc.hmc.rst", "modules/torchtree.inference.hmc.integrator.rst", "modules/torchtree.inference.hmc.operator.rst", "modules/torchtree.inference.hmc.stan_adaptation.rst", "modules/torchtree.inference.mcmc.rst", "modules/torchtree.inference.mcmc.mcmc.rst", "modules/torchtree.inference.mcmc.operator.rst", "modules/torchtree.inference.sampler.rst", "modules/torchtree.inference.utils.rst", "modules/torchtree.math.rst", "modules/torchtree.nf.rst", "modules/torchtree.nf.energy_functions.rst", "modules/torchtree.nf.flow.rst", "modules/torchtree.nf.planar.rst", "modules/torchtree.nf.realnvp.rst", "modules/torchtree.nn.rst", "modules/torchtree.nn.module.rst", "modules/torchtree.ops.rst", "modules/torchtree.ops.dual_averaging.rst", "modules/torchtree.ops.welford.rst", "modules/torchtree.optim.rst", "modules/torchtree.optim.convergence.rst", "modules/torchtree.optim.lr_scheduler.rst", "modules/torchtree.optim.optimizer.rst", "modules/torchtree.torchtree.rst", "modules/torchtree.treeregression.rst", "modules/torchtree.typing.rst", "modules/torchtree.variational.rst", "modules/torchtree.variational.chi.rst", "modules/torchtree.variational.kl.rst", "modules/torchtree.variational.renyi.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree._version</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.advi</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.cli</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.evolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.hmc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.jacobians</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.loggers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.mcmc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.plugin</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.plugin_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.priors</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.cli.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.abstractparameter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.classproperty_decorator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.container</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.identifiable</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.parameter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.parameter_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.parameter_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.parametric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.runnable</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.serializable</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.core.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.bayesian_bridge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.ctmc_scale</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.deterministic_normal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.distributions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.gmrf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.gmrf_integrated</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.inverse_gamma</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.joint_distribution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.log_normal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.multivariate_normal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.normal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.one_on_x</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.scale_mixture</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.distributions.tree_prior</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.alignment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.attribute_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.bdsk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.birth_death</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.branch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.coalescent</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.datatype</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.io</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.poisson_tree_likelihood</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.rate_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.root_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.site_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.site_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.substitution_model.abstract</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.substitution_model.amino_acid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.substitution_model.codon</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.substitution_model.general</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.substitution_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.substitution_model.nucleotide</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.taxa</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.tree_height_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.tree_likelihood</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.tree_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.evolution.tree_model_flexible</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.hmc.adaptation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.hmc.adaptors</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.hmc.hamiltonian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.hmc.hmc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.hmc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.hmc.integrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.hmc.operator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.hmc.stan_adaptation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.mcmc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.mcmc.mcmc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.mcmc.operator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.inference.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.nf.energy_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.nf.flow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.nf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.nf.planar</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.nf.realnvp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.nn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.nn.module</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.ops.dual_averaging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.ops.welford</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.optim.convergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.optim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.optim.lr_scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.optim.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.torchtree</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.treeregression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.typing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.variational.chi</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.variational</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.variational.kl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">torchtree.variational.renyi</span></code>", "Bibliography", "Welcome to torchtree\u2019s documentation!", "torchtree", "torchtree.cli", "torchtree.cli.advi", "torchtree.cli.cli", "torchtree.cli.evolution", "torchtree.cli.hmc", "torchtree.cli.jacobians", "torchtree.cli.loggers", "torchtree.cli.map", "torchtree.cli.mcmc", "torchtree.cli.operators", "torchtree.cli.plugin", "torchtree.cli.plugin_manager", "torchtree.cli.priors", "torchtree.cli.utils", "torchtree.core", "torchtree.core.abstractparameter", "torchtree.core.classproperty_decorator", "torchtree.core.container", "torchtree.core.identifiable", "torchtree.core.logger", "torchtree.core.model", "torchtree.core.parameter", "torchtree.core.parameter_encoder", "torchtree.core.parameter_utils", "torchtree.core.parametric", "torchtree.core.runnable", "torchtree.core.serializable", "torchtree.core.utils", "torchtree.distributions", "torchtree.distributions.bayesian_bridge", "torchtree.distributions.ctmc_scale", "torchtree.distributions.deterministic_normal", "torchtree.distributions.distributions", "torchtree.distributions.gmrf", "torchtree.distributions.gmrf_integrated", "torchtree.distributions.inverse_gamma", "torchtree.distributions.joint_distribution", "torchtree.distributions.log_normal", "torchtree.distributions.multivariate_normal", "torchtree.distributions.normal", "torchtree.distributions.one_on_x", "torchtree.distributions.scale_mixture", "torchtree.distributions.transforms", "torchtree.distributions.tree_prior", "torchtree.evolution", "torchtree.evolution.alignment", "torchtree.evolution.attribute_pattern", "torchtree.evolution.bdsk", "torchtree.evolution.birth_death", "torchtree.evolution.branch_model", "torchtree.evolution.coalescent", "torchtree.evolution.datatype", "torchtree.evolution.io", "torchtree.evolution.poisson_tree_likelihood", "torchtree.evolution.rate_transform", "torchtree.evolution.root_transform", "torchtree.evolution.site_model", "torchtree.evolution.site_pattern", "torchtree.evolution.substitution_model", "torchtree.evolution.substitution_model.abstract", "torchtree.evolution.substitution_model.amino_acid", "torchtree.evolution.substitution_model.codon", "torchtree.evolution.substitution_model.general", "torchtree.evolution.substitution_model.nucleotide", "torchtree.evolution.taxa", "torchtree.evolution.tree_height_transform", "torchtree.evolution.tree_likelihood", "torchtree.evolution.tree_model", "torchtree.evolution.tree_model_flexible", "torchtree.inference", "torchtree.inference.hmc", "torchtree.inference.hmc.adaptation", "torchtree.inference.hmc.adaptors", "torchtree.inference.hmc.hamiltonian", "torchtree.inference.hmc.hmc", "torchtree.inference.hmc.integrator", "torchtree.inference.hmc.operator", "torchtree.inference.hmc.stan_adaptation", "torchtree.inference.mcmc", "torchtree.inference.mcmc.mcmc", "torchtree.inference.mcmc.operator", "torchtree.inference.sampler", "torchtree.inference.utils", "torchtree.math", "torchtree.nf", "torchtree.nf.energy_functions", "torchtree.nf.flow", "torchtree.nf.planar", "torchtree.nf.realnvp", "torchtree.nn", "torchtree.nn.module", "torchtree.ops", "torchtree.ops.dual_averaging", "torchtree.ops.welford", "torchtree.optim", "torchtree.optim.convergence", "torchtree.optim.lr_scheduler", "torchtree.optim.optimizer", "torchtree.torchtree", "torchtree.treeregression", "torchtree.typing", "torchtree.variational", "torchtree.variational.chi", "torchtree.variational.kl", "torchtree.variational.renyi"], "terms": {"version": [0, 29], "inform": [0, 42, 107], "number": [0, 3, 22, 23, 28, 29, 47, 56, 67, 78, 83, 96, 99, 103, 105, 106], "major": 0, "minor": 0, "patch": 0, "label": 0, "logger": [1, 3, 5, 19, 70, 83], "create_variational_pars": 1, "subpras": [1, 4, 8, 9], "create_tril": 1, "scale": [1, 29, 30, 31, 32, 38, 39, 40, 42, 55, 57, 89, 140, 147, 151], "torch": [1, 15, 21, 22, 24, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 43, 46, 47, 48, 49, 50, 53, 55, 56, 57, 58, 59, 61, 62, 64, 66, 67, 68, 71, 73, 76, 77, 78, 82, 85, 87, 89, 90, 91, 92, 95, 96, 98, 99, 103, 105, 106, 152, 199], "tensor": [1, 15, 22, 24, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 53, 55, 56, 57, 58, 59, 61, 62, 64, 67, 68, 71, 73, 76, 77, 78, 82, 84, 85, 87, 89, 90, 95, 103], "creat": [1, 5, 11, 17, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 54, 56, 57, 58, 60, 61, 62, 64, 65, 67, 68, 69, 71, 73, 74, 76, 77, 78, 81, 82, 83, 86, 87, 90, 92, 96, 98, 99, 103, 105, 106, 110], "1": [1, 22, 28, 29, 30, 32, 33, 34, 40, 41, 42, 43, 47, 50, 51, 53, 66, 67, 85, 89, 103, 105, 106], "diment": 1, "contain": [1, 5, 6, 19, 20, 21, 22, 27, 29, 30, 31, 32, 33, 34, 35, 37, 39, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 64, 65, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 90, 92, 94, 96, 97, 98, 99, 103, 104, 105, 106, 110, 124, 138, 154, 179, 194, 201, 204, 211], "flatten": 1, "tridiagon": 1, "matrix": [1, 43, 78, 85], "A": [1, 21, 22, 29, 30, 33, 37, 43, 46, 47, 48, 49, 57, 58, 59, 60, 61, 62, 64, 68, 69, 85, 98, 99, 107], "covari": [1, 33, 39, 107], "i": [1, 3, 15, 16, 21, 22, 29, 33, 34, 36, 42, 43, 46, 47, 48, 49, 50, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 70, 73, 86, 89, 96, 105, 109], "us": [1, 3, 11, 16, 21, 22, 25, 26, 28, 31, 32, 33, 34, 39, 43, 50, 54, 56, 58, 66, 67, 68, 71, 73, 86, 89, 96, 105], "2": [1, 22, 28, 29, 32, 33, 34, 40, 42, 43, 53, 67, 85, 105, 107], "varianc": [1, 95], "ar": [1, 21, 22, 29, 30, 31, 32, 33, 37, 39, 47, 50, 67, 68, 73, 86, 87, 89, 90, 107], "set": [1, 15, 16, 22, 33, 56], "zero": [1, 22, 33, 47], "choleski": 1, "decomposit": 1, "diagon": [1, 22, 43], "element": 1, "replac": [1, 28], "log": [1, 20, 22, 31, 32, 37, 38, 39, 41, 43, 47, 48, 50, 55, 66, 67, 83, 87, 90], "paramet": [1, 3, 4, 6, 7, 8, 9, 10, 14, 15, 17, 18, 19, 20, 21, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 58, 59, 60, 61, 62, 64, 65, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 89, 90, 92, 96, 98, 99, 103, 105, 106, 125], "standard": [1, 11, 25, 26, 31, 38, 40, 105], "deviat": [1, 38, 40], "return": [1, 6, 14, 15, 16, 17, 18, 20, 21, 22, 23, 25, 27, 28, 30, 31, 32, 36, 37, 39, 41, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 58, 60, 61, 62, 64, 65, 67, 68, 69, 71, 73, 74, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 90, 92, 96, 98, 99, 103, 105, 106], "create_fullrank_from_meanfield": 1, "param": [1, 14, 17, 74, 84], "path": [1, 24, 53], "create_fullrank": 1, "var_id": 1, "json_object": [1, 14, 28], "arg": [1, 3, 4, 7, 8, 9, 10, 11, 15, 20, 21, 22, 30, 36, 41, 47, 48, 50, 87, 90, 92, 96, 98], "create_flexible_vari": 1, "create_realnp_distribut": 1, "str": [1, 3, 6, 7, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 37, 39, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 58, 60, 61, 62, 64, 65, 67, 68, 69, 71, 73, 74, 76, 77, 78, 81, 82, 83, 84, 86, 87, 90, 92, 96, 98, 99, 103, 105, 106], "x": [1, 16, 22, 29, 30, 31, 32, 33, 34, 37, 39, 40, 41, 42, 43, 55, 66, 86, 87, 89, 90, 95, 150], "create_realnvp": 1, "gather_paramet": 1, "dict": [1, 3, 6, 7, 14, 17, 20, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 37, 39, 42, 44, 45, 46, 47, 48, 49, 50, 51, 54, 56, 57, 58, 60, 61, 62, 64, 65, 67, 68, 69, 71, 73, 74, 76, 77, 78, 81, 82, 83, 84, 86, 87, 90, 96, 98, 99, 103, 105, 106], "group_map": 1, "apply_sigmoid_transform": 1, "valu": [1, 3, 16, 20, 21, 22, 28, 31, 32, 34, 37, 39, 41, 47, 48, 50, 57, 67, 73, 77, 82, 85, 86, 87, 90, 96], "none": [1, 3, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 58, 61, 62, 64, 65, 66, 67, 68, 71, 73, 74, 76, 77, 78, 81, 82, 83, 86, 87, 90, 92, 93, 95, 96, 98, 99, 103, 105, 106], "apply_affine_transform": 1, "loc": [1, 31, 32, 39, 40, 42], "apply_exp_transform": 1, "apply_simplex_transform": 1, "create_normal_distribut": 1, "x_unr": 1, "create_gamma_distribut": 1, "concentr": [1, 36, 44, 145], "rate": [1, 29, 30, 32, 34, 36, 44, 47, 48, 49, 50, 55, 56, 57, 62, 64, 67, 107, 145], "create_weibull_distribut": 1, "create_meanfield": 1, "distribut": [1, 3, 22, 28, 47, 48, 50, 55, 66, 70, 83, 87, 90, 103, 105, 106], "tupl": [1, 14, 22, 23, 28, 51, 58, 84, 87], "list": [1, 3, 6, 7, 14, 15, 17, 20, 22, 23, 24, 25, 28, 31, 32, 33, 37, 39, 45, 53, 56, 58, 67, 68, 69, 77, 81, 82, 83, 84, 87, 90, 99, 105], "apply_transforms_for_fullrank": 1, "create_variational_model": 1, "id_": [1, 3, 4, 8, 10, 13, 15, 17, 18, 21, 22, 29, 30, 31, 32, 33, 34, 37, 39, 42, 44, 45, 46, 47, 48, 49, 50, 51, 54, 56, 57, 58, 59, 60, 61, 62, 64, 65, 67, 68, 69, 73, 76, 77, 82, 86, 87, 90, 92, 103, 105, 106], "joint": [1, 4, 8, 9, 10, 31, 37, 73, 74, 77, 81, 103, 105, 106, 146], "create_advi": 1, "variat": [1, 31, 43, 70], "create_logg": [1, 7, 8], "create_sampl": 1, "build_advi": 1, "main": [2, 100], "create_evolution_pars": 3, "parser": 3, "add_birth_death": 3, "add_coalesc": 3, "zero_or_path": 3, "str_or_float": 3, "choic": 3, "argpars": 3, "when": [3, 36, 42, 66, 67], "argument": [3, 22, 32], "can": [3, 20, 21, 22, 29, 46, 49, 56, 57, 58, 59, 60, 61, 62, 64, 66, 68, 69, 83, 87, 92], "either": 3, "string": [3, 23, 28, 29, 32, 33, 34, 42, 51, 53], "from": [3, 17, 21, 22, 27, 29, 30, 31, 32, 33, 34, 37, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 73, 74, 76, 77, 78, 81, 82, 83, 84, 86, 90, 93, 96, 98, 99, 103, 105, 106, 152, 198], "prespecifi": 3, "option": [3, 20, 22, 29, 32, 33, 34, 42, 83, 99], "distribution_typ": 3, "specifi": [3, 22, 29, 33, 34], "run_tree_regress": 3, "taxa": [3, 45, 46, 52, 53, 68, 69, 70], "create_tree_model": 3, "create_poisson_tree_likelihood": 3, "create_tree_likelihood_singl": 3, "tree_model": [3, 20, 30, 33, 34, 44, 47, 48, 49, 50, 52, 54, 55, 66, 67, 69, 70], "branch_model": [3, 52, 54, 67, 70], "substitution_model": [3, 52, 67, 70], "site_model": [3, 52, 67, 70], "site_pattern": [3, 52, 67, 70], "create_tree_likelihood_gener": 3, "trait": 3, "data_typ": [3, 45, 46, 58, 61, 62], "create_tree_likelihood": 3, "align": [3, 52, 53, 58, 70], "create_site_model": 3, "w": [3, 33, 89], "create_site_model_srd06_mu": 3, "is_float": 3, "create_branch_model": 3, "tree_id": [3, 8, 13], "taxa_count": 3, "rate_init": 3, "build_align": 3, "file_nam": [3, 24, 53, 96], "create_substitution_model": 3, "model": [3, 6, 17, 19, 20, 22, 25, 29, 30, 31, 32, 33, 34, 39, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 64, 65, 67, 68, 69, 70, 73, 74, 77, 81, 83, 86, 92, 96, 99, 103, 105, 106, 107, 154], "create_site_pattern": 3, "indic": [3, 22, 58, 85], "create_data_typ": 3, "create_general_data_typ": 3, "create_align": 3, "create_taxa": 3, "create_birth_death": 3, "birth_death_id": 3, "create_constant_birth_death": 3, "create_bdsk": 3, "create_coales": 3, "create_substitution_model_prior": 3, "substmodel_id": 3, "create_ucln_prior": 3, "branch_model_id": [3, 13], "parse_distribut": 3, "desc": [3, 86], "create_clock_prior": 3, "create_evolution_prior": 3, "create_time_tree_prior": 3, "create_bd_prior": 3, "create_constant_bd_prior": 3, "create_bdsk_prior": 3, "create_poisson_evolution_joint": 3, "create_evolution_joint": 3, "get_engin": 3, "import": [3, 105], "cash": 3, "engin": 3, "create_hmc_pars": 4, "create_stan_windowed_adapt": 4, "parameters_unr": [4, 9], "create_hmc_oper": 4, "create_hmc": 4, "build_hmc": 4, "The": [5, 15, 19, 22, 29, 32, 33, 34, 35, 43, 50, 52, 56, 66, 67, 79, 89, 105, 107, 110, 124, 138, 154, 179], "modul": [5, 19, 70, 79, 91, 94, 97, 104, 109, 110, 124, 125, 138, 154, 168, 179, 180, 188, 194, 199, 201, 204, 211], "json": [5, 20, 22, 23, 24, 27, 28, 29, 32, 33, 34, 42, 56, 68, 69, 71, 74, 81, 83, 87, 92, 110], "configur": [5, 110], "file": [5, 20, 24, 53, 110], "through": [5, 110], "command": [5, 110], "line": [5, 110], "interfac": [5, 15, 18, 20, 27, 71, 74, 81, 110, 128, 136], "advi": [5, 70], "evolut": [5, 20, 30, 33, 34, 44, 70], "hmc": [5, 70, 79], "jacobian": [5, 22, 43, 55, 66, 70], "map": [5, 43, 45, 62, 70], "mcmc": [5, 70, 77, 79], "oper": [5, 22, 70, 75, 79, 80, 81, 85], "plugin": [5, 12, 70], "plugin_manag": [5, 70], "prior": [5, 29, 30, 33, 41, 42, 44, 70, 107, 139, 140, 143, 150, 153], "util": [5, 19, 70, 79, 94, 201], "create_jacobian": 6, "dict_def": 6, "ani": [6, 17, 20, 21, 22, 27, 29, 30, 31, 32, 33, 34, 36, 37, 39, 42, 44, 45, 46, 47, 48, 49, 50, 51, 54, 56, 57, 58, 59, 60, 61, 62, 64, 65, 67, 68, 69, 71, 73, 74, 76, 77, 78, 81, 82, 83, 84, 86, 87, 90, 96, 98, 99, 103, 105, 106], "thi": [6, 15, 17, 21, 22, 23, 28, 29, 31, 36, 46, 49, 50, 53, 56, 57, 58, 59, 60, 61, 62, 64, 67, 68, 69, 70, 73, 86, 88, 91, 94, 97, 104, 109, 194, 199, 201, 204, 211], "look": 6, "type": [6, 15, 17, 20, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 37, 39, 42, 44, 45, 46, 47, 48, 49, 50, 51, 54, 56, 57, 58, 59, 60, 61, 62, 64, 65, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 90, 92, 96, 98, 99, 103, 105, 106], "transformedparamet": [6, 22], "id": [6, 14, 17, 18, 20, 22, 27, 29, 30, 31, 32, 33, 34, 37, 39, 42, 44, 45, 46, 47, 48, 49, 50, 51, 54, 56, 57, 58, 59, 60, 61, 62, 64, 65, 67, 68, 69, 71, 73, 74, 76, 77, 78, 81, 82, 86, 87, 90, 92, 96, 98, 99, 102, 103, 105, 106], "dictionari": [6, 17, 20, 22, 27, 29, 30, 31, 32, 33, 34, 37, 39, 42, 44, 45, 46, 47, 48, 49, 50, 51, 54, 56, 57, 58, 60, 61, 62, 64, 65, 67, 68, 69, 71, 73, 74, 76, 77, 78, 81, 82, 83, 84, 86, 87, 90, 92, 96, 98, 99, 103, 105, 106], "specif": [6, 22], "transform": [6, 22, 31, 35, 55, 56, 66, 68, 69, 70, 87, 89, 138], "create_map_pars": 8, "create_optim": 8, "create_tree_logg": 8, "build_optim": 8, "create_mcmc_pars": 9, "create_mcmc": 9, "build_mcmc": 9, "create_scaler_oper": 10, "create_sliding_window_oper": 10, "base": [11, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 73, 74, 76, 77, 78, 81, 82, 83, 86, 87, 89, 90, 92, 96, 98, 99, 103, 105, 106, 107], "abc": [11, 15, 18, 21, 22, 25, 26, 27, 49, 50, 51, 59, 67, 68, 71, 73, 76, 82, 86], "helper": [11, 25, 26], "provid": [11, 22, 25, 26, 36, 42], "wai": [11, 22, 25, 26], "an": [11, 16, 17, 18, 22, 25, 26, 27, 28, 36, 44, 47, 50, 51, 65, 67, 71, 74, 76, 77, 81, 82], "inherit": [11, 17, 21, 25, 26, 43, 50, 67, 73, 84, 86, 152], "abstract": [11, 15, 17, 18, 20, 21, 22, 25, 26, 27, 30, 31, 32, 37, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 57, 58, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 81, 82, 86, 90, 96, 98, 99, 103, 105, 106, 125], "load_argu": [11, 12], "subpars": [11, 12], "process_tree_likelihood": 11, "data": [11, 17, 20, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 37, 39, 42, 44, 45, 46, 47, 48, 49, 50, 51, 54, 56, 57, 58, 60, 61, 62, 64, 65, 67, 68, 69, 71, 73, 74, 76, 77, 78, 81, 82, 83, 86, 87, 90, 92, 96, 98, 99, 103, 105, 106], "process_coalesc": 11, "process_al": 11, "pluginmanag": 12, "load_plugin": 12, "disable_plugin": 12, "create_one_on_x_prior": 13, "theta": [13, 50], "create_clock_horseshoe_prior": 13, "convert_date_to_r": 14, "dai": 14, "month": 14, "year": 14, "read_dates_from_csv": 14, "input_fil": 14, "date_format": 14, "make_unconstrain": 14, "constrain": [14, 43], "correspond": [14, 68, 69, 84], "length_of_tensor_in_dict_paramet": 14, "int": [14, 15, 20, 21, 22, 23, 28, 30, 34, 45, 46, 51, 57, 58, 62, 64, 68, 71, 74, 76, 77, 78, 81, 82, 83, 87, 90, 92, 96, 99], "devic": [15, 21, 22, 28, 30, 46, 57, 58, 62, 64, 68, 86, 87, 92], "need": [15, 21, 22, 36, 50, 67, 73, 86], "alloc": [15, 36], "properti": [15, 16, 18, 21, 22, 28, 31, 32, 36, 39, 45, 49, 50, 51, 56, 57, 59, 62, 64, 68, 71, 77, 82, 90, 92], "where": [15, 22, 33, 40, 43, 66, 89, 105], "kwarg": [15, 20, 21, 22, 30, 32, 68, 69, 71, 74, 77, 81, 82, 87, 92, 96, 98, 99], "perform": [15, 22], "dtype": [15, 22, 28, 50, 86, 87], "convers": [15, 22], "cuda": [15, 21, 22, 30, 46, 57, 58, 62, 64, 68, 87, 92], "move": [15, 22], "object": [15, 16, 17, 18, 20, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 37, 39, 42, 44, 45, 46, 47, 48, 49, 50, 51, 54, 56, 57, 58, 60, 61, 62, 64, 65, 67, 68, 69, 71, 73, 74, 76, 77, 78, 81, 82, 83, 84, 86, 87, 90, 92, 96, 98, 99, 103, 104, 105, 106, 128, 136, 211], "memori": [15, 22, 36], "cpu": [15, 21, 22, 30, 46, 57, 58, 62, 64, 68, 87, 92], "identifi": [15, 19, 20, 21, 22, 29, 32, 33, 34, 42, 44, 45, 51, 65, 70, 76, 77, 82, 103, 106], "getter": [15, 22, 56], "setter": [15, 16, 22, 56], "shape": [15, 21, 22, 28, 30, 31, 32, 33, 34, 37, 39, 44, 50, 57, 67, 87, 89, 90, 105], "size": [15, 21, 22, 31, 32, 33, 36, 37, 39, 47, 50, 51, 71, 78, 87, 90, 96, 103, 105, 106], "requires_grad": [15, 22, 28], "bool": [15, 22, 24, 33, 34, 47, 48, 62, 71, 77, 78, 82, 96, 105], "true": [15, 22, 23, 24, 28, 29, 32, 33, 34, 36, 40, 42, 43, 47, 48, 50, 51, 53, 55, 58, 66, 68, 71, 85], "gradient": [15, 22, 66, 105], "comput": [15, 22, 28, 43, 55, 66, 96, 105], "fals": [15, 22, 23, 28, 46, 47, 50, 58, 67, 68, 85, 90, 105], "otherwis": [15, 22, 23, 28], "flag": [15, 22], "dim": [15, 22, 85], "dimens": [15, 22, 36, 85, 105], "add_parameter_listen": [15, 21, 22, 56], "listen": [15, 17, 21, 22, 56], "fire_parameter_chang": [15, 22, 56], "index": [15, 17, 21, 22, 25, 29, 31, 37, 42, 44, 46, 48, 49, 54, 56, 57, 58, 61, 62, 64, 67, 68, 73, 77, 86, 103, 105, 106], "event": [15, 17, 21, 22, 25, 37, 44, 46, 47, 49, 54, 56, 57, 58, 61, 62, 64, 67, 68, 73, 77, 103, 105, 106], "classproperti": 16, "attribut": [16, 20, 22, 29, 32, 33, 34, 42, 46, 65, 68, 69], "fget": 16, "function": [16, 31, 32, 33, 37, 39, 41, 48, 66, 87, 90, 96, 99, 105, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 133, 137, 139, 155, 157, 160, 162, 167, 176, 177, 181, 185, 192, 193, 195, 208, 209], "get": [16, 45, 53], "fset": 16, "fdel": 16, "del": 16, "ing": 16, "doc": [16, 22, 32, 78], "docstr": 16, "typic": 16, "defin": 16, "manag": 16, "c": [16, 44, 53, 66], "def": [16, 23, 28], "getx": 16, "self": [16, 22, 23, 28, 105], "_x": 16, "setx": 16, "delx": 16, "m": [16, 105], "decor": 16, "make": [16, 18, 27, 51, 65, 71, 74, 76, 77, 81, 82], "new": [16, 36], "modifi": [16, 90], "exist": [16, 36], "ones": [16, 22], "easi": 16, "am": 16, "delet": 16, "abstractparamet": [17, 19, 20, 21, 22, 25, 29, 30, 31, 32, 33, 34, 39, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 57, 59, 61, 62, 64, 68, 69, 70, 71, 77, 86, 87, 90, 92, 105], "multipl": [17, 21, 50, 67, 73, 86], "so": 17, "referenc": [17, 20, 56, 83, 87, 92], "should": [17, 22, 23, 28, 33, 34], "updat": [17, 22], "modellisten": [17, 21, 25], "callabl": [17, 21, 22, 50, 67, 73, 86], "handle_model_chang": [17, 21, 22, 25, 29, 31, 42, 46, 48, 49, 56, 57, 58, 61, 62, 64, 68, 86], "obj": [17, 20, 21, 22, 23, 25, 28, 29, 31, 42, 46, 48, 49, 56, 57, 58, 61, 62, 64, 68, 86], "handle_parameter_chang": [17, 21, 22, 25, 37, 44, 46, 49, 54, 56, 57, 58, 61, 62, 64, 67, 68, 73, 77, 103, 105, 106], "variabl": [17, 21, 22, 25, 29, 31, 32, 37, 39, 42, 44, 46, 49, 54, 56, 57, 58, 61, 62, 64, 67, 68, 73, 77, 103, 105, 106, 146], "classmethod": [17, 20, 22, 27, 28, 29, 30, 31, 32, 33, 34, 37, 39, 42, 44, 45, 46, 47, 48, 49, 50, 51, 54, 56, 57, 58, 60, 61, 62, 64, 65, 67, 68, 69, 71, 73, 74, 76, 77, 78, 81, 82, 83, 86, 87, 90, 92, 96, 98, 99, 103, 105, 106], "from_json": [17, 20, 22, 27, 29, 30, 31, 32, 33, 34, 37, 39, 42, 44, 45, 46, 47, 48, 49, 50, 51, 54, 56, 57, 58, 60, 61, 62, 64, 65, 67, 68, 69, 71, 73, 74, 76, 77, 78, 81, 82, 83, 86, 87, 90, 92, 96, 98, 99, 103, 105, 106], "dic": [17, 20, 22, 27, 28, 29, 30, 31, 32, 33, 34, 37, 39, 42, 44, 45, 46, 47, 48, 49, 50, 51, 54, 56, 57, 58, 60, 61, 62, 64, 65, 67, 68, 69, 71, 73, 74, 76, 77, 78, 81, 82, 83, 84, 86, 87, 90, 92, 96, 98, 99, 103, 105, 106], "method": [17, 22, 23, 27, 28, 30, 31, 36, 37, 39, 44, 45, 46, 47, 48, 49, 50, 51, 54, 57, 58, 60, 61, 62, 64, 65, 67, 68, 69, 71, 73, 74, 76, 77, 78, 81, 82, 86, 90, 95, 96, 98, 99, 103, 105, 106], "represent": [17, 20, 22, 27, 29, 30, 31, 32, 33, 34, 37, 39, 42, 44, 45, 46, 47, 48, 49, 50, 51, 54, 56, 57, 58, 60, 61, 62, 64, 65, 67, 68, 69, 71, 73, 74, 76, 77, 78, 81, 82, 83, 86, 87, 90, 92, 96, 98, 99, 103, 105, 106], "other": [17, 22, 23, 27, 28, 30, 31, 37, 39, 42, 44, 45, 46, 47, 48, 49, 50, 51, 54, 57, 58, 60, 61, 62, 64, 65, 67, 68, 69, 71, 73, 74, 76, 77, 78, 81, 82, 86, 90, 96, 98, 99, 103, 105, 106, 107], "kei": [17, 20, 22, 27, 28, 29, 30, 31, 32, 33, 34, 37, 39, 42, 44, 45, 46, 47, 48, 49, 50, 51, 54, 57, 58, 60, 61, 62, 64, 65, 67, 68, 69, 71, 73, 74, 76, 77, 78, 81, 82, 86, 90, 92, 96, 98, 99, 103, 105, 106], "serializ": [18, 19, 20, 23, 28, 70, 71, 74, 81, 83, 96, 98, 99], "jsonserializ": [18, 20, 27, 71, 74, 81, 83, 96, 98, 99], "packag": [19, 22, 52, 79, 88, 94, 109, 110, 124, 138, 154, 179, 194, 199, 201, 204, 211], "framework": [19, 70, 109, 124], "classproperty_decor": [19, 70], "parameter_encod": [19, 70], "parameter_util": [19, 70], "parametr": [19, 21, 22, 36, 38, 40, 46, 49, 57, 58, 59, 60, 61, 62, 64, 68, 69, 70, 77, 84, 130, 145, 147, 149], "runnabl": [19, 20, 70, 74, 81, 83, 99], "loggerinterfac": [20, 83], "thing": [20, 83], "like": [20, 23, 28], "tree": [20, 30, 33, 34, 44, 49, 53, 54, 56, 66, 67, 68, 69, 101, 153], "initi": [20, 28, 78], "close": 20, "run": [20, 26, 74, 81, 83, 99, 100], "callablemodel": [20, 21, 29, 30, 32, 33, 34, 37, 42, 44, 47, 48, 50, 54, 56, 67, 68, 73, 74, 77, 81, 86, 92, 96, 99, 103, 105, 106], "everi": [20, 84, 96], "frequenc": [20, 59, 61, 62, 64, 67], "addit": [20, 56, 83, 87, 92], "treelogg": 20, "treemodel": [20, 30, 49, 55, 67, 68], "csv": 20, "writ": 20, "dumper": 20, "save": [20, 24], "write": 20, "containerlogg": 20, "input": [20, 43, 55, 66, 85, 89], "mandatori": [20, 22, 29, 32, 33, 34, 42], "python": [20, 23, 28], "callableobject": 20, "parameterlisten": [21, 22, 25, 77], "monitor": [21, 46, 49, 57, 58, 59, 60, 61, 62, 64, 68, 69], "chang": [21, 46, 49, 57, 58, 59, 60, 61, 62, 64, 66, 68, 69], "build": [21, 46, 49, 57, 58, 59, 60, 61, 62, 64, 68, 69], "block": [21, 46, 49, 53, 57, 58, 59, 60, 61, 62, 64, 68, 69], "more": [21, 46, 49, 57, 58, 59, 60, 61, 62, 64, 68, 69], "complex": [21, 46, 49, 57, 58, 59, 60, 61, 62, 64, 68, 69], "tag": [21, 68], "sample_shap": [21, 22, 31, 32, 37, 39, 50, 87, 90], "sampl": [21, 29, 31, 32, 37, 39, 47, 48, 50, 53, 56, 71, 77, 78, 82, 83, 87, 90, 95, 96, 103, 105, 106, 107], "add_model_listen": 21, "remove_model_listen": 21, "remove_parameter_listen": 21, "fire_model_chang": 21, "collect": [21, 22, 45, 50, 65, 67, 73, 86], "cach": [21, 50, 67, 73, 86], "case": [21, 50, 67, 73, 86], "we": [21, 50, 67, 73, 86], "time": [21, 29, 30, 33, 34, 47, 48, 50, 67, 73, 86, 107], "without": [21, 50, 67, 73, 86], "recomput": [21, 50, 67, 73, 86], "implement": [22, 23, 28, 29, 30, 88, 89, 131, 194], "grad_fn": 22, "autograd": 22, "graph": [22, 28], "node": [22, 53, 55, 66, 67, 68, 69], "grad": 22, "detach": 22, "copy_": 22, "clone": 22, "": [22, 33, 36, 39, 47, 67, 85, 95, 96, 105, 106, 107], "infer": [22, 43, 44, 70, 103, 106], "call": [22, 23, 28, 36, 66], "static": [22, 29, 30, 31, 32, 42, 49, 62, 68, 69, 96], "json_factori": [22, 29, 30, 31, 32, 42, 49, 68, 69], "onli": [22, 29], "one": [22, 29, 47, 48], "full_lik": 22, "full": [22, 32], "zeros_lik": 22, "ones_lik": 22, "eye_lik": 22, "ey": 22, "arang": 22, "determin": 22, "float": [22, 23, 28, 29, 34, 36, 38, 40, 42, 50, 51, 56, 66, 67, 68, 69, 71, 76, 77, 82, 85, 96, 106], "fill": 22, "scalar": [22, 42, 85], "0": [22, 28, 29, 32, 34, 40, 42, 43, 51, 53, 55, 66, 68, 71, 85, 90, 93, 95, 96, 105], "d": [22, 34, 50, 85], "elsewher": 22, "2d": 22, "integ": 22, "emul": 22, "If": [22, 33, 34], "equiaval": 22, "equivali": 22, "3": [22, 29, 30, 33, 34, 43, 85, 105, 107], "desir": [22, 36], "default": [22, 23, 28, 33, 34, 68, 96], "construct": 22, "result": 22, "record": 22, "nn": [22, 70, 87, 89, 90], "wrap": [22, 28], "exampl": [22, 23, 28, 29, 32, 33, 34, 40, 42, 43, 53, 68, 85], "p_dic": 22, "isinst": [22, 29, 32, 33, 34, 42], "ones_d": 22, "all": [22, 28, 43, 96], "loos": [22, 91, 199], "follow": [22, 23, 28, 91, 199], "http": [22, 23, 28, 32, 78, 90, 198], "pytorch": [22, 32], "org": [22, 23, 28, 32, 78], "stabl": [22, 32], "html": [22, 32, 78], "invert": [22, 43, 152], "union": 22, "instanc": [22, 25, 36, 56, 87, 90], "apply_transform": 22, "identidif": 22, "name": [22, 25, 28, 32, 53], "includ": 22, "tolist": 22, "t_dic": 22, "t": [22, 47, 48, 50, 67, 89], "exptransform": 22, "exp_transform": 22, "tensor2": 22, "log_abs_det_jacobian": [22, 43, 55, 66, 89], "viewparamet": 22, "slice": [22, 28, 58], "repres": [22, 33, 103, 105, 106], "view": 22, "anoth": [22, 23, 28], "assign": 22, "catparamet": 22, "ellipsi": [22, 51], "concaten": 22, "moduleparamet": 22, "parameterencod": 23, "skipkei": [23, 28], "ensure_ascii": [23, 28], "check_circular": [23, 28], "allow_nan": [23, 28], "sort_kei": [23, 28], "indent": [23, 28], "separ": [23, 28], "jsonencod": [23, 28], "extens": [23, 28], "encod": [23, 28, 51], "structur": [23, 28], "support": [23, 28, 36, 41, 47, 50], "arrai": [23, 28], "null": [23, 28], "To": [23, 28], "extend": [23, 28, 106], "recogn": [23, 28], "subclass": [23, 28, 36], "o": [23, 28, 105], "possibl": [23, 28], "superclass": [23, 28], "rais": [23, 27, 28], "typeerror": [23, 28], "For": [23, 28, 68], "arbitrari": [23, 28], "iter": [23, 28, 74, 78, 81, 96, 99], "you": [23, 28], "could": [23, 28], "try": [23, 28, 53], "except": [23, 28, 137], "pass": [23, 28], "els": [23, 28], "let": [23, 28, 33], "save_paramet": 24, "safe": 24, "output": [24, 43, 53, 55, 66, 96], "temporari": 24, "pack_tensor": 24, "pack": 24, "register_paramet": 25, "register_model": 25, "establish": [27, 71, 74, 81], "from_json_saf": 27, "pars": [27, 84], "jsonparseerror": [27, 28], "error": 27, "registered_class": 28, "tensorencod": 28, "as_tensor": 28, "dct": 28, "float64": 28, "tensor_rand": 28, "given": [28, 41, 43, 55, 66], "continu": [28, 30, 85, 107], "normal": [28, 31, 32, 35, 39, 42, 43, 62, 70, 87, 88, 90, 105, 148, 151, 194], "log_norm": [28, 35, 70], "uniform": 28, "discret": 28, "random": [28, 29, 31, 32, 33, 34, 39, 42, 143], "bernoulli": 28, "e": [28, 33, 34, 47, 48, 50, 67, 106], "g": [28, 29, 107], "sequenc": [28, 45, 58, 85], "_": 28, "manual_se": 28, "t1": 28, "4": [28, 64, 105], "0820": 28, "4131": 28, "t2": 28, "t3": 28, "get_class": 28, "full_nam": 28, "common": 28, "non": [28, 47], "exit": 28, "process_object": 28, "force_list": 28, "signalhandl": 28, "signum": 28, "frame": 28, "valid": 28, "rule": 28, "remove_com": 28, "replace_wildcard_with_str": 28, "wildcard": 28, "replace_star_with_str": 28, "expand_pl": 28, "parent": 28, "idx": 28, "update_paramet": 28, "recurs": 28, "present": [28, 47], "print_graph": 28, "level": 28, "print": [28, 96], "alternativeattributeerror": 28, "custom": 28, "debug": 28, "conflict": 28, "between": [28, 47, 48, 96], "__getattr__": 28, "stackoverflow": 28, "com": [28, 90, 198], "question": 28, "36575068": 28, "attributeerror": 28, "undesir": 28, "interact": 28, "getattr": 28, "wrapper": [28, 32, 92, 98, 99], "f": [28, 89], "rerais": 28, "altern": 28, "string_to_list_index": 28, "index_str": 28, "package_cont": 28, "package_nam": 28, "register_class": 28, "_cl": 28, "bayesian": [29, 30, 33, 44, 107, 139], "bridg": [29, 107, 139], "bayesianbridg": 29, "core": [29, 30, 31, 32, 33, 34, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 61, 62, 64, 65, 67, 68, 69, 70, 71, 73, 74, 76, 77, 81, 82, 83, 84, 86, 87, 90, 92, 96, 98, 99, 103, 105, 106], "alpha": [29, 34, 44, 50, 61, 106], "local_scal": [29, 42], "slab": [29, 42], "also": 29, "regular": [29, 42, 71, 107], "global": [29, 42], "expon": 29, "local": [29, 42], "width": [29, 42, 78, 82], "nichola": [29, 107], "polson": [29, 107], "jame": [29, 107], "scott": [29, 107], "jess": [29, 107], "windl": [29, 107], "journal": [29, 30, 42, 105, 107], "royal": [29, 107], "statist": [29, 30, 41, 42, 79, 93, 105, 107, 179], "societi": [29, 107], "seri": [29, 107], "b": [29, 43, 47, 48, 53, 55, 64, 67, 89, 107], "methodologi": [29, 107], "page": [29, 107], "713": [29, 107], "733": [29, 107], "2014": [29, 107], "doi": [29, 33, 42, 107], "10": [29, 33, 42, 71, 85, 93, 107], "1111": [29, 107], "rssb": [29, 107], "12042": [29, 107], "akihiko": [29, 107], "nishimura": [29, 107], "marc": [29, 30, 33, 107], "suchard": [29, 30, 33, 107], "shrinkag": [29, 42, 107], "shrunken": [29, 107], "shoulder": [29, 107], "gibb": [29, 107], "posterior": [29, 50, 107], "guarante": [29, 107], "converg": [29, 70, 97, 107], "analysi": [29, 30, 107], "18": [29, 107], "367": [29, 107], "390": [29, 107], "2023": [29, 107], "1214": [29, 42, 107], "22": [29, 107], "ba1308": [29, 107], "uniqu": [29, 32, 33, 34, 42, 103, 106], "bridge_d": 29, "them": 29, "must": [29, 32, 33, 34], "process_object_numb": 29, "ctmc": [30, 140], "refer": [30, 68, 69, 78, 140], "ctmcscale": 30, "markov": [30, 33, 34, 107, 143], "chain": [30, 107], "ferreira": [30, 107], "substitut": [30, 55, 56], "marco": [30, 107], "elaps": [30, 107], "canadian": [30, 107], "36": [30, 107], "355": [30, 107], "368": [30, 107], "2008": [30, 107], "log_gamma_one_half": 30, "deterministicnorm": 31, "distributionmodel": [31, 32, 37, 39, 83, 87, 90, 103, 105, 106], "determinist": 31, "drawn": 31, "dure": [31, 78], "creation": 31, "evalu": [31, 32, 37, 39, 41, 47, 48, 50, 87, 90, 96], "locat": [31, 40, 42, 149], "event_shap": [31, 32, 39], "batch_shap": [31, 32, 36, 37, 39, 87, 90], "rsampl": [31, 32, 37, 39, 50, 87, 90], "gener": [31, 32, 37, 39, 50, 52, 60, 63, 70, 87, 90], "reparameter": [31, 32, 37, 39, 50, 87, 90], "batch": [31, 32, 36, 37, 39, 50, 67, 87, 90], "log_prob": [31, 32, 37, 39, 40, 41, 47, 48, 50, 87, 90], "probabl": [31, 32, 35, 37, 39, 41, 47, 48, 50, 57, 64, 67, 87, 90, 138], "densiti": [31, 32, 37, 39, 41, 47, 48, 50, 87, 90, 198], "mass": [31, 32, 37, 39, 41, 47, 48, 50, 78, 87, 90], "entropi": [31, 32, 37, 39, 87, 90, 105], "over": [31, 32, 37, 39, 87, 90], "dist": 32, "instanci": [32, 84], "underli": [32, 50], "x_dict": 32, "normal_d": 32, "exp_dic": 32, "exp": [32, 43], "exponenti": [32, 43], "match": 32, "signatur": 32, "see": [32, 78], "gaussian": [33, 143], "field": [33, 34, 143], "precis": [33, 34, 39, 40, 149], "timetreemodel": [33, 34, 47, 48, 50, 54, 66, 68, 69], "weight": [33, 34, 43, 58, 67, 77, 82, 89, 105], "rescal": [33, 34, 67], "parameter": [33, 34, 36, 38, 40, 43, 66], "tau": [33, 34, 40, 85], "awar": [33, 34], "root": [33, 34, 47, 56, 70, 109], "height": [33, 34, 53, 56, 66, 68, 69], "p": [33, 34, 50, 55, 103, 105, 106], "boldsymbol": 33, "mid": [33, 34, 50], "prod_": [33, 34], "n": [33, 34, 40, 50, 67, 85, 103, 105, 107], "frac": [33, 34, 43, 47, 50, 55], "sqrt": [33, 34], "pi": [33, 34], "x_": [33, 34, 66], "x_i": [33, 34, 41, 43, 66], "precision_matrix": [33, 39], "gmrf_dic": [33, 34], "skygrid": [33, 34], "ignor": [33, 34], "gmrfcovari": 33, "beta": [33, 34, 50, 61], "propos": 33, "gill": [33, 107], "et": 33, "al": 33, "coeffici": 33, "effect": [33, 47], "z_": 33, "ldot": 33, "z": [33, 86, 89], "predictor": 33, "z_i": 33, "observ": [33, 47, 48], "measur": 33, "point": 33, "linear": 33, "sum": [33, 43, 55], "beta_": 33, "ip": 33, "w_i": 33, "w_1": 33, "w_n": 33, "mean": [33, 38, 39, 40, 42, 44, 95, 147], "process": [33, 47, 48], "beta_1": 33, "beta_n": 33, "propto": 33, "q": [33, 59, 61, 62, 64, 103, 105, 106], "mandev": [33, 107], "philipp": [33, 107], "lemei": [33, 107], "shannon": [33, 107], "bennett": [33, 107], "roman": [33, 107], "biek": [33, 107], "understand": [33, 107], "past": [33, 107], "popul": [33, 36, 47, 50, 107], "dynam": [33, 107], "coalesc": [33, 52, 70, 107], "systemat": [33, 107], "biologi": [33, 107], "65": [33, 107], "6": [33, 43, 107], "1041": [33, 107], "1056": [33, 107], "2016": [33, 107], "1093": [33, 107], "sysbio": [33, 107], "syw050": [33, 107], "integr": [34, 50, 70, 71, 74, 75, 77, 79, 105, 144], "gmrf": [34, 35, 70, 144], "gamma": [34, 36, 42, 44, 50, 71, 93, 144, 145], "gmrfgammaintegr": 34, "product": [34, 50], "respect": [34, 50], "left": [34, 50], "right": [34, 50], "sum_": [34, 43, 50], "idea": 34, "cheng": 34, "zhang": 34, "parameteriz": [35, 138], "bayesian_bridg": [35, 70], "ctmc_scale": [35, 70], "deterministic_norm": [35, 70], "gmrf_integr": [35, 70], "inverse_gamma": [35, 70], "joint_distribut": [35, 70], "multivariate_norm": [35, 70], "one_on_x": [35, 70], "scale_mixtur": [35, 70], "tree_prior": [35, 70], "invers": [36, 50, 90, 145], "inversegamma": 36, "validate_arg": [36, 38, 40, 41, 47, 48, 50], "transformeddistribut": 36, "arg_constraint": [36, 41, 47, 48, 50], "has_rsampl": [36, 50], "expand": 36, "_instanc": 36, "deriv": 36, "As": 36, "doe": [36, 96], "addition": 36, "repeat": 36, "check": [36, 96], "broadcast": 36, "__init__": 36, "py": 36, "first": [36, 67], "overrid": 36, "batch_siz": [36, 89], "independ": [37, 146], "jointdistributionmodel": 37, "lognorm": [38, 147], "scale_r": 38, "multivari": [39, 43, 148], "multivariatenorm": 39, "covariance_matrix": 39, "scale_tril": [39, 43], "tril": 39, "sim": 40, "mathcal": 40, "mu": [40, 47, 48, 55, 57, 71, 93], "sigma": 40, "norm1": 40, "5": [40, 71, 93], "norm2": 40, "One": [41, 150], "oneonx": 41, "calcul": [41, 56, 64, 67, 68, 96, 105], "improp": 41, "proport": [41, 67], "prod_i": 41, "mixtur": [42, 151], "scalemixturenorm": 42, "juho": [42, 107], "piironen": [42, 107], "aki": [42, 107], "vehtari": [42, 107], "sparsiti": [42, 107], "horsesho": [42, 107], "electron": [42, 107], "11": [42, 85, 107], "5018": [42, 107], "5051": [42, 107], "jan": [42, 107], "2017": [42, 107], "17": [42, 51, 107], "ejs1337si": [42, 107], "global_scal": 42, "mixture_d": 42, "trilexpdiagonaltransform": 43, "cache_s": [43, 55, 66], "1d": 43, "triangular": 43, "lower": [43, 105], "posit": 43, "y": [43, 51, 55, 66, 89, 90], "7183": 43, "0000": 43, "20": 43, "0855": 43, "allclos": 43, "inv": 43, "biject": [43, 55, 66], "sign": [43, 55, 66], "det": [43, 55, 66], "dy": [43, 55, 66], "dx": [43, 55, 66], "cumsumtransform": 43, "via": [43, 103], "y_i": [43, 55, 66], "j": [43, 66, 105], "x_j": 43, "domain": 43, "codomain": 43, "cumsumexptransform": 43, "softplustransform": 43, "cumsumsoftplustransform": 43, "convexcombinationtransform": 43, "unconstrain": 43, "space": 43, "k": [43, 64, 66, 67, 85, 105], "alpha_i": [43, 105], "order": [43, 66, 103, 106], "satisfi": 43, "geq": 43, "logtransform": 43, "lineartransform": 43, "ax": 43, "phylogenet": [44, 153], "compoundgammadirichletprior": 44, "unrootedtreemodel": [44, 68], "compound": 44, "dirichlet": 44, "unroot": 44, "rannala2011": 44, "ratio": [44, 66, 68], "intern": [44, 67, 68, 69], "extern": 44, "branch": [44, 47, 64, 67, 68], "length": [44, 54, 64, 68], "rannala": 44, "zhu": 44, "ziheng": 44, "yang": 44, "tail": 44, "paradox": 44, "partial": [44, 51, 58, 67], "influenti": 44, "2011": 44, "datatyp": [45, 46, 52, 61, 62, 70], "userlist": [45, 65], "sequence_s": 45, "filenam": 45, "read_fasta_sequ": 45, "calculate_frequ": 45, "calculate_frequencies_per_codon_posit": 45, "calculate_f3x4_from_nucleotid": 45, "nuc_freq": 45, "calculate_f3x4": 45, "calculate_substitut": 45, "calculate_ts_tv": 45, "calculate_kappa": 45, "freq": [45, 67], "attributepattern": 46, "compute_tips_st": [46, 58], "compute_tips_parti": [46, 58], "use_ambigu": [46, 51, 58, 67], "epidemiology_to_birth_death": 47, "r": [47, 55, 66], "delta": [47, 71], "convert": 47, "epidemiologi": 47, "birth": [47, 48], "death": [47, 48], "reproduct": 47, "total": 47, "becom": 47, "infecti": 47, "individu": 47, "being": 47, "remov": 47, "lambda": [47, 48], "psi": [47, 48], "bdskmodel": 47, "rho": [47, 48], "origin": [47, 48], "origin_is_root_edg": 47, "relative_tim": 47, "surviv": [47, 48], "removal_prob": 47, "skylin": 47, "plot": 47, "transmiss": 47, "which": [47, 48], "start": [47, 48, 68, 96], "t_0": [47, 48], "abov": [47, 67], "shift": [47, 56, 68], "rel": [47, 96], "condit": [47, 48], "least": [47, 48], "noninfecti": 47, "immedi": 47, "after": [47, 67], "piecewiseconstantbirthdeath": 47, "lambda_": [47, 48], "piecewis": 47, "constant": [47, 48, 50], "effort": [47, 48], "log_q": [47, 48], "t_i": [47, 48, 50], "lineag": [47, 48], "aliv": [47, 48], "give": [47, 48], "rise": [47, 48], "clade": [47, 48], "p0": 47, "log_p": [47, 48], "ha": [47, 48], "descend": [47, 48], "t_m": [47, 48], "node_height": [47, 48, 50, 68], "birthdeathmodel": 48, "birthdeath": 48, "branchmodel": [49, 54, 67], "abstractclockmodel": 49, "strictclockmodel": 49, "simpleclockmodel": 49, "abstractcoalescentdistribut": 50, "maximum_likelihood": 50, "abstractcoalescentmodel": 50, "constantcoalescentmodel": 50, "constantcoalesc": 50, "constantcoalescentintegr": 50, "distribt": 50, "int_0": 50, "infti": 50, "c_i": 50, "exponentialcoalescentmodel": 50, "growth": 50, "exponentialcoalesc": 50, "piecewiseconstantcoalesc": 50, "piecewiseconstantcoalescentmodel": 50, "piecewiseconstantcoalescentgrid": 50, "grid": 50, "softpiecewiseconstantcoalescentgrid": 50, "temperatur": [50, 85], "piecewiseconstantcoalescentgridmodel": 50, "faketreemodel": 50, "process_data_coales": 50, "piecewiseexponentialcoalescentgrid": 50, "state": [51, 67], "state_count": [51, 62], "abstractdatatyp": 51, "nucleotidedatatyp": 51, "nucleotid": [51, 52, 63, 70], "acgtukmrswybdhvn": 51, "nucleotide_st": 51, "nucleotide_ambiguity_st": 51, "aminoaciddatatyp": 51, "amino_acid": [51, 52, 63, 70], "acdefghiklmnpqrstvwybzx": 51, "amino_acids_st": 51, "25": 51, "amino_acids_ambiguity_st": 51, "codondatatyp": [51, 61], "genetic_cod": 51, "genetic_code_t": 51, "knknttttrsrsiimiqhqhpppprrrrllllededaaaaggggvvvv": 51, "yssss": 51, "cwclflf": 51, "genetic_code_nam": 51, "univers": 51, "vertebr": 51, "mitochondri": 51, "yeast": 51, "mold": 51, "protozoan": 51, "mycoplasma": 51, "number_of_codon": 51, "61": 51, "60": 51, "62": 51, "63": 51, "64": 51, "codon_triplet": 51, "aaa": 51, "aac": 51, "aag": 51, "aat": 51, "aca": 51, "acc": 51, "acg": 51, "act": 51, "aga": 51, "agc": 51, "agg": 51, "agt": 51, "ata": 51, "codon": [51, 52, 63, 70], "generaldatatyp": 51, "code": [51, 71, 78, 90, 93, 96, 198], "ambigu": 51, "evolutionari": [52, 154], "attribute_pattern": [52, 70], "bdsk": [52, 70], "birth_death": [52, 70], "io": [52, 70], "poisson_tree_likelihood": [52, 70], "rate_transform": [52, 70], "root_transform": [52, 70], "tree_height_transform": [52, 70], "tree_likelihood": [52, 70], "tree_model_flex": [52, 70], "read_tre": 53, "date": [53, 68], "heterochorn": 53, "read_tree_and_align": 53, "to_nexu": 53, "fp": 53, "convert_samples_to_nexu": 53, "random_tree_from_height": 53, "parse_transl": 53, "parse_tre": [53, 68], "count": 53, "parse_taxa": 53, "split_newick": 53, "newick": [53, 68, 69], "split": 53, "format": [53, 68, 69], "around": 53, "extract_taxa": 53, "extract": 53, "taxon": [53, 65, 68], "nexu": 53, "poissontreelikelihood": 54, "clock_model": [54, 67], "edge_length": 54, "likelihood": [54, 67], "poisson": 54, "clock": 54, "edg": 54, "logdifferenceratetransform": 55, "differ": [55, 66, 96], "adjac": 55, "r_i": 55, "r_": 55, "rescaledratetransform": 55, "tild": 55, "_i": 55, "rootparamet": 56, "distanc": 56, "amount": 56, "serial": 56, "sitemodel": [57, 67], "constantsitemodel": 57, "invariantsitemodel": 57, "invari": 57, "update_rates_prob": 57, "univariatediscretizedsitemodel": 57, "categori": [57, 67], "inverse_cdf": 57, "quantil": 57, "update_r": 57, "weibullsitemodel": 57, "lognormalsitemodel": 57, "sitepattern": [58, 67], "compress": 58, "compress_align": 58, "compress_alignment_st": 58, "substitutionmodel": [59, 62, 64, 67], "p_t": [59, 62, 64], "branch_length": [59, 62, 64, 68], "abstractsubstitutionmodel": 59, "norm": 59, "symmetricsubstitutionmodel": [59, 61, 62, 64], "eigen": [59, 62], "nonsymmetricsubstitutionmodel": [59, 62], "lg": 60, "empiricalsubstitutionmodel": [60, 62], "wag": 60, "mg94": 61, "kappa": [61, 64, 71, 93], "generaljc69": 62, "generalsymmetricsubstitutionmodel": 62, "generalnonsymmetricsubstitutionmodel": 62, "create_rate_matrix": 62, "jc69": 64, "transit": 64, "matric": [64, 67], "hky": 64, "p_t_analyt": 64, "gtr": 64, "userdict": 65, "generalnodeheighttransform": 66, "sort_indic": 66, "update_bound": 66, "topologi": 66, "differencenodeheighttransform": 66, "max": 66, "x_c": 66, "jth": 66, "child": 66, "mathbb": 66, "approxim": [66, 105], "logsumexp": 66, "propag": 66, "calculate_treelikelihood": 67, "post_index": 67, "mat": 67, "simpl": 67, "leav": 67, "postord": [67, 68], "calculate_treelikelihood_discret": 67, "prop": 67, "tip": 67, "2t": 67, "site": 67, "peel": 67, "calculate_treelikelihood_tip_states_discret": 67, "calculate_treelikelihood_discrete_saf": 67, "threshold": 67, "underflow": 67, "detect": 67, "inf": 67, "sinc": 67, "recalcul": 67, "calculate_treelikelihood_discrete_resc": 67, "calculate_treelikelihood_tip_states_discrete_resc": 67, "treelikelihoodmodel": 67, "subst_model": 67, "use_tip_st": 67, "calculate_with_tip_parti": 67, "prob": 67, "calculate_with_tip_st": 67, "heights_to_branch_length": 68, "bound": [68, 103, 105, 106], "setup_index": 68, "indices_postord": 68, "setup_d": 68, "heterochron": 68, "initialize_dates_from_taxa": 68, "heights_from_branch_length": 68, "ep": [68, 90], "1e": [68, 90], "06": 68, "write_newick": 68, "steam": 68, "abstracttreemodel": 68, "update_travers": 68, "as_newick": 68, "stream": 68, "factori": [68, 69], "branch_lengths_id": 68, "taxa_id": 68, "keep_branch_length": 68, "compat": [68, 69], "internal_height": [68, 69], "update_leaf_height": 68, "distal": 68, "side": 68, "internal_heights_id": [68, 69], "reparameterizedtimetreemodel": 68, "ratios_root_height": 68, "update_node_height": 68, "root_height": 68, "flexibletimetreemodel": 69, "cli": 70, "adapt": [70, 75, 77, 78, 79, 93, 96, 105], "adaptor": [70, 71, 75, 77, 78, 79], "hamiltonian": [70, 71, 74, 75, 79], "stan_adapt": [70, 75, 79], "sampler": [70, 79], "nf": 70, "energy_funct": [70, 88], "flow": [70, 88, 89, 90, 194, 198], "planar": [70, 88], "realnvp": [70, 88], "op": 70, "dual_averag": [70, 94], "welford": [70, 94], "optim": 70, "lr_schedul": [70, 97], "chi": [70, 104], "kl": [70, 104], "renyi": [70, 104], "math": [70, 94, 201], "treeregress": 70, "learn": [71, 78], "acceptance_prob": [71, 77, 78, 82], "accept": [71, 77, 78, 82], "restart": [71, 78, 93], "adaptivesteps": 71, "leapfrogintegr": [71, 76], "target_acceptance_prob": [71, 77, 82], "dualaveragingsteps": [71, 78], "8": 71, "05": [71, 90, 93], "75": [71, 93], "t0": [71, 93], "step": [71, 76, 78, 82, 93, 98], "dual": [71, 93], "averag": [71, 93], "nesterov": [71, 93], "stan": [71, 78, 93, 96], "dev": [71, 93, 96], "massmatrixadaptor": 71, "listparamet": [71, 74, 77, 84, 99, 102], "mass_matrix": [71, 73, 77], "find_reasonable_step_s": [71, 74], "inverse_mass_matrix": [71, 73], "warmupadapt": 71, "step_siz": [71, 76], "sqrt_mass_matrix": 71, "sample_momentum": [73, 74], "potential_energi": 73, "kinetic_energi": 73, "momentum": [73, 74, 90], "set_tensor": 76, "hmcoper": 77, "mcmcoper": [77, 81, 82], "tuning_paramet": [77, 82], "update_mass_matric": 77, "adaptable_paramet": [77, 82], "set_adaptable_paramet": [77, 82], "tune": [77, 82], "stanwindowedadapt": 78, "step_size_adaptor": 78, "mass_matrix_adaptor": 78, "num_warmup": 78, "init_buff": 78, "term_buff": 78, "base_window": 78, "warmup": 78, "period": 78, "onlin": [78, 95], "manual": 78, "further": 78, "detail": 78, "mc": 78, "algorithm": [78, 96], "fast": 78, "interv": 78, "final": 78, "window": 78, "slow": 78, "reject": 82, "scaleroper": 82, "scaler": 82, "slidingwindowoper": 82, "draw": 83, "extract_tensors_and_paramet": 84, "listtensor": [84, 102], "soft_sort": 85, "relax": 85, "argsort": 85, "permut": 85, "prillo": 85, "eisenschlo": 85, "softsort": 85, "2020": 85, "soft_max": 85, "keepdim": 85, "soft_searchsort": 85, "sorted_sequ": 85, "serachsort": 85, "monoton": 85, "increas": 85, "innermost": 85, "search": 85, "select": 85, "100": 85, "0001": 85, "5000": 85, "30": 85, "soft_select": 85, "searchsort": 85, "argmax": 85, "w1": 86, "w2": 86, "w3": 86, "energyfunctionmodel": 86, "normalizingflow": 87, "forward": [87, 89, 90], "apply_flow": [87, 90], "planartransform": 89, "u": [89, 90], "tanh": 89, "dot": 89, "learnabl": 89, "input_s": [89, 90], "factor": 89, "bia": 89, "u_hat": 89, "mask": [90, 198], "autoregress": [90, 198], "estim": [90, 95, 103, 105, 106, 198], "arxiv": [90, 198], "1705": [90, 198], "07057v4": [90, 198], "port": [90, 198], "github": [90, 198], "kamenbliznashki": [90, 198], "normalizing_flow": [90, 198], "linearmaskedcoupl": 90, "hidden_s": 90, "n_hidden": 90, "cond_label_s": 90, "coupl": 90, "layer": 90, "per": 90, "maf": 90, "paper": 90, "batchnorm": 90, "9": 90, "cond_i": 90, "flowsequenti": 90, "ordereddict": [90, 92], "sequenti": 90, "n_block": 90, "batch_norm": 90, "design": [91, 199], "ordereddicttyp": [92, 102], "dualaverag": 93, "welfordvari": 95, "co": 95, "add_sampl": 95, "reset": 95, "baseconverg": 96, "diagnost": 96, "variationalconverg": 96, "loss": [96, 99], "elbo": [96, 105], "sy": 96, "stdout": 96, "stanvariationalconverg": 96, "max_iter": 96, "tol_rel_obj": 96, "01": 96, "sgd": 96, "maximum": 96, "toler": 96, "rel_differ": 96, "prev": 96, "curr": 96, "two": 96, "doubl": 96, "previou": 96, "current": 96, "absolut": 96, "schedul": 98, "_lrschedul": 98, "regress": 101, "cubo": 103, "upper": 103, "form": [103, 106], "diverg": [103, 105, 106], "adji": 103, "bousso": 103, "dieng": 103, "dustin": 103, "tran": 103, "rajesh": 103, "ranganath": 103, "john": 103, "paislei": 103, "david": 103, "blei": 103, "minim": [103, 105], "score": 105, "evid": 105, "maxim": 105, "equival": 105, "exclus": 105, "kullback": 105, "leibler": 105, "most": 105, "dimension": 105, "multi": 105, "klqp": 105, "instead": 105, "mont": 105, "carlo": 105, "pathwis": 105, "klpq": 105, "inclus": 105, "oh": 105, "berger": 105, "1992": 105, "simul": 105, "41": 105, "143": 105, "168": 105, "klpqimport": 105, "selbo": 105, "compon": 105, "stratifi": 105, "sum_i": 105, "q_i": 105, "vr": 106, "tradit": 106, "r\u00e9nyi": 106, "yingzhen": 106, "li": 106, "richard": 106, "turner": 106, "fs08": 107, "glb": 107, "16": 107, "ns23": 107, "pv17": 107, "psw14": 107, "bibliographi": 108, "class": [120, 121, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 181, 183, 184, 185, 186, 187, 189, 190, 191, 195, 196, 197, 198, 200, 202, 203, 205, 206, 207, 212, 213, 214]}, "objects": {"": [[109, 0, 0, "-", "torchtree"]], "torchtree": [[0, 0, 0, "-", "_version"], [110, 0, 0, "-", "cli"], [124, 0, 0, "-", "core"], [138, 0, 0, "-", "distributions"], [154, 0, 0, "-", "evolution"], [179, 0, 0, "-", "inference"], [193, 0, 0, "-", "math"], [194, 0, 0, "-", "nf"], [199, 0, 0, "-", "nn"], [201, 0, 0, "-", "ops"], [204, 0, 0, "-", "optim"], [208, 0, 0, "-", "torchtree"], [209, 0, 0, "-", "treeregression"], [210, 0, 0, "-", "typing"], [211, 0, 0, "-", "variational"]], "torchtree.cli": [[5, 1, 1, "", "PLUGIN_MANAGER"], [111, 0, 0, "-", "advi"], [112, 0, 0, "-", "cli"], [113, 0, 0, "-", "evolution"], [114, 0, 0, "-", "hmc"], [115, 0, 0, "-", "jacobians"], [116, 0, 0, "-", "loggers"], [117, 0, 0, "-", "map"], [118, 0, 0, "-", "mcmc"], [119, 0, 0, "-", "operators"], [120, 0, 0, "-", "plugin"], [121, 0, 0, "-", "plugin_manager"], [122, 0, 0, "-", "priors"], [123, 0, 0, "-", "utils"]], "torchtree.cli.advi": [[1, 2, 1, "", "apply_affine_transform"], [1, 2, 1, "", "apply_exp_transform"], [1, 2, 1, "", "apply_sigmoid_transformed"], [1, 2, 1, "", "apply_simplex_transform"], [1, 2, 1, "", "apply_transforms_for_fullrank"], [1, 2, 1, "", "build_advi"], [1, 2, 1, "", "create_advi"], [1, 2, 1, "", "create_flexible_variational"], [1, 2, 1, "", "create_fullrank"], [1, 2, 1, "", "create_fullrank_from_meanfield"], [1, 2, 1, "", "create_gamma_distribution"], [1, 2, 1, "", "create_logger"], [1, 2, 1, "", "create_meanfield"], [1, 2, 1, "", "create_normal_distribution"], [1, 2, 1, "", "create_realnp_distribution"], [1, 2, 1, "", "create_realnvp"], [1, 2, 1, "", "create_sampler"], [1, 2, 1, "", "create_tril"], [1, 2, 1, "", "create_variational_model"], [1, 2, 1, "", "create_variational_parser"], [1, 2, 1, "", "create_weibull_distribution"], [1, 2, 1, "", "gather_parameters"], [1, 1, 1, "", "logger"]], "torchtree.cli.cli": [[2, 2, 1, "", "main"]], "torchtree.cli.evolution": [[3, 2, 1, "", "add_birth_death"], [3, 2, 1, "", "add_coalescent"], [3, 2, 1, "", "build_alignment"], [3, 2, 1, "", "create_alignment"], [3, 2, 1, "", "create_bd_prior"], [3, 2, 1, "", "create_bdsk"], [3, 2, 1, "", "create_bdsk_prior"], [3, 2, 1, "", "create_birth_death"], [3, 2, 1, "", "create_branch_model"], [3, 2, 1, "", "create_clock_prior"], [3, 2, 1, "", "create_coalesent"], [3, 2, 1, "", "create_constant_bd_prior"], [3, 2, 1, "", "create_constant_birth_death"], [3, 2, 1, "", "create_data_type"], [3, 2, 1, "", "create_evolution_joint"], [3, 2, 1, "", "create_evolution_parser"], [3, 2, 1, "", "create_evolution_priors"], [3, 2, 1, "", "create_general_data_type"], [3, 2, 1, "", "create_poisson_evolution_joint"], [3, 2, 1, "", "create_poisson_tree_likelihood"], [3, 2, 1, "", "create_site_model"], [3, 2, 1, "", "create_site_model_srd06_mus"], [3, 2, 1, "", "create_site_pattern"], [3, 2, 1, "", "create_substitution_model"], [3, 2, 1, "", "create_substitution_model_priors"], [3, 2, 1, "", "create_taxa"], [3, 2, 1, "", "create_time_tree_prior"], [3, 2, 1, "", "create_tree_likelihood"], [3, 2, 1, "", "create_tree_likelihood_general"], [3, 2, 1, "", "create_tree_likelihood_single"], [3, 2, 1, "", "create_tree_model"], [3, 2, 1, "", "create_ucln_prior"], [3, 2, 1, "", "distribution_type"], [3, 2, 1, "", "get_engine"], [3, 2, 1, "", "is_float"], [3, 1, 1, "", "logger"], [3, 2, 1, "", "parse_distribution"], [3, 2, 1, "", "run_tree_regression"], [3, 2, 1, "", "str_or_float"], [3, 2, 1, "", "zero_or_path"]], "torchtree.cli.hmc": [[4, 2, 1, "", "build_hmc"], [4, 2, 1, "", "create_hmc"], [4, 2, 1, "", "create_hmc_operator"], [4, 2, 1, "", "create_hmc_parser"], [4, 2, 1, "", "create_stan_windowed_adaptation"]], "torchtree.cli.jacobians": [[6, 2, 1, "", "create_jacobians"]], "torchtree.cli.loggers": [[7, 2, 1, "", "create_loggers"]], "torchtree.cli.map": [[8, 2, 1, "", "build_optimizer"], [8, 2, 1, "", "create_logger"], [8, 2, 1, "", "create_map_parser"], [8, 2, 1, "", "create_optimizer"], [8, 2, 1, "", "create_tree_logger"]], "torchtree.cli.mcmc": [[9, 2, 1, "", "build_mcmc"], [9, 2, 1, "", "create_mcmc"], [9, 2, 1, "", "create_mcmc_parser"]], "torchtree.cli.operators": [[10, 2, 1, "", "create_scaler_operator"], [10, 2, 1, "", "create_sliding_window_operator"]], "torchtree.cli.plugin": [[11, 3, 1, "", "Plugin"]], "torchtree.cli.plugin.Plugin": [[11, 4, 1, "", "load_arguments"], [11, 4, 1, "", "process_all"], [11, 4, 1, "", "process_coalescent"], [11, 4, 1, "", "process_tree_likelihood"]], "torchtree.cli.plugin_manager": [[12, 3, 1, "", "PluginManager"]], "torchtree.cli.plugin_manager.PluginManager": [[12, 4, 1, "", "disable_plugins"], [12, 4, 1, "", "load_arguments"], [12, 4, 1, "", "load_plugins"], [12, 4, 1, "", "plugins"]], "torchtree.cli.priors": [[13, 2, 1, "", "create_clock_horseshoe_prior"], [13, 2, 1, "", "create_one_on_x_prior"]], "torchtree.cli.utils": [[14, 2, 1, "", "convert_date_to_real"], [14, 2, 1, "", "length_of_tensor_in_dict_parameter"], [14, 2, 1, "", "make_unconstrained"], [14, 2, 1, "", "read_dates_from_csv"]], "torchtree.core": [[125, 0, 0, "-", "abstractparameter"], [126, 0, 0, "-", "classproperty_decorator"], [127, 0, 0, "-", "container"], [128, 0, 0, "-", "identifiable"], [129, 0, 0, "-", "logger"], [130, 0, 0, "-", "model"], [131, 0, 0, "-", "parameter"], [132, 0, 0, "-", "parameter_encoder"], [133, 0, 0, "-", "parameter_utils"], [134, 0, 0, "-", "parametric"], [135, 0, 0, "-", "runnable"], [136, 0, 0, "-", "serializable"], [137, 0, 0, "-", "utils"]], "torchtree.core.abstractparameter": [[15, 3, 1, "", "AbstractParameter"], [15, 3, 1, "", "Device"]], "torchtree.core.abstractparameter.AbstractParameter": [[15, 4, 1, "", "add_parameter_listener"], [15, 5, 1, "", "device"], [15, 4, 1, "", "dim"], [15, 5, 1, "", "dtype"], [15, 4, 1, "", "fire_parameter_changed"], [15, 4, 1, "", "parameters"], [15, 5, 1, "", "requires_grad"], [15, 5, 1, "", "shape"], [15, 5, 1, "", "tensor"]], "torchtree.core.abstractparameter.Device": [[15, 4, 1, "", "cpu"], [15, 4, 1, "", "cuda"], [15, 5, 1, "", "device"], [15, 4, 1, "", "to"]], "torchtree.core.classproperty_decorator": [[16, 3, 1, "", "classproperty"]], "torchtree.core.container": [[17, 3, 1, "", "Container"]], "torchtree.core.container.Container": [[17, 4, 1, "", "callables"], [17, 4, 1, "", "from_json"], [17, 4, 1, "", "handle_model_changed"], [17, 4, 1, "", "handle_parameter_changed"], [17, 4, 1, "", "params"]], "torchtree.core.identifiable": [[18, 3, 1, "", "Identifiable"]], "torchtree.core.identifiable.Identifiable": [[18, 5, 1, "", "id"]], "torchtree.core.logger": [[20, 3, 1, "", "CSV"], [20, 3, 1, "", "ContainerLogger"], [20, 3, 1, "", "Dumper"], [20, 3, 1, "", "Logger"], [20, 3, 1, "", "LoggerInterface"], [20, 3, 1, "", "TreeLogger"]], "torchtree.core.logger.CSV": [[20, 4, 1, "", "from_json"], [20, 4, 1, "", "run"]], "torchtree.core.logger.ContainerLogger": [[20, 4, 1, "", "close"], [20, 4, 1, "", "from_json"], [20, 4, 1, "", "initialize"], [20, 4, 1, "", "log"]], "torchtree.core.logger.Dumper": [[20, 4, 1, "", "from_json"], [20, 4, 1, "", "run"]], "torchtree.core.logger.Logger": [[20, 4, 1, "", "close"], [20, 4, 1, "", "from_json"], [20, 4, 1, "", "initialize"], [20, 4, 1, "", "log"]], "torchtree.core.logger.LoggerInterface": [[20, 4, 1, "", "close"], [20, 4, 1, "", "initialize"], [20, 4, 1, "", "log"], [20, 4, 1, "", "run"]], "torchtree.core.logger.TreeLogger": [[20, 4, 1, "", "close"], [20, 4, 1, "", "from_json"], [20, 4, 1, "", "initialize"], [20, 4, 1, "", "log"]], "torchtree.core.model": [[21, 3, 1, "", "CallableModel"], [21, 3, 1, "", "Model"]], "torchtree.core.model.CallableModel": [[21, 4, 1, "", "handle_model_changed"], [21, 4, 1, "", "handle_parameter_changed"]], "torchtree.core.model.Model": [[21, 4, 1, "", "add_model_listener"], [21, 4, 1, "", "add_parameter_listener"], [21, 4, 1, "", "cpu"], [21, 4, 1, "", "cuda"], [21, 4, 1, "", "fire_model_changed"], [21, 4, 1, "", "models"], [21, 4, 1, "", "remove_model_listener"], [21, 4, 1, "", "remove_parameter_listener"], [21, 5, 1, "", "sample_shape"], [21, 5, 1, "", "tag"], [21, 4, 1, "", "to"]], "torchtree.core.parameter": [[22, 3, 1, "", "CatParameter"], [22, 3, 1, "", "ModuleParameter"], [22, 3, 1, "", "Parameter"], [22, 3, 1, "", "TransformedParameter"], [22, 3, 1, "", "ViewParameter"]], "torchtree.core.parameter.CatParameter": [[22, 4, 1, "", "add_parameter_listener"], [22, 4, 1, "", "cpu"], [22, 4, 1, "", "cuda"], [22, 5, 1, "", "device"], [22, 4, 1, "", "fire_parameter_changed"], [22, 4, 1, "", "from_json"], [22, 4, 1, "", "handle_model_changed"], [22, 4, 1, "", "handle_parameter_changed"], [22, 5, 1, "", "requires_grad"], [22, 5, 1, "", "tensor"], [22, 4, 1, "", "to"], [22, 4, 1, "", "update"]], "torchtree.core.parameter.ModuleParameter": [[22, 4, 1, "", "add_parameter_listener"], [22, 4, 1, "", "cpu"], [22, 4, 1, "", "cuda"], [22, 4, 1, "", "fire_parameter_changed"], [22, 4, 1, "", "from_json"], [22, 4, 1, "", "handle_model_changed"], [22, 4, 1, "", "handle_parameter_changed"], [22, 4, 1, "", "parameters"], [22, 5, 1, "", "requires_grad"], [22, 5, 1, "", "sample_shape"], [22, 5, 1, "", "shape"], [22, 5, 1, "", "tensor"], [22, 4, 1, "", "to"]], "torchtree.core.parameter.Parameter": [[22, 4, 1, "", "add_parameter_listener"], [22, 4, 1, "", "clone"], [22, 4, 1, "", "copy_"], [22, 4, 1, "", "cpu"], [22, 4, 1, "", "cuda"], [22, 4, 1, "", "detach"], [22, 4, 1, "", "fire_parameter_changed"], [22, 4, 1, "", "from_json"], [22, 5, 1, "", "grad"], [22, 5, 1, "", "grad_fn"], [22, 4, 1, "", "json_factory"], [22, 5, 1, "", "requires_grad"], [22, 4, 1, "", "size"], [22, 5, 1, "", "tensor"], [22, 2, 1, "id6", "to"]], "torchtree.core.parameter.TransformedParameter": [[22, 4, 1, "", "add_parameter_listener"], [22, 4, 1, "", "apply_transform"], [22, 4, 1, "", "cpu"], [22, 4, 1, "", "cuda"], [22, 4, 1, "", "fire_parameter_changed"], [22, 4, 1, "", "from_json"], [22, 4, 1, "", "handle_model_changed"], [22, 4, 1, "", "handle_parameter_changed"], [22, 4, 1, "", "parameters"], [22, 5, 1, "", "requires_grad"], [22, 5, 1, "", "sample_shape"], [22, 5, 1, "", "shape"], [22, 5, 1, "", "tensor"], [22, 4, 1, "", "to"]], "torchtree.core.parameter.ViewParameter": [[22, 4, 1, "", "add_parameter_listener"], [22, 4, 1, "", "assign"], [22, 4, 1, "", "clone"], [22, 4, 1, "", "cpu"], [22, 4, 1, "", "cuda"], [22, 5, 1, "", "dtype"], [22, 4, 1, "", "fire_parameter_changed"], [22, 4, 1, "", "from_json"], [22, 4, 1, "", "handle_parameter_changed"], [22, 4, 1, "", "json_factory"], [22, 5, 1, "", "requires_grad"], [22, 5, 1, "", "shape"], [22, 5, 1, "", "tensor"], [22, 4, 1, "", "to"]], "torchtree.core.parameter_encoder": [[23, 3, 1, "", "ParameterEncoder"]], "torchtree.core.parameter_encoder.ParameterEncoder": [[23, 4, 1, "", "default"]], "torchtree.core.parameter_utils": [[24, 2, 1, "", "pack_tensor"], [24, 2, 1, "", "save_parameters"]], "torchtree.core.parametric": [[25, 3, 1, "", "ModelListener"], [25, 3, 1, "", "ParameterListener"], [25, 3, 1, "", "Parametric"]], "torchtree.core.parametric.ModelListener": [[25, 4, 1, "", "handle_model_changed"]], "torchtree.core.parametric.ParameterListener": [[25, 4, 1, "", "handle_parameter_changed"]], "torchtree.core.parametric.Parametric": [[25, 4, 1, "", "parameters"], [25, 4, 1, "", "register_model"], [25, 4, 1, "", "register_parameter"]], "torchtree.core.runnable": [[26, 3, 1, "", "Runnable"]], "torchtree.core.runnable.Runnable": [[26, 4, 1, "", "run"]], "torchtree.core.serializable": [[27, 3, 1, "", "JSONSerializable"]], "torchtree.core.serializable.JSONSerializable": [[27, 4, 1, "", "from_json"], [27, 4, 1, "", "from_json_safe"]], "torchtree.core.utils": [[28, 6, 1, "", "AlternativeAttributeError"], [28, 6, 1, "", "JSONParseError"], [28, 1, 1, "", "REGISTERED_CLASSES"], [28, 3, 1, "", "SignalHandler"], [28, 3, 1, "", "TensorEncoder"], [28, 2, 1, "", "as_tensor"], [28, 2, 1, "", "expand_plates"], [28, 2, 1, "", "get_class"], [28, 2, 1, "", "package_contents"], [28, 2, 1, "", "print_graph"], [28, 2, 1, "", "process_object"], [28, 2, 1, "", "process_objects"], [28, 2, 1, "", "register_class"], [28, 2, 1, "", "remove_comments"], [28, 2, 1, "", "replace_star_with_str"], [28, 2, 1, "", "replace_wildcard_with_str"], [28, 2, 1, "", "string_to_list_index"], [28, 2, 1, "", "tensor_rand"], [28, 2, 1, "", "update_parameters"], [28, 2, 1, "", "validate"]], "torchtree.core.utils.AlternativeAttributeError": [[28, 4, 1, "", "wrapper"]], "torchtree.core.utils.SignalHandler": [[28, 4, 1, "", "exit"]], "torchtree.core.utils.TensorEncoder": [[28, 4, 1, "", "default"]], "torchtree.distributions": [[139, 0, 0, "-", "bayesian_bridge"], [140, 0, 0, "-", "ctmc_scale"], [141, 0, 0, "-", "deterministic_normal"], [142, 0, 0, "-", "distributions"], [143, 0, 0, "-", "gmrf"], [144, 0, 0, "-", "gmrf_integrated"], [145, 0, 0, "-", "inverse_gamma"], [146, 0, 0, "-", "joint_distribution"], [147, 0, 0, "-", "log_normal"], [148, 0, 0, "-", "multivariate_normal"], [149, 0, 0, "-", "normal"], [150, 0, 0, "-", "one_on_x"], [151, 0, 0, "-", "scale_mixture"], [152, 0, 0, "-", "transforms"], [153, 0, 0, "-", "tree_prior"]], "torchtree.distributions.bayesian_bridge": [[29, 3, 1, "", "BayesianBridge"], [29, 2, 1, "", "process_object_number"]], "torchtree.distributions.bayesian_bridge.BayesianBridge": [[29, 4, 1, "", "from_json"], [29, 4, 1, "", "handle_model_changed"], [29, 4, 1, "", "json_factory"]], "torchtree.distributions.ctmc_scale": [[30, 3, 1, "", "CTMCScale"]], "torchtree.distributions.ctmc_scale.CTMCScale": [[30, 4, 1, "", "cpu"], [30, 4, 1, "", "cuda"], [30, 4, 1, "", "from_json"], [30, 4, 1, "", "json_factory"], [30, 7, 1, "", "log_gamma_one_half"], [30, 7, 1, "", "shape"], [30, 4, 1, "", "to"]], "torchtree.distributions.deterministic_normal": [[31, 3, 1, "", "DeterministicNormal"]], "torchtree.distributions.deterministic_normal.DeterministicNormal": [[31, 5, 1, "", "batch_shape"], [31, 4, 1, "", "entropy"], [31, 5, 1, "", "event_shape"], [31, 4, 1, "", "from_json"], [31, 4, 1, "", "handle_model_changed"], [31, 4, 1, "", "json_factory"], [31, 4, 1, "", "log_prob"], [31, 4, 1, "", "rsample"], [31, 4, 1, "", "sample"]], "torchtree.distributions.distributions": [[32, 3, 1, "", "Distribution"], [32, 3, 1, "", "DistributionModel"]], "torchtree.distributions.distributions.Distribution": [[32, 5, 1, "", "batch_shape"], [32, 5, 1, "", "distribution"], [32, 4, 1, "", "entropy"], [32, 5, 1, "", "event_shape"], [32, 4, 1, "", "from_json"], [32, 4, 1, "", "json_factory"], [32, 4, 1, "", "log_prob"], [32, 4, 1, "", "rsample"], [32, 4, 1, "", "sample"]], "torchtree.distributions.distributions.DistributionModel": [[32, 4, 1, "", "entropy"], [32, 4, 1, "", "log_prob"], [32, 4, 1, "", "rsample"], [32, 4, 1, "", "sample"]], "torchtree.distributions.gmrf": [[33, 3, 1, "", "GMRF"], [33, 3, 1, "", "GMRFCovariate"]], "torchtree.distributions.gmrf.GMRF": [[33, 4, 1, "", "from_json"], [33, 4, 1, "", "precision_matrix"]], "torchtree.distributions.gmrf.GMRFCovariate": [[33, 4, 1, "", "from_json"]], "torchtree.distributions.gmrf_integrated": [[34, 3, 1, "", "GMRFGammaIntegrated"]], "torchtree.distributions.gmrf_integrated.GMRFGammaIntegrated": [[34, 4, 1, "", "from_json"]], "torchtree.distributions.inverse_gamma": [[36, 3, 1, "", "InverseGamma"]], "torchtree.distributions.inverse_gamma.InverseGamma": [[36, 7, 1, "", "arg_constraints"], [36, 5, 1, "", "concentration"], [36, 4, 1, "", "expand"], [36, 7, 1, "", "has_rsample"], [36, 5, 1, "", "rate"], [36, 7, 1, "", "support"]], "torchtree.distributions.joint_distribution": [[37, 3, 1, "", "JointDistributionModel"]], "torchtree.distributions.joint_distribution.JointDistributionModel": [[37, 4, 1, "", "entropy"], [37, 4, 1, "", "from_json"], [37, 4, 1, "", "handle_parameter_changed"], [37, 4, 1, "", "log_prob"], [37, 4, 1, "", "rsample"], [37, 4, 1, "", "sample"]], "torchtree.distributions.log_normal": [[38, 3, 1, "", "LogNormal"]], "torchtree.distributions.multivariate_normal": [[39, 3, 1, "", "MultivariateNormal"]], "torchtree.distributions.multivariate_normal.MultivariateNormal": [[39, 5, 1, "", "batch_shape"], [39, 4, 1, "", "entropy"], [39, 5, 1, "", "event_shape"], [39, 4, 1, "", "from_json"], [39, 4, 1, "", "log_prob"], [39, 4, 1, "", "rsample"], [39, 4, 1, "", "sample"]], "torchtree.distributions.normal": [[40, 3, 1, "", "Normal"]], "torchtree.distributions.one_on_x": [[41, 3, 1, "", "OneOnX"]], "torchtree.distributions.one_on_x.OneOnX": [[41, 7, 1, "", "arg_constraints"], [41, 4, 1, "", "log_prob"], [41, 7, 1, "", "support"]], "torchtree.distributions.scale_mixture": [[42, 3, 1, "", "ScaleMixtureNormal"]], "torchtree.distributions.scale_mixture.ScaleMixtureNormal": [[42, 4, 1, "", "from_json"], [42, 4, 1, "", "handle_model_changed"], [42, 4, 1, "", "json_factory"]], "torchtree.distributions.transforms": [[43, 3, 1, "", "ConvexCombinationTransform"], [43, 3, 1, "", "CumSumExpTransform"], [43, 3, 1, "", "CumSumSoftPlusTransform"], [43, 3, 1, "", "CumSumTransform"], [43, 3, 1, "", "LinearTransform"], [43, 3, 1, "", "LogTransform"], [43, 3, 1, "", "SoftPlusTransform"], [43, 3, 1, "", "TrilExpDiagonalTransform"]], "torchtree.distributions.transforms.ConvexCombinationTransform": [[43, 7, 1, "", "codomain"], [43, 7, 1, "", "domain"], [43, 4, 1, "", "log_abs_det_jacobian"]], "torchtree.distributions.transforms.CumSumExpTransform": [[43, 7, 1, "", "bijective"], [43, 7, 1, "", "codomain"], [43, 7, 1, "", "domain"], [43, 4, 1, "", "log_abs_det_jacobian"], [43, 7, 1, "", "sign"]], "torchtree.distributions.transforms.CumSumSoftPlusTransform": [[43, 7, 1, "", "bijective"], [43, 7, 1, "", "codomain"], [43, 7, 1, "", "domain"], [43, 4, 1, "", "log_abs_det_jacobian"], [43, 7, 1, "", "sign"]], "torchtree.distributions.transforms.CumSumTransform": [[43, 7, 1, "", "bijective"], [43, 7, 1, "", "codomain"], [43, 7, 1, "", "domain"], [43, 4, 1, "", "log_abs_det_jacobian"], [43, 7, 1, "", "sign"]], "torchtree.distributions.transforms.LinearTransform": [[43, 7, 1, "", "bijective"], [43, 7, 1, "", "codomain"], [43, 7, 1, "", "domain"], [43, 4, 1, "", "log_abs_det_jacobian"], [43, 7, 1, "", "sign"]], "torchtree.distributions.transforms.LogTransform": [[43, 7, 1, "", "bijective"], [43, 7, 1, "", "codomain"], [43, 7, 1, "", "domain"], [43, 4, 1, "", "log_abs_det_jacobian"], [43, 7, 1, "", "sign"]], "torchtree.distributions.transforms.SoftPlusTransform": [[43, 7, 1, "", "bijective"], [43, 7, 1, "", "codomain"], [43, 7, 1, "", "domain"], [43, 4, 1, "", "log_abs_det_jacobian"], [43, 7, 1, "", "sign"]], "torchtree.distributions.transforms.TrilExpDiagonalTransform": [[43, 7, 1, "", "bijective"], [43, 4, 1, "", "log_abs_det_jacobian"], [43, 7, 1, "", "sign"]], "torchtree.distributions.tree_prior": [[44, 3, 1, "", "CompoundGammaDirichletPrior"]], "torchtree.distributions.tree_prior.CompoundGammaDirichletPrior": [[44, 4, 1, "", "from_json"], [44, 4, 1, "", "handle_parameter_changed"]], "torchtree.evolution": [[155, 0, 0, "-", "alignment"], [156, 0, 0, "-", "attribute_pattern"], [157, 0, 0, "-", "bdsk"], [158, 0, 0, "-", "birth_death"], [159, 0, 0, "-", "branch_model"], [160, 0, 0, "-", "coalescent"], [161, 0, 0, "-", "datatype"], [162, 0, 0, "-", "io"], [163, 0, 0, "-", "poisson_tree_likelihood"], [164, 0, 0, "-", "rate_transform"], [165, 0, 0, "-", "root_transform"], [166, 0, 0, "-", "site_model"], [167, 0, 0, "-", "site_pattern"], [168, 0, 0, "-", "substitution_model"], [174, 0, 0, "-", "taxa"], [175, 0, 0, "-", "tree_height_transform"], [176, 0, 0, "-", "tree_likelihood"], [177, 0, 0, "-", "tree_model"], [178, 0, 0, "-", "tree_model_flexible"]], "torchtree.evolution.alignment": [[45, 3, 1, "", "Alignment"], [45, 1, 1, "", "Sequence"], [45, 2, 1, "", "calculate_F3x4"], [45, 2, 1, "", "calculate_F3x4_from_nucleotide"], [45, 2, 1, "", "calculate_frequencies"], [45, 2, 1, "", "calculate_frequencies_per_codon_position"], [45, 2, 1, "", "calculate_kappa"], [45, 2, 1, "", "calculate_substitutions"], [45, 2, 1, "", "calculate_ts_tv"], [45, 2, 1, "", "read_fasta_sequences"]], "torchtree.evolution.alignment.Alignment": [[45, 5, 1, "", "data_type"], [45, 4, 1, "", "from_json"], [45, 4, 1, "", "get"], [45, 5, 1, "", "sequence_size"], [45, 5, 1, "", "taxa"]], "torchtree.evolution.attribute_pattern": [[46, 3, 1, "", "AttributePattern"]], "torchtree.evolution.attribute_pattern.AttributePattern": [[46, 4, 1, "", "compute_tips_partials"], [46, 4, 1, "", "compute_tips_states"], [46, 4, 1, "", "cpu"], [46, 4, 1, "", "cuda"], [46, 4, 1, "", "from_json"], [46, 4, 1, "", "handle_model_changed"], [46, 4, 1, "", "handle_parameter_changed"]], "torchtree.evolution.bdsk": [[47, 3, 1, "", "BDSKModel"], [47, 3, 1, "", "PiecewiseConstantBirthDeath"], [47, 2, 1, "", "epidemiology_to_birth_death"]], "torchtree.evolution.bdsk.BDSKModel": [[47, 4, 1, "", "from_json"]], "torchtree.evolution.bdsk.PiecewiseConstantBirthDeath": [[47, 7, 1, "", "arg_constraints"], [47, 4, 1, "", "log_p"], [47, 4, 1, "", "log_prob"], [47, 4, 1, "", "log_q"], [47, 4, 1, "", "p0"], [47, 7, 1, "", "support"]], "torchtree.evolution.birth_death": [[48, 3, 1, "", "BirthDeath"], [48, 3, 1, "", "BirthDeathModel"]], "torchtree.evolution.birth_death.BirthDeath": [[48, 7, 1, "", "arg_constraints"], [48, 4, 1, "", "log_p"], [48, 4, 1, "", "log_prob"], [48, 4, 1, "", "log_q"]], "torchtree.evolution.birth_death.BirthDeathModel": [[48, 4, 1, "", "from_json"], [48, 4, 1, "", "handle_model_changed"]], "torchtree.evolution.branch_model": [[49, 3, 1, "", "AbstractClockModel"], [49, 3, 1, "", "BranchModel"], [49, 3, 1, "", "SimpleClockModel"], [49, 3, 1, "", "StrictClockModel"]], "torchtree.evolution.branch_model.AbstractClockModel": [[49, 4, 1, "", "handle_model_changed"], [49, 4, 1, "", "handle_parameter_changed"]], "torchtree.evolution.branch_model.BranchModel": [[49, 5, 1, "", "rates"]], "torchtree.evolution.branch_model.SimpleClockModel": [[49, 4, 1, "", "from_json"], [49, 4, 1, "", "json_factory"], [49, 5, 1, "", "rates"]], "torchtree.evolution.branch_model.StrictClockModel": [[49, 4, 1, "", "from_json"], [49, 5, 1, "", "rates"]], "torchtree.evolution.coalescent": [[50, 3, 1, "", "AbstractCoalescentDistribution"], [50, 3, 1, "", "AbstractCoalescentModel"], [50, 3, 1, "", "ConstantCoalescent"], [50, 3, 1, "", "ConstantCoalescentIntegrated"], [50, 3, 1, "", "ConstantCoalescentModel"], [50, 3, 1, "", "ExponentialCoalescent"], [50, 3, 1, "", "ExponentialCoalescentModel"], [50, 3, 1, "", "FakeTreeModel"], [50, 3, 1, "", "PiecewiseConstantCoalescent"], [50, 3, 1, "", "PiecewiseConstantCoalescentGrid"], [50, 3, 1, "", "PiecewiseConstantCoalescentGridModel"], [50, 3, 1, "", "PiecewiseConstantCoalescentModel"], [50, 3, 1, "", "PiecewiseExponentialCoalescentGrid"], [50, 3, 1, "", "SoftPiecewiseConstantCoalescentGrid"], [50, 2, 1, "", "process_data_coalesent"]], "torchtree.evolution.coalescent.AbstractCoalescentDistribution": [[50, 7, 1, "", "arg_constraints"], [50, 7, 1, "", "has_rsample"], [50, 4, 1, "", "maximum_likelihood"], [50, 7, 1, "", "support"]], "torchtree.evolution.coalescent.AbstractCoalescentModel": [[50, 4, 1, "", "distribution"]], "torchtree.evolution.coalescent.ConstantCoalescent": [[50, 7, 1, "", "has_rsample"], [50, 4, 1, "", "log_prob"], [50, 4, 1, "", "maximum_likelihood"], [50, 4, 1, "", "rsample"]], "torchtree.evolution.coalescent.ConstantCoalescentIntegrated": [[50, 7, 1, "", "has_rsample"], [50, 4, 1, "", "log_prob"]], "torchtree.evolution.coalescent.ConstantCoalescentModel": [[50, 4, 1, "", "distribution"], [50, 4, 1, "", "from_json"]], "torchtree.evolution.coalescent.ExponentialCoalescent": [[50, 7, 1, "", "arg_constraints"], [50, 7, 1, "", "has_rsample"], [50, 4, 1, "", "log_prob"], [50, 7, 1, "", "support"]], "torchtree.evolution.coalescent.ExponentialCoalescentModel": [[50, 4, 1, "", "distribution"], [50, 4, 1, "", "from_json"]], "torchtree.evolution.coalescent.FakeTreeModel": [[50, 5, 1, "", "node_heights"], [50, 5, 1, "", "sample_shape"]], "torchtree.evolution.coalescent.PiecewiseConstantCoalescent": [[50, 4, 1, "", "log_prob"], [50, 4, 1, "", "maximum_likelihood"]], "torchtree.evolution.coalescent.PiecewiseConstantCoalescentGrid": [[50, 4, 1, "", "log_prob"]], "torchtree.evolution.coalescent.PiecewiseConstantCoalescentGridModel": [[50, 4, 1, "", "distribution"], [50, 4, 1, "", "from_json"]], "torchtree.evolution.coalescent.PiecewiseConstantCoalescentModel": [[50, 4, 1, "", "distribution"]], "torchtree.evolution.coalescent.PiecewiseExponentialCoalescentGrid": [[50, 7, 1, "", "arg_constraints"], [50, 7, 1, "", "has_rsample"], [50, 4, 1, "", "log_prob"], [50, 7, 1, "", "support"]], "torchtree.evolution.coalescent.SoftPiecewiseConstantCoalescentGrid": [[50, 4, 1, "", "log_prob"]], "torchtree.evolution.datatype": [[51, 3, 1, "", "AbstractDataType"], [51, 3, 1, "", "AminoAcidDataType"], [51, 3, 1, "", "CodonDataType"], [51, 3, 1, "", "DataType"], [51, 3, 1, "", "GeneralDataType"], [51, 3, 1, "", "NucleotideDataType"]], "torchtree.evolution.datatype.AbstractDataType": [[51, 5, 1, "", "size"], [51, 5, 1, "", "state_count"], [51, 5, 1, "", "states"]], "torchtree.evolution.datatype.AminoAcidDataType": [[51, 7, 1, "", "AMINO_ACIDS"], [51, 7, 1, "id0", "AMINO_ACIDS_AMBIGUITY_STATES"], [51, 7, 1, "", "AMINO_ACIDS_STATES"], [51, 4, 1, "", "encoding"], [51, 4, 1, "", "from_json"], [51, 4, 1, "", "partial"]], "torchtree.evolution.datatype.CodonDataType": [[51, 7, 1, "", "CODON_TRIPLETS"], [51, 7, 1, "", "GENETIC_CODE_NAMES"], [51, 7, 1, "", "GENETIC_CODE_TABLES"], [51, 7, 1, "", "NUMBER_OF_CODONS"], [51, 4, 1, "", "encoding"], [51, 4, 1, "", "from_json"], [51, 4, 1, "", "partial"]], "torchtree.evolution.datatype.DataType": [[51, 4, 1, "", "encoding"], [51, 4, 1, "", "partial"], [51, 5, 1, "", "size"], [51, 5, 1, "", "state_count"], [51, 5, 1, "", "states"]], "torchtree.evolution.datatype.GeneralDataType": [[51, 4, 1, "", "encoding"], [51, 4, 1, "", "from_json"], [51, 4, 1, "", "partial"]], "torchtree.evolution.datatype.NucleotideDataType": [[51, 7, 1, "", "NUCLEOTIDES"], [51, 7, 1, "", "NUCLEOTIDE_AMBIGUITY_STATES"], [51, 7, 1, "", "NUCLEOTIDE_STATES"], [51, 4, 1, "", "encoding"], [51, 4, 1, "", "from_json"], [51, 4, 1, "", "partial"]], "torchtree.evolution.io": [[53, 3, 1, "", "Node"], [53, 2, 1, "", "convert_samples_to_nexus"], [53, 2, 1, "", "extract_taxa"], [53, 2, 1, "", "parse_taxa"], [53, 2, 1, "", "parse_translate"], [53, 2, 1, "", "parse_trees"], [53, 2, 1, "", "random_tree_from_heights"], [53, 2, 1, "", "read_tree"], [53, 2, 1, "", "read_tree_and_alignment"], [53, 2, 1, "", "split_newick"], [53, 2, 1, "", "to_nexus"]], "torchtree.evolution.poisson_tree_likelihood": [[54, 3, 1, "", "PoissonTreeLikelihood"]], "torchtree.evolution.poisson_tree_likelihood.PoissonTreeLikelihood": [[54, 4, 1, "", "from_json"], [54, 4, 1, "", "handle_parameter_changed"]], "torchtree.evolution.rate_transform": [[55, 3, 1, "", "LogDifferenceRateTransform"], [55, 3, 1, "", "RescaledRateTransform"]], "torchtree.evolution.rate_transform.LogDifferenceRateTransform": [[55, 7, 1, "", "bijective"], [55, 4, 1, "", "log_abs_det_jacobian"], [55, 7, 1, "", "sign"]], "torchtree.evolution.rate_transform.RescaledRateTransform": [[55, 7, 1, "", "bijective"], [55, 4, 1, "", "log_abs_det_jacobian"], [55, 7, 1, "", "sign"]], "torchtree.evolution.root_transform": [[56, 3, 1, "", "RootParameter"]], "torchtree.evolution.root_transform.RootParameter": [[56, 4, 1, "", "add_parameter_listener"], [56, 4, 1, "", "fire_parameter_changed"], [56, 4, 1, "", "from_json"], [56, 4, 1, "", "handle_model_changed"], [56, 4, 1, "", "handle_parameter_changed"], [56, 4, 1, "", "parameters"], [56, 5, 1, "", "tensor"], [56, 4, 1, "", "transform"]], "torchtree.evolution.site_model": [[57, 3, 1, "", "ConstantSiteModel"], [57, 3, 1, "", "InvariantSiteModel"], [57, 3, 1, "", "LogNormalSiteModel"], [57, 3, 1, "", "SiteModel"], [57, 3, 1, "", "UnivariateDiscretizedSiteModel"], [57, 3, 1, "", "WeibullSiteModel"]], "torchtree.evolution.site_model.ConstantSiteModel": [[57, 4, 1, "", "cpu"], [57, 4, 1, "", "cuda"], [57, 4, 1, "", "from_json"], [57, 4, 1, "", "handle_model_changed"], [57, 4, 1, "", "handle_parameter_changed"], [57, 4, 1, "", "probabilities"], [57, 4, 1, "", "rates"]], "torchtree.evolution.site_model.InvariantSiteModel": [[57, 4, 1, "", "from_json"], [57, 4, 1, "", "handle_model_changed"], [57, 4, 1, "", "handle_parameter_changed"], [57, 5, 1, "", "invariant"], [57, 4, 1, "", "probabilities"], [57, 4, 1, "", "rates"], [57, 4, 1, "", "update_rates_probs"]], "torchtree.evolution.site_model.LogNormalSiteModel": [[57, 4, 1, "", "from_json"], [57, 5, 1, "", "scale"], [57, 4, 1, "", "update_rates"]], "torchtree.evolution.site_model.SiteModel": [[57, 4, 1, "", "probabilities"], [57, 4, 1, "", "rates"]], "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel": [[57, 4, 1, "", "cpu"], [57, 4, 1, "", "cuda"], [57, 4, 1, "", "handle_model_changed"], [57, 4, 1, "", "handle_parameter_changed"], [57, 5, 1, "", "invariant"], [57, 4, 1, "", "inverse_cdf"], [57, 4, 1, "", "probabilities"], [57, 4, 1, "", "rates"], [57, 4, 1, "", "update_rates"]], "torchtree.evolution.site_model.WeibullSiteModel": [[57, 4, 1, "", "from_json"], [57, 4, 1, "", "inverse_cdf"], [57, 5, 1, "", "shape"]], "torchtree.evolution.site_pattern": [[58, 3, 1, "", "SitePattern"], [58, 2, 1, "", "compress"], [58, 2, 1, "", "compress_alignment"], [58, 2, 1, "", "compress_alignment_states"]], "torchtree.evolution.site_pattern.SitePattern": [[58, 4, 1, "", "compute_tips_partials"], [58, 4, 1, "", "compute_tips_states"], [58, 4, 1, "", "cpu"], [58, 4, 1, "", "cuda"], [58, 4, 1, "", "from_json"], [58, 4, 1, "", "handle_model_changed"], [58, 4, 1, "", "handle_parameter_changed"]], "torchtree.evolution.substitution_model": [[169, 0, 0, "-", "abstract"], [170, 0, 0, "-", "amino_acid"], [171, 0, 0, "-", "codon"], [172, 0, 0, "-", "general"], [173, 0, 0, "-", "nucleotide"]], "torchtree.evolution.substitution_model.abstract": [[59, 3, 1, "", "AbstractSubstitutionModel"], [59, 3, 1, "", "NonSymmetricSubstitutionModel"], [59, 3, 1, "", "SubstitutionModel"], [59, 3, 1, "", "SymmetricSubstitutionModel"]], "torchtree.evolution.substitution_model.abstract.AbstractSubstitutionModel": [[59, 5, 1, "", "frequencies"], [59, 4, 1, "", "norm"]], "torchtree.evolution.substitution_model.abstract.NonSymmetricSubstitutionModel": [[59, 4, 1, "", "eigen"], [59, 4, 1, "", "p_t"]], "torchtree.evolution.substitution_model.abstract.SubstitutionModel": [[59, 5, 1, "", "frequencies"], [59, 4, 1, "", "p_t"], [59, 4, 1, "", "q"]], "torchtree.evolution.substitution_model.abstract.SymmetricSubstitutionModel": [[59, 4, 1, "", "eigen"], [59, 4, 1, "", "p_t"]], "torchtree.evolution.substitution_model.amino_acid": [[60, 3, 1, "", "LG"], [60, 3, 1, "", "WAG"]], "torchtree.evolution.substitution_model.amino_acid.LG": [[60, 4, 1, "", "from_json"]], "torchtree.evolution.substitution_model.amino_acid.WAG": [[60, 4, 1, "", "from_json"]], "torchtree.evolution.substitution_model.codon": [[61, 3, 1, "", "MG94"]], "torchtree.evolution.substitution_model.codon.MG94": [[61, 4, 1, "", "from_json"], [61, 4, 1, "", "handle_model_changed"], [61, 4, 1, "", "handle_parameter_changed"], [61, 4, 1, "", "q"]], "torchtree.evolution.substitution_model.general": [[62, 3, 1, "", "EmpiricalSubstitutionModel"], [62, 3, 1, "", "GeneralJC69"], [62, 3, 1, "", "GeneralNonSymmetricSubstitutionModel"], [62, 3, 1, "", "GeneralSymmetricSubstitutionModel"]], "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel": [[62, 4, 1, "", "create_rate_matrix"], [62, 4, 1, "", "eigen"], [62, 5, 1, "", "frequencies"], [62, 4, 1, "", "from_json"], [62, 4, 1, "", "handle_model_changed"], [62, 4, 1, "", "handle_parameter_changed"], [62, 4, 1, "", "p_t"], [62, 4, 1, "", "q"]], "torchtree.evolution.substitution_model.general.GeneralJC69": [[62, 4, 1, "", "cpu"], [62, 4, 1, "", "cuda"], [62, 5, 1, "", "frequencies"], [62, 4, 1, "", "from_json"], [62, 4, 1, "", "handle_model_changed"], [62, 4, 1, "", "handle_parameter_changed"], [62, 4, 1, "", "p_t"], [62, 4, 1, "", "q"]], "torchtree.evolution.substitution_model.general.GeneralNonSymmetricSubstitutionModel": [[62, 4, 1, "", "from_json"], [62, 4, 1, "", "handle_model_changed"], [62, 4, 1, "", "handle_parameter_changed"], [62, 4, 1, "", "q"], [62, 5, 1, "", "rates"]], "torchtree.evolution.substitution_model.general.GeneralSymmetricSubstitutionModel": [[62, 4, 1, "", "from_json"], [62, 4, 1, "", "handle_model_changed"], [62, 4, 1, "", "handle_parameter_changed"], [62, 4, 1, "", "q"], [62, 5, 1, "", "rates"]], "torchtree.evolution.substitution_model.nucleotide": [[64, 3, 1, "", "GTR"], [64, 3, 1, "", "HKY"], [64, 3, 1, "", "JC69"]], "torchtree.evolution.substitution_model.nucleotide.GTR": [[64, 4, 1, "", "from_json"], [64, 4, 1, "", "handle_model_changed"], [64, 4, 1, "", "handle_parameter_changed"], [64, 4, 1, "", "q"], [64, 5, 1, "", "rates"]], "torchtree.evolution.substitution_model.nucleotide.HKY": [[64, 4, 1, "", "from_json"], [64, 4, 1, "", "handle_model_changed"], [64, 4, 1, "", "handle_parameter_changed"], [64, 5, 1, "", "kappa"], [64, 4, 1, "", "p_t_analytical"], [64, 4, 1, "", "q"]], "torchtree.evolution.substitution_model.nucleotide.JC69": [[64, 4, 1, "", "cpu"], [64, 4, 1, "", "cuda"], [64, 5, 1, "", "frequencies"], [64, 4, 1, "", "from_json"], [64, 4, 1, "", "handle_model_changed"], [64, 4, 1, "", "handle_parameter_changed"], [64, 4, 1, "", "p_t"], [64, 4, 1, "", "q"]], "torchtree.evolution.taxa": [[65, 3, 1, "", "Taxa"], [65, 3, 1, "", "Taxon"]], "torchtree.evolution.taxa.Taxa": [[65, 4, 1, "", "from_json"]], "torchtree.evolution.taxa.Taxon": [[65, 4, 1, "", "from_json"]], "torchtree.evolution.tree_height_transform": [[66, 3, 1, "", "DifferenceNodeHeightTransform"], [66, 3, 1, "", "GeneralNodeHeightTransform"]], "torchtree.evolution.tree_height_transform.DifferenceNodeHeightTransform": [[66, 7, 1, "", "bijective"], [66, 4, 1, "", "log_abs_det_jacobian"], [66, 7, 1, "", "sign"]], "torchtree.evolution.tree_height_transform.GeneralNodeHeightTransform": [[66, 7, 1, "", "bijective"], [66, 4, 1, "", "log_abs_det_jacobian"], [66, 7, 1, "", "sign"], [66, 4, 1, "", "sort_indices"], [66, 4, 1, "", "update_bounds"]], "torchtree.evolution.tree_likelihood": [[67, 3, 1, "", "TreeLikelihoodModel"], [67, 2, 1, "", "calculate_treelikelihood"], [67, 2, 1, "", "calculate_treelikelihood_discrete"], [67, 2, 1, "", "calculate_treelikelihood_discrete_rescaled"], [67, 2, 1, "", "calculate_treelikelihood_discrete_safe"], [67, 2, 1, "", "calculate_treelikelihood_tip_states_discrete"], [67, 2, 1, "", "calculate_treelikelihood_tip_states_discrete_rescaled"]], "torchtree.evolution.tree_likelihood.TreeLikelihoodModel": [[67, 4, 1, "", "calculate_with_tip_partials"], [67, 4, 1, "", "calculate_with_tip_states"], [67, 4, 1, "", "from_json"], [67, 4, 1, "", "handle_parameter_changed"]], "torchtree.evolution.tree_model": [[68, 3, 1, "", "AbstractTreeModel"], [68, 3, 1, "", "ReparameterizedTimeTreeModel"], [68, 3, 1, "", "TimeTreeModel"], [68, 3, 1, "", "TreeModel"], [68, 3, 1, "", "UnRootedTreeModel"], [68, 2, 1, "", "heights_from_branch_lengths"], [68, 2, 1, "", "heights_to_branch_lengths"], [68, 2, 1, "", "initialize_dates_from_taxa"], [68, 2, 1, "", "parse_tree"], [68, 2, 1, "", "setup_dates"], [68, 2, 1, "", "setup_indexes"]], "torchtree.evolution.tree_model.AbstractTreeModel": [[68, 4, 1, "", "as_newick"], [68, 4, 1, "", "handle_model_changed"], [68, 5, 1, "", "postorder"], [68, 5, 1, "", "taxa"], [68, 4, 1, "", "update_traversals"], [68, 4, 1, "", "write_newick"]], "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel": [[68, 4, 1, "", "cpu"], [68, 4, 1, "", "cuda"], [68, 4, 1, "", "from_json"], [68, 4, 1, "", "handle_model_changed"], [68, 4, 1, "", "handle_parameter_changed"], [68, 4, 1, "", "json_factory"], [68, 5, 1, "", "node_heights"], [68, 4, 1, "", "update_node_heights"]], "torchtree.evolution.tree_model.TimeTreeModel": [[68, 4, 1, "", "branch_lengths"], [68, 4, 1, "", "cpu"], [68, 4, 1, "", "cuda"], [68, 4, 1, "", "from_json"], [68, 4, 1, "", "handle_parameter_changed"], [68, 4, 1, "", "json_factory"], [68, 5, 1, "", "node_heights"], [68, 4, 1, "", "update_leaf_heights"], [68, 4, 1, "", "update_traversals"]], "torchtree.evolution.tree_model.TreeModel": [[68, 4, 1, "", "branch_lengths"], [68, 5, 1, "", "postorder"], [68, 5, 1, "", "taxa"], [68, 4, 1, "", "write_newick"]], "torchtree.evolution.tree_model.UnRootedTreeModel": [[68, 4, 1, "", "branch_lengths"], [68, 4, 1, "", "from_json"], [68, 4, 1, "", "handle_parameter_changed"], [68, 4, 1, "", "json_factory"]], "torchtree.evolution.tree_model_flexible": [[69, 3, 1, "", "FlexibleTimeTreeModel"]], "torchtree.evolution.tree_model_flexible.FlexibleTimeTreeModel": [[69, 4, 1, "", "from_json"], [69, 4, 1, "", "json_factory"]], "torchtree.inference": [[180, 0, 0, "-", "hmc"], [188, 0, 0, "-", "mcmc"], [191, 0, 0, "-", "sampler"], [192, 0, 0, "-", "utils"]], "torchtree.inference.hmc": [[181, 0, 0, "-", "adaptation"], [182, 0, 0, "-", "adaptors"], [183, 0, 0, "-", "hamiltonian"], [184, 0, 0, "-", "hmc"], [185, 0, 0, "-", "integrator"], [186, 0, 0, "-", "operator"], [187, 0, 0, "-", "stan_adaptation"]], "torchtree.inference.hmc.adaptation": [[71, 3, 1, "", "AdaptiveStepSize"], [71, 3, 1, "", "Adaptor"], [71, 3, 1, "", "DualAveragingStepSize"], [71, 3, 1, "", "MassMatrixAdaptor"], [71, 3, 1, "", "WarmupAdaptation"], [71, 2, 1, "", "find_reasonable_step_size"]], "torchtree.inference.hmc.adaptation.AdaptiveStepSize": [[71, 4, 1, "", "from_json"], [71, 4, 1, "", "learn"], [71, 4, 1, "", "restart"]], "torchtree.inference.hmc.adaptation.Adaptor": [[71, 4, 1, "", "learn"], [71, 4, 1, "", "restart"]], "torchtree.inference.hmc.adaptation.DualAveragingStepSize": [[71, 4, 1, "", "from_json"], [71, 4, 1, "", "learn"], [71, 4, 1, "", "restart"]], "torchtree.inference.hmc.adaptation.MassMatrixAdaptor": [[71, 4, 1, "", "from_json"], [71, 4, 1, "", "learn"], [71, 5, 1, "", "mass_matrix"], [71, 4, 1, "", "restart"]], "torchtree.inference.hmc.adaptation.WarmupAdaptation": [[71, 5, 1, "", "inverse_mass_matrix"], [71, 5, 1, "", "mass_matrix"], [71, 5, 1, "", "sqrt_mass_matrix"], [71, 5, 1, "", "step_size"]], "torchtree.inference.hmc.hamiltonian": [[73, 3, 1, "", "Hamiltonian"]], "torchtree.inference.hmc.hamiltonian.Hamiltonian": [[73, 4, 1, "", "from_json"], [73, 4, 1, "", "handle_parameter_changed"], [73, 4, 1, "", "kinetic_energy"], [73, 4, 1, "", "potential_energy"], [73, 4, 1, "", "sample_momentum"]], "torchtree.inference.hmc.hmc": [[74, 3, 1, "", "HMC"]], "torchtree.inference.hmc.hmc.HMC": [[74, 4, 1, "", "find_reasonable_step_size"], [74, 4, 1, "", "from_json"], [74, 4, 1, "", "hamiltonian"], [74, 4, 1, "", "run"], [74, 4, 1, "", "sample_momentum"]], "torchtree.inference.hmc.integrator": [[76, 3, 1, "", "Integrator"], [76, 3, 1, "", "LeapfrogIntegrator"], [76, 2, 1, "", "set_tensor"]], "torchtree.inference.hmc.integrator.LeapfrogIntegrator": [[76, 4, 1, "", "from_json"]], "torchtree.inference.hmc.operator": [[77, 3, 1, "", "HMCOperator"]], "torchtree.inference.hmc.operator.HMCOperator": [[77, 4, 1, "", "adaptable_parameter"], [77, 4, 1, "", "from_json"], [77, 4, 1, "", "handle_parameter_changed"], [77, 5, 1, "", "mass_matrix"], [77, 4, 1, "", "set_adaptable_parameter"], [77, 4, 1, "", "tune"], [77, 5, 1, "", "tuning_parameter"], [77, 4, 1, "", "update_mass_matrices"]], "torchtree.inference.hmc.stan_adaptation": [[78, 3, 1, "", "StanWindowedAdaptation"]], "torchtree.inference.hmc.stan_adaptation.StanWindowedAdaptation": [[78, 4, 1, "", "from_json"], [78, 4, 1, "", "learn"], [78, 4, 1, "", "restart"]], "torchtree.inference.mcmc": [[189, 0, 0, "-", "mcmc"], [190, 0, 0, "-", "operator"]], "torchtree.inference.mcmc.mcmc": [[81, 3, 1, "", "MCMC"]], "torchtree.inference.mcmc.mcmc.MCMC": [[81, 4, 1, "", "from_json"], [81, 4, 1, "", "run"]], "torchtree.inference.mcmc.operator": [[82, 3, 1, "", "MCMCOperator"], [82, 3, 1, "", "ScalerOperator"], [82, 3, 1, "", "SlidingWindowOperator"]], "torchtree.inference.mcmc.operator.MCMCOperator": [[82, 4, 1, "", "accept"], [82, 5, 1, "", "adaptable_parameter"], [82, 4, 1, "", "reject"], [82, 4, 1, "", "set_adaptable_parameter"], [82, 4, 1, "", "step"], [82, 4, 1, "", "tune"], [82, 5, 1, "", "tuning_parameter"]], "torchtree.inference.mcmc.operator.ScalerOperator": [[82, 4, 1, "", "adaptable_parameter"], [82, 4, 1, "", "from_json"], [82, 4, 1, "", "set_adaptable_parameter"], [82, 5, 1, "", "tuning_parameter"]], "torchtree.inference.mcmc.operator.SlidingWindowOperator": [[82, 4, 1, "", "adaptable_parameter"], [82, 4, 1, "", "from_json"], [82, 4, 1, "", "set_adaptable_parameter"], [82, 5, 1, "", "tuning_parameter"]], "torchtree.inference.sampler": [[83, 3, 1, "", "Sampler"]], "torchtree.inference.sampler.Sampler": [[83, 4, 1, "", "from_json"], [83, 4, 1, "", "run"]], "torchtree.inference.utils": [[84, 2, 1, "", "extract_tensors_and_parameters"]], "torchtree.math": [[85, 2, 1, "", "soft_max"], [85, 2, 1, "", "soft_searchsorted"], [85, 2, 1, "", "soft_sort"]], "torchtree.nf": [[195, 0, 0, "-", "energy_functions"], [196, 0, 0, "-", "flow"], [197, 0, 0, "-", "planar"], [198, 0, 0, "-", "realnvp"]], "torchtree.nf.energy_functions": [[86, 3, 1, "", "EnergyFunctionModel"], [86, 2, 1, "", "w1"], [86, 2, 1, "", "w2"], [86, 2, 1, "", "w3"]], "torchtree.nf.energy_functions.EnergyFunctionModel": [[86, 4, 1, "", "from_json"], [86, 4, 1, "", "handle_model_changed"]], "torchtree.nf.flow": [[87, 3, 1, "", "NormalizingFlow"]], "torchtree.nf.flow.NormalizingFlow": [[87, 4, 1, "", "apply_flow"], [87, 4, 1, "", "cpu"], [87, 4, 1, "", "cuda"], [87, 4, 1, "", "entropy"], [87, 4, 1, "", "forward"], [87, 4, 1, "", "from_json"], [87, 4, 1, "", "log_prob"], [87, 4, 1, "", "parameters"], [87, 4, 1, "", "rsample"], [87, 4, 1, "", "sample"], [87, 4, 1, "", "to"]], "torchtree.nf.planar": [[89, 3, 1, "", "PlanarTransform"]], "torchtree.nf.planar.PlanarTransform": [[89, 4, 1, "", "forward"], [89, 4, 1, "", "log_abs_det_jacobian"], [89, 4, 1, "", "u_hat"]], "torchtree.nf.realnvp": [[90, 3, 1, "", "BatchNorm"], [90, 3, 1, "", "FlowSequential"], [90, 3, 1, "", "LinearMaskedCoupling"], [90, 3, 1, "", "RealNVP"]], "torchtree.nf.realnvp.BatchNorm": [[90, 4, 1, "", "forward"], [90, 4, 1, "", "inverse"]], "torchtree.nf.realnvp.FlowSequential": [[90, 4, 1, "", "forward"], [90, 4, 1, "", "inverse"]], "torchtree.nf.realnvp.LinearMaskedCoupling": [[90, 4, 1, "", "forward"], [90, 4, 1, "", "inverse"]], "torchtree.nf.realnvp.RealNVP": [[90, 4, 1, "", "apply_flow"], [90, 5, 1, "", "batch_shape"], [90, 4, 1, "", "entropy"], [90, 4, 1, "", "forward"], [90, 4, 1, "", "from_json"], [90, 4, 1, "", "inverse"], [90, 4, 1, "", "log_prob"], [90, 4, 1, "", "parameters"], [90, 4, 1, "", "rsample"], [90, 4, 1, "", "sample"]], "torchtree.nn": [[200, 0, 0, "-", "module"]], "torchtree.nn.module": [[92, 3, 1, "", "Module"]], "torchtree.nn.module.Module": [[92, 4, 1, "", "cpu"], [92, 4, 1, "", "cuda"], [92, 4, 1, "", "from_json"], [92, 5, 1, "", "module"], [92, 4, 1, "", "to"]], "torchtree.ops": [[202, 0, 0, "-", "dual_averaging"], [203, 0, 0, "-", "welford"]], "torchtree.ops.dual_averaging": [[93, 3, 1, "", "DualAveraging"]], "torchtree.ops.dual_averaging.DualAveraging": [[93, 4, 1, "", "restart"], [93, 4, 1, "", "step"]], "torchtree.ops.welford": [[95, 3, 1, "", "WelfordVariance"]], "torchtree.ops.welford.WelfordVariance": [[95, 4, 1, "", "add_sample"], [95, 4, 1, "", "mean"], [95, 4, 1, "", "reset"], [95, 4, 1, "", "variance"]], "torchtree.optim": [[205, 0, 0, "-", "convergence"], [206, 0, 0, "-", "lr_scheduler"], [207, 0, 0, "-", "optimizer"]], "torchtree.optim.convergence": [[96, 3, 1, "", "BaseConvergence"], [96, 3, 1, "", "StanVariationalConvergence"], [96, 3, 1, "", "VariationalConvergence"]], "torchtree.optim.convergence.BaseConvergence": [[96, 4, 1, "", "check"]], "torchtree.optim.convergence.StanVariationalConvergence": [[96, 4, 1, "", "check"], [96, 4, 1, "", "from_json"], [96, 4, 1, "", "rel_difference"]], "torchtree.optim.convergence.VariationalConvergence": [[96, 4, 1, "", "check"], [96, 4, 1, "", "from_json"]], "torchtree.optim.lr_scheduler": [[98, 3, 1, "", "Scheduler"]], "torchtree.optim.lr_scheduler.Scheduler": [[98, 4, 1, "", "from_json"], [98, 4, 1, "", "step"]], "torchtree.optim.optimizer": [[99, 3, 1, "", "Optimizer"]], "torchtree.optim.optimizer.Optimizer": [[99, 4, 1, "", "from_json"], [99, 4, 1, "", "run"]], "torchtree.torchtree": [[100, 2, 1, "", "main"]], "torchtree.treeregression": [[101, 2, 1, "", "regression"]], "torchtree.typing": [[102, 1, 1, "", "ID"], [102, 1, 1, "", "ListParameter"], [102, 1, 1, "", "ListTensor"], [102, 1, 1, "", "OrderedDictType"]], "torchtree.variational": [[212, 0, 0, "-", "chi"], [213, 0, 0, "-", "kl"], [214, 0, 0, "-", "renyi"]], "torchtree.variational.chi": [[103, 3, 1, "", "CUBO"]], "torchtree.variational.chi.CUBO": [[103, 4, 1, "", "from_json"], [103, 4, 1, "", "handle_parameter_changed"]], "torchtree.variational.kl": [[105, 3, 1, "", "ELBO"], [105, 3, 1, "", "KLpq"], [105, 3, 1, "", "KLpqImportance"], [105, 3, 1, "", "SELBO"]], "torchtree.variational.kl.ELBO": [[105, 4, 1, "", "from_json"], [105, 4, 1, "", "handle_parameter_changed"]], "torchtree.variational.kl.KLpq": [[105, 4, 1, "", "from_json"], [105, 4, 1, "", "handle_parameter_changed"]], "torchtree.variational.kl.KLpqImportance": [[105, 4, 1, "", "from_json"], [105, 4, 1, "", "handle_parameter_changed"]], "torchtree.variational.kl.SELBO": [[105, 4, 1, "", "from_json"], [105, 4, 1, "", "handle_parameter_changed"]], "torchtree.variational.renyi": [[106, 3, 1, "", "VR"]], "torchtree.variational.renyi.VR": [[106, 4, 1, "", "from_json"], [106, 4, 1, "", "handle_parameter_changed"]]}, "objtypes": {"0": "py:module", "1": "py:data", "2": "py:function", "3": "py:class", "4": "py:method", "5": "py:property", "6": "py:exception", "7": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "data", "Python data"], "2": ["py", "function", "Python function"], "3": ["py", "class", "Python class"], "4": ["py", "method", "Python method"], "5": ["py", "property", "Python property"], "6": ["py", "exception", "Python exception"], "7": ["py", "attribute", "Python attribute"]}, "titleterms": {"torchtre": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214], "_version": 0, "cli": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123], "advi": [1, 111], "modul": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 73, 74, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 89, 90, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 105, 106, 200], "content": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106], "function": [1, 2, 3, 4, 6, 7, 8, 9, 10, 13, 14, 24, 28, 29, 45, 47, 50, 53, 58, 67, 68, 71, 76, 84, 85, 86, 100, 101], "attribut": [1, 3, 28, 45], "evolut": [3, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 113, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178], "hmc": [4, 71, 72, 73, 74, 75, 76, 77, 78, 114, 180, 181, 182, 183, 184, 185, 186, 187], "submodul": [5, 19, 35, 52, 63, 70, 75, 79, 80, 88, 91, 94, 97, 104], "packag": [5, 35, 63, 70, 91, 97, 104, 108], "jacobian": [6, 115], "logger": [7, 20, 116, 129], "map": [8, 117], "mcmc": [9, 80, 81, 82, 118, 188, 189, 190], "oper": [10, 77, 82, 119, 186, 190], "plugin": [11, 120], "class": [11, 12, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 81, 82, 83, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 103, 104, 105, 106], "plugin_manag": [12, 121], "prior": [13, 122], "util": [14, 28, 84, 123, 137, 192], "core": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137], "abstractparamet": [15, 125], "classproperty_decor": [16, 126], "contain": [17, 127], "identifi": [18, 128], "model": [21, 130], "paramet": [22, 131], "parameter_encod": [23, 132], "parameter_util": [24, 133], "parametr": [25, 134], "runnabl": [26, 135], "serializ": [27, 136], "distribut": [29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153], "bayesian_bridg": [29, 139], "ctmc_scale": [30, 140], "deterministic_norm": [31, 141], "gmrf": [33, 143], "gmrf_integr": [34, 144], "inverse_gamma": [36, 145], "joint_distribut": [37, 146], "log_norm": [38, 147], "multivariate_norm": [39, 148], "normal": [40, 149], "one_on_x": [41, 150], "scale_mixtur": [42, 151], "transform": [43, 152], "tree_prior": [44, 153], "align": [45, 155], "attribute_pattern": [46, 156], "bdsk": [47, 157], "birth_death": [48, 158], "branch_model": [49, 159], "coalesc": [50, 160], "datatyp": [51, 161], "subpackag": [52, 70, 79], "io": [53, 162], "poisson_tree_likelihood": [54, 163], "rate_transform": [55, 164], "root_transform": [56, 165], "site_model": [57, 166], "site_pattern": [58, 167], "substitution_model": [59, 60, 61, 62, 63, 64, 168, 169, 170, 171, 172, 173], "abstract": [59, 169], "amino_acid": [60, 170], "codon": [61, 171], "gener": [62, 172], "nucleotid": [64, 173], "taxa": [65, 174], "tree_height_transform": [66, 175], "tree_likelihood": [67, 176], "tree_model": [68, 177], "tree_model_flex": [69, 178], "infer": [71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "adapt": [71, 181], "adaptor": [72, 182], "hamiltonian": [73, 183], "integr": [76, 185], "stan_adapt": [78, 187], "sampler": [83, 191], "math": [85, 193], "nf": [86, 87, 88, 89, 90, 194, 195, 196, 197, 198], "energy_funct": [86, 195], "flow": [87, 196], "planar": [89, 197], "realnvp": [90, 198], "nn": [91, 92, 199, 200], "op": [93, 94, 95, 201, 202, 203], "dual_averag": [93, 202], "welford": [95, 203], "optim": [96, 97, 98, 99, 204, 205, 206, 207], "converg": [96, 205], "lr_schedul": [98, 206], "treeregress": [101, 209], "type": [102, 210], "variat": [103, 104, 105, 106, 211, 212, 213, 214], "chi": [103, 212], "kl": [105, 213], "renyi": [106, 214], "bibliographi": 107, "welcom": 108, "": 108, "document": 108}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinxcontrib.bibtex": 9, "sphinx": 57}, "alltitles": {"torchtree._version": [[0, "module-torchtree._version"]], "torchtree.cli.advi": [[1, "module-torchtree.cli.advi"], [111, "module-torchtree.cli.advi"]], "Module Contents": [[1, "module-contents"], [2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [6, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [71, "module-contents"], [73, "module-contents"], [74, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [89, "module-contents"], [90, "module-contents"], [92, "module-contents"], [93, "module-contents"], [95, "module-contents"], [96, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [105, "module-contents"], [106, "module-contents"]], "Functions": [[1, "functions"], [2, "functions"], [3, "functions"], [4, "functions"], [6, "functions"], [7, "functions"], [8, "functions"], [9, "functions"], [10, "functions"], [13, "functions"], [14, "functions"], [24, "functions"], [28, "functions"], [29, "functions"], [45, "functions"], [47, "functions"], [50, "functions"], [53, "functions"], [58, "functions"], [67, "functions"], [68, "functions"], [71, "functions"], [76, "functions"], [84, "functions"], [85, "functions"], [86, "functions"], [100, "functions"], [101, "functions"]], "Attributes": [[1, "attributes"], [3, "attributes"], [28, "attributes"], [45, "attributes"]], "torchtree.cli.cli": [[2, "module-torchtree.cli.cli"], [112, "module-torchtree.cli.cli"]], "torchtree.cli.evolution": [[3, "module-torchtree.cli.evolution"], [113, "module-torchtree.cli.evolution"]], "torchtree.cli.hmc": [[4, "module-torchtree.cli.hmc"], [114, "module-torchtree.cli.hmc"]], "torchtree.cli": [[5, "module-torchtree.cli"], [110, "module-torchtree.cli"]], "Submodules": [[5, "submodules"], [19, "submodules"], [35, "submodules"], [52, "submodules"], [63, "submodules"], [70, "submodules"], [75, "submodules"], [79, "submodules"], [80, "submodules"], [88, "submodules"], [91, "submodules"], [94, "submodules"], [97, "submodules"], [104, "submodules"]], "Package Contents": [[5, "package-contents"], [35, "package-contents"], [63, "package-contents"], [70, "package-contents"], [91, "package-contents"], [97, "package-contents"], [104, "package-contents"]], "torchtree.cli.jacobians": [[6, "module-torchtree.cli.jacobians"], [115, "module-torchtree.cli.jacobians"]], "torchtree.cli.loggers": [[7, "module-torchtree.cli.loggers"], [116, "module-torchtree.cli.loggers"]], "torchtree.cli.map": [[8, "module-torchtree.cli.map"], [117, "module-torchtree.cli.map"]], "torchtree.cli.mcmc": [[9, "module-torchtree.cli.mcmc"], [118, "module-torchtree.cli.mcmc"]], "torchtree.cli.operators": [[10, "module-torchtree.cli.operators"], [119, "module-torchtree.cli.operators"]], "torchtree.cli.plugin": [[11, "module-torchtree.cli.plugin"], [120, "module-torchtree.cli.plugin"]], "Classes": [[11, "classes"], [12, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [73, "classes"], [74, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [86, "classes"], [87, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [106, "classes"]], "torchtree.cli.plugin_manager": [[12, "module-torchtree.cli.plugin_manager"], [121, "module-torchtree.cli.plugin_manager"]], "torchtree.cli.priors": [[13, "module-torchtree.cli.priors"], [122, "module-torchtree.cli.priors"]], "torchtree.cli.utils": [[14, "module-torchtree.cli.utils"], [123, "module-torchtree.cli.utils"]], "torchtree.core.abstractparameter": [[15, "module-torchtree.core.abstractparameter"], [125, "module-torchtree.core.abstractparameter"]], "torchtree.core.classproperty_decorator": [[16, "module-torchtree.core.classproperty_decorator"], [126, "module-torchtree.core.classproperty_decorator"]], "torchtree.core.container": [[17, "module-torchtree.core.container"], [127, "module-torchtree.core.container"]], "torchtree.core.identifiable": [[18, "module-torchtree.core.identifiable"], [128, "module-torchtree.core.identifiable"]], "torchtree.core": [[19, "module-torchtree.core"], [124, "module-torchtree.core"]], "torchtree.core.logger": [[20, "module-torchtree.core.logger"], [129, "module-torchtree.core.logger"]], "torchtree.core.model": [[21, "module-torchtree.core.model"], [130, "module-torchtree.core.model"]], "torchtree.core.parameter": [[22, "module-torchtree.core.parameter"], [131, "module-torchtree.core.parameter"]], "torchtree.core.parameter_encoder": [[23, "module-torchtree.core.parameter_encoder"], [132, "module-torchtree.core.parameter_encoder"]], "torchtree.core.parameter_utils": [[24, "module-torchtree.core.parameter_utils"], [133, "module-torchtree.core.parameter_utils"]], "torchtree.core.parametric": [[25, "module-torchtree.core.parametric"], [134, "module-torchtree.core.parametric"]], "torchtree.core.runnable": [[26, "module-torchtree.core.runnable"], [135, "module-torchtree.core.runnable"]], "torchtree.core.serializable": [[27, "module-torchtree.core.serializable"], [136, "module-torchtree.core.serializable"]], "torchtree.core.utils": [[28, "module-torchtree.core.utils"], [137, "module-torchtree.core.utils"]], "torchtree.distributions.bayesian_bridge": [[29, "module-torchtree.distributions.bayesian_bridge"], [139, "module-torchtree.distributions.bayesian_bridge"]], "torchtree.distributions.ctmc_scale": [[30, "module-torchtree.distributions.ctmc_scale"], [140, "module-torchtree.distributions.ctmc_scale"]], "torchtree.distributions.deterministic_normal": [[31, "module-torchtree.distributions.deterministic_normal"], [141, "module-torchtree.distributions.deterministic_normal"]], "torchtree.distributions.distributions": [[32, "module-torchtree.distributions.distributions"], [142, "module-torchtree.distributions.distributions"]], "torchtree.distributions.gmrf": [[33, "module-torchtree.distributions.gmrf"], [143, "module-torchtree.distributions.gmrf"]], "torchtree.distributions.gmrf_integrated": [[34, "module-torchtree.distributions.gmrf_integrated"], [144, "module-torchtree.distributions.gmrf_integrated"]], "torchtree.distributions": [[35, "module-torchtree.distributions"], [138, "module-torchtree.distributions"]], "torchtree.distributions.inverse_gamma": [[36, "module-torchtree.distributions.inverse_gamma"], [145, "module-torchtree.distributions.inverse_gamma"]], "torchtree.distributions.joint_distribution": [[37, "module-torchtree.distributions.joint_distribution"], [146, "module-torchtree.distributions.joint_distribution"]], "torchtree.distributions.log_normal": [[38, "module-torchtree.distributions.log_normal"], [147, "module-torchtree.distributions.log_normal"]], "torchtree.distributions.multivariate_normal": [[39, "module-torchtree.distributions.multivariate_normal"], [148, "module-torchtree.distributions.multivariate_normal"]], "torchtree.distributions.normal": [[40, "module-torchtree.distributions.normal"], [149, "module-torchtree.distributions.normal"]], "torchtree.distributions.one_on_x": [[41, "module-torchtree.distributions.one_on_x"], [150, "module-torchtree.distributions.one_on_x"]], "torchtree.distributions.scale_mixture": [[42, "module-torchtree.distributions.scale_mixture"], [151, "module-torchtree.distributions.scale_mixture"]], "torchtree.distributions.transforms": [[43, "module-torchtree.distributions.transforms"], [152, "module-torchtree.distributions.transforms"]], "torchtree.distributions.tree_prior": [[44, "module-torchtree.distributions.tree_prior"], [153, "module-torchtree.distributions.tree_prior"]], "torchtree.evolution.alignment": [[45, "module-torchtree.evolution.alignment"], [155, "module-torchtree.evolution.alignment"]], "torchtree.evolution.attribute_pattern": [[46, "module-torchtree.evolution.attribute_pattern"], [156, "module-torchtree.evolution.attribute_pattern"]], "torchtree.evolution.bdsk": [[47, "module-torchtree.evolution.bdsk"], [157, "module-torchtree.evolution.bdsk"]], "torchtree.evolution.birth_death": [[48, "module-torchtree.evolution.birth_death"], [158, "module-torchtree.evolution.birth_death"]], "torchtree.evolution.branch_model": [[49, "module-torchtree.evolution.branch_model"], [159, "module-torchtree.evolution.branch_model"]], "torchtree.evolution.coalescent": [[50, "module-torchtree.evolution.coalescent"], [160, "module-torchtree.evolution.coalescent"]], "torchtree.evolution.datatype": [[51, "module-torchtree.evolution.datatype"], [161, "module-torchtree.evolution.datatype"]], "torchtree.evolution": [[52, "module-torchtree.evolution"], [154, "module-torchtree.evolution"]], "Subpackages": [[52, "subpackages"], [70, "subpackages"], [79, "subpackages"]], "torchtree.evolution.io": [[53, "module-torchtree.evolution.io"], [162, "module-torchtree.evolution.io"]], "torchtree.evolution.poisson_tree_likelihood": [[54, "module-torchtree.evolution.poisson_tree_likelihood"], [163, "module-torchtree.evolution.poisson_tree_likelihood"]], "torchtree.evolution.rate_transform": [[55, "module-torchtree.evolution.rate_transform"], [164, "module-torchtree.evolution.rate_transform"]], "torchtree.evolution.root_transform": [[56, "module-torchtree.evolution.root_transform"], [165, "module-torchtree.evolution.root_transform"]], "torchtree.evolution.site_model": [[57, "module-torchtree.evolution.site_model"], [166, "module-torchtree.evolution.site_model"]], "torchtree.evolution.site_pattern": [[58, "module-torchtree.evolution.site_pattern"], [167, "module-torchtree.evolution.site_pattern"]], "torchtree.evolution.substitution_model.abstract": [[59, "module-torchtree.evolution.substitution_model.abstract"], [169, "module-torchtree.evolution.substitution_model.abstract"]], "torchtree.evolution.substitution_model.amino_acid": [[60, "module-torchtree.evolution.substitution_model.amino_acid"], [170, "module-torchtree.evolution.substitution_model.amino_acid"]], "torchtree.evolution.substitution_model.codon": [[61, "module-torchtree.evolution.substitution_model.codon"], [171, "module-torchtree.evolution.substitution_model.codon"]], "torchtree.evolution.substitution_model.general": [[62, "module-torchtree.evolution.substitution_model.general"], [172, "module-torchtree.evolution.substitution_model.general"]], "torchtree.evolution.substitution_model": [[63, "module-torchtree.evolution.substitution_model"], [168, "module-torchtree.evolution.substitution_model"]], "torchtree.evolution.substitution_model.nucleotide": [[64, "module-torchtree.evolution.substitution_model.nucleotide"], [173, "module-torchtree.evolution.substitution_model.nucleotide"]], "torchtree.evolution.taxa": [[65, "module-torchtree.evolution.taxa"], [174, "module-torchtree.evolution.taxa"]], "torchtree.evolution.tree_height_transform": [[66, "module-torchtree.evolution.tree_height_transform"], [175, "module-torchtree.evolution.tree_height_transform"]], "torchtree.evolution.tree_likelihood": [[67, "module-torchtree.evolution.tree_likelihood"], [176, "module-torchtree.evolution.tree_likelihood"]], "torchtree.evolution.tree_model": [[68, "module-torchtree.evolution.tree_model"], [177, "module-torchtree.evolution.tree_model"]], "torchtree.evolution.tree_model_flexible": [[69, "module-torchtree.evolution.tree_model_flexible"], [178, "module-torchtree.evolution.tree_model_flexible"]], "torchtree": [[70, "module-torchtree"], [109, "module-torchtree"]], "torchtree.inference.hmc.adaptation": [[71, "module-torchtree.inference.hmc.adaptation"], [181, "module-torchtree.inference.hmc.adaptation"]], "torchtree.inference.hmc.adaptors": [[72, "module-torchtree.inference.hmc.adaptors"], [182, "module-torchtree.inference.hmc.adaptors"]], "torchtree.inference.hmc.hamiltonian": [[73, "module-torchtree.inference.hmc.hamiltonian"], [183, "module-torchtree.inference.hmc.hamiltonian"]], "torchtree.inference.hmc.hmc": [[74, "module-torchtree.inference.hmc.hmc"], [184, "module-torchtree.inference.hmc.hmc"]], "torchtree.inference.hmc": [[75, "module-torchtree.inference.hmc"], [180, "module-torchtree.inference.hmc"]], "torchtree.inference.hmc.integrator": [[76, "module-torchtree.inference.hmc.integrator"], [185, "module-torchtree.inference.hmc.integrator"]], "torchtree.inference.hmc.operator": [[77, "module-torchtree.inference.hmc.operator"], [186, "module-torchtree.inference.hmc.operator"]], "torchtree.inference.hmc.stan_adaptation": [[78, "module-torchtree.inference.hmc.stan_adaptation"], [187, "module-torchtree.inference.hmc.stan_adaptation"]], "torchtree.inference": [[79, "module-torchtree.inference"], [179, "module-torchtree.inference"]], "torchtree.inference.mcmc": [[80, "module-torchtree.inference.mcmc"], [188, "module-torchtree.inference.mcmc"]], "torchtree.inference.mcmc.mcmc": [[81, "module-torchtree.inference.mcmc.mcmc"], [189, "module-torchtree.inference.mcmc.mcmc"]], "torchtree.inference.mcmc.operator": [[82, "module-torchtree.inference.mcmc.operator"], [190, "module-torchtree.inference.mcmc.operator"]], "torchtree.inference.sampler": [[83, "module-torchtree.inference.sampler"], [191, "module-torchtree.inference.sampler"]], "torchtree.inference.utils": [[84, "module-torchtree.inference.utils"], [192, "module-torchtree.inference.utils"]], "torchtree.math": [[85, "module-torchtree.math"], [193, "module-torchtree.math"]], "torchtree.nf.energy_functions": [[86, "module-torchtree.nf.energy_functions"], [195, "module-torchtree.nf.energy_functions"]], "torchtree.nf.flow": [[87, "module-torchtree.nf.flow"], [196, "module-torchtree.nf.flow"]], "torchtree.nf": [[88, "module-torchtree.nf"], [194, "module-torchtree.nf"]], "torchtree.nf.planar": [[89, "module-torchtree.nf.planar"], [197, "module-torchtree.nf.planar"]], "torchtree.nf.realnvp": [[90, "module-torchtree.nf.realnvp"], [198, "module-torchtree.nf.realnvp"]], "torchtree.nn": [[91, "module-torchtree.nn"], [199, "module-torchtree.nn"]], "torchtree.nn.module": [[92, "module-torchtree.nn.module"], [200, "module-torchtree.nn.module"]], "torchtree.ops.dual_averaging": [[93, "module-torchtree.ops.dual_averaging"], [202, "module-torchtree.ops.dual_averaging"]], "torchtree.ops": [[94, "module-torchtree.ops"], [201, "module-torchtree.ops"]], "torchtree.ops.welford": [[95, "module-torchtree.ops.welford"], [203, "module-torchtree.ops.welford"]], "torchtree.optim.convergence": [[96, "module-torchtree.optim.convergence"], [205, "module-torchtree.optim.convergence"]], "torchtree.optim": [[97, "module-torchtree.optim"], [204, "module-torchtree.optim"]], "torchtree.optim.lr_scheduler": [[98, "module-torchtree.optim.lr_scheduler"], [206, "module-torchtree.optim.lr_scheduler"]], "torchtree.optim.optimizer": [[99, "module-torchtree.optim.optimizer"], [207, "module-torchtree.optim.optimizer"]], "torchtree.torchtree": [[100, "module-torchtree.torchtree"], [208, "module-torchtree.torchtree"]], "torchtree.treeregression": [[101, "module-torchtree.treeregression"], [209, "module-torchtree.treeregression"]], "torchtree.typing": [[102, "module-torchtree.typing"], [210, "module-torchtree.typing"]], "torchtree.variational.chi": [[103, "module-torchtree.variational.chi"], [212, "module-torchtree.variational.chi"]], "torchtree.variational": [[104, "module-torchtree.variational"], [211, "module-torchtree.variational"]], "torchtree.variational.kl": [[105, "module-torchtree.variational.kl"], [213, "module-torchtree.variational.kl"]], "torchtree.variational.renyi": [[106, "module-torchtree.variational.renyi"], [214, "module-torchtree.variational.renyi"]], "Bibliography": [[107, "bibliography"]], "Welcome to torchtree\u2019s documentation!": [[108, "welcome-to-torchtree-s-documentation"]], "Packages": [[108, "packages"]]}, "indexentries": {"module": [[0, "module-torchtree._version"], [1, "module-torchtree.cli.advi"], [2, "module-torchtree.cli.cli"], [3, "module-torchtree.cli.evolution"], [4, "module-torchtree.cli.hmc"], [5, "module-torchtree.cli"], [6, "module-torchtree.cli.jacobians"], [7, "module-torchtree.cli.loggers"], [8, "module-torchtree.cli.map"], [9, "module-torchtree.cli.mcmc"], [10, "module-torchtree.cli.operators"], [11, "module-torchtree.cli.plugin"], [12, "module-torchtree.cli.plugin_manager"], [13, "module-torchtree.cli.priors"], [14, "module-torchtree.cli.utils"], [15, "module-torchtree.core.abstractparameter"], [16, "module-torchtree.core.classproperty_decorator"], [17, "module-torchtree.core.container"], [18, "module-torchtree.core.identifiable"], [19, "module-torchtree.core"], [20, "module-torchtree.core.logger"], [21, "module-torchtree.core.model"], [22, "module-torchtree.core.parameter"], [23, "module-torchtree.core.parameter_encoder"], [24, "module-torchtree.core.parameter_utils"], [25, "module-torchtree.core.parametric"], [26, "module-torchtree.core.runnable"], [27, "module-torchtree.core.serializable"], [28, "module-torchtree.core.utils"], [29, "module-torchtree.distributions.bayesian_bridge"], [30, "module-torchtree.distributions.ctmc_scale"], [31, "module-torchtree.distributions.deterministic_normal"], [32, "module-torchtree.distributions.distributions"], [33, "module-torchtree.distributions.gmrf"], [34, "module-torchtree.distributions.gmrf_integrated"], [35, "module-torchtree.distributions"], [36, "module-torchtree.distributions.inverse_gamma"], [37, "module-torchtree.distributions.joint_distribution"], [38, "module-torchtree.distributions.log_normal"], [39, "module-torchtree.distributions.multivariate_normal"], [40, "module-torchtree.distributions.normal"], [41, "module-torchtree.distributions.one_on_x"], [42, "module-torchtree.distributions.scale_mixture"], [43, "module-torchtree.distributions.transforms"], [44, "module-torchtree.distributions.tree_prior"], [45, "module-torchtree.evolution.alignment"], [46, "module-torchtree.evolution.attribute_pattern"], [47, "module-torchtree.evolution.bdsk"], [48, "module-torchtree.evolution.birth_death"], [49, "module-torchtree.evolution.branch_model"], [50, "module-torchtree.evolution.coalescent"], [51, "module-torchtree.evolution.datatype"], [52, "module-torchtree.evolution"], [53, "module-torchtree.evolution.io"], [54, "module-torchtree.evolution.poisson_tree_likelihood"], [55, "module-torchtree.evolution.rate_transform"], [56, "module-torchtree.evolution.root_transform"], [57, "module-torchtree.evolution.site_model"], [58, "module-torchtree.evolution.site_pattern"], [59, "module-torchtree.evolution.substitution_model.abstract"], [60, "module-torchtree.evolution.substitution_model.amino_acid"], [61, "module-torchtree.evolution.substitution_model.codon"], [62, "module-torchtree.evolution.substitution_model.general"], [63, "module-torchtree.evolution.substitution_model"], [64, "module-torchtree.evolution.substitution_model.nucleotide"], [65, "module-torchtree.evolution.taxa"], [66, "module-torchtree.evolution.tree_height_transform"], [67, "module-torchtree.evolution.tree_likelihood"], [68, "module-torchtree.evolution.tree_model"], [69, "module-torchtree.evolution.tree_model_flexible"], [70, "module-torchtree"], [71, "module-torchtree.inference.hmc.adaptation"], [72, "module-torchtree.inference.hmc.adaptors"], [73, "module-torchtree.inference.hmc.hamiltonian"], [74, "module-torchtree.inference.hmc.hmc"], [75, "module-torchtree.inference.hmc"], [76, "module-torchtree.inference.hmc.integrator"], [77, "module-torchtree.inference.hmc.operator"], [78, "module-torchtree.inference.hmc.stan_adaptation"], [79, "module-torchtree.inference"], [80, "module-torchtree.inference.mcmc"], [81, "module-torchtree.inference.mcmc.mcmc"], [82, "module-torchtree.inference.mcmc.operator"], [83, "module-torchtree.inference.sampler"], [84, "module-torchtree.inference.utils"], [85, "module-torchtree.math"], [86, "module-torchtree.nf.energy_functions"], [87, "module-torchtree.nf.flow"], [88, "module-torchtree.nf"], [89, "module-torchtree.nf.planar"], [90, "module-torchtree.nf.realnvp"], [91, "module-torchtree.nn"], [92, "module-torchtree.nn.module"], [93, "module-torchtree.ops.dual_averaging"], [94, "module-torchtree.ops"], [95, "module-torchtree.ops.welford"], [96, "module-torchtree.optim.convergence"], [97, "module-torchtree.optim"], [98, "module-torchtree.optim.lr_scheduler"], [99, "module-torchtree.optim.optimizer"], [100, "module-torchtree.torchtree"], [101, "module-torchtree.treeregression"], [102, "module-torchtree.typing"], [103, "module-torchtree.variational.chi"], [104, "module-torchtree.variational"], [105, "module-torchtree.variational.kl"], [106, "module-torchtree.variational.renyi"], [109, "module-torchtree"], [110, "module-torchtree.cli"], [111, "module-torchtree.cli.advi"], [112, "module-torchtree.cli.cli"], [113, "module-torchtree.cli.evolution"], [114, "module-torchtree.cli.hmc"], [115, "module-torchtree.cli.jacobians"], [116, "module-torchtree.cli.loggers"], [117, "module-torchtree.cli.map"], [118, "module-torchtree.cli.mcmc"], [119, "module-torchtree.cli.operators"], [120, "module-torchtree.cli.plugin"], [121, "module-torchtree.cli.plugin_manager"], [122, "module-torchtree.cli.priors"], [123, "module-torchtree.cli.utils"], [124, "module-torchtree.core"], [125, "module-torchtree.core.abstractparameter"], [126, "module-torchtree.core.classproperty_decorator"], [127, "module-torchtree.core.container"], [128, "module-torchtree.core.identifiable"], [129, "module-torchtree.core.logger"], [130, "module-torchtree.core.model"], [131, "module-torchtree.core.parameter"], [132, "module-torchtree.core.parameter_encoder"], [133, "module-torchtree.core.parameter_utils"], [134, "module-torchtree.core.parametric"], [135, "module-torchtree.core.runnable"], [136, "module-torchtree.core.serializable"], [137, "module-torchtree.core.utils"], [138, "module-torchtree.distributions"], [139, "module-torchtree.distributions.bayesian_bridge"], [140, "module-torchtree.distributions.ctmc_scale"], [141, "module-torchtree.distributions.deterministic_normal"], [142, "module-torchtree.distributions.distributions"], [143, "module-torchtree.distributions.gmrf"], [144, "module-torchtree.distributions.gmrf_integrated"], [145, "module-torchtree.distributions.inverse_gamma"], [146, "module-torchtree.distributions.joint_distribution"], [147, "module-torchtree.distributions.log_normal"], [148, "module-torchtree.distributions.multivariate_normal"], [149, "module-torchtree.distributions.normal"], [150, "module-torchtree.distributions.one_on_x"], [151, "module-torchtree.distributions.scale_mixture"], [152, "module-torchtree.distributions.transforms"], [153, "module-torchtree.distributions.tree_prior"], [154, "module-torchtree.evolution"], [155, "module-torchtree.evolution.alignment"], [156, "module-torchtree.evolution.attribute_pattern"], [157, "module-torchtree.evolution.bdsk"], [158, "module-torchtree.evolution.birth_death"], [159, "module-torchtree.evolution.branch_model"], [160, "module-torchtree.evolution.coalescent"], [161, "module-torchtree.evolution.datatype"], [162, "module-torchtree.evolution.io"], [163, "module-torchtree.evolution.poisson_tree_likelihood"], [164, "module-torchtree.evolution.rate_transform"], [165, "module-torchtree.evolution.root_transform"], [166, "module-torchtree.evolution.site_model"], [167, "module-torchtree.evolution.site_pattern"], [168, "module-torchtree.evolution.substitution_model"], [169, "module-torchtree.evolution.substitution_model.abstract"], [170, "module-torchtree.evolution.substitution_model.amino_acid"], [171, "module-torchtree.evolution.substitution_model.codon"], [172, "module-torchtree.evolution.substitution_model.general"], [173, "module-torchtree.evolution.substitution_model.nucleotide"], [174, "module-torchtree.evolution.taxa"], [175, "module-torchtree.evolution.tree_height_transform"], [176, "module-torchtree.evolution.tree_likelihood"], [177, "module-torchtree.evolution.tree_model"], [178, "module-torchtree.evolution.tree_model_flexible"], [179, "module-torchtree.inference"], [180, "module-torchtree.inference.hmc"], [181, "module-torchtree.inference.hmc.adaptation"], [182, "module-torchtree.inference.hmc.adaptors"], [183, "module-torchtree.inference.hmc.hamiltonian"], [184, "module-torchtree.inference.hmc.hmc"], [185, "module-torchtree.inference.hmc.integrator"], [186, "module-torchtree.inference.hmc.operator"], [187, "module-torchtree.inference.hmc.stan_adaptation"], [188, "module-torchtree.inference.mcmc"], [189, "module-torchtree.inference.mcmc.mcmc"], [190, "module-torchtree.inference.mcmc.operator"], [191, "module-torchtree.inference.sampler"], [192, "module-torchtree.inference.utils"], [193, "module-torchtree.math"], [194, "module-torchtree.nf"], [195, "module-torchtree.nf.energy_functions"], [196, "module-torchtree.nf.flow"], [197, "module-torchtree.nf.planar"], [198, "module-torchtree.nf.realnvp"], [199, "module-torchtree.nn"], [200, "module-torchtree.nn.module"], [201, "module-torchtree.ops"], [202, "module-torchtree.ops.dual_averaging"], [203, "module-torchtree.ops.welford"], [204, "module-torchtree.optim"], [205, "module-torchtree.optim.convergence"], [206, "module-torchtree.optim.lr_scheduler"], [207, "module-torchtree.optim.optimizer"], [208, "module-torchtree.torchtree"], [209, "module-torchtree.treeregression"], [210, "module-torchtree.typing"], [211, "module-torchtree.variational"], [212, "module-torchtree.variational.chi"], [213, "module-torchtree.variational.kl"], [214, "module-torchtree.variational.renyi"]], "torchtree._version": [[0, "module-torchtree._version"]], "apply_affine_transform() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.apply_affine_transform"]], "apply_exp_transform() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.apply_exp_transform"]], "apply_sigmoid_transformed() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.apply_sigmoid_transformed"]], "apply_simplex_transform() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.apply_simplex_transform"]], "apply_transforms_for_fullrank() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.apply_transforms_for_fullrank"]], "build_advi() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.build_advi"]], "create_advi() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_advi"]], "create_flexible_variational() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_flexible_variational"]], "create_fullrank() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_fullrank"]], "create_fullrank_from_meanfield() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_fullrank_from_meanfield"]], "create_gamma_distribution() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_gamma_distribution"]], "create_logger() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_logger"]], "create_meanfield() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_meanfield"]], "create_normal_distribution() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_normal_distribution"]], "create_realnp_distribution() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_realnp_distribution"]], "create_realnvp() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_realnvp"]], "create_sampler() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_sampler"]], "create_tril() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_tril"]], "create_variational_model() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_variational_model"]], "create_variational_parser() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_variational_parser"]], "create_weibull_distribution() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.create_weibull_distribution"]], "gather_parameters() (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.gather_parameters"]], "logger (in module torchtree.cli.advi)": [[1, "torchtree.cli.advi.logger"]], "torchtree.cli.advi": [[1, "module-torchtree.cli.advi"], [111, "module-torchtree.cli.advi"]], "main() (in module torchtree.cli.cli)": [[2, "torchtree.cli.cli.main"]], "torchtree.cli.cli": [[2, "module-torchtree.cli.cli"], [112, "module-torchtree.cli.cli"]], "add_birth_death() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.add_birth_death"]], "add_coalescent() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.add_coalescent"]], "build_alignment() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.build_alignment"]], "create_alignment() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_alignment"]], "create_bd_prior() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_bd_prior"]], "create_bdsk() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_bdsk"]], "create_bdsk_prior() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_bdsk_prior"]], "create_birth_death() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_birth_death"]], "create_branch_model() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_branch_model"]], "create_clock_prior() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_clock_prior"]], "create_coalesent() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_coalesent"]], "create_constant_bd_prior() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_constant_bd_prior"]], "create_constant_birth_death() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_constant_birth_death"]], "create_data_type() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_data_type"]], "create_evolution_joint() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_evolution_joint"]], "create_evolution_parser() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_evolution_parser"]], "create_evolution_priors() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_evolution_priors"]], "create_general_data_type() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_general_data_type"]], "create_poisson_evolution_joint() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_poisson_evolution_joint"]], "create_poisson_tree_likelihood() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_poisson_tree_likelihood"]], "create_site_model() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_site_model"]], "create_site_model_srd06_mus() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_site_model_srd06_mus"]], "create_site_pattern() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_site_pattern"]], "create_substitution_model() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_substitution_model"]], "create_substitution_model_priors() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_substitution_model_priors"]], "create_taxa() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_taxa"]], "create_time_tree_prior() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_time_tree_prior"]], "create_tree_likelihood() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_tree_likelihood"]], "create_tree_likelihood_general() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_tree_likelihood_general"]], "create_tree_likelihood_single() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_tree_likelihood_single"]], "create_tree_model() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_tree_model"]], "create_ucln_prior() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.create_ucln_prior"]], "distribution_type() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.distribution_type"]], "get_engine() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.get_engine"]], "is_float() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.is_float"]], "logger (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.logger"]], "parse_distribution() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.parse_distribution"]], "run_tree_regression() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.run_tree_regression"]], "str_or_float() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.str_or_float"]], "torchtree.cli.evolution": [[3, "module-torchtree.cli.evolution"], [113, "module-torchtree.cli.evolution"]], "zero_or_path() (in module torchtree.cli.evolution)": [[3, "torchtree.cli.evolution.zero_or_path"]], "build_hmc() (in module torchtree.cli.hmc)": [[4, "torchtree.cli.hmc.build_hmc"]], "create_hmc() (in module torchtree.cli.hmc)": [[4, "torchtree.cli.hmc.create_hmc"]], "create_hmc_operator() (in module torchtree.cli.hmc)": [[4, "torchtree.cli.hmc.create_hmc_operator"]], "create_hmc_parser() (in module torchtree.cli.hmc)": [[4, "torchtree.cli.hmc.create_hmc_parser"]], "create_stan_windowed_adaptation() (in module torchtree.cli.hmc)": [[4, "torchtree.cli.hmc.create_stan_windowed_adaptation"]], "torchtree.cli.hmc": [[4, "module-torchtree.cli.hmc"], [114, "module-torchtree.cli.hmc"]], "plugin_manager (in module torchtree.cli)": [[5, "torchtree.cli.PLUGIN_MANAGER"]], "torchtree.cli": [[5, "module-torchtree.cli"], [110, "module-torchtree.cli"]], "create_jacobians() (in module torchtree.cli.jacobians)": [[6, "torchtree.cli.jacobians.create_jacobians"]], "torchtree.cli.jacobians": [[6, "module-torchtree.cli.jacobians"], [115, "module-torchtree.cli.jacobians"]], "create_loggers() (in module torchtree.cli.loggers)": [[7, "torchtree.cli.loggers.create_loggers"]], "torchtree.cli.loggers": [[7, "module-torchtree.cli.loggers"], [116, "module-torchtree.cli.loggers"]], "build_optimizer() (in module torchtree.cli.map)": [[8, "torchtree.cli.map.build_optimizer"]], "create_logger() (in module torchtree.cli.map)": [[8, "torchtree.cli.map.create_logger"]], "create_map_parser() (in module torchtree.cli.map)": [[8, "torchtree.cli.map.create_map_parser"]], "create_optimizer() (in module torchtree.cli.map)": [[8, "torchtree.cli.map.create_optimizer"]], "create_tree_logger() (in module torchtree.cli.map)": [[8, "torchtree.cli.map.create_tree_logger"]], "torchtree.cli.map": [[8, "module-torchtree.cli.map"], [117, "module-torchtree.cli.map"]], "build_mcmc() (in module torchtree.cli.mcmc)": [[9, "torchtree.cli.mcmc.build_mcmc"]], "create_mcmc() (in module torchtree.cli.mcmc)": [[9, "torchtree.cli.mcmc.create_mcmc"]], "create_mcmc_parser() (in module torchtree.cli.mcmc)": [[9, "torchtree.cli.mcmc.create_mcmc_parser"]], "torchtree.cli.mcmc": [[9, "module-torchtree.cli.mcmc"], [118, "module-torchtree.cli.mcmc"]], "create_scaler_operator() (in module torchtree.cli.operators)": [[10, "torchtree.cli.operators.create_scaler_operator"]], "create_sliding_window_operator() (in module torchtree.cli.operators)": [[10, "torchtree.cli.operators.create_sliding_window_operator"]], "torchtree.cli.operators": [[10, "module-torchtree.cli.operators"], [119, "module-torchtree.cli.operators"]], "plugin (class in torchtree.cli.plugin)": [[11, "torchtree.cli.plugin.Plugin"]], "load_arguments() (torchtree.cli.plugin.plugin method)": [[11, "torchtree.cli.plugin.Plugin.load_arguments"]], "process_all() (torchtree.cli.plugin.plugin method)": [[11, "torchtree.cli.plugin.Plugin.process_all"]], "process_coalescent() (torchtree.cli.plugin.plugin method)": [[11, "torchtree.cli.plugin.Plugin.process_coalescent"]], "process_tree_likelihood() (torchtree.cli.plugin.plugin method)": [[11, "torchtree.cli.plugin.Plugin.process_tree_likelihood"]], "torchtree.cli.plugin": [[11, "module-torchtree.cli.plugin"], [120, "module-torchtree.cli.plugin"]], "pluginmanager (class in torchtree.cli.plugin_manager)": [[12, "torchtree.cli.plugin_manager.PluginManager"]], "disable_plugins() (torchtree.cli.plugin_manager.pluginmanager method)": [[12, "torchtree.cli.plugin_manager.PluginManager.disable_plugins"]], "load_arguments() (torchtree.cli.plugin_manager.pluginmanager method)": [[12, "torchtree.cli.plugin_manager.PluginManager.load_arguments"]], "load_plugins() (torchtree.cli.plugin_manager.pluginmanager method)": [[12, "torchtree.cli.plugin_manager.PluginManager.load_plugins"]], "plugins() (torchtree.cli.plugin_manager.pluginmanager method)": [[12, "torchtree.cli.plugin_manager.PluginManager.plugins"]], "torchtree.cli.plugin_manager": [[12, "module-torchtree.cli.plugin_manager"], [121, "module-torchtree.cli.plugin_manager"]], "create_clock_horseshoe_prior() (in module torchtree.cli.priors)": [[13, "torchtree.cli.priors.create_clock_horseshoe_prior"]], "create_one_on_x_prior() (in module torchtree.cli.priors)": [[13, "torchtree.cli.priors.create_one_on_x_prior"]], "torchtree.cli.priors": [[13, "module-torchtree.cli.priors"], [122, "module-torchtree.cli.priors"]], "convert_date_to_real() (in module torchtree.cli.utils)": [[14, "torchtree.cli.utils.convert_date_to_real"]], "length_of_tensor_in_dict_parameter() (in module torchtree.cli.utils)": [[14, "torchtree.cli.utils.length_of_tensor_in_dict_parameter"]], "make_unconstrained() (in module torchtree.cli.utils)": [[14, "torchtree.cli.utils.make_unconstrained"]], "read_dates_from_csv() (in module torchtree.cli.utils)": [[14, "torchtree.cli.utils.read_dates_from_csv"]], "torchtree.cli.utils": [[14, "module-torchtree.cli.utils"], [123, "module-torchtree.cli.utils"]], "abstractparameter (class in torchtree.core.abstractparameter)": [[15, "torchtree.core.abstractparameter.AbstractParameter"]], "device (class in torchtree.core.abstractparameter)": [[15, "torchtree.core.abstractparameter.Device"]], "add_parameter_listener() (torchtree.core.abstractparameter.abstractparameter method)": [[15, "torchtree.core.abstractparameter.AbstractParameter.add_parameter_listener"]], "cpu() (torchtree.core.abstractparameter.device method)": [[15, "torchtree.core.abstractparameter.Device.cpu"]], "cuda() (torchtree.core.abstractparameter.device method)": [[15, "torchtree.core.abstractparameter.Device.cuda"]], "device (torchtree.core.abstractparameter.abstractparameter property)": [[15, "torchtree.core.abstractparameter.AbstractParameter.device"]], "device (torchtree.core.abstractparameter.device property)": [[15, "torchtree.core.abstractparameter.Device.device"]], "dim() (torchtree.core.abstractparameter.abstractparameter method)": [[15, "torchtree.core.abstractparameter.AbstractParameter.dim"]], "dtype (torchtree.core.abstractparameter.abstractparameter property)": [[15, "torchtree.core.abstractparameter.AbstractParameter.dtype"]], "fire_parameter_changed() (torchtree.core.abstractparameter.abstractparameter method)": [[15, "torchtree.core.abstractparameter.AbstractParameter.fire_parameter_changed"]], "parameters() (torchtree.core.abstractparameter.abstractparameter method)": [[15, "torchtree.core.abstractparameter.AbstractParameter.parameters"]], "requires_grad (torchtree.core.abstractparameter.abstractparameter property)": [[15, "torchtree.core.abstractparameter.AbstractParameter.requires_grad"]], "shape (torchtree.core.abstractparameter.abstractparameter property)": [[15, "torchtree.core.abstractparameter.AbstractParameter.shape"]], "tensor (torchtree.core.abstractparameter.abstractparameter property)": [[15, "torchtree.core.abstractparameter.AbstractParameter.tensor"]], "to() (torchtree.core.abstractparameter.device method)": [[15, "torchtree.core.abstractparameter.Device.to"]], "torchtree.core.abstractparameter": [[15, "module-torchtree.core.abstractparameter"], [125, "module-torchtree.core.abstractparameter"]], "classproperty (class in torchtree.core.classproperty_decorator)": [[16, "torchtree.core.classproperty_decorator.classproperty"]], "torchtree.core.classproperty_decorator": [[16, "module-torchtree.core.classproperty_decorator"], [126, "module-torchtree.core.classproperty_decorator"]], "container (class in torchtree.core.container)": [[17, "torchtree.core.container.Container"]], "callables() (torchtree.core.container.container method)": [[17, "torchtree.core.container.Container.callables"]], "from_json() (torchtree.core.container.container class method)": [[17, "torchtree.core.container.Container.from_json"]], "handle_model_changed() (torchtree.core.container.container method)": [[17, "torchtree.core.container.Container.handle_model_changed"]], "handle_parameter_changed() (torchtree.core.container.container method)": [[17, "torchtree.core.container.Container.handle_parameter_changed"]], "params() (torchtree.core.container.container method)": [[17, "torchtree.core.container.Container.params"]], "torchtree.core.container": [[17, "module-torchtree.core.container"], [127, "module-torchtree.core.container"]], "identifiable (class in torchtree.core.identifiable)": [[18, "torchtree.core.identifiable.Identifiable"]], "id (torchtree.core.identifiable.identifiable property)": [[18, "torchtree.core.identifiable.Identifiable.id"]], "torchtree.core.identifiable": [[18, "module-torchtree.core.identifiable"], [128, "module-torchtree.core.identifiable"]], "torchtree.core": [[19, "module-torchtree.core"], [124, "module-torchtree.core"]], "csv (class in torchtree.core.logger)": [[20, "torchtree.core.logger.CSV"]], "containerlogger (class in torchtree.core.logger)": [[20, "torchtree.core.logger.ContainerLogger"]], "dumper (class in torchtree.core.logger)": [[20, "torchtree.core.logger.Dumper"]], "logger (class in torchtree.core.logger)": [[20, "torchtree.core.logger.Logger"]], "loggerinterface (class in torchtree.core.logger)": [[20, "torchtree.core.logger.LoggerInterface"]], "treelogger (class in torchtree.core.logger)": [[20, "torchtree.core.logger.TreeLogger"]], "close() (torchtree.core.logger.containerlogger method)": [[20, "torchtree.core.logger.ContainerLogger.close"]], "close() (torchtree.core.logger.logger method)": [[20, "torchtree.core.logger.Logger.close"]], "close() (torchtree.core.logger.loggerinterface method)": [[20, "torchtree.core.logger.LoggerInterface.close"]], "close() (torchtree.core.logger.treelogger method)": [[20, "torchtree.core.logger.TreeLogger.close"]], "from_json() (torchtree.core.logger.csv class method)": [[20, "torchtree.core.logger.CSV.from_json"]], "from_json() (torchtree.core.logger.containerlogger class method)": [[20, "torchtree.core.logger.ContainerLogger.from_json"]], "from_json() (torchtree.core.logger.dumper class method)": [[20, "torchtree.core.logger.Dumper.from_json"]], "from_json() (torchtree.core.logger.logger class method)": [[20, "torchtree.core.logger.Logger.from_json"]], "from_json() (torchtree.core.logger.treelogger class method)": [[20, "torchtree.core.logger.TreeLogger.from_json"]], "initialize() (torchtree.core.logger.containerlogger method)": [[20, "torchtree.core.logger.ContainerLogger.initialize"]], "initialize() (torchtree.core.logger.logger method)": [[20, "torchtree.core.logger.Logger.initialize"]], "initialize() (torchtree.core.logger.loggerinterface method)": [[20, "torchtree.core.logger.LoggerInterface.initialize"]], "initialize() (torchtree.core.logger.treelogger method)": [[20, "torchtree.core.logger.TreeLogger.initialize"]], "log() (torchtree.core.logger.containerlogger method)": [[20, "torchtree.core.logger.ContainerLogger.log"]], "log() (torchtree.core.logger.logger method)": [[20, "torchtree.core.logger.Logger.log"]], "log() (torchtree.core.logger.loggerinterface method)": [[20, "torchtree.core.logger.LoggerInterface.log"]], "log() (torchtree.core.logger.treelogger method)": [[20, "torchtree.core.logger.TreeLogger.log"]], "run() (torchtree.core.logger.csv method)": [[20, "torchtree.core.logger.CSV.run"]], "run() (torchtree.core.logger.dumper method)": [[20, "torchtree.core.logger.Dumper.run"]], "run() (torchtree.core.logger.loggerinterface method)": [[20, "torchtree.core.logger.LoggerInterface.run"]], "torchtree.core.logger": [[20, "module-torchtree.core.logger"], [129, "module-torchtree.core.logger"]], "callablemodel (class in torchtree.core.model)": [[21, "torchtree.core.model.CallableModel"]], "model (class in torchtree.core.model)": [[21, "torchtree.core.model.Model"]], "add_model_listener() (torchtree.core.model.model method)": [[21, "torchtree.core.model.Model.add_model_listener"]], "add_parameter_listener() (torchtree.core.model.model method)": [[21, "torchtree.core.model.Model.add_parameter_listener"]], "cpu() (torchtree.core.model.model method)": [[21, "torchtree.core.model.Model.cpu"]], "cuda() (torchtree.core.model.model method)": [[21, "torchtree.core.model.Model.cuda"]], "fire_model_changed() (torchtree.core.model.model method)": [[21, "torchtree.core.model.Model.fire_model_changed"]], "handle_model_changed() (torchtree.core.model.callablemodel method)": [[21, "torchtree.core.model.CallableModel.handle_model_changed"]], "handle_parameter_changed() (torchtree.core.model.callablemodel method)": [[21, "torchtree.core.model.CallableModel.handle_parameter_changed"]], "models() (torchtree.core.model.model method)": [[21, "torchtree.core.model.Model.models"]], "remove_model_listener() (torchtree.core.model.model method)": [[21, "torchtree.core.model.Model.remove_model_listener"]], "remove_parameter_listener() (torchtree.core.model.model method)": [[21, "torchtree.core.model.Model.remove_parameter_listener"]], "sample_shape (torchtree.core.model.model property)": [[21, "torchtree.core.model.Model.sample_shape"]], "tag (torchtree.core.model.model property)": [[21, "torchtree.core.model.Model.tag"]], "to() (torchtree.core.model.model method)": [[21, "torchtree.core.model.Model.to"]], "torchtree.core.model": [[21, "module-torchtree.core.model"], [130, "module-torchtree.core.model"]], "catparameter (class in torchtree.core.parameter)": [[22, "torchtree.core.parameter.CatParameter"]], "moduleparameter (class in torchtree.core.parameter)": [[22, "torchtree.core.parameter.ModuleParameter"]], "parameter (class in torchtree.core.parameter)": [[22, "torchtree.core.parameter.Parameter"]], "parameter.to() (in module torchtree.core.parameter)": [[22, "id0"], [22, "id5"], [22, "id6"]], "transformedparameter (class in torchtree.core.parameter)": [[22, "torchtree.core.parameter.TransformedParameter"]], "viewparameter (class in torchtree.core.parameter)": [[22, "torchtree.core.parameter.ViewParameter"]], "add_parameter_listener() (torchtree.core.parameter.catparameter method)": [[22, "torchtree.core.parameter.CatParameter.add_parameter_listener"]], "add_parameter_listener() (torchtree.core.parameter.moduleparameter method)": [[22, "torchtree.core.parameter.ModuleParameter.add_parameter_listener"]], "add_parameter_listener() (torchtree.core.parameter.parameter method)": [[22, "torchtree.core.parameter.Parameter.add_parameter_listener"]], "add_parameter_listener() (torchtree.core.parameter.transformedparameter method)": [[22, "torchtree.core.parameter.TransformedParameter.add_parameter_listener"]], "add_parameter_listener() (torchtree.core.parameter.viewparameter method)": [[22, "torchtree.core.parameter.ViewParameter.add_parameter_listener"]], "apply_transform() (torchtree.core.parameter.transformedparameter method)": [[22, "torchtree.core.parameter.TransformedParameter.apply_transform"]], "assign() (torchtree.core.parameter.viewparameter method)": [[22, "torchtree.core.parameter.ViewParameter.assign"]], "clone() (torchtree.core.parameter.parameter method)": [[22, "torchtree.core.parameter.Parameter.clone"]], "clone() (torchtree.core.parameter.viewparameter method)": [[22, "torchtree.core.parameter.ViewParameter.clone"]], "copy_() (torchtree.core.parameter.parameter method)": [[22, "torchtree.core.parameter.Parameter.copy_"]], "cpu() (torchtree.core.parameter.catparameter method)": [[22, "torchtree.core.parameter.CatParameter.cpu"]], "cpu() (torchtree.core.parameter.moduleparameter method)": [[22, "torchtree.core.parameter.ModuleParameter.cpu"]], "cpu() (torchtree.core.parameter.parameter method)": [[22, "torchtree.core.parameter.Parameter.cpu"]], "cpu() (torchtree.core.parameter.transformedparameter method)": [[22, "torchtree.core.parameter.TransformedParameter.cpu"]], "cpu() (torchtree.core.parameter.viewparameter method)": [[22, "torchtree.core.parameter.ViewParameter.cpu"]], "cuda() (torchtree.core.parameter.catparameter method)": [[22, "torchtree.core.parameter.CatParameter.cuda"]], "cuda() (torchtree.core.parameter.moduleparameter method)": [[22, "torchtree.core.parameter.ModuleParameter.cuda"]], "cuda() (torchtree.core.parameter.parameter method)": [[22, "torchtree.core.parameter.Parameter.cuda"]], "cuda() (torchtree.core.parameter.transformedparameter method)": [[22, "torchtree.core.parameter.TransformedParameter.cuda"]], "cuda() (torchtree.core.parameter.viewparameter method)": [[22, "torchtree.core.parameter.ViewParameter.cuda"]], "detach() (torchtree.core.parameter.parameter method)": [[22, "torchtree.core.parameter.Parameter.detach"]], "device (torchtree.core.parameter.catparameter property)": [[22, "torchtree.core.parameter.CatParameter.device"]], "dtype (torchtree.core.parameter.viewparameter property)": [[22, "torchtree.core.parameter.ViewParameter.dtype"]], "fire_parameter_changed() (torchtree.core.parameter.catparameter method)": [[22, "torchtree.core.parameter.CatParameter.fire_parameter_changed"]], "fire_parameter_changed() (torchtree.core.parameter.moduleparameter method)": [[22, "torchtree.core.parameter.ModuleParameter.fire_parameter_changed"]], "fire_parameter_changed() (torchtree.core.parameter.parameter method)": [[22, "torchtree.core.parameter.Parameter.fire_parameter_changed"]], "fire_parameter_changed() (torchtree.core.parameter.transformedparameter method)": [[22, "torchtree.core.parameter.TransformedParameter.fire_parameter_changed"]], "fire_parameter_changed() (torchtree.core.parameter.viewparameter method)": [[22, "torchtree.core.parameter.ViewParameter.fire_parameter_changed"]], "from_json() (torchtree.core.parameter.catparameter class method)": [[22, "torchtree.core.parameter.CatParameter.from_json"]], "from_json() (torchtree.core.parameter.moduleparameter class method)": [[22, "torchtree.core.parameter.ModuleParameter.from_json"]], "from_json() (torchtree.core.parameter.parameter class method)": [[22, "torchtree.core.parameter.Parameter.from_json"]], "from_json() (torchtree.core.parameter.transformedparameter class method)": [[22, "torchtree.core.parameter.TransformedParameter.from_json"]], "from_json() (torchtree.core.parameter.viewparameter class method)": [[22, "torchtree.core.parameter.ViewParameter.from_json"]], "grad (torchtree.core.parameter.parameter property)": [[22, "torchtree.core.parameter.Parameter.grad"]], "grad_fn (torchtree.core.parameter.parameter property)": [[22, "torchtree.core.parameter.Parameter.grad_fn"]], "handle_model_changed() (torchtree.core.parameter.catparameter method)": [[22, "torchtree.core.parameter.CatParameter.handle_model_changed"]], "handle_model_changed() (torchtree.core.parameter.moduleparameter method)": [[22, "torchtree.core.parameter.ModuleParameter.handle_model_changed"]], "handle_model_changed() (torchtree.core.parameter.transformedparameter method)": [[22, "torchtree.core.parameter.TransformedParameter.handle_model_changed"]], "handle_parameter_changed() (torchtree.core.parameter.catparameter method)": [[22, "torchtree.core.parameter.CatParameter.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.core.parameter.moduleparameter method)": [[22, "torchtree.core.parameter.ModuleParameter.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.core.parameter.transformedparameter method)": [[22, "torchtree.core.parameter.TransformedParameter.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.core.parameter.viewparameter method)": [[22, "torchtree.core.parameter.ViewParameter.handle_parameter_changed"]], "json_factory() (torchtree.core.parameter.parameter static method)": [[22, "torchtree.core.parameter.Parameter.json_factory"]], "json_factory() (torchtree.core.parameter.viewparameter static method)": [[22, "torchtree.core.parameter.ViewParameter.json_factory"]], "parameters() (torchtree.core.parameter.moduleparameter method)": [[22, "torchtree.core.parameter.ModuleParameter.parameters"]], "parameters() (torchtree.core.parameter.transformedparameter method)": [[22, "torchtree.core.parameter.TransformedParameter.parameters"]], "requires_grad (torchtree.core.parameter.catparameter property)": [[22, "torchtree.core.parameter.CatParameter.requires_grad"]], "requires_grad (torchtree.core.parameter.moduleparameter property)": [[22, "torchtree.core.parameter.ModuleParameter.requires_grad"]], "requires_grad (torchtree.core.parameter.parameter property)": [[22, "torchtree.core.parameter.Parameter.requires_grad"]], "requires_grad (torchtree.core.parameter.transformedparameter property)": [[22, "torchtree.core.parameter.TransformedParameter.requires_grad"]], "requires_grad (torchtree.core.parameter.viewparameter property)": [[22, "torchtree.core.parameter.ViewParameter.requires_grad"]], "sample_shape (torchtree.core.parameter.moduleparameter property)": [[22, "torchtree.core.parameter.ModuleParameter.sample_shape"]], "sample_shape (torchtree.core.parameter.transformedparameter property)": [[22, "torchtree.core.parameter.TransformedParameter.sample_shape"]], "shape (torchtree.core.parameter.moduleparameter property)": [[22, "torchtree.core.parameter.ModuleParameter.shape"]], "shape (torchtree.core.parameter.transformedparameter property)": [[22, "torchtree.core.parameter.TransformedParameter.shape"]], "shape (torchtree.core.parameter.viewparameter property)": [[22, "torchtree.core.parameter.ViewParameter.shape"]], "size() (torchtree.core.parameter.parameter method)": [[22, "torchtree.core.parameter.Parameter.size"]], "tensor (torchtree.core.parameter.catparameter property)": [[22, "torchtree.core.parameter.CatParameter.tensor"]], "tensor (torchtree.core.parameter.moduleparameter property)": [[22, "torchtree.core.parameter.ModuleParameter.tensor"]], "tensor (torchtree.core.parameter.parameter property)": [[22, "torchtree.core.parameter.Parameter.tensor"]], "tensor (torchtree.core.parameter.transformedparameter property)": [[22, "torchtree.core.parameter.TransformedParameter.tensor"]], "tensor (torchtree.core.parameter.viewparameter property)": [[22, "torchtree.core.parameter.ViewParameter.tensor"]], "to() (torchtree.core.parameter.catparameter method)": [[22, "torchtree.core.parameter.CatParameter.to"]], "to() (torchtree.core.parameter.moduleparameter method)": [[22, "torchtree.core.parameter.ModuleParameter.to"]], "to() (torchtree.core.parameter.parameter method)": [[22, "torchtree.core.parameter.Parameter.to"]], "to() (torchtree.core.parameter.transformedparameter method)": [[22, "torchtree.core.parameter.TransformedParameter.to"]], "to() (torchtree.core.parameter.viewparameter method)": [[22, "torchtree.core.parameter.ViewParameter.to"]], "torchtree.core.parameter": [[22, "module-torchtree.core.parameter"], [131, "module-torchtree.core.parameter"]], "update() (torchtree.core.parameter.catparameter method)": [[22, "torchtree.core.parameter.CatParameter.update"]], "parameterencoder (class in torchtree.core.parameter_encoder)": [[23, "torchtree.core.parameter_encoder.ParameterEncoder"]], "default() (torchtree.core.parameter_encoder.parameterencoder method)": [[23, "torchtree.core.parameter_encoder.ParameterEncoder.default"]], "torchtree.core.parameter_encoder": [[23, "module-torchtree.core.parameter_encoder"], [132, "module-torchtree.core.parameter_encoder"]], "pack_tensor() (in module torchtree.core.parameter_utils)": [[24, "torchtree.core.parameter_utils.pack_tensor"]], "save_parameters() (in module torchtree.core.parameter_utils)": [[24, "torchtree.core.parameter_utils.save_parameters"]], "torchtree.core.parameter_utils": [[24, "module-torchtree.core.parameter_utils"], [133, "module-torchtree.core.parameter_utils"]], "modellistener (class in torchtree.core.parametric)": [[25, "torchtree.core.parametric.ModelListener"]], "parameterlistener (class in torchtree.core.parametric)": [[25, "torchtree.core.parametric.ParameterListener"]], "parametric (class in torchtree.core.parametric)": [[25, "torchtree.core.parametric.Parametric"]], "handle_model_changed() (torchtree.core.parametric.modellistener method)": [[25, "torchtree.core.parametric.ModelListener.handle_model_changed"]], "handle_parameter_changed() (torchtree.core.parametric.parameterlistener method)": [[25, "torchtree.core.parametric.ParameterListener.handle_parameter_changed"]], "parameters() (torchtree.core.parametric.parametric method)": [[25, "torchtree.core.parametric.Parametric.parameters"]], "register_model() (torchtree.core.parametric.parametric method)": [[25, "torchtree.core.parametric.Parametric.register_model"]], "register_parameter() (torchtree.core.parametric.parametric method)": [[25, "torchtree.core.parametric.Parametric.register_parameter"]], "torchtree.core.parametric": [[25, "module-torchtree.core.parametric"], [134, "module-torchtree.core.parametric"]], "runnable (class in torchtree.core.runnable)": [[26, "torchtree.core.runnable.Runnable"]], "run() (torchtree.core.runnable.runnable method)": [[26, "torchtree.core.runnable.Runnable.run"]], "torchtree.core.runnable": [[26, "module-torchtree.core.runnable"], [135, "module-torchtree.core.runnable"]], "jsonserializable (class in torchtree.core.serializable)": [[27, "torchtree.core.serializable.JSONSerializable"]], "from_json() (torchtree.core.serializable.jsonserializable class method)": [[27, "torchtree.core.serializable.JSONSerializable.from_json"]], "from_json_safe() (torchtree.core.serializable.jsonserializable class method)": [[27, "torchtree.core.serializable.JSONSerializable.from_json_safe"]], "torchtree.core.serializable": [[27, "module-torchtree.core.serializable"], [136, "module-torchtree.core.serializable"]], "alternativeattributeerror": [[28, "torchtree.core.utils.AlternativeAttributeError"]], "jsonparseerror": [[28, "torchtree.core.utils.JSONParseError"]], "registered_classes (in module torchtree.core.utils)": [[28, "torchtree.core.utils.REGISTERED_CLASSES"]], "signalhandler (class in torchtree.core.utils)": [[28, "torchtree.core.utils.SignalHandler"]], "tensorencoder (class in torchtree.core.utils)": [[28, "torchtree.core.utils.TensorEncoder"]], "as_tensor() (in module torchtree.core.utils)": [[28, "torchtree.core.utils.as_tensor"]], "default() (torchtree.core.utils.tensorencoder method)": [[28, "torchtree.core.utils.TensorEncoder.default"]], "exit() (torchtree.core.utils.signalhandler method)": [[28, "torchtree.core.utils.SignalHandler.exit"]], "expand_plates() (in module torchtree.core.utils)": [[28, "torchtree.core.utils.expand_plates"]], "get_class() (in module torchtree.core.utils)": [[28, "torchtree.core.utils.get_class"]], "package_contents() (in module torchtree.core.utils)": [[28, "torchtree.core.utils.package_contents"]], "print_graph() (in module torchtree.core.utils)": [[28, "torchtree.core.utils.print_graph"]], "process_object() (in module torchtree.core.utils)": [[28, "torchtree.core.utils.process_object"]], "process_objects() (in module torchtree.core.utils)": [[28, "torchtree.core.utils.process_objects"]], "register_class() (in module torchtree.core.utils)": [[28, "torchtree.core.utils.register_class"]], "remove_comments() (in module torchtree.core.utils)": [[28, "torchtree.core.utils.remove_comments"]], "replace_star_with_str() (in module torchtree.core.utils)": [[28, "torchtree.core.utils.replace_star_with_str"]], "replace_wildcard_with_str() (in module torchtree.core.utils)": [[28, "torchtree.core.utils.replace_wildcard_with_str"]], "string_to_list_index() (in module torchtree.core.utils)": [[28, "torchtree.core.utils.string_to_list_index"]], "tensor_rand() (in module torchtree.core.utils)": [[28, "torchtree.core.utils.tensor_rand"]], "torchtree.core.utils": [[28, "module-torchtree.core.utils"], [137, "module-torchtree.core.utils"]], "update_parameters() (in module torchtree.core.utils)": [[28, "torchtree.core.utils.update_parameters"]], "validate() (in module torchtree.core.utils)": [[28, "torchtree.core.utils.validate"]], "wrapper() (torchtree.core.utils.alternativeattributeerror class method)": [[28, "torchtree.core.utils.AlternativeAttributeError.wrapper"]], "bayesianbridge (class in torchtree.distributions.bayesian_bridge)": [[29, "torchtree.distributions.bayesian_bridge.BayesianBridge"]], "from_json() (torchtree.distributions.bayesian_bridge.bayesianbridge class method)": [[29, "torchtree.distributions.bayesian_bridge.BayesianBridge.from_json"]], "handle_model_changed() (torchtree.distributions.bayesian_bridge.bayesianbridge method)": [[29, "torchtree.distributions.bayesian_bridge.BayesianBridge.handle_model_changed"]], "json_factory() (torchtree.distributions.bayesian_bridge.bayesianbridge static method)": [[29, "torchtree.distributions.bayesian_bridge.BayesianBridge.json_factory"]], "process_object_number() (in module torchtree.distributions.bayesian_bridge)": [[29, "torchtree.distributions.bayesian_bridge.process_object_number"]], "torchtree.distributions.bayesian_bridge": [[29, "module-torchtree.distributions.bayesian_bridge"], [139, "module-torchtree.distributions.bayesian_bridge"]], "ctmcscale (class in torchtree.distributions.ctmc_scale)": [[30, "torchtree.distributions.ctmc_scale.CTMCScale"]], "cpu() (torchtree.distributions.ctmc_scale.ctmcscale method)": [[30, "torchtree.distributions.ctmc_scale.CTMCScale.cpu"]], "cuda() (torchtree.distributions.ctmc_scale.ctmcscale method)": [[30, "torchtree.distributions.ctmc_scale.CTMCScale.cuda"]], "from_json() (torchtree.distributions.ctmc_scale.ctmcscale class method)": [[30, "torchtree.distributions.ctmc_scale.CTMCScale.from_json"]], "json_factory() (torchtree.distributions.ctmc_scale.ctmcscale static method)": [[30, "torchtree.distributions.ctmc_scale.CTMCScale.json_factory"]], "log_gamma_one_half (torchtree.distributions.ctmc_scale.ctmcscale attribute)": [[30, "torchtree.distributions.ctmc_scale.CTMCScale.log_gamma_one_half"]], "shape (torchtree.distributions.ctmc_scale.ctmcscale attribute)": [[30, "torchtree.distributions.ctmc_scale.CTMCScale.shape"]], "to() (torchtree.distributions.ctmc_scale.ctmcscale method)": [[30, "torchtree.distributions.ctmc_scale.CTMCScale.to"]], "torchtree.distributions.ctmc_scale": [[30, "module-torchtree.distributions.ctmc_scale"], [140, "module-torchtree.distributions.ctmc_scale"]], "deterministicnormal (class in torchtree.distributions.deterministic_normal)": [[31, "torchtree.distributions.deterministic_normal.DeterministicNormal"]], "batch_shape (torchtree.distributions.deterministic_normal.deterministicnormal property)": [[31, "torchtree.distributions.deterministic_normal.DeterministicNormal.batch_shape"]], "entropy() (torchtree.distributions.deterministic_normal.deterministicnormal method)": [[31, "torchtree.distributions.deterministic_normal.DeterministicNormal.entropy"]], "event_shape (torchtree.distributions.deterministic_normal.deterministicnormal property)": [[31, "torchtree.distributions.deterministic_normal.DeterministicNormal.event_shape"]], "from_json() (torchtree.distributions.deterministic_normal.deterministicnormal class method)": [[31, "torchtree.distributions.deterministic_normal.DeterministicNormal.from_json"]], "handle_model_changed() (torchtree.distributions.deterministic_normal.deterministicnormal method)": [[31, "torchtree.distributions.deterministic_normal.DeterministicNormal.handle_model_changed"]], "json_factory() (torchtree.distributions.deterministic_normal.deterministicnormal static method)": [[31, "torchtree.distributions.deterministic_normal.DeterministicNormal.json_factory"]], "log_prob() (torchtree.distributions.deterministic_normal.deterministicnormal method)": [[31, "torchtree.distributions.deterministic_normal.DeterministicNormal.log_prob"]], "rsample() (torchtree.distributions.deterministic_normal.deterministicnormal method)": [[31, "torchtree.distributions.deterministic_normal.DeterministicNormal.rsample"]], "sample() (torchtree.distributions.deterministic_normal.deterministicnormal method)": [[31, "torchtree.distributions.deterministic_normal.DeterministicNormal.sample"]], "torchtree.distributions.deterministic_normal": [[31, "module-torchtree.distributions.deterministic_normal"], [141, "module-torchtree.distributions.deterministic_normal"]], "distribution (class in torchtree.distributions.distributions)": [[32, "torchtree.distributions.distributions.Distribution"]], "distributionmodel (class in torchtree.distributions.distributions)": [[32, "torchtree.distributions.distributions.DistributionModel"]], "batch_shape (torchtree.distributions.distributions.distribution property)": [[32, "torchtree.distributions.distributions.Distribution.batch_shape"]], "distribution (torchtree.distributions.distributions.distribution property)": [[32, "torchtree.distributions.distributions.Distribution.distribution"]], "entropy() (torchtree.distributions.distributions.distribution method)": [[32, "torchtree.distributions.distributions.Distribution.entropy"]], "entropy() (torchtree.distributions.distributions.distributionmodel method)": [[32, "torchtree.distributions.distributions.DistributionModel.entropy"]], "event_shape (torchtree.distributions.distributions.distribution property)": [[32, "torchtree.distributions.distributions.Distribution.event_shape"]], "from_json() (torchtree.distributions.distributions.distribution class method)": [[32, "torchtree.distributions.distributions.Distribution.from_json"]], "json_factory() (torchtree.distributions.distributions.distribution static method)": [[32, "torchtree.distributions.distributions.Distribution.json_factory"]], "log_prob() (torchtree.distributions.distributions.distribution method)": [[32, "torchtree.distributions.distributions.Distribution.log_prob"]], "log_prob() (torchtree.distributions.distributions.distributionmodel method)": [[32, "torchtree.distributions.distributions.DistributionModel.log_prob"]], "rsample() (torchtree.distributions.distributions.distribution method)": [[32, "torchtree.distributions.distributions.Distribution.rsample"]], "rsample() (torchtree.distributions.distributions.distributionmodel method)": [[32, "torchtree.distributions.distributions.DistributionModel.rsample"]], "sample() (torchtree.distributions.distributions.distribution method)": [[32, "torchtree.distributions.distributions.Distribution.sample"]], "sample() (torchtree.distributions.distributions.distributionmodel method)": [[32, "torchtree.distributions.distributions.DistributionModel.sample"]], "torchtree.distributions.distributions": [[32, "module-torchtree.distributions.distributions"], [142, "module-torchtree.distributions.distributions"]], "gmrf (class in torchtree.distributions.gmrf)": [[33, "torchtree.distributions.gmrf.GMRF"]], "gmrfcovariate (class in torchtree.distributions.gmrf)": [[33, "torchtree.distributions.gmrf.GMRFCovariate"]], "from_json() (torchtree.distributions.gmrf.gmrf class method)": [[33, "torchtree.distributions.gmrf.GMRF.from_json"]], "from_json() (torchtree.distributions.gmrf.gmrfcovariate class method)": [[33, "torchtree.distributions.gmrf.GMRFCovariate.from_json"]], "precision_matrix() (torchtree.distributions.gmrf.gmrf method)": [[33, "torchtree.distributions.gmrf.GMRF.precision_matrix"]], "torchtree.distributions.gmrf": [[33, "module-torchtree.distributions.gmrf"], [143, "module-torchtree.distributions.gmrf"]], "gmrfgammaintegrated (class in torchtree.distributions.gmrf_integrated)": [[34, "torchtree.distributions.gmrf_integrated.GMRFGammaIntegrated"]], "from_json() (torchtree.distributions.gmrf_integrated.gmrfgammaintegrated class method)": [[34, "torchtree.distributions.gmrf_integrated.GMRFGammaIntegrated.from_json"]], "torchtree.distributions.gmrf_integrated": [[34, "module-torchtree.distributions.gmrf_integrated"], [144, "module-torchtree.distributions.gmrf_integrated"]], "torchtree.distributions": [[35, "module-torchtree.distributions"], [138, "module-torchtree.distributions"]], "inversegamma (class in torchtree.distributions.inverse_gamma)": [[36, "torchtree.distributions.inverse_gamma.InverseGamma"]], "arg_constraints (torchtree.distributions.inverse_gamma.inversegamma attribute)": [[36, "torchtree.distributions.inverse_gamma.InverseGamma.arg_constraints"]], "concentration (torchtree.distributions.inverse_gamma.inversegamma property)": [[36, "torchtree.distributions.inverse_gamma.InverseGamma.concentration"]], "expand() (torchtree.distributions.inverse_gamma.inversegamma method)": [[36, "torchtree.distributions.inverse_gamma.InverseGamma.expand"]], "has_rsample (torchtree.distributions.inverse_gamma.inversegamma attribute)": [[36, "torchtree.distributions.inverse_gamma.InverseGamma.has_rsample"]], "rate (torchtree.distributions.inverse_gamma.inversegamma property)": [[36, "torchtree.distributions.inverse_gamma.InverseGamma.rate"]], "support (torchtree.distributions.inverse_gamma.inversegamma attribute)": [[36, "torchtree.distributions.inverse_gamma.InverseGamma.support"]], "torchtree.distributions.inverse_gamma": [[36, "module-torchtree.distributions.inverse_gamma"], [145, "module-torchtree.distributions.inverse_gamma"]], "jointdistributionmodel (class in torchtree.distributions.joint_distribution)": [[37, "torchtree.distributions.joint_distribution.JointDistributionModel"]], "entropy() (torchtree.distributions.joint_distribution.jointdistributionmodel method)": [[37, "torchtree.distributions.joint_distribution.JointDistributionModel.entropy"]], "from_json() (torchtree.distributions.joint_distribution.jointdistributionmodel class method)": [[37, "torchtree.distributions.joint_distribution.JointDistributionModel.from_json"]], "handle_parameter_changed() (torchtree.distributions.joint_distribution.jointdistributionmodel method)": [[37, "torchtree.distributions.joint_distribution.JointDistributionModel.handle_parameter_changed"]], "log_prob() (torchtree.distributions.joint_distribution.jointdistributionmodel method)": [[37, "torchtree.distributions.joint_distribution.JointDistributionModel.log_prob"]], "rsample() (torchtree.distributions.joint_distribution.jointdistributionmodel method)": [[37, "torchtree.distributions.joint_distribution.JointDistributionModel.rsample"]], "sample() (torchtree.distributions.joint_distribution.jointdistributionmodel method)": [[37, "torchtree.distributions.joint_distribution.JointDistributionModel.sample"]], "torchtree.distributions.joint_distribution": [[37, "module-torchtree.distributions.joint_distribution"], [146, "module-torchtree.distributions.joint_distribution"]], "lognormal (class in torchtree.distributions.log_normal)": [[38, "torchtree.distributions.log_normal.LogNormal"]], "torchtree.distributions.log_normal": [[38, "module-torchtree.distributions.log_normal"], [147, "module-torchtree.distributions.log_normal"]], "multivariatenormal (class in torchtree.distributions.multivariate_normal)": [[39, "torchtree.distributions.multivariate_normal.MultivariateNormal"]], "batch_shape (torchtree.distributions.multivariate_normal.multivariatenormal property)": [[39, "torchtree.distributions.multivariate_normal.MultivariateNormal.batch_shape"]], "entropy() (torchtree.distributions.multivariate_normal.multivariatenormal method)": [[39, "torchtree.distributions.multivariate_normal.MultivariateNormal.entropy"]], "event_shape (torchtree.distributions.multivariate_normal.multivariatenormal property)": [[39, "torchtree.distributions.multivariate_normal.MultivariateNormal.event_shape"]], "from_json() (torchtree.distributions.multivariate_normal.multivariatenormal class method)": [[39, "torchtree.distributions.multivariate_normal.MultivariateNormal.from_json"]], "log_prob() (torchtree.distributions.multivariate_normal.multivariatenormal method)": [[39, "torchtree.distributions.multivariate_normal.MultivariateNormal.log_prob"]], "rsample() (torchtree.distributions.multivariate_normal.multivariatenormal method)": [[39, "torchtree.distributions.multivariate_normal.MultivariateNormal.rsample"]], "sample() (torchtree.distributions.multivariate_normal.multivariatenormal method)": [[39, "torchtree.distributions.multivariate_normal.MultivariateNormal.sample"]], "torchtree.distributions.multivariate_normal": [[39, "module-torchtree.distributions.multivariate_normal"], [148, "module-torchtree.distributions.multivariate_normal"]], "normal (class in torchtree.distributions.normal)": [[40, "torchtree.distributions.normal.Normal"]], "torchtree.distributions.normal": [[40, "module-torchtree.distributions.normal"], [149, "module-torchtree.distributions.normal"]], "oneonx (class in torchtree.distributions.one_on_x)": [[41, "torchtree.distributions.one_on_x.OneOnX"]], "arg_constraints (torchtree.distributions.one_on_x.oneonx attribute)": [[41, "torchtree.distributions.one_on_x.OneOnX.arg_constraints"]], "log_prob() (torchtree.distributions.one_on_x.oneonx method)": [[41, "torchtree.distributions.one_on_x.OneOnX.log_prob"]], "support (torchtree.distributions.one_on_x.oneonx attribute)": [[41, "torchtree.distributions.one_on_x.OneOnX.support"]], "torchtree.distributions.one_on_x": [[41, "module-torchtree.distributions.one_on_x"], [150, "module-torchtree.distributions.one_on_x"]], "scalemixturenormal (class in torchtree.distributions.scale_mixture)": [[42, "torchtree.distributions.scale_mixture.ScaleMixtureNormal"]], "from_json() (torchtree.distributions.scale_mixture.scalemixturenormal class method)": [[42, "torchtree.distributions.scale_mixture.ScaleMixtureNormal.from_json"]], "handle_model_changed() (torchtree.distributions.scale_mixture.scalemixturenormal method)": [[42, "torchtree.distributions.scale_mixture.ScaleMixtureNormal.handle_model_changed"]], "json_factory() (torchtree.distributions.scale_mixture.scalemixturenormal static method)": [[42, "torchtree.distributions.scale_mixture.ScaleMixtureNormal.json_factory"]], "torchtree.distributions.scale_mixture": [[42, "module-torchtree.distributions.scale_mixture"], [151, "module-torchtree.distributions.scale_mixture"]], "convexcombinationtransform (class in torchtree.distributions.transforms)": [[43, "torchtree.distributions.transforms.ConvexCombinationTransform"]], "cumsumexptransform (class in torchtree.distributions.transforms)": [[43, "torchtree.distributions.transforms.CumSumExpTransform"]], "cumsumsoftplustransform (class in torchtree.distributions.transforms)": [[43, "torchtree.distributions.transforms.CumSumSoftPlusTransform"]], "cumsumtransform (class in torchtree.distributions.transforms)": [[43, "torchtree.distributions.transforms.CumSumTransform"]], "lineartransform (class in torchtree.distributions.transforms)": [[43, "torchtree.distributions.transforms.LinearTransform"]], "logtransform (class in torchtree.distributions.transforms)": [[43, "torchtree.distributions.transforms.LogTransform"]], "softplustransform (class in torchtree.distributions.transforms)": [[43, "torchtree.distributions.transforms.SoftPlusTransform"]], "trilexpdiagonaltransform (class in torchtree.distributions.transforms)": [[43, "torchtree.distributions.transforms.TrilExpDiagonalTransform"]], "bijective (torchtree.distributions.transforms.cumsumexptransform attribute)": [[43, "torchtree.distributions.transforms.CumSumExpTransform.bijective"]], "bijective (torchtree.distributions.transforms.cumsumsoftplustransform attribute)": [[43, "torchtree.distributions.transforms.CumSumSoftPlusTransform.bijective"]], "bijective (torchtree.distributions.transforms.cumsumtransform attribute)": [[43, "torchtree.distributions.transforms.CumSumTransform.bijective"]], "bijective (torchtree.distributions.transforms.lineartransform attribute)": [[43, "torchtree.distributions.transforms.LinearTransform.bijective"]], "bijective (torchtree.distributions.transforms.logtransform attribute)": [[43, "torchtree.distributions.transforms.LogTransform.bijective"]], "bijective (torchtree.distributions.transforms.softplustransform attribute)": [[43, "torchtree.distributions.transforms.SoftPlusTransform.bijective"]], "bijective (torchtree.distributions.transforms.trilexpdiagonaltransform attribute)": [[43, "torchtree.distributions.transforms.TrilExpDiagonalTransform.bijective"]], "codomain (torchtree.distributions.transforms.convexcombinationtransform attribute)": [[43, "torchtree.distributions.transforms.ConvexCombinationTransform.codomain"]], "codomain (torchtree.distributions.transforms.cumsumexptransform attribute)": [[43, "torchtree.distributions.transforms.CumSumExpTransform.codomain"]], "codomain (torchtree.distributions.transforms.cumsumsoftplustransform attribute)": [[43, "torchtree.distributions.transforms.CumSumSoftPlusTransform.codomain"]], "codomain (torchtree.distributions.transforms.cumsumtransform attribute)": [[43, "torchtree.distributions.transforms.CumSumTransform.codomain"]], "codomain (torchtree.distributions.transforms.lineartransform attribute)": [[43, "torchtree.distributions.transforms.LinearTransform.codomain"]], "codomain (torchtree.distributions.transforms.logtransform attribute)": [[43, "torchtree.distributions.transforms.LogTransform.codomain"]], "codomain (torchtree.distributions.transforms.softplustransform attribute)": [[43, "torchtree.distributions.transforms.SoftPlusTransform.codomain"]], "domain (torchtree.distributions.transforms.convexcombinationtransform attribute)": [[43, "torchtree.distributions.transforms.ConvexCombinationTransform.domain"]], "domain (torchtree.distributions.transforms.cumsumexptransform attribute)": [[43, "torchtree.distributions.transforms.CumSumExpTransform.domain"]], "domain (torchtree.distributions.transforms.cumsumsoftplustransform attribute)": [[43, "torchtree.distributions.transforms.CumSumSoftPlusTransform.domain"]], "domain (torchtree.distributions.transforms.cumsumtransform attribute)": [[43, "torchtree.distributions.transforms.CumSumTransform.domain"]], "domain (torchtree.distributions.transforms.lineartransform attribute)": [[43, "torchtree.distributions.transforms.LinearTransform.domain"]], "domain (torchtree.distributions.transforms.logtransform attribute)": [[43, "torchtree.distributions.transforms.LogTransform.domain"]], "domain (torchtree.distributions.transforms.softplustransform attribute)": [[43, "torchtree.distributions.transforms.SoftPlusTransform.domain"]], "log_abs_det_jacobian() (torchtree.distributions.transforms.convexcombinationtransform method)": [[43, "torchtree.distributions.transforms.ConvexCombinationTransform.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torchtree.distributions.transforms.cumsumexptransform method)": [[43, "torchtree.distributions.transforms.CumSumExpTransform.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torchtree.distributions.transforms.cumsumsoftplustransform method)": [[43, "torchtree.distributions.transforms.CumSumSoftPlusTransform.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torchtree.distributions.transforms.cumsumtransform method)": [[43, "torchtree.distributions.transforms.CumSumTransform.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torchtree.distributions.transforms.lineartransform method)": [[43, "torchtree.distributions.transforms.LinearTransform.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torchtree.distributions.transforms.logtransform method)": [[43, "torchtree.distributions.transforms.LogTransform.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torchtree.distributions.transforms.softplustransform method)": [[43, "torchtree.distributions.transforms.SoftPlusTransform.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torchtree.distributions.transforms.trilexpdiagonaltransform method)": [[43, "torchtree.distributions.transforms.TrilExpDiagonalTransform.log_abs_det_jacobian"]], "sign (torchtree.distributions.transforms.cumsumexptransform attribute)": [[43, "torchtree.distributions.transforms.CumSumExpTransform.sign"]], "sign (torchtree.distributions.transforms.cumsumsoftplustransform attribute)": [[43, "torchtree.distributions.transforms.CumSumSoftPlusTransform.sign"]], "sign (torchtree.distributions.transforms.cumsumtransform attribute)": [[43, "torchtree.distributions.transforms.CumSumTransform.sign"]], "sign (torchtree.distributions.transforms.lineartransform attribute)": [[43, "torchtree.distributions.transforms.LinearTransform.sign"]], "sign (torchtree.distributions.transforms.logtransform attribute)": [[43, "torchtree.distributions.transforms.LogTransform.sign"]], "sign (torchtree.distributions.transforms.softplustransform attribute)": [[43, "torchtree.distributions.transforms.SoftPlusTransform.sign"]], "sign (torchtree.distributions.transforms.trilexpdiagonaltransform attribute)": [[43, "torchtree.distributions.transforms.TrilExpDiagonalTransform.sign"]], "torchtree.distributions.transforms": [[43, "module-torchtree.distributions.transforms"], [152, "module-torchtree.distributions.transforms"]], "compoundgammadirichletprior (class in torchtree.distributions.tree_prior)": [[44, "torchtree.distributions.tree_prior.CompoundGammaDirichletPrior"]], "from_json() (torchtree.distributions.tree_prior.compoundgammadirichletprior class method)": [[44, "torchtree.distributions.tree_prior.CompoundGammaDirichletPrior.from_json"]], "handle_parameter_changed() (torchtree.distributions.tree_prior.compoundgammadirichletprior method)": [[44, "torchtree.distributions.tree_prior.CompoundGammaDirichletPrior.handle_parameter_changed"]], "torchtree.distributions.tree_prior": [[44, "module-torchtree.distributions.tree_prior"], [153, "module-torchtree.distributions.tree_prior"]], "alignment (class in torchtree.evolution.alignment)": [[45, "torchtree.evolution.alignment.Alignment"]], "sequence (in module torchtree.evolution.alignment)": [[45, "torchtree.evolution.alignment.Sequence"]], "calculate_f3x4() (in module torchtree.evolution.alignment)": [[45, "torchtree.evolution.alignment.calculate_F3x4"]], "calculate_f3x4_from_nucleotide() (in module torchtree.evolution.alignment)": [[45, "torchtree.evolution.alignment.calculate_F3x4_from_nucleotide"]], "calculate_frequencies() (in module torchtree.evolution.alignment)": [[45, "torchtree.evolution.alignment.calculate_frequencies"]], "calculate_frequencies_per_codon_position() (in module torchtree.evolution.alignment)": [[45, "torchtree.evolution.alignment.calculate_frequencies_per_codon_position"]], "calculate_kappa() (in module torchtree.evolution.alignment)": [[45, "torchtree.evolution.alignment.calculate_kappa"]], "calculate_substitutions() (in module torchtree.evolution.alignment)": [[45, "torchtree.evolution.alignment.calculate_substitutions"]], "calculate_ts_tv() (in module torchtree.evolution.alignment)": [[45, "torchtree.evolution.alignment.calculate_ts_tv"]], "data_type (torchtree.evolution.alignment.alignment property)": [[45, "torchtree.evolution.alignment.Alignment.data_type"]], "from_json() (torchtree.evolution.alignment.alignment class method)": [[45, "torchtree.evolution.alignment.Alignment.from_json"]], "get() (torchtree.evolution.alignment.alignment class method)": [[45, "torchtree.evolution.alignment.Alignment.get"]], "read_fasta_sequences() (in module torchtree.evolution.alignment)": [[45, "torchtree.evolution.alignment.read_fasta_sequences"]], "sequence_size (torchtree.evolution.alignment.alignment property)": [[45, "torchtree.evolution.alignment.Alignment.sequence_size"]], "taxa (torchtree.evolution.alignment.alignment property)": [[45, "torchtree.evolution.alignment.Alignment.taxa"]], "torchtree.evolution.alignment": [[45, "module-torchtree.evolution.alignment"], [155, "module-torchtree.evolution.alignment"]], "attributepattern (class in torchtree.evolution.attribute_pattern)": [[46, "torchtree.evolution.attribute_pattern.AttributePattern"]], "compute_tips_partials() (torchtree.evolution.attribute_pattern.attributepattern method)": [[46, "torchtree.evolution.attribute_pattern.AttributePattern.compute_tips_partials"]], "compute_tips_states() (torchtree.evolution.attribute_pattern.attributepattern method)": [[46, "torchtree.evolution.attribute_pattern.AttributePattern.compute_tips_states"]], "cpu() (torchtree.evolution.attribute_pattern.attributepattern method)": [[46, "torchtree.evolution.attribute_pattern.AttributePattern.cpu"]], "cuda() (torchtree.evolution.attribute_pattern.attributepattern method)": [[46, "torchtree.evolution.attribute_pattern.AttributePattern.cuda"]], "from_json() (torchtree.evolution.attribute_pattern.attributepattern class method)": [[46, "torchtree.evolution.attribute_pattern.AttributePattern.from_json"]], "handle_model_changed() (torchtree.evolution.attribute_pattern.attributepattern method)": [[46, "torchtree.evolution.attribute_pattern.AttributePattern.handle_model_changed"]], "handle_parameter_changed() (torchtree.evolution.attribute_pattern.attributepattern method)": [[46, "torchtree.evolution.attribute_pattern.AttributePattern.handle_parameter_changed"]], "torchtree.evolution.attribute_pattern": [[46, "module-torchtree.evolution.attribute_pattern"], [156, "module-torchtree.evolution.attribute_pattern"]], "bdskmodel (class in torchtree.evolution.bdsk)": [[47, "torchtree.evolution.bdsk.BDSKModel"]], "piecewiseconstantbirthdeath (class in torchtree.evolution.bdsk)": [[47, "torchtree.evolution.bdsk.PiecewiseConstantBirthDeath"]], "arg_constraints (torchtree.evolution.bdsk.piecewiseconstantbirthdeath attribute)": [[47, "torchtree.evolution.bdsk.PiecewiseConstantBirthDeath.arg_constraints"]], "epidemiology_to_birth_death() (in module torchtree.evolution.bdsk)": [[47, "torchtree.evolution.bdsk.epidemiology_to_birth_death"]], "from_json() (torchtree.evolution.bdsk.bdskmodel class method)": [[47, "torchtree.evolution.bdsk.BDSKModel.from_json"]], "log_p() (torchtree.evolution.bdsk.piecewiseconstantbirthdeath method)": [[47, "torchtree.evolution.bdsk.PiecewiseConstantBirthDeath.log_p"]], "log_prob() (torchtree.evolution.bdsk.piecewiseconstantbirthdeath method)": [[47, "torchtree.evolution.bdsk.PiecewiseConstantBirthDeath.log_prob"]], "log_q() (torchtree.evolution.bdsk.piecewiseconstantbirthdeath method)": [[47, "torchtree.evolution.bdsk.PiecewiseConstantBirthDeath.log_q"]], "p0() (torchtree.evolution.bdsk.piecewiseconstantbirthdeath method)": [[47, "torchtree.evolution.bdsk.PiecewiseConstantBirthDeath.p0"]], "support (torchtree.evolution.bdsk.piecewiseconstantbirthdeath attribute)": [[47, "torchtree.evolution.bdsk.PiecewiseConstantBirthDeath.support"]], "torchtree.evolution.bdsk": [[47, "module-torchtree.evolution.bdsk"], [157, "module-torchtree.evolution.bdsk"]], "birthdeath (class in torchtree.evolution.birth_death)": [[48, "torchtree.evolution.birth_death.BirthDeath"]], "birthdeathmodel (class in torchtree.evolution.birth_death)": [[48, "torchtree.evolution.birth_death.BirthDeathModel"]], "arg_constraints (torchtree.evolution.birth_death.birthdeath attribute)": [[48, "torchtree.evolution.birth_death.BirthDeath.arg_constraints"]], "from_json() (torchtree.evolution.birth_death.birthdeathmodel class method)": [[48, "torchtree.evolution.birth_death.BirthDeathModel.from_json"]], "handle_model_changed() (torchtree.evolution.birth_death.birthdeathmodel method)": [[48, "torchtree.evolution.birth_death.BirthDeathModel.handle_model_changed"]], "log_p() (torchtree.evolution.birth_death.birthdeath method)": [[48, "torchtree.evolution.birth_death.BirthDeath.log_p"]], "log_prob() (torchtree.evolution.birth_death.birthdeath method)": [[48, "torchtree.evolution.birth_death.BirthDeath.log_prob"]], "log_q() (torchtree.evolution.birth_death.birthdeath method)": [[48, "torchtree.evolution.birth_death.BirthDeath.log_q"]], "torchtree.evolution.birth_death": [[48, "module-torchtree.evolution.birth_death"], [158, "module-torchtree.evolution.birth_death"]], "abstractclockmodel (class in torchtree.evolution.branch_model)": [[49, "torchtree.evolution.branch_model.AbstractClockModel"]], "branchmodel (class in torchtree.evolution.branch_model)": [[49, "torchtree.evolution.branch_model.BranchModel"]], "simpleclockmodel (class in torchtree.evolution.branch_model)": [[49, "torchtree.evolution.branch_model.SimpleClockModel"]], "strictclockmodel (class in torchtree.evolution.branch_model)": [[49, "torchtree.evolution.branch_model.StrictClockModel"]], "from_json() (torchtree.evolution.branch_model.simpleclockmodel class method)": [[49, "torchtree.evolution.branch_model.SimpleClockModel.from_json"]], "from_json() (torchtree.evolution.branch_model.strictclockmodel class method)": [[49, "torchtree.evolution.branch_model.StrictClockModel.from_json"]], "handle_model_changed() (torchtree.evolution.branch_model.abstractclockmodel method)": [[49, "torchtree.evolution.branch_model.AbstractClockModel.handle_model_changed"]], "handle_parameter_changed() (torchtree.evolution.branch_model.abstractclockmodel method)": [[49, "torchtree.evolution.branch_model.AbstractClockModel.handle_parameter_changed"]], "json_factory() (torchtree.evolution.branch_model.simpleclockmodel static method)": [[49, "torchtree.evolution.branch_model.SimpleClockModel.json_factory"]], "rates (torchtree.evolution.branch_model.branchmodel property)": [[49, "torchtree.evolution.branch_model.BranchModel.rates"]], "rates (torchtree.evolution.branch_model.simpleclockmodel property)": [[49, "torchtree.evolution.branch_model.SimpleClockModel.rates"]], "rates (torchtree.evolution.branch_model.strictclockmodel property)": [[49, "torchtree.evolution.branch_model.StrictClockModel.rates"]], "torchtree.evolution.branch_model": [[49, "module-torchtree.evolution.branch_model"], [159, "module-torchtree.evolution.branch_model"]], "abstractcoalescentdistribution (class in torchtree.evolution.coalescent)": [[50, "torchtree.evolution.coalescent.AbstractCoalescentDistribution"]], "abstractcoalescentmodel (class in torchtree.evolution.coalescent)": [[50, "torchtree.evolution.coalescent.AbstractCoalescentModel"]], "constantcoalescent (class in torchtree.evolution.coalescent)": [[50, "torchtree.evolution.coalescent.ConstantCoalescent"]], "constantcoalescentintegrated (class in torchtree.evolution.coalescent)": [[50, "torchtree.evolution.coalescent.ConstantCoalescentIntegrated"]], "constantcoalescentmodel (class in torchtree.evolution.coalescent)": [[50, "torchtree.evolution.coalescent.ConstantCoalescentModel"]], "exponentialcoalescent (class in torchtree.evolution.coalescent)": [[50, "torchtree.evolution.coalescent.ExponentialCoalescent"]], "exponentialcoalescentmodel (class in torchtree.evolution.coalescent)": [[50, "torchtree.evolution.coalescent.ExponentialCoalescentModel"]], "faketreemodel (class in torchtree.evolution.coalescent)": [[50, "torchtree.evolution.coalescent.FakeTreeModel"]], "piecewiseconstantcoalescent (class in torchtree.evolution.coalescent)": [[50, "torchtree.evolution.coalescent.PiecewiseConstantCoalescent"]], "piecewiseconstantcoalescentgrid (class in torchtree.evolution.coalescent)": [[50, "torchtree.evolution.coalescent.PiecewiseConstantCoalescentGrid"]], "piecewiseconstantcoalescentgridmodel (class in torchtree.evolution.coalescent)": [[50, "torchtree.evolution.coalescent.PiecewiseConstantCoalescentGridModel"]], "piecewiseconstantcoalescentmodel (class in torchtree.evolution.coalescent)": [[50, "torchtree.evolution.coalescent.PiecewiseConstantCoalescentModel"]], "piecewiseexponentialcoalescentgrid (class in torchtree.evolution.coalescent)": [[50, "torchtree.evolution.coalescent.PiecewiseExponentialCoalescentGrid"]], "softpiecewiseconstantcoalescentgrid (class in torchtree.evolution.coalescent)": [[50, "torchtree.evolution.coalescent.SoftPiecewiseConstantCoalescentGrid"]], "arg_constraints (torchtree.evolution.coalescent.abstractcoalescentdistribution attribute)": [[50, "torchtree.evolution.coalescent.AbstractCoalescentDistribution.arg_constraints"]], "arg_constraints (torchtree.evolution.coalescent.exponentialcoalescent attribute)": [[50, "torchtree.evolution.coalescent.ExponentialCoalescent.arg_constraints"]], "arg_constraints (torchtree.evolution.coalescent.piecewiseexponentialcoalescentgrid attribute)": [[50, "torchtree.evolution.coalescent.PiecewiseExponentialCoalescentGrid.arg_constraints"]], "distribution() (torchtree.evolution.coalescent.abstractcoalescentmodel method)": [[50, "torchtree.evolution.coalescent.AbstractCoalescentModel.distribution"]], "distribution() (torchtree.evolution.coalescent.constantcoalescentmodel method)": [[50, "torchtree.evolution.coalescent.ConstantCoalescentModel.distribution"]], "distribution() (torchtree.evolution.coalescent.exponentialcoalescentmodel method)": [[50, "torchtree.evolution.coalescent.ExponentialCoalescentModel.distribution"]], "distribution() (torchtree.evolution.coalescent.piecewiseconstantcoalescentgridmodel method)": [[50, "torchtree.evolution.coalescent.PiecewiseConstantCoalescentGridModel.distribution"]], "distribution() (torchtree.evolution.coalescent.piecewiseconstantcoalescentmodel method)": [[50, "torchtree.evolution.coalescent.PiecewiseConstantCoalescentModel.distribution"]], "from_json() (torchtree.evolution.coalescent.constantcoalescentmodel class method)": [[50, "torchtree.evolution.coalescent.ConstantCoalescentModel.from_json"]], "from_json() (torchtree.evolution.coalescent.exponentialcoalescentmodel class method)": [[50, "torchtree.evolution.coalescent.ExponentialCoalescentModel.from_json"]], "from_json() (torchtree.evolution.coalescent.piecewiseconstantcoalescentgridmodel class method)": [[50, "torchtree.evolution.coalescent.PiecewiseConstantCoalescentGridModel.from_json"]], "has_rsample (torchtree.evolution.coalescent.abstractcoalescentdistribution attribute)": [[50, "torchtree.evolution.coalescent.AbstractCoalescentDistribution.has_rsample"]], "has_rsample (torchtree.evolution.coalescent.constantcoalescent attribute)": [[50, "torchtree.evolution.coalescent.ConstantCoalescent.has_rsample"]], "has_rsample (torchtree.evolution.coalescent.constantcoalescentintegrated attribute)": [[50, "torchtree.evolution.coalescent.ConstantCoalescentIntegrated.has_rsample"]], "has_rsample (torchtree.evolution.coalescent.exponentialcoalescent attribute)": [[50, "torchtree.evolution.coalescent.ExponentialCoalescent.has_rsample"]], "has_rsample (torchtree.evolution.coalescent.piecewiseexponentialcoalescentgrid attribute)": [[50, "torchtree.evolution.coalescent.PiecewiseExponentialCoalescentGrid.has_rsample"]], "log_prob() (torchtree.evolution.coalescent.constantcoalescent method)": [[50, "torchtree.evolution.coalescent.ConstantCoalescent.log_prob"]], "log_prob() (torchtree.evolution.coalescent.constantcoalescentintegrated method)": [[50, "torchtree.evolution.coalescent.ConstantCoalescentIntegrated.log_prob"]], "log_prob() (torchtree.evolution.coalescent.exponentialcoalescent method)": [[50, "torchtree.evolution.coalescent.ExponentialCoalescent.log_prob"]], "log_prob() (torchtree.evolution.coalescent.piecewiseconstantcoalescent method)": [[50, "torchtree.evolution.coalescent.PiecewiseConstantCoalescent.log_prob"]], "log_prob() (torchtree.evolution.coalescent.piecewiseconstantcoalescentgrid method)": [[50, "torchtree.evolution.coalescent.PiecewiseConstantCoalescentGrid.log_prob"]], "log_prob() (torchtree.evolution.coalescent.piecewiseexponentialcoalescentgrid method)": [[50, "torchtree.evolution.coalescent.PiecewiseExponentialCoalescentGrid.log_prob"]], "log_prob() (torchtree.evolution.coalescent.softpiecewiseconstantcoalescentgrid method)": [[50, "torchtree.evolution.coalescent.SoftPiecewiseConstantCoalescentGrid.log_prob"]], "maximum_likelihood() (torchtree.evolution.coalescent.abstractcoalescentdistribution class method)": [[50, "torchtree.evolution.coalescent.AbstractCoalescentDistribution.maximum_likelihood"]], "maximum_likelihood() (torchtree.evolution.coalescent.constantcoalescent class method)": [[50, "torchtree.evolution.coalescent.ConstantCoalescent.maximum_likelihood"]], "maximum_likelihood() (torchtree.evolution.coalescent.piecewiseconstantcoalescent class method)": [[50, "torchtree.evolution.coalescent.PiecewiseConstantCoalescent.maximum_likelihood"]], "node_heights (torchtree.evolution.coalescent.faketreemodel property)": [[50, "torchtree.evolution.coalescent.FakeTreeModel.node_heights"]], "process_data_coalesent() (in module torchtree.evolution.coalescent)": [[50, "torchtree.evolution.coalescent.process_data_coalesent"]], "rsample() (torchtree.evolution.coalescent.constantcoalescent method)": [[50, "torchtree.evolution.coalescent.ConstantCoalescent.rsample"]], "sample_shape (torchtree.evolution.coalescent.faketreemodel property)": [[50, "torchtree.evolution.coalescent.FakeTreeModel.sample_shape"]], "support (torchtree.evolution.coalescent.abstractcoalescentdistribution attribute)": [[50, "torchtree.evolution.coalescent.AbstractCoalescentDistribution.support"]], "support (torchtree.evolution.coalescent.exponentialcoalescent attribute)": [[50, "torchtree.evolution.coalescent.ExponentialCoalescent.support"]], "support (torchtree.evolution.coalescent.piecewiseexponentialcoalescentgrid attribute)": [[50, "torchtree.evolution.coalescent.PiecewiseExponentialCoalescentGrid.support"]], "torchtree.evolution.coalescent": [[50, "module-torchtree.evolution.coalescent"], [160, "module-torchtree.evolution.coalescent"]], "amino_acids (torchtree.evolution.datatype.aminoaciddatatype attribute)": [[51, "torchtree.evolution.datatype.AminoAcidDataType.AMINO_ACIDS"]], "amino_acids_ambiguity_states (torchtree.evolution.datatype.aminoaciddatatype attribute)": [[51, "id0"], [51, "torchtree.evolution.datatype.AminoAcidDataType.AMINO_ACIDS_AMBIGUITY_STATES"]], "amino_acids_states (torchtree.evolution.datatype.aminoaciddatatype attribute)": [[51, "torchtree.evolution.datatype.AminoAcidDataType.AMINO_ACIDS_STATES"]], "abstractdatatype (class in torchtree.evolution.datatype)": [[51, "torchtree.evolution.datatype.AbstractDataType"]], "aminoaciddatatype (class in torchtree.evolution.datatype)": [[51, "torchtree.evolution.datatype.AminoAcidDataType"]], "codon_triplets (torchtree.evolution.datatype.codondatatype attribute)": [[51, "torchtree.evolution.datatype.CodonDataType.CODON_TRIPLETS"]], "codondatatype (class in torchtree.evolution.datatype)": [[51, "torchtree.evolution.datatype.CodonDataType"]], "datatype (class in torchtree.evolution.datatype)": [[51, "torchtree.evolution.datatype.DataType"]], "genetic_code_names (torchtree.evolution.datatype.codondatatype attribute)": [[51, "torchtree.evolution.datatype.CodonDataType.GENETIC_CODE_NAMES"]], "genetic_code_tables (torchtree.evolution.datatype.codondatatype attribute)": [[51, "torchtree.evolution.datatype.CodonDataType.GENETIC_CODE_TABLES"]], "generaldatatype (class in torchtree.evolution.datatype)": [[51, "torchtree.evolution.datatype.GeneralDataType"]], "nucleotides (torchtree.evolution.datatype.nucleotidedatatype attribute)": [[51, "torchtree.evolution.datatype.NucleotideDataType.NUCLEOTIDES"]], "nucleotide_ambiguity_states (torchtree.evolution.datatype.nucleotidedatatype attribute)": [[51, "torchtree.evolution.datatype.NucleotideDataType.NUCLEOTIDE_AMBIGUITY_STATES"]], "nucleotide_states (torchtree.evolution.datatype.nucleotidedatatype attribute)": [[51, "torchtree.evolution.datatype.NucleotideDataType.NUCLEOTIDE_STATES"]], "number_of_codons (torchtree.evolution.datatype.codondatatype attribute)": [[51, "torchtree.evolution.datatype.CodonDataType.NUMBER_OF_CODONS"]], "nucleotidedatatype (class in torchtree.evolution.datatype)": [[51, "torchtree.evolution.datatype.NucleotideDataType"]], "encoding() (torchtree.evolution.datatype.aminoaciddatatype method)": [[51, "torchtree.evolution.datatype.AminoAcidDataType.encoding"]], "encoding() (torchtree.evolution.datatype.codondatatype method)": [[51, "torchtree.evolution.datatype.CodonDataType.encoding"]], "encoding() (torchtree.evolution.datatype.datatype method)": [[51, "torchtree.evolution.datatype.DataType.encoding"]], "encoding() (torchtree.evolution.datatype.generaldatatype method)": [[51, "torchtree.evolution.datatype.GeneralDataType.encoding"]], "encoding() (torchtree.evolution.datatype.nucleotidedatatype method)": [[51, "torchtree.evolution.datatype.NucleotideDataType.encoding"]], "from_json() (torchtree.evolution.datatype.aminoaciddatatype class method)": [[51, "torchtree.evolution.datatype.AminoAcidDataType.from_json"]], "from_json() (torchtree.evolution.datatype.codondatatype class method)": [[51, "torchtree.evolution.datatype.CodonDataType.from_json"]], "from_json() (torchtree.evolution.datatype.generaldatatype class method)": [[51, "torchtree.evolution.datatype.GeneralDataType.from_json"]], "from_json() (torchtree.evolution.datatype.nucleotidedatatype class method)": [[51, "torchtree.evolution.datatype.NucleotideDataType.from_json"]], "partial() (torchtree.evolution.datatype.aminoaciddatatype method)": [[51, "torchtree.evolution.datatype.AminoAcidDataType.partial"]], "partial() (torchtree.evolution.datatype.codondatatype method)": [[51, "torchtree.evolution.datatype.CodonDataType.partial"]], "partial() (torchtree.evolution.datatype.datatype method)": [[51, "torchtree.evolution.datatype.DataType.partial"]], "partial() (torchtree.evolution.datatype.generaldatatype method)": [[51, "torchtree.evolution.datatype.GeneralDataType.partial"]], "partial() (torchtree.evolution.datatype.nucleotidedatatype method)": [[51, "torchtree.evolution.datatype.NucleotideDataType.partial"]], "size (torchtree.evolution.datatype.abstractdatatype property)": [[51, "torchtree.evolution.datatype.AbstractDataType.size"]], "size (torchtree.evolution.datatype.datatype property)": [[51, "torchtree.evolution.datatype.DataType.size"]], "state_count (torchtree.evolution.datatype.abstractdatatype property)": [[51, "torchtree.evolution.datatype.AbstractDataType.state_count"]], "state_count (torchtree.evolution.datatype.datatype property)": [[51, "torchtree.evolution.datatype.DataType.state_count"]], "states (torchtree.evolution.datatype.abstractdatatype property)": [[51, "torchtree.evolution.datatype.AbstractDataType.states"]], "states (torchtree.evolution.datatype.datatype property)": [[51, "torchtree.evolution.datatype.DataType.states"]], "torchtree.evolution.datatype": [[51, "module-torchtree.evolution.datatype"], [161, "module-torchtree.evolution.datatype"]], "torchtree.evolution": [[52, "module-torchtree.evolution"], [154, "module-torchtree.evolution"]], "node (class in torchtree.evolution.io)": [[53, "torchtree.evolution.io.Node"]], "convert_samples_to_nexus() (in module torchtree.evolution.io)": [[53, "torchtree.evolution.io.convert_samples_to_nexus"]], "extract_taxa() (in module torchtree.evolution.io)": [[53, "torchtree.evolution.io.extract_taxa"]], "parse_taxa() (in module torchtree.evolution.io)": [[53, "torchtree.evolution.io.parse_taxa"]], "parse_translate() (in module torchtree.evolution.io)": [[53, "torchtree.evolution.io.parse_translate"]], "parse_trees() (in module torchtree.evolution.io)": [[53, "torchtree.evolution.io.parse_trees"]], "random_tree_from_heights() (in module torchtree.evolution.io)": [[53, "torchtree.evolution.io.random_tree_from_heights"]], "read_tree() (in module torchtree.evolution.io)": [[53, "torchtree.evolution.io.read_tree"]], "read_tree_and_alignment() (in module torchtree.evolution.io)": [[53, "torchtree.evolution.io.read_tree_and_alignment"]], "split_newick() (in module torchtree.evolution.io)": [[53, "torchtree.evolution.io.split_newick"]], "to_nexus() (in module torchtree.evolution.io)": [[53, "torchtree.evolution.io.to_nexus"]], "torchtree.evolution.io": [[53, "module-torchtree.evolution.io"], [162, "module-torchtree.evolution.io"]], "poissontreelikelihood (class in torchtree.evolution.poisson_tree_likelihood)": [[54, "torchtree.evolution.poisson_tree_likelihood.PoissonTreeLikelihood"]], "from_json() (torchtree.evolution.poisson_tree_likelihood.poissontreelikelihood class method)": [[54, "torchtree.evolution.poisson_tree_likelihood.PoissonTreeLikelihood.from_json"]], "handle_parameter_changed() (torchtree.evolution.poisson_tree_likelihood.poissontreelikelihood method)": [[54, "torchtree.evolution.poisson_tree_likelihood.PoissonTreeLikelihood.handle_parameter_changed"]], "torchtree.evolution.poisson_tree_likelihood": [[54, "module-torchtree.evolution.poisson_tree_likelihood"], [163, "module-torchtree.evolution.poisson_tree_likelihood"]], "logdifferenceratetransform (class in torchtree.evolution.rate_transform)": [[55, "torchtree.evolution.rate_transform.LogDifferenceRateTransform"]], "rescaledratetransform (class in torchtree.evolution.rate_transform)": [[55, "torchtree.evolution.rate_transform.RescaledRateTransform"]], "bijective (torchtree.evolution.rate_transform.logdifferenceratetransform attribute)": [[55, "torchtree.evolution.rate_transform.LogDifferenceRateTransform.bijective"]], "bijective (torchtree.evolution.rate_transform.rescaledratetransform attribute)": [[55, "torchtree.evolution.rate_transform.RescaledRateTransform.bijective"]], "log_abs_det_jacobian() (torchtree.evolution.rate_transform.logdifferenceratetransform method)": [[55, "torchtree.evolution.rate_transform.LogDifferenceRateTransform.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torchtree.evolution.rate_transform.rescaledratetransform method)": [[55, "torchtree.evolution.rate_transform.RescaledRateTransform.log_abs_det_jacobian"]], "sign (torchtree.evolution.rate_transform.logdifferenceratetransform attribute)": [[55, "torchtree.evolution.rate_transform.LogDifferenceRateTransform.sign"]], "sign (torchtree.evolution.rate_transform.rescaledratetransform attribute)": [[55, "torchtree.evolution.rate_transform.RescaledRateTransform.sign"]], "torchtree.evolution.rate_transform": [[55, "module-torchtree.evolution.rate_transform"], [164, "module-torchtree.evolution.rate_transform"]], "rootparameter (class in torchtree.evolution.root_transform)": [[56, "torchtree.evolution.root_transform.RootParameter"]], "add_parameter_listener() (torchtree.evolution.root_transform.rootparameter method)": [[56, "torchtree.evolution.root_transform.RootParameter.add_parameter_listener"]], "fire_parameter_changed() (torchtree.evolution.root_transform.rootparameter method)": [[56, "torchtree.evolution.root_transform.RootParameter.fire_parameter_changed"]], "from_json() (torchtree.evolution.root_transform.rootparameter class method)": [[56, "torchtree.evolution.root_transform.RootParameter.from_json"]], "handle_model_changed() (torchtree.evolution.root_transform.rootparameter method)": [[56, "torchtree.evolution.root_transform.RootParameter.handle_model_changed"]], "handle_parameter_changed() (torchtree.evolution.root_transform.rootparameter method)": [[56, "torchtree.evolution.root_transform.RootParameter.handle_parameter_changed"]], "parameters() (torchtree.evolution.root_transform.rootparameter method)": [[56, "torchtree.evolution.root_transform.RootParameter.parameters"]], "tensor (torchtree.evolution.root_transform.rootparameter property)": [[56, "torchtree.evolution.root_transform.RootParameter.tensor"]], "torchtree.evolution.root_transform": [[56, "module-torchtree.evolution.root_transform"], [165, "module-torchtree.evolution.root_transform"]], "transform() (torchtree.evolution.root_transform.rootparameter method)": [[56, "torchtree.evolution.root_transform.RootParameter.transform"]], "constantsitemodel (class in torchtree.evolution.site_model)": [[57, "torchtree.evolution.site_model.ConstantSiteModel"]], "invariantsitemodel (class in torchtree.evolution.site_model)": [[57, "torchtree.evolution.site_model.InvariantSiteModel"]], "lognormalsitemodel (class in torchtree.evolution.site_model)": [[57, "torchtree.evolution.site_model.LogNormalSiteModel"]], "sitemodel (class in torchtree.evolution.site_model)": [[57, "torchtree.evolution.site_model.SiteModel"]], "univariatediscretizedsitemodel (class in torchtree.evolution.site_model)": [[57, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel"]], "weibullsitemodel (class in torchtree.evolution.site_model)": [[57, "torchtree.evolution.site_model.WeibullSiteModel"]], "cpu() (torchtree.evolution.site_model.constantsitemodel method)": [[57, "torchtree.evolution.site_model.ConstantSiteModel.cpu"]], "cpu() (torchtree.evolution.site_model.univariatediscretizedsitemodel method)": [[57, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel.cpu"]], "cuda() (torchtree.evolution.site_model.constantsitemodel method)": [[57, "torchtree.evolution.site_model.ConstantSiteModel.cuda"]], "cuda() (torchtree.evolution.site_model.univariatediscretizedsitemodel method)": [[57, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel.cuda"]], "from_json() (torchtree.evolution.site_model.constantsitemodel class method)": [[57, "torchtree.evolution.site_model.ConstantSiteModel.from_json"]], "from_json() (torchtree.evolution.site_model.invariantsitemodel class method)": [[57, "torchtree.evolution.site_model.InvariantSiteModel.from_json"]], "from_json() (torchtree.evolution.site_model.lognormalsitemodel class method)": [[57, "torchtree.evolution.site_model.LogNormalSiteModel.from_json"]], "from_json() (torchtree.evolution.site_model.weibullsitemodel class method)": [[57, "torchtree.evolution.site_model.WeibullSiteModel.from_json"]], "handle_model_changed() (torchtree.evolution.site_model.constantsitemodel method)": [[57, "torchtree.evolution.site_model.ConstantSiteModel.handle_model_changed"]], "handle_model_changed() (torchtree.evolution.site_model.invariantsitemodel method)": [[57, "torchtree.evolution.site_model.InvariantSiteModel.handle_model_changed"]], "handle_model_changed() (torchtree.evolution.site_model.univariatediscretizedsitemodel method)": [[57, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel.handle_model_changed"]], "handle_parameter_changed() (torchtree.evolution.site_model.constantsitemodel method)": [[57, "torchtree.evolution.site_model.ConstantSiteModel.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.evolution.site_model.invariantsitemodel method)": [[57, "torchtree.evolution.site_model.InvariantSiteModel.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.evolution.site_model.univariatediscretizedsitemodel method)": [[57, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel.handle_parameter_changed"]], "invariant (torchtree.evolution.site_model.invariantsitemodel property)": [[57, "torchtree.evolution.site_model.InvariantSiteModel.invariant"]], "invariant (torchtree.evolution.site_model.univariatediscretizedsitemodel property)": [[57, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel.invariant"]], "inverse_cdf() (torchtree.evolution.site_model.univariatediscretizedsitemodel method)": [[57, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel.inverse_cdf"]], "inverse_cdf() (torchtree.evolution.site_model.weibullsitemodel method)": [[57, "torchtree.evolution.site_model.WeibullSiteModel.inverse_cdf"]], "probabilities() (torchtree.evolution.site_model.constantsitemodel method)": [[57, "torchtree.evolution.site_model.ConstantSiteModel.probabilities"]], "probabilities() (torchtree.evolution.site_model.invariantsitemodel method)": [[57, "torchtree.evolution.site_model.InvariantSiteModel.probabilities"]], "probabilities() (torchtree.evolution.site_model.sitemodel method)": [[57, "torchtree.evolution.site_model.SiteModel.probabilities"]], "probabilities() (torchtree.evolution.site_model.univariatediscretizedsitemodel method)": [[57, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel.probabilities"]], "rates() (torchtree.evolution.site_model.constantsitemodel method)": [[57, "torchtree.evolution.site_model.ConstantSiteModel.rates"]], "rates() (torchtree.evolution.site_model.invariantsitemodel method)": [[57, "torchtree.evolution.site_model.InvariantSiteModel.rates"]], "rates() (torchtree.evolution.site_model.sitemodel method)": [[57, "torchtree.evolution.site_model.SiteModel.rates"]], "rates() (torchtree.evolution.site_model.univariatediscretizedsitemodel method)": [[57, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel.rates"]], "scale (torchtree.evolution.site_model.lognormalsitemodel property)": [[57, "torchtree.evolution.site_model.LogNormalSiteModel.scale"]], "shape (torchtree.evolution.site_model.weibullsitemodel property)": [[57, "torchtree.evolution.site_model.WeibullSiteModel.shape"]], "torchtree.evolution.site_model": [[57, "module-torchtree.evolution.site_model"], [166, "module-torchtree.evolution.site_model"]], "update_rates() (torchtree.evolution.site_model.lognormalsitemodel method)": [[57, "torchtree.evolution.site_model.LogNormalSiteModel.update_rates"]], "update_rates() (torchtree.evolution.site_model.univariatediscretizedsitemodel method)": [[57, "torchtree.evolution.site_model.UnivariateDiscretizedSiteModel.update_rates"]], "update_rates_probs() (torchtree.evolution.site_model.invariantsitemodel method)": [[57, "torchtree.evolution.site_model.InvariantSiteModel.update_rates_probs"]], "sitepattern (class in torchtree.evolution.site_pattern)": [[58, "torchtree.evolution.site_pattern.SitePattern"]], "compress() (in module torchtree.evolution.site_pattern)": [[58, "torchtree.evolution.site_pattern.compress"]], "compress_alignment() (in module torchtree.evolution.site_pattern)": [[58, "torchtree.evolution.site_pattern.compress_alignment"]], "compress_alignment_states() (in module torchtree.evolution.site_pattern)": [[58, "torchtree.evolution.site_pattern.compress_alignment_states"]], "compute_tips_partials() (torchtree.evolution.site_pattern.sitepattern method)": [[58, "torchtree.evolution.site_pattern.SitePattern.compute_tips_partials"]], "compute_tips_states() (torchtree.evolution.site_pattern.sitepattern method)": [[58, "torchtree.evolution.site_pattern.SitePattern.compute_tips_states"]], "cpu() (torchtree.evolution.site_pattern.sitepattern method)": [[58, "torchtree.evolution.site_pattern.SitePattern.cpu"]], "cuda() (torchtree.evolution.site_pattern.sitepattern method)": [[58, "torchtree.evolution.site_pattern.SitePattern.cuda"]], "from_json() (torchtree.evolution.site_pattern.sitepattern class method)": [[58, "torchtree.evolution.site_pattern.SitePattern.from_json"]], "handle_model_changed() (torchtree.evolution.site_pattern.sitepattern method)": [[58, "torchtree.evolution.site_pattern.SitePattern.handle_model_changed"]], "handle_parameter_changed() (torchtree.evolution.site_pattern.sitepattern method)": [[58, "torchtree.evolution.site_pattern.SitePattern.handle_parameter_changed"]], "torchtree.evolution.site_pattern": [[58, "module-torchtree.evolution.site_pattern"], [167, "module-torchtree.evolution.site_pattern"]], "abstractsubstitutionmodel (class in torchtree.evolution.substitution_model.abstract)": [[59, "torchtree.evolution.substitution_model.abstract.AbstractSubstitutionModel"]], "nonsymmetricsubstitutionmodel (class in torchtree.evolution.substitution_model.abstract)": [[59, "torchtree.evolution.substitution_model.abstract.NonSymmetricSubstitutionModel"]], "substitutionmodel (class in torchtree.evolution.substitution_model.abstract)": [[59, "torchtree.evolution.substitution_model.abstract.SubstitutionModel"]], "symmetricsubstitutionmodel (class in torchtree.evolution.substitution_model.abstract)": [[59, "torchtree.evolution.substitution_model.abstract.SymmetricSubstitutionModel"]], "eigen() (torchtree.evolution.substitution_model.abstract.nonsymmetricsubstitutionmodel method)": [[59, "torchtree.evolution.substitution_model.abstract.NonSymmetricSubstitutionModel.eigen"]], "eigen() (torchtree.evolution.substitution_model.abstract.symmetricsubstitutionmodel method)": [[59, "torchtree.evolution.substitution_model.abstract.SymmetricSubstitutionModel.eigen"]], "frequencies (torchtree.evolution.substitution_model.abstract.abstractsubstitutionmodel property)": [[59, "torchtree.evolution.substitution_model.abstract.AbstractSubstitutionModel.frequencies"]], "frequencies (torchtree.evolution.substitution_model.abstract.substitutionmodel property)": [[59, "torchtree.evolution.substitution_model.abstract.SubstitutionModel.frequencies"]], "norm() (torchtree.evolution.substitution_model.abstract.abstractsubstitutionmodel method)": [[59, "torchtree.evolution.substitution_model.abstract.AbstractSubstitutionModel.norm"]], "p_t() (torchtree.evolution.substitution_model.abstract.nonsymmetricsubstitutionmodel method)": [[59, "torchtree.evolution.substitution_model.abstract.NonSymmetricSubstitutionModel.p_t"]], "p_t() (torchtree.evolution.substitution_model.abstract.substitutionmodel method)": [[59, "torchtree.evolution.substitution_model.abstract.SubstitutionModel.p_t"]], "p_t() (torchtree.evolution.substitution_model.abstract.symmetricsubstitutionmodel method)": [[59, "torchtree.evolution.substitution_model.abstract.SymmetricSubstitutionModel.p_t"]], "q() (torchtree.evolution.substitution_model.abstract.substitutionmodel method)": [[59, "torchtree.evolution.substitution_model.abstract.SubstitutionModel.q"]], "torchtree.evolution.substitution_model.abstract": [[59, "module-torchtree.evolution.substitution_model.abstract"], [169, "module-torchtree.evolution.substitution_model.abstract"]], "lg (class in torchtree.evolution.substitution_model.amino_acid)": [[60, "torchtree.evolution.substitution_model.amino_acid.LG"]], "wag (class in torchtree.evolution.substitution_model.amino_acid)": [[60, "torchtree.evolution.substitution_model.amino_acid.WAG"]], "from_json() (torchtree.evolution.substitution_model.amino_acid.lg class method)": [[60, "torchtree.evolution.substitution_model.amino_acid.LG.from_json"]], "from_json() (torchtree.evolution.substitution_model.amino_acid.wag class method)": [[60, "torchtree.evolution.substitution_model.amino_acid.WAG.from_json"]], "torchtree.evolution.substitution_model.amino_acid": [[60, "module-torchtree.evolution.substitution_model.amino_acid"], [170, "module-torchtree.evolution.substitution_model.amino_acid"]], "mg94 (class in torchtree.evolution.substitution_model.codon)": [[61, "torchtree.evolution.substitution_model.codon.MG94"]], "from_json() (torchtree.evolution.substitution_model.codon.mg94 class method)": [[61, "torchtree.evolution.substitution_model.codon.MG94.from_json"]], "handle_model_changed() (torchtree.evolution.substitution_model.codon.mg94 method)": [[61, "torchtree.evolution.substitution_model.codon.MG94.handle_model_changed"]], "handle_parameter_changed() (torchtree.evolution.substitution_model.codon.mg94 method)": [[61, "torchtree.evolution.substitution_model.codon.MG94.handle_parameter_changed"]], "q() (torchtree.evolution.substitution_model.codon.mg94 method)": [[61, "torchtree.evolution.substitution_model.codon.MG94.q"]], "torchtree.evolution.substitution_model.codon": [[61, "module-torchtree.evolution.substitution_model.codon"], [171, "module-torchtree.evolution.substitution_model.codon"]], "empiricalsubstitutionmodel (class in torchtree.evolution.substitution_model.general)": [[62, "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel"]], "generaljc69 (class in torchtree.evolution.substitution_model.general)": [[62, "torchtree.evolution.substitution_model.general.GeneralJC69"]], "generalnonsymmetricsubstitutionmodel (class in torchtree.evolution.substitution_model.general)": [[62, "torchtree.evolution.substitution_model.general.GeneralNonSymmetricSubstitutionModel"]], "generalsymmetricsubstitutionmodel (class in torchtree.evolution.substitution_model.general)": [[62, "torchtree.evolution.substitution_model.general.GeneralSymmetricSubstitutionModel"]], "cpu() (torchtree.evolution.substitution_model.general.generaljc69 method)": [[62, "torchtree.evolution.substitution_model.general.GeneralJC69.cpu"]], "create_rate_matrix() (torchtree.evolution.substitution_model.general.empiricalsubstitutionmodel static method)": [[62, "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel.create_rate_matrix"]], "cuda() (torchtree.evolution.substitution_model.general.generaljc69 method)": [[62, "torchtree.evolution.substitution_model.general.GeneralJC69.cuda"]], "eigen() (torchtree.evolution.substitution_model.general.empiricalsubstitutionmodel method)": [[62, "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel.eigen"]], "frequencies (torchtree.evolution.substitution_model.general.empiricalsubstitutionmodel property)": [[62, "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel.frequencies"]], "frequencies (torchtree.evolution.substitution_model.general.generaljc69 property)": [[62, "torchtree.evolution.substitution_model.general.GeneralJC69.frequencies"]], "from_json() (torchtree.evolution.substitution_model.general.empiricalsubstitutionmodel class method)": [[62, "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel.from_json"]], "from_json() (torchtree.evolution.substitution_model.general.generaljc69 class method)": [[62, "torchtree.evolution.substitution_model.general.GeneralJC69.from_json"]], "from_json() (torchtree.evolution.substitution_model.general.generalnonsymmetricsubstitutionmodel class method)": [[62, "torchtree.evolution.substitution_model.general.GeneralNonSymmetricSubstitutionModel.from_json"]], "from_json() (torchtree.evolution.substitution_model.general.generalsymmetricsubstitutionmodel class method)": [[62, "torchtree.evolution.substitution_model.general.GeneralSymmetricSubstitutionModel.from_json"]], "handle_model_changed() (torchtree.evolution.substitution_model.general.empiricalsubstitutionmodel method)": [[62, "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel.handle_model_changed"]], "handle_model_changed() (torchtree.evolution.substitution_model.general.generaljc69 method)": [[62, "torchtree.evolution.substitution_model.general.GeneralJC69.handle_model_changed"]], "handle_model_changed() (torchtree.evolution.substitution_model.general.generalnonsymmetricsubstitutionmodel method)": [[62, "torchtree.evolution.substitution_model.general.GeneralNonSymmetricSubstitutionModel.handle_model_changed"]], "handle_model_changed() (torchtree.evolution.substitution_model.general.generalsymmetricsubstitutionmodel method)": [[62, "torchtree.evolution.substitution_model.general.GeneralSymmetricSubstitutionModel.handle_model_changed"]], "handle_parameter_changed() (torchtree.evolution.substitution_model.general.empiricalsubstitutionmodel method)": [[62, "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.evolution.substitution_model.general.generaljc69 method)": [[62, "torchtree.evolution.substitution_model.general.GeneralJC69.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.evolution.substitution_model.general.generalnonsymmetricsubstitutionmodel method)": [[62, "torchtree.evolution.substitution_model.general.GeneralNonSymmetricSubstitutionModel.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.evolution.substitution_model.general.generalsymmetricsubstitutionmodel method)": [[62, "torchtree.evolution.substitution_model.general.GeneralSymmetricSubstitutionModel.handle_parameter_changed"]], "p_t() (torchtree.evolution.substitution_model.general.empiricalsubstitutionmodel method)": [[62, "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel.p_t"]], "p_t() (torchtree.evolution.substitution_model.general.generaljc69 method)": [[62, "torchtree.evolution.substitution_model.general.GeneralJC69.p_t"]], "q() (torchtree.evolution.substitution_model.general.empiricalsubstitutionmodel method)": [[62, "torchtree.evolution.substitution_model.general.EmpiricalSubstitutionModel.q"]], "q() (torchtree.evolution.substitution_model.general.generaljc69 method)": [[62, "torchtree.evolution.substitution_model.general.GeneralJC69.q"]], "q() (torchtree.evolution.substitution_model.general.generalnonsymmetricsubstitutionmodel method)": [[62, "torchtree.evolution.substitution_model.general.GeneralNonSymmetricSubstitutionModel.q"]], "q() (torchtree.evolution.substitution_model.general.generalsymmetricsubstitutionmodel method)": [[62, "torchtree.evolution.substitution_model.general.GeneralSymmetricSubstitutionModel.q"]], "rates (torchtree.evolution.substitution_model.general.generalnonsymmetricsubstitutionmodel property)": [[62, "torchtree.evolution.substitution_model.general.GeneralNonSymmetricSubstitutionModel.rates"]], "rates (torchtree.evolution.substitution_model.general.generalsymmetricsubstitutionmodel property)": [[62, "torchtree.evolution.substitution_model.general.GeneralSymmetricSubstitutionModel.rates"]], "torchtree.evolution.substitution_model.general": [[62, "module-torchtree.evolution.substitution_model.general"], [172, "module-torchtree.evolution.substitution_model.general"]], "torchtree.evolution.substitution_model": [[63, "module-torchtree.evolution.substitution_model"], [168, "module-torchtree.evolution.substitution_model"]], "gtr (class in torchtree.evolution.substitution_model.nucleotide)": [[64, "torchtree.evolution.substitution_model.nucleotide.GTR"]], "hky (class in torchtree.evolution.substitution_model.nucleotide)": [[64, "torchtree.evolution.substitution_model.nucleotide.HKY"]], "jc69 (class in torchtree.evolution.substitution_model.nucleotide)": [[64, "torchtree.evolution.substitution_model.nucleotide.JC69"]], "cpu() (torchtree.evolution.substitution_model.nucleotide.jc69 method)": [[64, "torchtree.evolution.substitution_model.nucleotide.JC69.cpu"]], "cuda() (torchtree.evolution.substitution_model.nucleotide.jc69 method)": [[64, "torchtree.evolution.substitution_model.nucleotide.JC69.cuda"]], "frequencies (torchtree.evolution.substitution_model.nucleotide.jc69 property)": [[64, "torchtree.evolution.substitution_model.nucleotide.JC69.frequencies"]], "from_json() (torchtree.evolution.substitution_model.nucleotide.gtr class method)": [[64, "torchtree.evolution.substitution_model.nucleotide.GTR.from_json"]], "from_json() (torchtree.evolution.substitution_model.nucleotide.hky class method)": [[64, "torchtree.evolution.substitution_model.nucleotide.HKY.from_json"]], "from_json() (torchtree.evolution.substitution_model.nucleotide.jc69 class method)": [[64, "torchtree.evolution.substitution_model.nucleotide.JC69.from_json"]], "handle_model_changed() (torchtree.evolution.substitution_model.nucleotide.gtr method)": [[64, "torchtree.evolution.substitution_model.nucleotide.GTR.handle_model_changed"]], "handle_model_changed() (torchtree.evolution.substitution_model.nucleotide.hky method)": [[64, "torchtree.evolution.substitution_model.nucleotide.HKY.handle_model_changed"]], "handle_model_changed() (torchtree.evolution.substitution_model.nucleotide.jc69 method)": [[64, "torchtree.evolution.substitution_model.nucleotide.JC69.handle_model_changed"]], "handle_parameter_changed() (torchtree.evolution.substitution_model.nucleotide.gtr method)": [[64, "torchtree.evolution.substitution_model.nucleotide.GTR.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.evolution.substitution_model.nucleotide.hky method)": [[64, "torchtree.evolution.substitution_model.nucleotide.HKY.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.evolution.substitution_model.nucleotide.jc69 method)": [[64, "torchtree.evolution.substitution_model.nucleotide.JC69.handle_parameter_changed"]], "kappa (torchtree.evolution.substitution_model.nucleotide.hky property)": [[64, "torchtree.evolution.substitution_model.nucleotide.HKY.kappa"]], "p_t() (torchtree.evolution.substitution_model.nucleotide.jc69 method)": [[64, "torchtree.evolution.substitution_model.nucleotide.JC69.p_t"]], "p_t_analytical() (torchtree.evolution.substitution_model.nucleotide.hky method)": [[64, "torchtree.evolution.substitution_model.nucleotide.HKY.p_t_analytical"]], "q() (torchtree.evolution.substitution_model.nucleotide.gtr method)": [[64, "torchtree.evolution.substitution_model.nucleotide.GTR.q"]], "q() (torchtree.evolution.substitution_model.nucleotide.hky method)": [[64, "torchtree.evolution.substitution_model.nucleotide.HKY.q"]], "q() (torchtree.evolution.substitution_model.nucleotide.jc69 method)": [[64, "torchtree.evolution.substitution_model.nucleotide.JC69.q"]], "rates (torchtree.evolution.substitution_model.nucleotide.gtr property)": [[64, "torchtree.evolution.substitution_model.nucleotide.GTR.rates"]], "torchtree.evolution.substitution_model.nucleotide": [[64, "module-torchtree.evolution.substitution_model.nucleotide"], [173, "module-torchtree.evolution.substitution_model.nucleotide"]], "taxa (class in torchtree.evolution.taxa)": [[65, "torchtree.evolution.taxa.Taxa"]], "taxon (class in torchtree.evolution.taxa)": [[65, "torchtree.evolution.taxa.Taxon"]], "from_json() (torchtree.evolution.taxa.taxa class method)": [[65, "torchtree.evolution.taxa.Taxa.from_json"]], "from_json() (torchtree.evolution.taxa.taxon class method)": [[65, "torchtree.evolution.taxa.Taxon.from_json"]], "torchtree.evolution.taxa": [[65, "module-torchtree.evolution.taxa"], [174, "module-torchtree.evolution.taxa"]], "differencenodeheighttransform (class in torchtree.evolution.tree_height_transform)": [[66, "torchtree.evolution.tree_height_transform.DifferenceNodeHeightTransform"]], "generalnodeheighttransform (class in torchtree.evolution.tree_height_transform)": [[66, "torchtree.evolution.tree_height_transform.GeneralNodeHeightTransform"]], "bijective (torchtree.evolution.tree_height_transform.differencenodeheighttransform attribute)": [[66, "torchtree.evolution.tree_height_transform.DifferenceNodeHeightTransform.bijective"]], "bijective (torchtree.evolution.tree_height_transform.generalnodeheighttransform attribute)": [[66, "torchtree.evolution.tree_height_transform.GeneralNodeHeightTransform.bijective"]], "log_abs_det_jacobian() (torchtree.evolution.tree_height_transform.differencenodeheighttransform method)": [[66, "torchtree.evolution.tree_height_transform.DifferenceNodeHeightTransform.log_abs_det_jacobian"]], "log_abs_det_jacobian() (torchtree.evolution.tree_height_transform.generalnodeheighttransform method)": [[66, "torchtree.evolution.tree_height_transform.GeneralNodeHeightTransform.log_abs_det_jacobian"]], "sign (torchtree.evolution.tree_height_transform.differencenodeheighttransform attribute)": [[66, "torchtree.evolution.tree_height_transform.DifferenceNodeHeightTransform.sign"]], "sign (torchtree.evolution.tree_height_transform.generalnodeheighttransform attribute)": [[66, "torchtree.evolution.tree_height_transform.GeneralNodeHeightTransform.sign"]], "sort_indices() (torchtree.evolution.tree_height_transform.generalnodeheighttransform method)": [[66, "torchtree.evolution.tree_height_transform.GeneralNodeHeightTransform.sort_indices"]], "torchtree.evolution.tree_height_transform": [[66, "module-torchtree.evolution.tree_height_transform"], [175, "module-torchtree.evolution.tree_height_transform"]], "update_bounds() (torchtree.evolution.tree_height_transform.generalnodeheighttransform method)": [[66, "torchtree.evolution.tree_height_transform.GeneralNodeHeightTransform.update_bounds"]], "treelikelihoodmodel (class in torchtree.evolution.tree_likelihood)": [[67, "torchtree.evolution.tree_likelihood.TreeLikelihoodModel"]], "calculate_treelikelihood() (in module torchtree.evolution.tree_likelihood)": [[67, "torchtree.evolution.tree_likelihood.calculate_treelikelihood"]], "calculate_treelikelihood_discrete() (in module torchtree.evolution.tree_likelihood)": [[67, "torchtree.evolution.tree_likelihood.calculate_treelikelihood_discrete"]], "calculate_treelikelihood_discrete_rescaled() (in module torchtree.evolution.tree_likelihood)": [[67, "torchtree.evolution.tree_likelihood.calculate_treelikelihood_discrete_rescaled"]], "calculate_treelikelihood_discrete_safe() (in module torchtree.evolution.tree_likelihood)": [[67, "torchtree.evolution.tree_likelihood.calculate_treelikelihood_discrete_safe"]], "calculate_treelikelihood_tip_states_discrete() (in module torchtree.evolution.tree_likelihood)": [[67, "torchtree.evolution.tree_likelihood.calculate_treelikelihood_tip_states_discrete"]], "calculate_treelikelihood_tip_states_discrete_rescaled() (in module torchtree.evolution.tree_likelihood)": [[67, "torchtree.evolution.tree_likelihood.calculate_treelikelihood_tip_states_discrete_rescaled"]], "calculate_with_tip_partials() (torchtree.evolution.tree_likelihood.treelikelihoodmodel method)": [[67, "torchtree.evolution.tree_likelihood.TreeLikelihoodModel.calculate_with_tip_partials"]], "calculate_with_tip_states() (torchtree.evolution.tree_likelihood.treelikelihoodmodel method)": [[67, "torchtree.evolution.tree_likelihood.TreeLikelihoodModel.calculate_with_tip_states"]], "from_json() (torchtree.evolution.tree_likelihood.treelikelihoodmodel class method)": [[67, "torchtree.evolution.tree_likelihood.TreeLikelihoodModel.from_json"]], "handle_parameter_changed() (torchtree.evolution.tree_likelihood.treelikelihoodmodel method)": [[67, "torchtree.evolution.tree_likelihood.TreeLikelihoodModel.handle_parameter_changed"]], "torchtree.evolution.tree_likelihood": [[67, "module-torchtree.evolution.tree_likelihood"], [176, "module-torchtree.evolution.tree_likelihood"]], "abstracttreemodel (class in torchtree.evolution.tree_model)": [[68, "torchtree.evolution.tree_model.AbstractTreeModel"]], "reparameterizedtimetreemodel (class in torchtree.evolution.tree_model)": [[68, "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel"]], "timetreemodel (class in torchtree.evolution.tree_model)": [[68, "torchtree.evolution.tree_model.TimeTreeModel"]], "treemodel (class in torchtree.evolution.tree_model)": [[68, "torchtree.evolution.tree_model.TreeModel"]], "unrootedtreemodel (class in torchtree.evolution.tree_model)": [[68, "torchtree.evolution.tree_model.UnRootedTreeModel"]], "as_newick() (torchtree.evolution.tree_model.abstracttreemodel method)": [[68, "torchtree.evolution.tree_model.AbstractTreeModel.as_newick"]], "branch_lengths() (torchtree.evolution.tree_model.timetreemodel method)": [[68, "torchtree.evolution.tree_model.TimeTreeModel.branch_lengths"]], "branch_lengths() (torchtree.evolution.tree_model.treemodel method)": [[68, "torchtree.evolution.tree_model.TreeModel.branch_lengths"]], "branch_lengths() (torchtree.evolution.tree_model.unrootedtreemodel method)": [[68, "torchtree.evolution.tree_model.UnRootedTreeModel.branch_lengths"]], "cpu() (torchtree.evolution.tree_model.reparameterizedtimetreemodel method)": [[68, "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel.cpu"]], "cpu() (torchtree.evolution.tree_model.timetreemodel method)": [[68, "torchtree.evolution.tree_model.TimeTreeModel.cpu"]], "cuda() (torchtree.evolution.tree_model.reparameterizedtimetreemodel method)": [[68, "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel.cuda"]], "cuda() (torchtree.evolution.tree_model.timetreemodel method)": [[68, "torchtree.evolution.tree_model.TimeTreeModel.cuda"]], "from_json() (torchtree.evolution.tree_model.reparameterizedtimetreemodel class method)": [[68, "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel.from_json"]], "from_json() (torchtree.evolution.tree_model.timetreemodel class method)": [[68, "torchtree.evolution.tree_model.TimeTreeModel.from_json"]], "from_json() (torchtree.evolution.tree_model.unrootedtreemodel class method)": [[68, "torchtree.evolution.tree_model.UnRootedTreeModel.from_json"]], "handle_model_changed() (torchtree.evolution.tree_model.abstracttreemodel method)": [[68, "torchtree.evolution.tree_model.AbstractTreeModel.handle_model_changed"]], "handle_model_changed() (torchtree.evolution.tree_model.reparameterizedtimetreemodel method)": [[68, "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel.handle_model_changed"]], "handle_parameter_changed() (torchtree.evolution.tree_model.reparameterizedtimetreemodel method)": [[68, "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.evolution.tree_model.timetreemodel method)": [[68, "torchtree.evolution.tree_model.TimeTreeModel.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.evolution.tree_model.unrootedtreemodel method)": [[68, "torchtree.evolution.tree_model.UnRootedTreeModel.handle_parameter_changed"]], "heights_from_branch_lengths() (in module torchtree.evolution.tree_model)": [[68, "torchtree.evolution.tree_model.heights_from_branch_lengths"]], "heights_to_branch_lengths() (in module torchtree.evolution.tree_model)": [[68, "torchtree.evolution.tree_model.heights_to_branch_lengths"]], "initialize_dates_from_taxa() (in module torchtree.evolution.tree_model)": [[68, "torchtree.evolution.tree_model.initialize_dates_from_taxa"]], "json_factory() (torchtree.evolution.tree_model.reparameterizedtimetreemodel static method)": [[68, "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel.json_factory"]], "json_factory() (torchtree.evolution.tree_model.timetreemodel static method)": [[68, "torchtree.evolution.tree_model.TimeTreeModel.json_factory"]], "json_factory() (torchtree.evolution.tree_model.unrootedtreemodel static method)": [[68, "torchtree.evolution.tree_model.UnRootedTreeModel.json_factory"]], "node_heights (torchtree.evolution.tree_model.reparameterizedtimetreemodel property)": [[68, "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel.node_heights"]], "node_heights (torchtree.evolution.tree_model.timetreemodel property)": [[68, "torchtree.evolution.tree_model.TimeTreeModel.node_heights"]], "parse_tree() (in module torchtree.evolution.tree_model)": [[68, "torchtree.evolution.tree_model.parse_tree"]], "postorder (torchtree.evolution.tree_model.abstracttreemodel property)": [[68, "torchtree.evolution.tree_model.AbstractTreeModel.postorder"]], "postorder (torchtree.evolution.tree_model.treemodel property)": [[68, "torchtree.evolution.tree_model.TreeModel.postorder"]], "setup_dates() (in module torchtree.evolution.tree_model)": [[68, "torchtree.evolution.tree_model.setup_dates"]], "setup_indexes() (in module torchtree.evolution.tree_model)": [[68, "torchtree.evolution.tree_model.setup_indexes"]], "taxa (torchtree.evolution.tree_model.abstracttreemodel property)": [[68, "torchtree.evolution.tree_model.AbstractTreeModel.taxa"]], "taxa (torchtree.evolution.tree_model.treemodel property)": [[68, "torchtree.evolution.tree_model.TreeModel.taxa"]], "torchtree.evolution.tree_model": [[68, "module-torchtree.evolution.tree_model"], [177, "module-torchtree.evolution.tree_model"]], "update_leaf_heights() (torchtree.evolution.tree_model.timetreemodel method)": [[68, "torchtree.evolution.tree_model.TimeTreeModel.update_leaf_heights"]], "update_node_heights() (torchtree.evolution.tree_model.reparameterizedtimetreemodel method)": [[68, "torchtree.evolution.tree_model.ReparameterizedTimeTreeModel.update_node_heights"]], "update_traversals() (torchtree.evolution.tree_model.abstracttreemodel method)": [[68, "torchtree.evolution.tree_model.AbstractTreeModel.update_traversals"]], "update_traversals() (torchtree.evolution.tree_model.timetreemodel method)": [[68, "torchtree.evolution.tree_model.TimeTreeModel.update_traversals"]], "write_newick() (torchtree.evolution.tree_model.abstracttreemodel method)": [[68, "torchtree.evolution.tree_model.AbstractTreeModel.write_newick"]], "write_newick() (torchtree.evolution.tree_model.treemodel method)": [[68, "torchtree.evolution.tree_model.TreeModel.write_newick"]], "flexibletimetreemodel (class in torchtree.evolution.tree_model_flexible)": [[69, "torchtree.evolution.tree_model_flexible.FlexibleTimeTreeModel"]], "from_json() (torchtree.evolution.tree_model_flexible.flexibletimetreemodel class method)": [[69, "torchtree.evolution.tree_model_flexible.FlexibleTimeTreeModel.from_json"]], "json_factory() (torchtree.evolution.tree_model_flexible.flexibletimetreemodel static method)": [[69, "torchtree.evolution.tree_model_flexible.FlexibleTimeTreeModel.json_factory"]], "torchtree.evolution.tree_model_flexible": [[69, "module-torchtree.evolution.tree_model_flexible"], [178, "module-torchtree.evolution.tree_model_flexible"]], "torchtree": [[70, "module-torchtree"], [109, "module-torchtree"]], "adaptivestepsize (class in torchtree.inference.hmc.adaptation)": [[71, "torchtree.inference.hmc.adaptation.AdaptiveStepSize"]], "adaptor (class in torchtree.inference.hmc.adaptation)": [[71, "torchtree.inference.hmc.adaptation.Adaptor"]], "dualaveragingstepsize (class in torchtree.inference.hmc.adaptation)": [[71, "torchtree.inference.hmc.adaptation.DualAveragingStepSize"]], "massmatrixadaptor (class in torchtree.inference.hmc.adaptation)": [[71, "torchtree.inference.hmc.adaptation.MassMatrixAdaptor"]], "warmupadaptation (class in torchtree.inference.hmc.adaptation)": [[71, "torchtree.inference.hmc.adaptation.WarmupAdaptation"]], "find_reasonable_step_size() (in module torchtree.inference.hmc.adaptation)": [[71, "torchtree.inference.hmc.adaptation.find_reasonable_step_size"]], "from_json() (torchtree.inference.hmc.adaptation.adaptivestepsize class method)": [[71, "torchtree.inference.hmc.adaptation.AdaptiveStepSize.from_json"]], "from_json() (torchtree.inference.hmc.adaptation.dualaveragingstepsize class method)": [[71, "torchtree.inference.hmc.adaptation.DualAveragingStepSize.from_json"]], "from_json() (torchtree.inference.hmc.adaptation.massmatrixadaptor class method)": [[71, "torchtree.inference.hmc.adaptation.MassMatrixAdaptor.from_json"]], "inverse_mass_matrix (torchtree.inference.hmc.adaptation.warmupadaptation property)": [[71, "torchtree.inference.hmc.adaptation.WarmupAdaptation.inverse_mass_matrix"]], "learn() (torchtree.inference.hmc.adaptation.adaptivestepsize method)": [[71, "torchtree.inference.hmc.adaptation.AdaptiveStepSize.learn"]], "learn() (torchtree.inference.hmc.adaptation.adaptor method)": [[71, "torchtree.inference.hmc.adaptation.Adaptor.learn"]], "learn() (torchtree.inference.hmc.adaptation.dualaveragingstepsize method)": [[71, "torchtree.inference.hmc.adaptation.DualAveragingStepSize.learn"]], "learn() (torchtree.inference.hmc.adaptation.massmatrixadaptor method)": [[71, "torchtree.inference.hmc.adaptation.MassMatrixAdaptor.learn"]], "mass_matrix (torchtree.inference.hmc.adaptation.massmatrixadaptor property)": [[71, "torchtree.inference.hmc.adaptation.MassMatrixAdaptor.mass_matrix"]], "mass_matrix (torchtree.inference.hmc.adaptation.warmupadaptation property)": [[71, "torchtree.inference.hmc.adaptation.WarmupAdaptation.mass_matrix"]], "restart() (torchtree.inference.hmc.adaptation.adaptivestepsize method)": [[71, "torchtree.inference.hmc.adaptation.AdaptiveStepSize.restart"]], "restart() (torchtree.inference.hmc.adaptation.adaptor method)": [[71, "torchtree.inference.hmc.adaptation.Adaptor.restart"]], "restart() (torchtree.inference.hmc.adaptation.dualaveragingstepsize method)": [[71, "torchtree.inference.hmc.adaptation.DualAveragingStepSize.restart"]], "restart() (torchtree.inference.hmc.adaptation.massmatrixadaptor method)": [[71, "torchtree.inference.hmc.adaptation.MassMatrixAdaptor.restart"]], "sqrt_mass_matrix (torchtree.inference.hmc.adaptation.warmupadaptation property)": [[71, "torchtree.inference.hmc.adaptation.WarmupAdaptation.sqrt_mass_matrix"]], "step_size (torchtree.inference.hmc.adaptation.warmupadaptation property)": [[71, "torchtree.inference.hmc.adaptation.WarmupAdaptation.step_size"]], "torchtree.inference.hmc.adaptation": [[71, "module-torchtree.inference.hmc.adaptation"], [181, "module-torchtree.inference.hmc.adaptation"]], "torchtree.inference.hmc.adaptors": [[72, "module-torchtree.inference.hmc.adaptors"], [182, "module-torchtree.inference.hmc.adaptors"]], "hamiltonian (class in torchtree.inference.hmc.hamiltonian)": [[73, "torchtree.inference.hmc.hamiltonian.Hamiltonian"]], "from_json() (torchtree.inference.hmc.hamiltonian.hamiltonian class method)": [[73, "torchtree.inference.hmc.hamiltonian.Hamiltonian.from_json"]], "handle_parameter_changed() (torchtree.inference.hmc.hamiltonian.hamiltonian method)": [[73, "torchtree.inference.hmc.hamiltonian.Hamiltonian.handle_parameter_changed"]], "kinetic_energy() (torchtree.inference.hmc.hamiltonian.hamiltonian method)": [[73, "torchtree.inference.hmc.hamiltonian.Hamiltonian.kinetic_energy"]], "potential_energy() (torchtree.inference.hmc.hamiltonian.hamiltonian method)": [[73, "torchtree.inference.hmc.hamiltonian.Hamiltonian.potential_energy"]], "sample_momentum() (torchtree.inference.hmc.hamiltonian.hamiltonian method)": [[73, "torchtree.inference.hmc.hamiltonian.Hamiltonian.sample_momentum"]], "torchtree.inference.hmc.hamiltonian": [[73, "module-torchtree.inference.hmc.hamiltonian"], [183, "module-torchtree.inference.hmc.hamiltonian"]], "hmc (class in torchtree.inference.hmc.hmc)": [[74, "torchtree.inference.hmc.hmc.HMC"]], "find_reasonable_step_size() (torchtree.inference.hmc.hmc.hmc method)": [[74, "torchtree.inference.hmc.hmc.HMC.find_reasonable_step_size"]], "from_json() (torchtree.inference.hmc.hmc.hmc class method)": [[74, "torchtree.inference.hmc.hmc.HMC.from_json"]], "hamiltonian() (torchtree.inference.hmc.hmc.hmc method)": [[74, "torchtree.inference.hmc.hmc.HMC.hamiltonian"]], "run() (torchtree.inference.hmc.hmc.hmc method)": [[74, "torchtree.inference.hmc.hmc.HMC.run"]], "sample_momentum() (torchtree.inference.hmc.hmc.hmc method)": [[74, "torchtree.inference.hmc.hmc.HMC.sample_momentum"]], "torchtree.inference.hmc.hmc": [[74, "module-torchtree.inference.hmc.hmc"], [184, "module-torchtree.inference.hmc.hmc"]], "torchtree.inference.hmc": [[75, "module-torchtree.inference.hmc"], [180, "module-torchtree.inference.hmc"]], "integrator (class in torchtree.inference.hmc.integrator)": [[76, "torchtree.inference.hmc.integrator.Integrator"]], "leapfrogintegrator (class in torchtree.inference.hmc.integrator)": [[76, "torchtree.inference.hmc.integrator.LeapfrogIntegrator"]], "from_json() (torchtree.inference.hmc.integrator.leapfrogintegrator class method)": [[76, "torchtree.inference.hmc.integrator.LeapfrogIntegrator.from_json"]], "set_tensor() (in module torchtree.inference.hmc.integrator)": [[76, "torchtree.inference.hmc.integrator.set_tensor"]], "torchtree.inference.hmc.integrator": [[76, "module-torchtree.inference.hmc.integrator"], [185, "module-torchtree.inference.hmc.integrator"]], "hmcoperator (class in torchtree.inference.hmc.operator)": [[77, "torchtree.inference.hmc.operator.HMCOperator"]], "adaptable_parameter() (torchtree.inference.hmc.operator.hmcoperator method)": [[77, "torchtree.inference.hmc.operator.HMCOperator.adaptable_parameter"]], "from_json() (torchtree.inference.hmc.operator.hmcoperator class method)": [[77, "torchtree.inference.hmc.operator.HMCOperator.from_json"]], "handle_parameter_changed() (torchtree.inference.hmc.operator.hmcoperator method)": [[77, "torchtree.inference.hmc.operator.HMCOperator.handle_parameter_changed"]], "mass_matrix (torchtree.inference.hmc.operator.hmcoperator property)": [[77, "torchtree.inference.hmc.operator.HMCOperator.mass_matrix"]], "set_adaptable_parameter() (torchtree.inference.hmc.operator.hmcoperator method)": [[77, "torchtree.inference.hmc.operator.HMCOperator.set_adaptable_parameter"]], "torchtree.inference.hmc.operator": [[77, "module-torchtree.inference.hmc.operator"], [186, "module-torchtree.inference.hmc.operator"]], "tune() (torchtree.inference.hmc.operator.hmcoperator method)": [[77, "torchtree.inference.hmc.operator.HMCOperator.tune"]], "tuning_parameter (torchtree.inference.hmc.operator.hmcoperator property)": [[77, "torchtree.inference.hmc.operator.HMCOperator.tuning_parameter"]], "update_mass_matrices() (torchtree.inference.hmc.operator.hmcoperator method)": [[77, "torchtree.inference.hmc.operator.HMCOperator.update_mass_matrices"]], "stanwindowedadaptation (class in torchtree.inference.hmc.stan_adaptation)": [[78, "torchtree.inference.hmc.stan_adaptation.StanWindowedAdaptation"]], "from_json() (torchtree.inference.hmc.stan_adaptation.stanwindowedadaptation class method)": [[78, "torchtree.inference.hmc.stan_adaptation.StanWindowedAdaptation.from_json"]], "learn() (torchtree.inference.hmc.stan_adaptation.stanwindowedadaptation method)": [[78, "torchtree.inference.hmc.stan_adaptation.StanWindowedAdaptation.learn"]], "restart() (torchtree.inference.hmc.stan_adaptation.stanwindowedadaptation method)": [[78, "torchtree.inference.hmc.stan_adaptation.StanWindowedAdaptation.restart"]], "torchtree.inference.hmc.stan_adaptation": [[78, "module-torchtree.inference.hmc.stan_adaptation"], [187, "module-torchtree.inference.hmc.stan_adaptation"]], "torchtree.inference": [[79, "module-torchtree.inference"], [179, "module-torchtree.inference"]], "torchtree.inference.mcmc": [[80, "module-torchtree.inference.mcmc"], [188, "module-torchtree.inference.mcmc"]], "mcmc (class in torchtree.inference.mcmc.mcmc)": [[81, "torchtree.inference.mcmc.mcmc.MCMC"]], "from_json() (torchtree.inference.mcmc.mcmc.mcmc class method)": [[81, "torchtree.inference.mcmc.mcmc.MCMC.from_json"]], "run() (torchtree.inference.mcmc.mcmc.mcmc method)": [[81, "torchtree.inference.mcmc.mcmc.MCMC.run"]], "torchtree.inference.mcmc.mcmc": [[81, "module-torchtree.inference.mcmc.mcmc"], [189, "module-torchtree.inference.mcmc.mcmc"]], "mcmcoperator (class in torchtree.inference.mcmc.operator)": [[82, "torchtree.inference.mcmc.operator.MCMCOperator"]], "scaleroperator (class in torchtree.inference.mcmc.operator)": [[82, "torchtree.inference.mcmc.operator.ScalerOperator"]], "slidingwindowoperator (class in torchtree.inference.mcmc.operator)": [[82, "torchtree.inference.mcmc.operator.SlidingWindowOperator"]], "accept() (torchtree.inference.mcmc.operator.mcmcoperator method)": [[82, "torchtree.inference.mcmc.operator.MCMCOperator.accept"]], "adaptable_parameter (torchtree.inference.mcmc.operator.mcmcoperator property)": [[82, "torchtree.inference.mcmc.operator.MCMCOperator.adaptable_parameter"]], "adaptable_parameter() (torchtree.inference.mcmc.operator.scaleroperator method)": [[82, "torchtree.inference.mcmc.operator.ScalerOperator.adaptable_parameter"]], "adaptable_parameter() (torchtree.inference.mcmc.operator.slidingwindowoperator method)": [[82, "torchtree.inference.mcmc.operator.SlidingWindowOperator.adaptable_parameter"]], "from_json() (torchtree.inference.mcmc.operator.scaleroperator class method)": [[82, "torchtree.inference.mcmc.operator.ScalerOperator.from_json"]], "from_json() (torchtree.inference.mcmc.operator.slidingwindowoperator class method)": [[82, "torchtree.inference.mcmc.operator.SlidingWindowOperator.from_json"]], "reject() (torchtree.inference.mcmc.operator.mcmcoperator method)": [[82, "torchtree.inference.mcmc.operator.MCMCOperator.reject"]], "set_adaptable_parameter() (torchtree.inference.mcmc.operator.mcmcoperator method)": [[82, "torchtree.inference.mcmc.operator.MCMCOperator.set_adaptable_parameter"]], "set_adaptable_parameter() (torchtree.inference.mcmc.operator.scaleroperator method)": [[82, "torchtree.inference.mcmc.operator.ScalerOperator.set_adaptable_parameter"]], "set_adaptable_parameter() (torchtree.inference.mcmc.operator.slidingwindowoperator method)": [[82, "torchtree.inference.mcmc.operator.SlidingWindowOperator.set_adaptable_parameter"]], "step() (torchtree.inference.mcmc.operator.mcmcoperator method)": [[82, "torchtree.inference.mcmc.operator.MCMCOperator.step"]], "torchtree.inference.mcmc.operator": [[82, "module-torchtree.inference.mcmc.operator"], [190, "module-torchtree.inference.mcmc.operator"]], "tune() (torchtree.inference.mcmc.operator.mcmcoperator method)": [[82, "torchtree.inference.mcmc.operator.MCMCOperator.tune"]], "tuning_parameter (torchtree.inference.mcmc.operator.mcmcoperator property)": [[82, "torchtree.inference.mcmc.operator.MCMCOperator.tuning_parameter"]], "tuning_parameter (torchtree.inference.mcmc.operator.scaleroperator property)": [[82, "torchtree.inference.mcmc.operator.ScalerOperator.tuning_parameter"]], "tuning_parameter (torchtree.inference.mcmc.operator.slidingwindowoperator property)": [[82, "torchtree.inference.mcmc.operator.SlidingWindowOperator.tuning_parameter"]], "sampler (class in torchtree.inference.sampler)": [[83, "torchtree.inference.sampler.Sampler"]], "from_json() (torchtree.inference.sampler.sampler class method)": [[83, "torchtree.inference.sampler.Sampler.from_json"]], "run() (torchtree.inference.sampler.sampler method)": [[83, "torchtree.inference.sampler.Sampler.run"]], "torchtree.inference.sampler": [[83, "module-torchtree.inference.sampler"], [191, "module-torchtree.inference.sampler"]], "extract_tensors_and_parameters() (in module torchtree.inference.utils)": [[84, "torchtree.inference.utils.extract_tensors_and_parameters"]], "torchtree.inference.utils": [[84, "module-torchtree.inference.utils"], [192, "module-torchtree.inference.utils"]], "soft_max() (in module torchtree.math)": [[85, "torchtree.math.soft_max"]], "soft_searchsorted() (in module torchtree.math)": [[85, "torchtree.math.soft_searchsorted"]], "soft_sort() (in module torchtree.math)": [[85, "torchtree.math.soft_sort"]], "torchtree.math": [[85, "module-torchtree.math"], [193, "module-torchtree.math"]], "energyfunctionmodel (class in torchtree.nf.energy_functions)": [[86, "torchtree.nf.energy_functions.EnergyFunctionModel"]], "from_json() (torchtree.nf.energy_functions.energyfunctionmodel class method)": [[86, "torchtree.nf.energy_functions.EnergyFunctionModel.from_json"]], "handle_model_changed() (torchtree.nf.energy_functions.energyfunctionmodel method)": [[86, "torchtree.nf.energy_functions.EnergyFunctionModel.handle_model_changed"]], "torchtree.nf.energy_functions": [[86, "module-torchtree.nf.energy_functions"], [195, "module-torchtree.nf.energy_functions"]], "w1() (in module torchtree.nf.energy_functions)": [[86, "torchtree.nf.energy_functions.w1"]], "w2() (in module torchtree.nf.energy_functions)": [[86, "torchtree.nf.energy_functions.w2"]], "w3() (in module torchtree.nf.energy_functions)": [[86, "torchtree.nf.energy_functions.w3"]], "normalizingflow (class in torchtree.nf.flow)": [[87, "torchtree.nf.flow.NormalizingFlow"]], "apply_flow() (torchtree.nf.flow.normalizingflow method)": [[87, "torchtree.nf.flow.NormalizingFlow.apply_flow"]], "cpu() (torchtree.nf.flow.normalizingflow method)": [[87, "torchtree.nf.flow.NormalizingFlow.cpu"]], "cuda() (torchtree.nf.flow.normalizingflow method)": [[87, "torchtree.nf.flow.NormalizingFlow.cuda"]], "entropy() (torchtree.nf.flow.normalizingflow method)": [[87, "torchtree.nf.flow.NormalizingFlow.entropy"]], "forward() (torchtree.nf.flow.normalizingflow method)": [[87, "torchtree.nf.flow.NormalizingFlow.forward"]], "from_json() (torchtree.nf.flow.normalizingflow class method)": [[87, "torchtree.nf.flow.NormalizingFlow.from_json"]], "log_prob() (torchtree.nf.flow.normalizingflow method)": [[87, "torchtree.nf.flow.NormalizingFlow.log_prob"]], "parameters() (torchtree.nf.flow.normalizingflow method)": [[87, "torchtree.nf.flow.NormalizingFlow.parameters"]], "rsample() (torchtree.nf.flow.normalizingflow method)": [[87, "torchtree.nf.flow.NormalizingFlow.rsample"]], "sample() (torchtree.nf.flow.normalizingflow method)": [[87, "torchtree.nf.flow.NormalizingFlow.sample"]], "to() (torchtree.nf.flow.normalizingflow method)": [[87, "torchtree.nf.flow.NormalizingFlow.to"]], "torchtree.nf.flow": [[87, "module-torchtree.nf.flow"], [196, "module-torchtree.nf.flow"]], "torchtree.nf": [[88, "module-torchtree.nf"], [194, "module-torchtree.nf"]], "planartransform (class in torchtree.nf.planar)": [[89, "torchtree.nf.planar.PlanarTransform"]], "forward() (torchtree.nf.planar.planartransform method)": [[89, "torchtree.nf.planar.PlanarTransform.forward"]], "log_abs_det_jacobian() (torchtree.nf.planar.planartransform method)": [[89, "torchtree.nf.planar.PlanarTransform.log_abs_det_jacobian"]], "torchtree.nf.planar": [[89, "module-torchtree.nf.planar"], [197, "module-torchtree.nf.planar"]], "u_hat() (torchtree.nf.planar.planartransform method)": [[89, "torchtree.nf.planar.PlanarTransform.u_hat"]], "batchnorm (class in torchtree.nf.realnvp)": [[90, "torchtree.nf.realnvp.BatchNorm"]], "flowsequential (class in torchtree.nf.realnvp)": [[90, "torchtree.nf.realnvp.FlowSequential"]], "linearmaskedcoupling (class in torchtree.nf.realnvp)": [[90, "torchtree.nf.realnvp.LinearMaskedCoupling"]], "realnvp (class in torchtree.nf.realnvp)": [[90, "torchtree.nf.realnvp.RealNVP"]], "apply_flow() (torchtree.nf.realnvp.realnvp method)": [[90, "torchtree.nf.realnvp.RealNVP.apply_flow"]], "batch_shape (torchtree.nf.realnvp.realnvp property)": [[90, "torchtree.nf.realnvp.RealNVP.batch_shape"]], "entropy() (torchtree.nf.realnvp.realnvp method)": [[90, "torchtree.nf.realnvp.RealNVP.entropy"]], "forward() (torchtree.nf.realnvp.batchnorm method)": [[90, "torchtree.nf.realnvp.BatchNorm.forward"]], "forward() (torchtree.nf.realnvp.flowsequential method)": [[90, "torchtree.nf.realnvp.FlowSequential.forward"]], "forward() (torchtree.nf.realnvp.linearmaskedcoupling method)": [[90, "torchtree.nf.realnvp.LinearMaskedCoupling.forward"]], "forward() (torchtree.nf.realnvp.realnvp method)": [[90, "torchtree.nf.realnvp.RealNVP.forward"]], "from_json() (torchtree.nf.realnvp.realnvp class method)": [[90, "torchtree.nf.realnvp.RealNVP.from_json"]], "inverse() (torchtree.nf.realnvp.batchnorm method)": [[90, "torchtree.nf.realnvp.BatchNorm.inverse"]], "inverse() (torchtree.nf.realnvp.flowsequential method)": [[90, "torchtree.nf.realnvp.FlowSequential.inverse"]], "inverse() (torchtree.nf.realnvp.linearmaskedcoupling method)": [[90, "torchtree.nf.realnvp.LinearMaskedCoupling.inverse"]], "inverse() (torchtree.nf.realnvp.realnvp method)": [[90, "torchtree.nf.realnvp.RealNVP.inverse"]], "log_prob() (torchtree.nf.realnvp.realnvp method)": [[90, "torchtree.nf.realnvp.RealNVP.log_prob"]], "parameters() (torchtree.nf.realnvp.realnvp method)": [[90, "torchtree.nf.realnvp.RealNVP.parameters"]], "rsample() (torchtree.nf.realnvp.realnvp method)": [[90, "torchtree.nf.realnvp.RealNVP.rsample"]], "sample() (torchtree.nf.realnvp.realnvp method)": [[90, "torchtree.nf.realnvp.RealNVP.sample"]], "torchtree.nf.realnvp": [[90, "module-torchtree.nf.realnvp"], [198, "module-torchtree.nf.realnvp"]], "torchtree.nn": [[91, "module-torchtree.nn"], [199, "module-torchtree.nn"]], "module (class in torchtree.nn.module)": [[92, "torchtree.nn.module.Module"]], "cpu() (torchtree.nn.module.module method)": [[92, "torchtree.nn.module.Module.cpu"]], "cuda() (torchtree.nn.module.module method)": [[92, "torchtree.nn.module.Module.cuda"]], "from_json() (torchtree.nn.module.module class method)": [[92, "torchtree.nn.module.Module.from_json"]], "module (torchtree.nn.module.module property)": [[92, "torchtree.nn.module.Module.module"]], "to() (torchtree.nn.module.module method)": [[92, "torchtree.nn.module.Module.to"]], "torchtree.nn.module": [[92, "module-torchtree.nn.module"], [200, "module-torchtree.nn.module"]], "dualaveraging (class in torchtree.ops.dual_averaging)": [[93, "torchtree.ops.dual_averaging.DualAveraging"]], "restart() (torchtree.ops.dual_averaging.dualaveraging method)": [[93, "torchtree.ops.dual_averaging.DualAveraging.restart"]], "step() (torchtree.ops.dual_averaging.dualaveraging method)": [[93, "torchtree.ops.dual_averaging.DualAveraging.step"]], "torchtree.ops.dual_averaging": [[93, "module-torchtree.ops.dual_averaging"], [202, "module-torchtree.ops.dual_averaging"]], "torchtree.ops": [[94, "module-torchtree.ops"], [201, "module-torchtree.ops"]], "welfordvariance (class in torchtree.ops.welford)": [[95, "torchtree.ops.welford.WelfordVariance"]], "add_sample() (torchtree.ops.welford.welfordvariance method)": [[95, "torchtree.ops.welford.WelfordVariance.add_sample"]], "mean() (torchtree.ops.welford.welfordvariance method)": [[95, "torchtree.ops.welford.WelfordVariance.mean"]], "reset() (torchtree.ops.welford.welfordvariance method)": [[95, "torchtree.ops.welford.WelfordVariance.reset"]], "torchtree.ops.welford": [[95, "module-torchtree.ops.welford"], [203, "module-torchtree.ops.welford"]], "variance() (torchtree.ops.welford.welfordvariance method)": [[95, "torchtree.ops.welford.WelfordVariance.variance"]], "baseconvergence (class in torchtree.optim.convergence)": [[96, "torchtree.optim.convergence.BaseConvergence"]], "stanvariationalconvergence (class in torchtree.optim.convergence)": [[96, "torchtree.optim.convergence.StanVariationalConvergence"]], "variationalconvergence (class in torchtree.optim.convergence)": [[96, "torchtree.optim.convergence.VariationalConvergence"]], "check() (torchtree.optim.convergence.baseconvergence method)": [[96, "torchtree.optim.convergence.BaseConvergence.check"]], "check() (torchtree.optim.convergence.stanvariationalconvergence method)": [[96, "torchtree.optim.convergence.StanVariationalConvergence.check"]], "check() (torchtree.optim.convergence.variationalconvergence method)": [[96, "torchtree.optim.convergence.VariationalConvergence.check"]], "from_json() (torchtree.optim.convergence.stanvariationalconvergence class method)": [[96, "torchtree.optim.convergence.StanVariationalConvergence.from_json"]], "from_json() (torchtree.optim.convergence.variationalconvergence class method)": [[96, "torchtree.optim.convergence.VariationalConvergence.from_json"]], "rel_difference() (torchtree.optim.convergence.stanvariationalconvergence static method)": [[96, "torchtree.optim.convergence.StanVariationalConvergence.rel_difference"]], "torchtree.optim.convergence": [[96, "module-torchtree.optim.convergence"], [205, "module-torchtree.optim.convergence"]], "torchtree.optim": [[97, "module-torchtree.optim"], [204, "module-torchtree.optim"]], "scheduler (class in torchtree.optim.lr_scheduler)": [[98, "torchtree.optim.lr_scheduler.Scheduler"]], "from_json() (torchtree.optim.lr_scheduler.scheduler class method)": [[98, "torchtree.optim.lr_scheduler.Scheduler.from_json"]], "step() (torchtree.optim.lr_scheduler.scheduler method)": [[98, "torchtree.optim.lr_scheduler.Scheduler.step"]], "torchtree.optim.lr_scheduler": [[98, "module-torchtree.optim.lr_scheduler"], [206, "module-torchtree.optim.lr_scheduler"]], "optimizer (class in torchtree.optim.optimizer)": [[99, "torchtree.optim.optimizer.Optimizer"]], "from_json() (torchtree.optim.optimizer.optimizer class method)": [[99, "torchtree.optim.optimizer.Optimizer.from_json"]], "run() (torchtree.optim.optimizer.optimizer method)": [[99, "torchtree.optim.optimizer.Optimizer.run"]], "torchtree.optim.optimizer": [[99, "module-torchtree.optim.optimizer"], [207, "module-torchtree.optim.optimizer"]], "main() (in module torchtree.torchtree)": [[100, "torchtree.torchtree.main"]], "torchtree.torchtree": [[100, "module-torchtree.torchtree"], [208, "module-torchtree.torchtree"]], "regression() (in module torchtree.treeregression)": [[101, "torchtree.treeregression.regression"]], "torchtree.treeregression": [[101, "module-torchtree.treeregression"], [209, "module-torchtree.treeregression"]], "id (in module torchtree.typing)": [[102, "torchtree.typing.ID"]], "listparameter (in module torchtree.typing)": [[102, "torchtree.typing.ListParameter"]], "listtensor (in module torchtree.typing)": [[102, "torchtree.typing.ListTensor"]], "ordereddicttype (in module torchtree.typing)": [[102, "torchtree.typing.OrderedDictType"]], "torchtree.typing": [[102, "module-torchtree.typing"], [210, "module-torchtree.typing"]], "cubo (class in torchtree.variational.chi)": [[103, "torchtree.variational.chi.CUBO"]], "from_json() (torchtree.variational.chi.cubo class method)": [[103, "torchtree.variational.chi.CUBO.from_json"]], "handle_parameter_changed() (torchtree.variational.chi.cubo method)": [[103, "torchtree.variational.chi.CUBO.handle_parameter_changed"]], "torchtree.variational.chi": [[103, "module-torchtree.variational.chi"], [212, "module-torchtree.variational.chi"]], "torchtree.variational": [[104, "module-torchtree.variational"], [211, "module-torchtree.variational"]], "elbo (class in torchtree.variational.kl)": [[105, "torchtree.variational.kl.ELBO"]], "klpq (class in torchtree.variational.kl)": [[105, "torchtree.variational.kl.KLpq"]], "klpqimportance (class in torchtree.variational.kl)": [[105, "torchtree.variational.kl.KLpqImportance"]], "selbo (class in torchtree.variational.kl)": [[105, "torchtree.variational.kl.SELBO"]], "from_json() (torchtree.variational.kl.elbo class method)": [[105, "torchtree.variational.kl.ELBO.from_json"]], "from_json() (torchtree.variational.kl.klpq class method)": [[105, "torchtree.variational.kl.KLpq.from_json"]], "from_json() (torchtree.variational.kl.klpqimportance class method)": [[105, "torchtree.variational.kl.KLpqImportance.from_json"]], "from_json() (torchtree.variational.kl.selbo class method)": [[105, "torchtree.variational.kl.SELBO.from_json"]], "handle_parameter_changed() (torchtree.variational.kl.elbo method)": [[105, "torchtree.variational.kl.ELBO.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.variational.kl.klpq method)": [[105, "torchtree.variational.kl.KLpq.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.variational.kl.klpqimportance method)": [[105, "torchtree.variational.kl.KLpqImportance.handle_parameter_changed"]], "handle_parameter_changed() (torchtree.variational.kl.selbo method)": [[105, "torchtree.variational.kl.SELBO.handle_parameter_changed"]], "torchtree.variational.kl": [[105, "module-torchtree.variational.kl"], [213, "module-torchtree.variational.kl"]], "vr (class in torchtree.variational.renyi)": [[106, "torchtree.variational.renyi.VR"]], "from_json() (torchtree.variational.renyi.vr class method)": [[106, "torchtree.variational.renyi.VR.from_json"]], "handle_parameter_changed() (torchtree.variational.renyi.vr method)": [[106, "torchtree.variational.renyi.VR.handle_parameter_changed"]], "torchtree.variational.renyi": [[106, "module-torchtree.variational.renyi"], [214, "module-torchtree.variational.renyi"]]}})